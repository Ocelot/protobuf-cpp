// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_gcmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CGCStorePurchaseInit_LineItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCStorePurchaseInit_LineItem> {
} _CGCStorePurchaseInit_LineItem_default_instance_;
class CMsgGCStorePurchaseInitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseInit> {
} _CMsgGCStorePurchaseInit_default_instance_;
class CMsgGCStorePurchaseInitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseInitResponse> {
} _CMsgGCStorePurchaseInitResponse_default_instance_;
class CMsgSystemBroadcastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSystemBroadcast> {
} _CMsgSystemBroadcast_default_instance_;
class CMsgClientPingDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPingData> {
} _CMsgClientPingData_default_instance_;
class CMsgInviteToPartyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgInviteToParty> {
} _CMsgInviteToParty_default_instance_;
class CMsgInviteToLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgInviteToLobby> {
} _CMsgInviteToLobby_default_instance_;
class CMsgInvitationCreatedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgInvitationCreated> {
} _CMsgInvitationCreated_default_instance_;
class CMsgPartyInviteResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPartyInviteResponse> {
} _CMsgPartyInviteResponse_default_instance_;
class CMsgLobbyInviteResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyInviteResponse> {
} _CMsgLobbyInviteResponse_default_instance_;
class CMsgKickFromPartyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgKickFromParty> {
} _CMsgKickFromParty_default_instance_;
class CMsgLeavePartyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeaveParty> {
} _CMsgLeaveParty_default_instance_;
class CMsgCustomGameInstallStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCustomGameInstallStatus> {
} _CMsgCustomGameInstallStatus_default_instance_;
class CMsgServerAvailableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerAvailable> {
} _CMsgServerAvailable_default_instance_;
class CMsgLANServerAvailableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLANServerAvailable> {
} _CMsgLANServerAvailable_default_instance_;
class CSOEconGameAccountClientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOEconGameAccountClient> {
} _CSOEconGameAccountClient_default_instance_;
class CSOItemCriteriaConditionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOItemCriteriaCondition> {
} _CSOItemCriteriaCondition_default_instance_;
class CSOItemCriteriaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOItemCriteria> {
} _CSOItemCriteria_default_instance_;
class CSOItemRecipeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOItemRecipe> {
} _CSOItemRecipe_default_instance_;
class CMsgApplyStrangePartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgApplyStrangePart> {
} _CMsgApplyStrangePart_default_instance_;
class CMsgApplyPennantUpgradeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgApplyPennantUpgrade> {
} _CMsgApplyPennantUpgrade_default_instance_;
class CMsgApplyEggEssenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgApplyEggEssence> {
} _CMsgApplyEggEssence_default_instance_;
class CSOEconItemAttributeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemAttribute> {
} _CSOEconItemAttribute_default_instance_;
class CSOEconItemEquippedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemEquipped> {
} _CSOEconItemEquipped_default_instance_;
class CSOEconItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItem> {
} _CSOEconItem_default_instance_;
class CMsgSortItemsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSortItems> {
} _CMsgSortItems_default_instance_;
class CSOEconClaimCodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOEconClaimCode> {
} _CSOEconClaimCode_default_instance_;
class CMsgStoreGetUserDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStoreGetUserData> {
} _CMsgStoreGetUserData_default_instance_;
class CMsgStoreGetUserDataResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStoreGetUserDataResponse> {
} _CMsgStoreGetUserDataResponse_default_instance_;
class CMsgUpdateItemSchemaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgUpdateItemSchema> {
} _CMsgUpdateItemSchema_default_instance_;
class CMsgGCErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCError> {
} _CMsgGCError_default_instance_;
class CMsgRequestInventoryRefreshDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRequestInventoryRefresh> {
} _CMsgRequestInventoryRefresh_default_instance_;
class CMsgConVarValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgConVarValue> {
} _CMsgConVarValue_default_instance_;
class CMsgReplicateConVarsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgReplicateConVars> {
} _CMsgReplicateConVars_default_instance_;
class CMsgConsumableExhaustedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgConsumableExhausted> {
} _CMsgConsumableExhausted_default_instance_;
class CMsgItemAcknowledgedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgItemAcknowledged> {
} _CMsgItemAcknowledged_default_instance_;
class CMsgSetItemPositions_ItemPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetItemPositions_ItemPosition> {
} _CMsgSetItemPositions_ItemPosition_default_instance_;
class CMsgSetItemPositionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetItemPositions> {
} _CMsgSetItemPositions_default_instance_;
class CMsgGCNameItemNotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCNameItemNotification> {
} _CMsgGCNameItemNotification_default_instance_;
class CMsgGCClientDisplayNotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientDisplayNotification> {
} _CMsgGCClientDisplayNotification_default_instance_;
class CMsgGCShowItemsPickedUpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCShowItemsPickedUp> {
} _CMsgGCShowItemsPickedUp_default_instance_;
class CMsgGCIncrementKillCountResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCIncrementKillCountResponse> {
} _CMsgGCIncrementKillCountResponse_default_instance_;
class CSOEconItemDropRateBonusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemDropRateBonus> {
} _CSOEconItemDropRateBonus_default_instance_;
class CSOEconItemLeagueViewPassDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemLeagueViewPass> {
} _CSOEconItemLeagueViewPass_default_instance_;
class CSOEconItemEventTicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemEventTicket> {
} _CSOEconItemEventTicket_default_instance_;
class CSOEconItemTournamentPassportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemTournamentPassport> {
} _CSOEconItemTournamentPassport_default_instance_;
class CMsgGCStorePurchaseCancelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseCancel> {
} _CMsgGCStorePurchaseCancel_default_instance_;
class CMsgGCStorePurchaseCancelResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseCancelResponse> {
} _CMsgGCStorePurchaseCancelResponse_default_instance_;
class CMsgGCStorePurchaseFinalizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseFinalize> {
} _CMsgGCStorePurchaseFinalize_default_instance_;
class CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseFinalizeResponse> {
} _CMsgGCStorePurchaseFinalizeResponse_default_instance_;
class CMsgGCBannedWordListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCBannedWordListRequest> {
} _CMsgGCBannedWordListRequest_default_instance_;
class CMsgGCBannedWordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCBannedWord> {
} _CMsgGCBannedWord_default_instance_;
class CMsgGCBannedWordListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCBannedWordListResponse> {
} _CMsgGCBannedWordListResponse_default_instance_;
class CMsgGCToGCBannedWordListBroadcastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCBannedWordListBroadcast> {
} _CMsgGCToGCBannedWordListBroadcast_default_instance_;
class CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCBannedWordListUpdated> {
} _CMsgGCToGCBannedWordListUpdated_default_instance_;
class CMsgGCToGCDirtySDOCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCDirtySDOCache> {
} _CMsgGCToGCDirtySDOCache_default_instance_;
class CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCDirtyMultipleSDOCache> {
} _CMsgGCToGCDirtyMultipleSDOCache_default_instance_;
class CMsgGCToGCApplyLocalizationDiffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCApplyLocalizationDiff> {
} _CMsgGCToGCApplyLocalizationDiff_default_instance_;
class CMsgGCToGCApplyLocalizationDiffResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCApplyLocalizationDiffResponse> {
} _CMsgGCToGCApplyLocalizationDiffResponse_default_instance_;
class CMsgGCCollectItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCollectItem> {
} _CMsgGCCollectItem_default_instance_;
class CMsgSDONoMemcachedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSDONoMemcached> {
} _CMsgSDONoMemcached_default_instance_;
class CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCUpdateSQLKeyValue> {
} _CMsgGCToGCUpdateSQLKeyValue_default_instance_;
class CMsgGCServerVersionUpdatedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCServerVersionUpdated> {
} _CMsgGCServerVersionUpdated_default_instance_;
class CMsgGCClientVersionUpdatedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientVersionUpdated> {
} _CMsgGCClientVersionUpdated_default_instance_;
class CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCWebAPIAccountChanged> {
} _CMsgGCToGCWebAPIAccountChanged_default_instance_;
class CMsgRecipeComponentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRecipeComponent> {
} _CMsgRecipeComponent_default_instance_;
class CMsgFulfillDynamicRecipeComponentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFulfillDynamicRecipeComponent> {
} _CMsgFulfillDynamicRecipeComponent_default_instance_;
class CMsgGCClientMarketDataRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientMarketDataRequest> {
} _CMsgGCClientMarketDataRequest_default_instance_;
class CMsgGCClientMarketDataEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientMarketDataEntry> {
} _CMsgGCClientMarketDataEntry_default_instance_;
class CMsgGCClientMarketDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientMarketData> {
} _CMsgGCClientMarketData_default_instance_;
class CMsgExtractGemsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgExtractGems> {
} _CMsgExtractGems_default_instance_;
class CMsgExtractGemsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgExtractGemsResponse> {
} _CMsgExtractGemsResponse_default_instance_;
class CMsgAddSocketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddSocket> {
} _CMsgAddSocket_default_instance_;
class CMsgAddSocketResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddSocketResponse> {
} _CMsgAddSocketResponse_default_instance_;
class CMsgAddItemToSocketDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddItemToSocketData> {
} _CMsgAddItemToSocketData_default_instance_;
class CMsgAddItemToSocketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddItemToSocket> {
} _CMsgAddItemToSocket_default_instance_;
class CMsgAddItemToSocketResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddItemToSocketResponse> {
} _CMsgAddItemToSocketResponse_default_instance_;
class CMsgResetStrangeGemCountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgResetStrangeGemCount> {
} _CMsgResetStrangeGemCount_default_instance_;
class CMsgResetStrangeGemCountResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgResetStrangeGemCountResponse> {
} _CMsgResetStrangeGemCountResponse_default_instance_;
class CMsgGCToClientPollFileRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPollFileRequest> {
} _CMsgGCToClientPollFileRequest_default_instance_;
class CMsgGCToClientPollFileResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPollFileResponse> {
} _CMsgGCToClientPollFileResponse_default_instance_;

namespace protobuf_base_5fgcmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[81];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, item_def_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, cost_in_local_currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, purchase_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, source_reference_id_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, line_items_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, txn_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, message_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPingData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPingData, relay_codes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPingData, relay_pings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPingData, region_codes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPingData, region_pings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPingData, region_ping_failed_bitmask_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, as_coach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, ping_data_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToLobby, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToLobby, client_version_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, user_offline_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, accept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, ping_data_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyInviteResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyInviteResponse, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyInviteResponse, accept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyInviteResponse, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyInviteResponse, custom_game_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyInviteResponse, custom_game_timestamp_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickFromParty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickFromParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickFromParty, steam_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveParty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameInstallStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameInstallStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameInstallStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameInstallStatus, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameInstallStatus, latest_timestamp_from_steam_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerAvailable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerAvailable, custom_game_install_status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLANServerAvailable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLANServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLANServerAvailable, lobby_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, additional_backpack_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, trial_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, eligible_for_online_play_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, need_to_choose_most_helpful_friend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, in_coaches_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, trade_ban_expiration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, duel_ban_expiration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, made_first_purchase_),
  0,
  1,
  7,
  2,
  3,
  5,
  6,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, float_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, string_value_),
  2,
  0,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_level_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_quality_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, initial_inventory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, initial_quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, ignore_enabled_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, recent_only_),
  0,
  1,
  4,
  5,
  2,
  3,
  6,
  ~0u,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, n_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, desc_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, desc_outputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, requires_all_same_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, requires_all_same_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, class_usage_for_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, slot_usage_for_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, set_for_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, input_items_criteria_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, output_items_criteria_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, input_item_dupe_counts_),
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangePart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangePart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangePart, strange_part_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangePart, item_item_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyPennantUpgrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyPennantUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyPennantUpgrade, upgrade_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyPennantUpgrade, pennant_item_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyEggEssence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyEggEssence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyEggEssence, essence_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyEggEssence, egg_item_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, value_bytes_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, new_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, new_slot_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, inventory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, interior_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, in_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, original_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, equipped_state_),
  1,
  2,
  3,
  4,
  11,
  12,
  10,
  5,
  6,
  ~0u,
  0,
  7,
  9,
  8,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, sort_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, code_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, time_acquired_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, code_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, price_sheet_version_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, price_sheet_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, experiment_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, featured_item_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, show_hat_descriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, price_sheet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, default_item_sort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, popular_items_),
  2,
  3,
  0,
  5,
  4,
  6,
  8,
  1,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, items_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, item_schema_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, items_game_url_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCError, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCError, error_text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestInventoryRefresh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestInventoryRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplicateConVars, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplicateConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplicateConVars, convars_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumableExhausted, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumableExhausted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumableExhausted, item_def_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, inventory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, rarity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, origin_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, position_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions, item_positions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, player_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, item_def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, item_name_custom_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, notification_title_localization_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, notification_body_localization_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, body_substring_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, body_substring_values_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShowItemsPickedUp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShowItemsPickedUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShowItemsPickedUp, player_steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, killer_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, num_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, item_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, level_type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, expiration_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, bonus_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, seconds_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemDropRateBonus, booster_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemLeagueViewPass, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemLeagueViewPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemLeagueViewPass, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemLeagueViewPass, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemLeagueViewPass, itemindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemLeagueViewPass, grant_reason_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEventTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEventTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEventTicket, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEventTicket, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEventTicket, item_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, original_purchaser_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, passports_bought_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemTournamentPassport, reward_flags_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancel, txn_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancelResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancelResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalize, txn_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalizeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalizeResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalizeResponse, item_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListRequest, ban_list_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListRequest, word_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWord, word_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWord, word_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWord, word_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListResponse, ban_list_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListResponse, word_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCBannedWordListBroadcast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCBannedWordListBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCBannedWordListBroadcast, broadcast_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCBannedWordListUpdated, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCBannedWordListUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCBannedWordListUpdated, group_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, sdo_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, key_uint64_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCDirtyMultipleSDOCache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCDirtyMultipleSDOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCDirtyMultipleSDOCache, sdo_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCDirtyMultipleSDOCache, key_uint64_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCApplyLocalizationDiff, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCApplyLocalizationDiff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCApplyLocalizationDiff, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCApplyLocalizationDiff, packed_diff_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCApplyLocalizationDiffResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCApplyLocalizationDiffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCApplyLocalizationDiffResponse, success_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCollectItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCollectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCollectItem, collection_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCollectItem, subject_item_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSDONoMemcached, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSDONoMemcached, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSQLKeyValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSQLKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSQLKeyValue, key_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCServerVersionUpdated, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCServerVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCServerVersionUpdated, server_version_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientVersionUpdated, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientVersionUpdated, client_version_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCWebAPIAccountChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCWebAPIAccountChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRecipeComponent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRecipeComponent, subject_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRecipeComponent, attribute_index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFulfillDynamicRecipeComponent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFulfillDynamicRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFulfillDynamicRecipeComponent, tool_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFulfillDynamicRecipeComponent, consumption_components_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataRequest, user_currency_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, item_def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, item_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, item_sell_listings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, price_in_local_currency_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketData, entries_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExtractGems, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExtractGems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExtractGems, tool_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExtractGems, item_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExtractGems, item_socket_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExtractGemsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExtractGemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExtractGemsResponse, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExtractGemsResponse, response_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocket, tool_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocket, item_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocket, unusual_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocketResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocketResponse, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocketResponse, updated_socket_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddSocketResponse, response_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocketData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocketData, gem_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocketData, socket_index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocket, item_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocket, gems_to_socket_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocketResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocketResponse, item_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocketResponse, updated_socket_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddItemToSocketResponse, response_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResetStrangeGemCount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResetStrangeGemCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResetStrangeGemCount, item_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResetStrangeGemCount, socket_index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResetStrangeGemCountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResetStrangeGemCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResetStrangeGemCountResponse, response_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollFileRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollFileRequest, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollFileRequest, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollFileRequest, poll_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollFileResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollFileResponse, poll_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollFileResponse, file_size_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(CGCStorePurchaseInit_LineItem)},
  { 15, 24, sizeof(CMsgGCStorePurchaseInit)},
  { 28, 35, sizeof(CMsgGCStorePurchaseInitResponse)},
  { 37, 43, sizeof(CMsgSystemBroadcast)},
  { 44, 54, sizeof(CMsgClientPingData)},
  { 59, 69, sizeof(CMsgInviteToParty)},
  { 74, 81, sizeof(CMsgInviteToLobby)},
  { 83, 91, sizeof(CMsgInvitationCreated)},
  { 94, 103, sizeof(CMsgPartyInviteResponse)},
  { 107, 117, sizeof(CMsgLobbyInviteResponse)},
  { 122, 128, sizeof(CMsgKickFromParty)},
  { 129, 134, sizeof(CMsgLeaveParty)},
  { 134, 142, sizeof(CMsgCustomGameInstallStatus)},
  { 145, 151, sizeof(CMsgServerAvailable)},
  { 152, 158, sizeof(CMsgLANServerAvailable)},
  { 159, 172, sizeof(CSOEconGameAccountClient)},
  { 180, 190, sizeof(CSOItemCriteriaCondition)},
  { 195, 209, sizeof(CSOItemCriteria)},
  { 218, 242, sizeof(CSOItemRecipe)},
  { 261, 268, sizeof(CMsgApplyStrangePart)},
  { 270, 277, sizeof(CMsgApplyPennantUpgrade)},
  { 279, 286, sizeof(CMsgApplyEggEssence)},
  { 288, 296, sizeof(CSOEconItemAttribute)},
  { 299, 306, sizeof(CSOEconItemEquipped)},
  { 308, 328, sizeof(CSOEconItem)},
  { 343, 349, sizeof(CMsgSortItems)},
  { 350, 359, sizeof(CSOEconClaimCode)},
  { 363, 369, sizeof(CMsgStoreGetUserData)},
  { 370, 385, sizeof(CMsgStoreGetUserDataResponse)},
  { 395, 403, sizeof(CMsgUpdateItemSchema)},
  { 406, 412, sizeof(CMsgGCError)},
  { 413, 418, sizeof(CMsgRequestInventoryRefresh)},
  { 418, 425, sizeof(CMsgConVarValue)},
  { 427, 433, sizeof(CMsgReplicateConVars)},
  { 434, 440, sizeof(CMsgConsumableExhausted)},
  { 441, 452, sizeof(CMsgItemAcknowledged)},
  { 458, 465, sizeof(CMsgSetItemPositions_ItemPosition)},
  { 467, 473, sizeof(CMsgSetItemPositions)},
  { 474, 482, sizeof(CMsgGCNameItemNotification)},
  { 485, 494, sizeof(CMsgGCClientDisplayNotification)},
  { 498, 504, sizeof(CMsgGCShowItemsPickedUp)},
  { 505, 514, sizeof(CMsgGCIncrementKillCountResponse)},
  { 518, 531, sizeof(CSOEconItemDropRateBonus)},
  { 539, 548, sizeof(CSOEconItemLeagueViewPass)},
  { 552, 560, sizeof(CSOEconItemEventTicket)},
  { 563, 576, sizeof(CSOEconItemTournamentPassport)},
  { 584, 590, sizeof(CMsgGCStorePurchaseCancel)},
  { 591, 597, sizeof(CMsgGCStorePurchaseCancelResponse)},
  { 598, 604, sizeof(CMsgGCStorePurchaseFinalize)},
  { 605, 612, sizeof(CMsgGCStorePurchaseFinalizeResponse)},
  { 614, 621, sizeof(CMsgGCBannedWordListRequest)},
  { 623, 631, sizeof(CMsgGCBannedWord)},
  { 634, 641, sizeof(CMsgGCBannedWordListResponse)},
  { 643, 649, sizeof(CMsgGCToGCBannedWordListBroadcast)},
  { 650, 656, sizeof(CMsgGCToGCBannedWordListUpdated)},
  { 657, 664, sizeof(CMsgGCToGCDirtySDOCache)},
  { 666, 673, sizeof(CMsgGCToGCDirtyMultipleSDOCache)},
  { 675, 682, sizeof(CMsgGCToGCApplyLocalizationDiff)},
  { 684, 690, sizeof(CMsgGCToGCApplyLocalizationDiffResponse)},
  { 691, 698, sizeof(CMsgGCCollectItem)},
  { 700, 705, sizeof(CMsgSDONoMemcached)},
  { 705, 711, sizeof(CMsgGCToGCUpdateSQLKeyValue)},
  { 712, 718, sizeof(CMsgGCServerVersionUpdated)},
  { 719, 725, sizeof(CMsgGCClientVersionUpdated)},
  { 726, 731, sizeof(CMsgGCToGCWebAPIAccountChanged)},
  { 731, 738, sizeof(CMsgRecipeComponent)},
  { 740, 747, sizeof(CMsgFulfillDynamicRecipeComponent)},
  { 749, 755, sizeof(CMsgGCClientMarketDataRequest)},
  { 756, 765, sizeof(CMsgGCClientMarketDataEntry)},
  { 769, 775, sizeof(CMsgGCClientMarketData)},
  { 776, 784, sizeof(CMsgExtractGems)},
  { 787, 794, sizeof(CMsgExtractGemsResponse)},
  { 796, 804, sizeof(CMsgAddSocket)},
  { 807, 815, sizeof(CMsgAddSocketResponse)},
  { 818, 825, sizeof(CMsgAddItemToSocketData)},
  { 827, 834, sizeof(CMsgAddItemToSocket)},
  { 836, 844, sizeof(CMsgAddItemToSocketResponse)},
  { 847, 854, sizeof(CMsgResetStrangeGemCount)},
  { 856, 862, sizeof(CMsgResetStrangeGemCountResponse)},
  { 863, 871, sizeof(CMsgGCToClientPollFileRequest)},
  { 874, 881, sizeof(CMsgGCToClientPollFileResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCStorePurchaseInit_LineItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCStorePurchaseInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCStorePurchaseInitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSystemBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientPingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgInviteToParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgInviteToLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgInvitationCreated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPartyInviteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLobbyInviteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgKickFromParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLeaveParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCustomGameInstallStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerAvailable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLANServerAvailable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOEconGameAccountClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOItemCriteriaCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOItemCriteria_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOItemRecipe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgApplyStrangePart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgApplyPennantUpgrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgApplyEggEssence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOEconItemAttribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOEconItemEquipped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOEconItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSortItems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOEconClaimCode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStoreGetUserData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStoreGetUserDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgUpdateItemSchema_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRequestInventoryRefresh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgConVarValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgReplicateConVars_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgConsumableExhausted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgItemAcknowledged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetItemPositions_ItemPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetItemPositions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCNameItemNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCClientDisplayNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCShowItemsPickedUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCIncrementKillCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOEconItemDropRateBonus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOEconItemLeagueViewPass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOEconItemEventTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSOEconItemTournamentPassport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCStorePurchaseCancel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCStorePurchaseCancelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCStorePurchaseFinalize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCStorePurchaseFinalizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCBannedWordListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCBannedWord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCBannedWordListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCBannedWordListBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCBannedWordListUpdated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCDirtySDOCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCDirtyMultipleSDOCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCApplyLocalizationDiff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCApplyLocalizationDiffResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCCollectItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSDONoMemcached_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCUpdateSQLKeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCServerVersionUpdated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCClientVersionUpdated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCWebAPIAccountChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRecipeComponent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFulfillDynamicRecipeComponent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCClientMarketDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCClientMarketDataEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCClientMarketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgExtractGems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgExtractGemsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAddSocket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAddSocketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAddItemToSocketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAddItemToSocket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAddItemToSocketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgResetStrangeGemCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgResetStrangeGemCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientPollFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientPollFileResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "base_gcmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 81);
}

}  // namespace

void TableStruct::Shutdown() {
  _CGCStorePurchaseInit_LineItem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgGCStorePurchaseInit_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgGCStorePurchaseInitResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgSystemBroadcast_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgClientPingData_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgInviteToParty_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgInviteToLobby_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgInvitationCreated_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgPartyInviteResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgLobbyInviteResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgKickFromParty_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgLeaveParty_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgCustomGameInstallStatus_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgServerAvailable_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgLANServerAvailable_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CSOEconGameAccountClient_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CSOItemCriteriaCondition_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CSOItemCriteria_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CSOItemRecipe_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgApplyStrangePart_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgApplyPennantUpgrade_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgApplyEggEssence_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CSOEconItemAttribute_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CSOEconItemEquipped_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CSOEconItem_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgSortItems_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CSOEconClaimCode_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgStoreGetUserData_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgStoreGetUserDataResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgUpdateItemSchema_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgGCError_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgRequestInventoryRefresh_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgConVarValue_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CMsgReplicateConVars_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CMsgConsumableExhausted_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CMsgItemAcknowledged_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CMsgSetItemPositions_ItemPosition_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CMsgSetItemPositions_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CMsgGCNameItemNotification_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CMsgGCClientDisplayNotification_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CMsgGCShowItemsPickedUp_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CMsgGCIncrementKillCountResponse_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CSOEconItemDropRateBonus_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CSOEconItemLeagueViewPass_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CSOEconItemEventTicket_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CSOEconItemTournamentPassport_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CMsgGCStorePurchaseCancel_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CMsgGCStorePurchaseCancelResponse_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CMsgGCStorePurchaseFinalize_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CMsgGCStorePurchaseFinalizeResponse_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CMsgGCBannedWordListRequest_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CMsgGCBannedWord_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CMsgGCBannedWordListResponse_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CMsgGCToGCBannedWordListBroadcast_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CMsgGCToGCBannedWordListUpdated_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CMsgGCToGCDirtySDOCache_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CMsgGCToGCDirtyMultipleSDOCache_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CMsgGCToGCApplyLocalizationDiff_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CMsgGCToGCApplyLocalizationDiffResponse_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CMsgGCCollectItem_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CMsgSDONoMemcached_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CMsgGCToGCUpdateSQLKeyValue_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _CMsgGCServerVersionUpdated_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _CMsgGCClientVersionUpdated_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _CMsgGCToGCWebAPIAccountChanged_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _CMsgRecipeComponent_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _CMsgFulfillDynamicRecipeComponent_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _CMsgGCClientMarketDataRequest_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _CMsgGCClientMarketDataEntry_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _CMsgGCClientMarketData_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _CMsgExtractGems_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _CMsgExtractGemsResponse_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _CMsgAddSocket_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _CMsgAddSocketResponse_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _CMsgAddItemToSocketData_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _CMsgAddItemToSocket_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _CMsgAddItemToSocketResponse_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _CMsgResetStrangeGemCount_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _CMsgResetStrangeGemCountResponse_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _CMsgGCToClientPollFileRequest_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _CMsgGCToClientPollFileResponse_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_steammessages_2eproto::InitDefaults();
  _CGCStorePurchaseInit_LineItem_default_instance_.DefaultConstruct();
  _CMsgGCStorePurchaseInit_default_instance_.DefaultConstruct();
  _CMsgGCStorePurchaseInitResponse_default_instance_.DefaultConstruct();
  _CMsgSystemBroadcast_default_instance_.DefaultConstruct();
  _CMsgClientPingData_default_instance_.DefaultConstruct();
  _CMsgInviteToParty_default_instance_.DefaultConstruct();
  _CMsgInviteToLobby_default_instance_.DefaultConstruct();
  _CMsgInvitationCreated_default_instance_.DefaultConstruct();
  _CMsgPartyInviteResponse_default_instance_.DefaultConstruct();
  _CMsgLobbyInviteResponse_default_instance_.DefaultConstruct();
  _CMsgKickFromParty_default_instance_.DefaultConstruct();
  _CMsgLeaveParty_default_instance_.DefaultConstruct();
  _CMsgCustomGameInstallStatus_default_instance_.DefaultConstruct();
  _CMsgServerAvailable_default_instance_.DefaultConstruct();
  _CMsgLANServerAvailable_default_instance_.DefaultConstruct();
  _CSOEconGameAccountClient_default_instance_.DefaultConstruct();
  _CSOItemCriteriaCondition_default_instance_.DefaultConstruct();
  _CSOItemCriteria_default_instance_.DefaultConstruct();
  _CSOItemRecipe_default_instance_.DefaultConstruct();
  _CMsgApplyStrangePart_default_instance_.DefaultConstruct();
  _CMsgApplyPennantUpgrade_default_instance_.DefaultConstruct();
  _CMsgApplyEggEssence_default_instance_.DefaultConstruct();
  _CSOEconItemAttribute_default_instance_.DefaultConstruct();
  _CSOEconItemEquipped_default_instance_.DefaultConstruct();
  _CSOEconItem_default_instance_.DefaultConstruct();
  _CMsgSortItems_default_instance_.DefaultConstruct();
  _CSOEconClaimCode_default_instance_.DefaultConstruct();
  _CMsgStoreGetUserData_default_instance_.DefaultConstruct();
  _CMsgStoreGetUserDataResponse_default_instance_.DefaultConstruct();
  _CMsgUpdateItemSchema_default_instance_.DefaultConstruct();
  _CMsgGCError_default_instance_.DefaultConstruct();
  _CMsgRequestInventoryRefresh_default_instance_.DefaultConstruct();
  _CMsgConVarValue_default_instance_.DefaultConstruct();
  _CMsgReplicateConVars_default_instance_.DefaultConstruct();
  _CMsgConsumableExhausted_default_instance_.DefaultConstruct();
  _CMsgItemAcknowledged_default_instance_.DefaultConstruct();
  _CMsgSetItemPositions_ItemPosition_default_instance_.DefaultConstruct();
  _CMsgSetItemPositions_default_instance_.DefaultConstruct();
  _CMsgGCNameItemNotification_default_instance_.DefaultConstruct();
  _CMsgGCClientDisplayNotification_default_instance_.DefaultConstruct();
  _CMsgGCShowItemsPickedUp_default_instance_.DefaultConstruct();
  _CMsgGCIncrementKillCountResponse_default_instance_.DefaultConstruct();
  _CSOEconItemDropRateBonus_default_instance_.DefaultConstruct();
  _CSOEconItemLeagueViewPass_default_instance_.DefaultConstruct();
  _CSOEconItemEventTicket_default_instance_.DefaultConstruct();
  _CSOEconItemTournamentPassport_default_instance_.DefaultConstruct();
  _CMsgGCStorePurchaseCancel_default_instance_.DefaultConstruct();
  _CMsgGCStorePurchaseCancelResponse_default_instance_.DefaultConstruct();
  _CMsgGCStorePurchaseFinalize_default_instance_.DefaultConstruct();
  _CMsgGCStorePurchaseFinalizeResponse_default_instance_.DefaultConstruct();
  _CMsgGCBannedWordListRequest_default_instance_.DefaultConstruct();
  _CMsgGCBannedWord_default_instance_.DefaultConstruct();
  _CMsgGCBannedWordListResponse_default_instance_.DefaultConstruct();
  _CMsgGCToGCBannedWordListBroadcast_default_instance_.DefaultConstruct();
  _CMsgGCToGCBannedWordListUpdated_default_instance_.DefaultConstruct();
  _CMsgGCToGCDirtySDOCache_default_instance_.DefaultConstruct();
  _CMsgGCToGCDirtyMultipleSDOCache_default_instance_.DefaultConstruct();
  _CMsgGCToGCApplyLocalizationDiff_default_instance_.DefaultConstruct();
  _CMsgGCToGCApplyLocalizationDiffResponse_default_instance_.DefaultConstruct();
  _CMsgGCCollectItem_default_instance_.DefaultConstruct();
  _CMsgSDONoMemcached_default_instance_.DefaultConstruct();
  _CMsgGCToGCUpdateSQLKeyValue_default_instance_.DefaultConstruct();
  _CMsgGCServerVersionUpdated_default_instance_.DefaultConstruct();
  _CMsgGCClientVersionUpdated_default_instance_.DefaultConstruct();
  _CMsgGCToGCWebAPIAccountChanged_default_instance_.DefaultConstruct();
  _CMsgRecipeComponent_default_instance_.DefaultConstruct();
  _CMsgFulfillDynamicRecipeComponent_default_instance_.DefaultConstruct();
  _CMsgGCClientMarketDataRequest_default_instance_.DefaultConstruct();
  _CMsgGCClientMarketDataEntry_default_instance_.DefaultConstruct();
  _CMsgGCClientMarketData_default_instance_.DefaultConstruct();
  _CMsgExtractGems_default_instance_.DefaultConstruct();
  _CMsgExtractGemsResponse_default_instance_.DefaultConstruct();
  _CMsgAddSocket_default_instance_.DefaultConstruct();
  _CMsgAddSocketResponse_default_instance_.DefaultConstruct();
  _CMsgAddItemToSocketData_default_instance_.DefaultConstruct();
  _CMsgAddItemToSocket_default_instance_.DefaultConstruct();
  _CMsgAddItemToSocketResponse_default_instance_.DefaultConstruct();
  _CMsgResetStrangeGemCount_default_instance_.DefaultConstruct();
  _CMsgResetStrangeGemCountResponse_default_instance_.DefaultConstruct();
  _CMsgGCToClientPollFileRequest_default_instance_.DefaultConstruct();
  _CMsgGCToClientPollFileResponse_default_instance_.DefaultConstruct();
  _CMsgInviteToParty_default_instance_.get_mutable()->ping_data_ = const_cast< ::proto::dota::CMsgClientPingData*>(
      ::proto::dota::CMsgClientPingData::internal_default_instance());
  _CMsgPartyInviteResponse_default_instance_.get_mutable()->ping_data_ = const_cast< ::proto::dota::CMsgClientPingData*>(
      ::proto::dota::CMsgClientPingData::internal_default_instance());
  _CMsgServerAvailable_default_instance_.get_mutable()->custom_game_install_status_ = const_cast< ::proto::dota::CMsgCustomGameInstallStatus*>(
      ::proto::dota::CMsgCustomGameInstallStatus::internal_default_instance());
  _CSOEconItem_default_instance_.get_mutable()->interior_item_ = const_cast< ::proto::dota::CSOEconItem*>(
      ::proto::dota::CSOEconItem::internal_default_instance());
  _CMsgGCToGCBannedWordListBroadcast_default_instance_.get_mutable()->broadcast_ = const_cast< ::proto::dota::CMsgGCBannedWordListResponse*>(
      ::proto::dota::CMsgGCBannedWordListResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025base_gcmessages.proto\022\nproto.dota\032\023ste"
      "ammessages.proto\"\232\001\n\035CGCStorePurchaseIni"
      "t_LineItem\022\023\n\013item_def_id\030\001 \001(\r\022\020\n\010quant"
      "ity\030\002 \001(\r\022\036\n\026cost_in_local_currency\030\003 \001("
      "\r\022\025\n\rpurchase_type\030\004 \001(\r\022\033\n\023source_refer"
      "ence_id\030\005 \001(\004\"\215\001\n\027CMsgGCStorePurchaseIni"
      "t\022\017\n\007country\030\001 \001(\t\022\020\n\010language\030\002 \001(\005\022\020\n\010"
      "currency\030\003 \001(\005\022=\n\nline_items\030\004 \003(\0132).pro"
      "to.dota.CGCStorePurchaseInit_LineItem\"A\n"
      "\037CMsgGCStorePurchaseInitResponse\022\016\n\006resu"
      "lt\030\001 \001(\005\022\016\n\006txn_id\030\002 \001(\004\"&\n\023CMsgSystemBr"
      "oadcast\022\017\n\007message\030\001 \001(\t\"\236\001\n\022CMsgClientP"
      "ingData\022\027\n\013relay_codes\030\004 \003(\007B\002\020\001\022\027\n\013rela"
      "y_pings\030\005 \003(\rB\002\020\001\022\030\n\014region_codes\030\010 \003(\rB"
      "\002\020\001\022\030\n\014region_pings\030\t \003(\rB\002\020\001\022\"\n\032region_"
      "ping_failed_bitmask\030\n \001(\r\"\223\001\n\021CMsgInvite"
      "ToParty\022\020\n\010steam_id\030\001 \001(\006\022\026\n\016client_vers"
      "ion\030\002 \001(\r\022\017\n\007team_id\030\003 \001(\r\022\020\n\010as_coach\030\004"
      " \001(\010\0221\n\tping_data\030\005 \001(\0132\036.proto.dota.CMs"
      "gClientPingData\"=\n\021CMsgInviteToLobby\022\020\n\010"
      "steam_id\030\001 \001(\006\022\026\n\016client_version\030\002 \001(\r\"Q"
      "\n\025CMsgInvitationCreated\022\020\n\010group_id\030\001 \001("
      "\004\022\020\n\010steam_id\030\002 \001(\006\022\024\n\014user_offline\030\003 \001("
      "\010\"\206\001\n\027CMsgPartyInviteResponse\022\020\n\010party_i"
      "d\030\001 \001(\004\022\016\n\006accept\030\002 \001(\010\022\026\n\016client_versio"
      "n\030\003 \001(\r\0221\n\tping_data\030\010 \001(\0132\036.proto.dota."
      "CMsgClientPingData\"\213\001\n\027CMsgLobbyInviteRe"
      "sponse\022\020\n\010lobby_id\030\001 \001(\006\022\016\n\006accept\030\002 \001(\010"
      "\022\026\n\016client_version\030\003 \001(\r\022\027\n\017custom_game_"
      "crc\030\006 \001(\006\022\035\n\025custom_game_timestamp\030\007 \001(\007"
      "\"%\n\021CMsgKickFromParty\022\020\n\010steam_id\030\001 \001(\006\""
      "\020\n\016CMsgLeaveParty\"\255\001\n\033CMsgCustomGameInst"
      "allStatus\022X\n\006status\030\001 \001(\0162$.proto.dota.E"
      "CustomGameInstallStatus:\"k_ECustomGameIn"
      "stallStatus_Unknown\022\017\n\007message\030\002 \001(\t\022#\n\033"
      "latest_timestamp_from_steam\030\003 \001(\007\"b\n\023CMs"
      "gServerAvailable\022K\n\032custom_game_install_"
      "status\030\001 \001(\0132\'.proto.dota.CMsgCustomGame"
      "InstallStatus\"*\n\026CMsgLANServerAvailable\022"
      "\020\n\010lobby_id\030\001 \001(\006\"\252\002\n\030CSOEconGameAccount"
      "Client\022$\n\031additional_backpack_slots\030\001 \001("
      "\r:\0010\022\034\n\rtrial_account\030\002 \001(\010:\005false\022&\n\030el"
      "igible_for_online_play\030\003 \001(\010:\004true\022*\n\"ne"
      "ed_to_choose_most_helpful_friend\030\004 \001(\010\022\027"
      "\n\017in_coaches_list\030\005 \001(\010\022\034\n\024trade_ban_exp"
      "iration\030\006 \001(\007\022\033\n\023duel_ban_expiration\030\007 \001"
      "(\007\022\"\n\023made_first_purchase\030\t \001(\010:\005false\"r"
      "\n\030CSOItemCriteriaCondition\022\n\n\002op\030\001 \001(\005\022\r"
      "\n\005field\030\002 \001(\t\022\020\n\010required\030\003 \001(\010\022\023\n\013float"
      "_value\030\004 \001(\002\022\024\n\014string_value\030\005 \001(\t\"\216\002\n\017C"
      "SOItemCriteria\022\022\n\nitem_level\030\001 \001(\r\022\024\n\014it"
      "em_quality\030\002 \001(\005\022\026\n\016item_level_set\030\003 \001(\010"
      "\022\030\n\020item_quality_set\030\004 \001(\010\022\031\n\021initial_in"
      "ventory\030\005 \001(\r\022\030\n\020initial_quantity\030\006 \001(\r\022"
      "\033\n\023ignore_enabled_flag\030\010 \001(\010\0228\n\nconditio"
      "ns\030\t \003(\0132$.proto.dota.CSOItemCriteriaCon"
      "dition\022\023\n\013recent_only\030\n \001(\010\"\353\003\n\rCSOItemR"
      "ecipe\022\021\n\tdef_index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013"
      "\n\003n_a\030\003 \001(\t\022\023\n\013desc_inputs\030\004 \001(\t\022\024\n\014desc"
      "_outputs\030\005 \001(\t\022\014\n\004di_a\030\006 \001(\t\022\014\n\004di_b\030\007 \001"
      "(\t\022\014\n\004di_c\030\010 \001(\t\022\014\n\004do_a\030\t \001(\t\022\014\n\004do_b\030\n"
      " \001(\t\022\014\n\004do_c\030\013 \001(\t\022\037\n\027requires_all_same_"
      "class\030\014 \001(\010\022\036\n\026requires_all_same_slot\030\r "
      "\001(\010\022\036\n\026class_usage_for_output\030\016 \001(\005\022\035\n\025s"
      "lot_usage_for_output\030\017 \001(\005\022\026\n\016set_for_ou"
      "tput\030\020 \001(\005\0229\n\024input_items_criteria\030\024 \003(\013"
      "2\033.proto.dota.CSOItemCriteria\022:\n\025output_"
      "items_criteria\030\025 \003(\0132\033.proto.dota.CSOIte"
      "mCriteria\022\036\n\026input_item_dupe_counts\030\026 \003("
      "\r\"J\n\024CMsgApplyStrangePart\022\034\n\024strange_par"
      "t_item_id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\"K\n"
      "\027CMsgApplyPennantUpgrade\022\027\n\017upgrade_item"
      "_id\030\001 \001(\004\022\027\n\017pennant_item_id\030\002 \001(\004\"C\n\023CM"
      "sgApplyEggEssence\022\027\n\017essence_item_id\030\001 \001"
      "(\004\022\023\n\013egg_item_id\030\002 \001(\004\"M\n\024CSOEconItemAt"
      "tribute\022\021\n\tdef_index\030\001 \001(\r\022\r\n\005value\030\002 \001("
      "\r\022\023\n\013value_bytes\030\003 \001(\014\":\n\023CSOEconItemEqu"
      "ipped\022\021\n\tnew_class\030\001 \001(\r\022\020\n\010new_slot\030\002 \001"
      "(\r\"\222\003\n\013CSOEconItem\022\n\n\002id\030\001 \001(\004\022\022\n\naccoun"
      "t_id\030\002 \001(\r\022\021\n\tinventory\030\003 \001(\r\022\021\n\tdef_ind"
      "ex\030\004 \001(\r\022\023\n\010quantity\030\005 \001(\r:\0011\022\020\n\005level\030\006"
      " \001(\r:\0011\022\022\n\007quality\030\007 \001(\r:\0014\022\020\n\005flags\030\010 \001"
      "(\r:\0010\022\021\n\006origin\030\t \001(\r:\0010\0223\n\tattribute\030\014 "
      "\003(\0132 .proto.dota.CSOEconItemAttribute\022.\n"
      "\rinterior_item\030\r \001(\0132\027.proto.dota.CSOEco"
      "nItem\022\025\n\006in_use\030\016 \001(\010:\005false\022\020\n\005style\030\017 "
      "\001(\r:\0010\022\026\n\013original_id\030\020 \001(\004:\0010\0227\n\016equipp"
      "ed_state\030\022 \003(\0132\037.proto.dota.CSOEconItemE"
      "quipped\"\"\n\rCMsgSortItems\022\021\n\tsort_type\030\001 "
      "\001(\r\"^\n\020CSOEconClaimCode\022\022\n\naccount_id\030\001 "
      "\001(\r\022\021\n\tcode_type\030\002 \001(\r\022\025\n\rtime_acquired\030"
      "\003 \001(\r\022\014\n\004code\030\004 \001(\t\"3\n\024CMsgStoreGetUserD"
      "ata\022\033\n\023price_sheet_version\030\001 \001(\007\"\224\002\n\034CMs"
      "gStoreGetUserDataResponse\022\016\n\006result\030\001 \001("
      "\005\022\020\n\010currency\030\002 \001(\005\022\017\n\007country\030\003 \001(\t\022\033\n\023"
      "price_sheet_version\030\004 \001(\007\022\032\n\017experiment_"
      "data\030\005 \001(\004:\0010\022\031\n\021featured_item_idx\030\006 \001(\005"
      "\022#\n\025show_hat_descriptions\030\007 \001(\010:\004true\022\023\n"
      "\013price_sheet\030\010 \001(\014\022\034\n\021default_item_sort\030"
      "\t \001(\005:\0010\022\025\n\rpopular_items\030\n \003(\r\"_\n\024CMsgU"
      "pdateItemSchema\022\022\n\nitems_game\030\001 \001(\014\022\033\n\023i"
      "tem_schema_version\030\002 \001(\007\022\026\n\016items_game_u"
      "rl\030\003 \001(\t\"!\n\013CMsgGCError\022\022\n\nerror_text\030\001 "
      "\001(\t\"\035\n\033CMsgRequestInventoryRefresh\".\n\017CM"
      "sgConVarValue\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001"
      "(\t\"D\n\024CMsgReplicateConVars\022,\n\007convars\030\001 "
      "\003(\0132\033.proto.dota.CMsgConVarValue\".\n\027CMsg"
      "ConsumableExhausted\022\023\n\013item_def_id\030\001 \001(\005"
      "\"\201\001\n\024CMsgItemAcknowledged\022\022\n\naccount_id\030"
      "\001 \001(\r\022\021\n\tinventory\030\002 \001(\r\022\021\n\tdef_index\030\003 "
      "\001(\r\022\017\n\007quality\030\004 \001(\r\022\016\n\006rarity\030\005 \001(\r\022\016\n\006"
      "origin\030\006 \001(\r\"\220\001\n\024CMsgSetItemPositions\022E\n"
      "\016item_positions\030\001 \003(\0132-.proto.dota.CMsgS"
      "etItemPositions.ItemPosition\0321\n\014ItemPosi"
      "tion\022\017\n\007item_id\030\001 \001(\004\022\020\n\010position\030\002 \001(\r\""
      "f\n\032CMsgGCNameItemNotification\022\026\n\016player_"
      "steamid\030\001 \001(\006\022\026\n\016item_def_index\030\002 \001(\r\022\030\n"
      "\020item_name_custom\030\003 \001(\t\"\266\001\n\037CMsgGCClient"
      "DisplayNotification\022+\n#notification_titl"
      "e_localization_key\030\001 \001(\t\022*\n\"notification"
      "_body_localization_key\030\002 \001(\t\022\033\n\023body_sub"
      "string_keys\030\003 \003(\t\022\035\n\025body_substring_valu"
      "es\030\004 \003(\t\"1\n\027CMsgGCShowItemsPickedUp\022\026\n\016p"
      "layer_steamid\030\001 \001(\006\"|\n CMsgGCIncrementKi"
      "llCountResponse\022\037\n\021killer_account_id\030\001 \001"
      "(\rB\004\200\246\035\001\022\021\n\tnum_kills\030\002 \001(\r\022\020\n\010item_def\030"
      "\003 \001(\r\022\022\n\nlevel_type\030\004 \001(\r\"\315\001\n\030CSOEconIte"
      "mDropRateBonus\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001"
      "\022\027\n\017expiration_date\030\002 \001(\007\022\023\n\005bonus\030\003 \001(\002"
      "B\004\200\246\035\001\022\023\n\013bonus_count\030\004 \001(\r\022\017\n\007item_id\030\005"
      " \001(\004\022\021\n\tdef_index\030\006 \001(\r\022\024\n\014seconds_left\030"
      "\007 \001(\r\022\032\n\014booster_type\030\010 \001(\rB\004\200\246\035\001\"w\n\031CSO"
      "EconItemLeagueViewPass\022\030\n\naccount_id\030\001 \001"
      "(\rB\004\200\246\035\001\022\027\n\tleague_id\030\002 \001(\rB\004\200\246\035\001\022\021\n\tite"
      "mindex\030\004 \001(\r\022\024\n\014grant_reason\030\005 \001(\r\"O\n\026CS"
      "OEconItemEventTicket\022\022\n\naccount_id\030\001 \001(\r"
      "\022\020\n\010event_id\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\004\"\312\001\n\035"
      "CSOEconItemTournamentPassport\022\022\n\naccount"
      "_id\030\001 \001(\r\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007item_id\030"
      "\003 \001(\004\022\035\n\025original_purchaser_id\030\004 \001(\r\022\030\n\020"
      "passports_bought\030\005 \001(\r\022\017\n\007version\030\006 \001(\r\022"
      "\021\n\tdef_index\030\007 \001(\r\022\024\n\014reward_flags\030\010 \001(\r"
      "\"+\n\031CMsgGCStorePurchaseCancel\022\016\n\006txn_id\030"
      "\001 \001(\004\"3\n!CMsgGCStorePurchaseCancelRespon"
      "se\022\016\n\006result\030\001 \001(\r\"-\n\033CMsgGCStorePurchas"
      "eFinalize\022\016\n\006txn_id\030\001 \001(\004\"G\n#CMsgGCStore"
      "PurchaseFinalizeResponse\022\016\n\006result\030\001 \001(\r"
      "\022\020\n\010item_ids\030\002 \003(\004\"I\n\033CMsgGCBannedWordLi"
      "stRequest\022\031\n\021ban_list_group_id\030\001 \001(\r\022\017\n\007"
      "word_id\030\002 \001(\r\"\200\001\n\020CMsgGCBannedWord\022\017\n\007wo"
      "rd_id\030\001 \001(\r\022M\n\tword_type\030\002 \001(\0162\035.proto.d"
      "ota.GC_BannedWordType:\033GC_BANNED_WORD_DI"
      "SABLE_WORD\022\014\n\004word\030\003 \001(\t\"j\n\034CMsgGCBanned"
      "WordListResponse\022\031\n\021ban_list_group_id\030\001 "
      "\001(\r\022/\n\tword_list\030\002 \003(\0132\034.proto.dota.CMsg"
      "GCBannedWord\"`\n!CMsgGCToGCBannedWordList"
      "Broadcast\022;\n\tbroadcast\030\001 \001(\0132(.proto.dot"
      "a.CMsgGCBannedWordListResponse\"3\n\037CMsgGC"
      "ToGCBannedWordListUpdated\022\020\n\010group_id\030\001 "
      "\001(\r\"\?\n\027CMsgGCToGCDirtySDOCache\022\020\n\010sdo_ty"
      "pe\030\001 \001(\r\022\022\n\nkey_uint64\030\002 \001(\004\"G\n\037CMsgGCTo"
      "GCDirtyMultipleSDOCache\022\020\n\010sdo_type\030\001 \001("
      "\r\022\022\n\nkey_uint64\030\002 \003(\004\"H\n\037CMsgGCToGCApply"
      "LocalizationDiff\022\020\n\010language\030\001 \001(\r\022\023\n\013pa"
      "cked_diff\030\002 \001(\t\":\n\'CMsgGCToGCApplyLocali"
      "zationDiffResponse\022\017\n\007success\030\001 \001(\010\"H\n\021C"
      "MsgGCCollectItem\022\032\n\022collection_item_id\030\001"
      " \001(\004\022\027\n\017subject_item_id\030\002 \001(\004\"\024\n\022CMsgSDO"
      "NoMemcached\"/\n\033CMsgGCToGCUpdateSQLKeyVal"
      "ue\022\020\n\010key_name\030\001 \001(\t\"4\n\032CMsgGCServerVers"
      "ionUpdated\022\026\n\016server_version\030\001 \001(\r\"4\n\032CM"
      "sgGCClientVersionUpdated\022\026\n\016client_versi"
      "on\030\001 \001(\r\" \n\036CMsgGCToGCWebAPIAccountChang"
      "ed\"G\n\023CMsgRecipeComponent\022\027\n\017subject_ite"
      "m_id\030\001 \001(\004\022\027\n\017attribute_index\030\002 \001(\004\"z\n!C"
      "MsgFulfillDynamicRecipeComponent\022\024\n\014tool"
      "_item_id\030\001 \001(\004\022\?\n\026consumption_components"
      "\030\002 \003(\0132\037.proto.dota.CMsgRecipeComponent\""
      "6\n\035CMsgGCClientMarketDataRequest\022\025\n\ruser"
      "_currency\030\001 \001(\r\"\210\001\n\033CMsgGCClientMarketDa"
      "taEntry\022\026\n\016item_def_index\030\001 \001(\r\022\024\n\014item_"
      "quality\030\002 \001(\r\022\032\n\022item_sell_listings\030\003 \001("
      "\r\022\037\n\027price_in_local_currency\030\004 \001(\r\"R\n\026CM"
      "sgGCClientMarketData\0228\n\007entries\030\001 \003(\0132\'."
      "proto.dota.CMsgGCClientMarketDataEntry\"\\"
      "\n\017CMsgExtractGems\022\024\n\014tool_item_id\030\001 \001(\004\022"
      "\024\n\014item_item_id\030\002 \001(\004\022\035\n\016item_socket_id\030"
      "\003 \001(\r:\00565535\"\337\002\n\027CMsgExtractGemsResponse"
      "\022\017\n\007item_id\030\001 \001(\004\022[\n\010response\030\002 \001(\01620.pr"
      "oto.dota.CMsgExtractGemsResponse.EExtrac"
      "tGems:\027k_ExtractGems_Succeeded\"\325\001\n\014EExtr"
      "actGems\022\033\n\027k_ExtractGems_Succeeded\020\000\022&\n\""
      "k_ExtractGems_Failed_ToolIsInvalid\020\001\022&\n\""
      "k_ExtractGems_Failed_ItemIsInvalid\020\002\022,\n("
      "k_ExtractGems_Failed_ToolCannotRemoveGem"
      "\020\003\022*\n&k_ExtractGems_Failed_FailedToRemov"
      "eGem\020\004\"L\n\rCMsgAddSocket\022\024\n\014tool_item_id\030"
      "\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\022\017\n\007unusual\030\003"
      " \001(\010\"\304\002\n\025CMsgAddSocketResponse\022\017\n\007item_i"
      "d\030\001 \001(\004\022\034\n\024updated_socket_index\030\002 \003(\r\022U\n"
      "\010response\030\003 \001(\0162,.proto.dota.CMsgAddSock"
      "etResponse.EAddSocket:\025k_AddSocket_Succe"
      "eded\"\244\001\n\nEAddSocket\022\031\n\025k_AddSocket_Succe"
      "eded\020\000\022$\n k_AddSocket_Failed_ToolIsInval"
      "id\020\001\022+\n\'k_AddSocket_Failed_ItemCannotBeS"
      "ocketed\020\002\022(\n$k_AddSocket_Failed_FailedTo"
      "AddSocket\020\003\"D\n\027CMsgAddItemToSocketData\022\023"
      "\n\013gem_item_id\030\001 \001(\004\022\024\n\014socket_index\030\002 \001("
      "\r\"h\n\023CMsgAddItemToSocket\022\024\n\014item_item_id"
      "\030\001 \001(\004\022;\n\016gems_to_socket\030\002 \003(\0132#.proto.d"
      "ota.CMsgAddItemToSocketData\"\352\003\n\033CMsgAddI"
      "temToSocketResponse\022\024\n\014item_item_id\030\001 \001("
      "\004\022\034\n\024updated_socket_index\030\002 \003(\r\022U\n\010respo"
      "nse\030\003 \001(\0162/.proto.dota.CMsgAddItemToSock"
      "etResponse.EAddGem:\022k_AddGem_Succeeded\"\277"
      "\002\n\007EAddGem\022\026\n\022k_AddGem_Succeeded\020\000\022 \n\034k_"
      "AddGem_Failed_GemIsInvalid\020\001\022!\n\035k_AddGem"
      "_Failed_ItemIsInvalid\020\002\022\"\n\036k_AddGem_Fail"
      "ed_FailedToAddGem\020\003\022+\n\'k_AddGem_Failed_I"
      "nvalidGemTypeForSocket\020\004\022)\n%k_AddGem_Fai"
      "led_InvalidGemTypeForHero\020\005\022)\n%k_AddGem_"
      "Failed_InvalidGemTypeForSlot\020\006\0220\n,k_AddG"
      "em_Failed_SocketContainsUnremovableGem\020\007"
      "\"F\n\030CMsgResetStrangeGemCount\022\024\n\014item_ite"
      "m_id\030\001 \001(\004\022\024\n\014socket_index\030\002 \001(\r\"\311\002\n CMs"
      "gResetStrangeGemCountResponse\022^\n\010respons"
      "e\030\001 \001(\01626.proto.dota.CMsgResetStrangeGem"
      "CountResponse.EResetGem:\024k_ResetGem_Succ"
      "eeded\"\304\001\n\tEResetGem\022\030\n\024k_ResetGem_Succee"
      "ded\020\000\022&\n\"k_ResetGem_Failed_FailedToReset"
      "Gem\020\001\022#\n\037k_ResetGem_Failed_ItemIsInvalid"
      "\020\002\022%\n!k_ResetGem_Failed_InvalidSocketId\020"
      "\003\022)\n%k_ResetGem_Failed_SocketCannotBeRes"
      "et\020\004\"[\n\035CMsgGCToClientPollFileRequest\022\021\n"
      "\tfile_name\030\001 \001(\t\022\026\n\016client_version\030\002 \001(\r"
      "\022\017\n\007poll_id\030\003 \001(\r\"D\n\036CMsgGCToClientPollF"
      "ileResponse\022\017\n\007poll_id\030\001 \001(\r\022\021\n\tfile_siz"
      "e\030\002 \001(\r*\225\004\n\nEGCBaseMsg\022\032\n\025k_EMsgGCSystem"
      "Message\020\241\037\022\035\n\030k_EMsgGCReplicateConVars\020\242"
      "\037\022\032\n\025k_EMsgGCConVarUpdated\020\243\037\022\032\n\025k_EMsgG"
      "CInviteToParty\020\225#\022\036\n\031k_EMsgGCInvitationC"
      "reated\020\226#\022 \n\033k_EMsgGCPartyInviteResponse"
      "\020\227#\022\032\n\025k_EMsgGCKickFromParty\020\230#\022\027\n\022k_EMs"
      "gGCLeaveParty\020\231#\022\034\n\027k_EMsgGCServerAvaila"
      "ble\020\232#\022\"\n\035k_EMsgGCClientConnectToServer\020"
      "\233#\022\033\n\026k_EMsgGCGameServerInfo\020\234#\022\022\n\rk_EMs"
      "gGCError\020\235#\022\037\n\032k_EMsgGCLANServerAvailabl"
      "e\020\237#\022\032\n\025k_EMsgGCInviteToLobby\020\240#\022 \n\033k_EM"
      "sgGCLobbyInviteResponse\020\241#\022$\n\037k_EMsgGCTo"
      "ClientPollFileRequest\020\242#\022%\n k_EMsgGCToCl"
      "ientPollFileResponse\020\243#*Y\n\027EGCBaseProtoO"
      "bjectTypes\022\036\n\031k_EProtoObjectPartyInvite\020"
      "\351\007\022\036\n\031k_EProtoObjectLobbyInvite\020\352\007*\350\003\n\030E"
      "CustomGameInstallStatus\022&\n\"k_ECustomGame"
      "InstallStatus_Unknown\020\000\022$\n k_ECustomGame"
      "InstallStatus_Ready\020\001\022#\n\037k_ECustomGameIn"
      "stallStatus_Busy\020\002\022,\n(k_ECustomGameInsta"
      "llStatus_FailedGeneric\020e\0222\n.k_ECustomGam"
      "eInstallStatus_FailedInternalError\020f\0227\n3"
      "k_ECustomGameInstallStatus_RequestedTime"
      "stampTooOld\020g\0227\n3k_ECustomGameInstallSta"
      "tus_RequestedTimestampTooNew\020h\022*\n&k_ECus"
      "tomGameInstallStatus_CRCMismatch\020i\022*\n&k_"
      "ECustomGameInstallStatus_FailedSteam\020j\022-"
      "\n)k_ECustomGameInstallStatus_FailedCance"
      "led\020k*T\n\021GC_BannedWordType\022\037\n\033GC_BANNED_"
      "WORD_DISABLE_WORD\020\000\022\036\n\032GC_BANNED_WORD_EN"
      "ABLE_WORD\020\001B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base_gcmessages.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_steammessages_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_base_5fgcmessages_2eproto

const ::google::protobuf::EnumDescriptor* CMsgExtractGemsResponse_EExtractGems_descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_enum_descriptors[0];
}
bool CMsgExtractGemsResponse_EExtractGems_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Succeeded;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ToolIsInvalid;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ItemIsInvalid;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ToolCannotRemoveGem;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_FailedToRemoveGem;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::EExtractGems_MIN;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::EExtractGems_MAX;
const int CMsgExtractGemsResponse::EExtractGems_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgAddSocketResponse_EAddSocket_descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_enum_descriptors[1];
}
bool CMsgAddSocketResponse_EAddSocket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Succeeded;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_ToolIsInvalid;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_ItemCannotBeSocketed;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_FailedToAddSocket;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::EAddSocket_MIN;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::EAddSocket_MAX;
const int CMsgAddSocketResponse::EAddSocket_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgAddItemToSocketResponse_EAddGem_descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_enum_descriptors[2];
}
bool CMsgAddItemToSocketResponse_EAddGem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Succeeded;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_GemIsInvalid;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_ItemIsInvalid;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_FailedToAddGem;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForSocket;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForHero;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForSlot;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_SocketContainsUnremovableGem;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::EAddGem_MIN;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::EAddGem_MAX;
const int CMsgAddItemToSocketResponse::EAddGem_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgResetStrangeGemCountResponse_EResetGem_descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_enum_descriptors[3];
}
bool CMsgResetStrangeGemCountResponse_EResetGem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Succeeded;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_FailedToResetGem;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_ItemIsInvalid;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_InvalidSocketId;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_SocketCannotBeReset;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::EResetGem_MIN;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::EResetGem_MAX;
const int CMsgResetStrangeGemCountResponse::EResetGem_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EGCBaseMsg_descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_enum_descriptors[4];
}
bool EGCBaseMsg_IsValid(int value) {
  switch (value) {
    case 4001:
    case 4002:
    case 4003:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCBaseProtoObjectTypes_descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_enum_descriptors[5];
}
bool EGCBaseProtoObjectTypes_IsValid(int value) {
  switch (value) {
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECustomGameInstallStatus_descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_enum_descriptors[6];
}
bool ECustomGameInstallStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GC_BannedWordType_descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_enum_descriptors[7];
}
bool GC_BannedWordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCStorePurchaseInit_LineItem::kItemDefIdFieldNumber;
const int CGCStorePurchaseInit_LineItem::kQuantityFieldNumber;
const int CGCStorePurchaseInit_LineItem::kCostInLocalCurrencyFieldNumber;
const int CGCStorePurchaseInit_LineItem::kPurchaseTypeFieldNumber;
const int CGCStorePurchaseInit_LineItem::kSourceReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCStorePurchaseInit_LineItem)
}
CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(const CGCStorePurchaseInit_LineItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_id_, &from.item_def_id_,
    reinterpret_cast<char*>(&source_reference_id_) -
    reinterpret_cast<char*>(&item_def_id_) + sizeof(source_reference_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCStorePurchaseInit_LineItem)
}

void CGCStorePurchaseInit_LineItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_def_id_, 0, reinterpret_cast<char*>(&source_reference_id_) -
    reinterpret_cast<char*>(&item_def_id_) + sizeof(source_reference_id_));
}

CGCStorePurchaseInit_LineItem::~CGCStorePurchaseInit_LineItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCStorePurchaseInit_LineItem)
  SharedDtor();
}

void CGCStorePurchaseInit_LineItem::SharedDtor() {
}

void CGCStorePurchaseInit_LineItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCStorePurchaseInit_LineItem::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCStorePurchaseInit_LineItem& CGCStorePurchaseInit_LineItem::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCStorePurchaseInit_LineItem* CGCStorePurchaseInit_LineItem::New(::google::protobuf::Arena* arena) const {
  CGCStorePurchaseInit_LineItem* n = new CGCStorePurchaseInit_LineItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCStorePurchaseInit_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCStorePurchaseInit_LineItem)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&item_def_id_, 0, reinterpret_cast<char*>(&source_reference_id_) -
      reinterpret_cast<char*>(&item_def_id_) + sizeof(source_reference_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCStorePurchaseInit_LineItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCStorePurchaseInit_LineItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_def_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cost_in_local_currency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cost_in_local_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_in_local_currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 purchase_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_purchase_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchase_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_reference_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_source_reference_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_reference_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCStorePurchaseInit_LineItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCStorePurchaseInit_LineItem)
  return false;
#undef DO_
}

void CGCStorePurchaseInit_LineItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCStorePurchaseInit_LineItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_id(), output);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quantity(), output);
  }

  // optional uint32 cost_in_local_currency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_in_local_currency(), output);
  }

  // optional uint32 purchase_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->purchase_type(), output);
  }

  // optional uint64 source_reference_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->source_reference_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCStorePurchaseInit_LineItem)
}

::google::protobuf::uint8* CGCStorePurchaseInit_LineItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCStorePurchaseInit_LineItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quantity(), target);
  }

  // optional uint32 cost_in_local_currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_in_local_currency(), target);
  }

  // optional uint32 purchase_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->purchase_type(), target);
  }

  // optional uint64 source_reference_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->source_reference_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCStorePurchaseInit_LineItem)
  return target;
}

size_t CGCStorePurchaseInit_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCStorePurchaseInit_LineItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 item_def_id = 1;
    if (has_item_def_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_id());
    }

    // optional uint32 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional uint32 cost_in_local_currency = 3;
    if (has_cost_in_local_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_in_local_currency());
    }

    // optional uint32 purchase_type = 4;
    if (has_purchase_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchase_type());
    }

    // optional uint64 source_reference_id = 5;
    if (has_source_reference_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_reference_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCStorePurchaseInit_LineItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCStorePurchaseInit_LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCStorePurchaseInit_LineItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCStorePurchaseInit_LineItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCStorePurchaseInit_LineItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCStorePurchaseInit_LineItem)
    MergeFrom(*source);
  }
}

void CGCStorePurchaseInit_LineItem::MergeFrom(const CGCStorePurchaseInit_LineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCStorePurchaseInit_LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_id_ = from.item_def_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      cost_in_local_currency_ = from.cost_in_local_currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      purchase_type_ = from.purchase_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_reference_id_ = from.source_reference_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCStorePurchaseInit_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const CGCStorePurchaseInit_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCStorePurchaseInit_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCStorePurchaseInit_LineItem::IsInitialized() const {
  return true;
}

void CGCStorePurchaseInit_LineItem::Swap(CGCStorePurchaseInit_LineItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCStorePurchaseInit_LineItem::InternalSwap(CGCStorePurchaseInit_LineItem* other) {
  std::swap(item_def_id_, other->item_def_id_);
  std::swap(quantity_, other->quantity_);
  std::swap(cost_in_local_currency_, other->cost_in_local_currency_);
  std::swap(purchase_type_, other->purchase_type_);
  std::swap(source_reference_id_, other->source_reference_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCStorePurchaseInit_LineItem::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCStorePurchaseInit_LineItem

// optional uint32 item_def_id = 1;
bool CGCStorePurchaseInit_LineItem::has_item_def_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCStorePurchaseInit_LineItem::set_has_item_def_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCStorePurchaseInit_LineItem::clear_has_item_def_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCStorePurchaseInit_LineItem::clear_item_def_id() {
  item_def_id_ = 0u;
  clear_has_item_def_id();
}
::google::protobuf::uint32 CGCStorePurchaseInit_LineItem::item_def_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCStorePurchaseInit_LineItem.item_def_id)
  return item_def_id_;
}
void CGCStorePurchaseInit_LineItem::set_item_def_id(::google::protobuf::uint32 value) {
  set_has_item_def_id();
  item_def_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCStorePurchaseInit_LineItem.item_def_id)
}

// optional uint32 quantity = 2;
bool CGCStorePurchaseInit_LineItem::has_quantity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCStorePurchaseInit_LineItem::set_has_quantity() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCStorePurchaseInit_LineItem::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCStorePurchaseInit_LineItem::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
::google::protobuf::uint32 CGCStorePurchaseInit_LineItem::quantity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCStorePurchaseInit_LineItem.quantity)
  return quantity_;
}
void CGCStorePurchaseInit_LineItem::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCStorePurchaseInit_LineItem.quantity)
}

// optional uint32 cost_in_local_currency = 3;
bool CGCStorePurchaseInit_LineItem::has_cost_in_local_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCStorePurchaseInit_LineItem::set_has_cost_in_local_currency() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCStorePurchaseInit_LineItem::clear_has_cost_in_local_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCStorePurchaseInit_LineItem::clear_cost_in_local_currency() {
  cost_in_local_currency_ = 0u;
  clear_has_cost_in_local_currency();
}
::google::protobuf::uint32 CGCStorePurchaseInit_LineItem::cost_in_local_currency() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCStorePurchaseInit_LineItem.cost_in_local_currency)
  return cost_in_local_currency_;
}
void CGCStorePurchaseInit_LineItem::set_cost_in_local_currency(::google::protobuf::uint32 value) {
  set_has_cost_in_local_currency();
  cost_in_local_currency_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCStorePurchaseInit_LineItem.cost_in_local_currency)
}

// optional uint32 purchase_type = 4;
bool CGCStorePurchaseInit_LineItem::has_purchase_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGCStorePurchaseInit_LineItem::set_has_purchase_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CGCStorePurchaseInit_LineItem::clear_has_purchase_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGCStorePurchaseInit_LineItem::clear_purchase_type() {
  purchase_type_ = 0u;
  clear_has_purchase_type();
}
::google::protobuf::uint32 CGCStorePurchaseInit_LineItem::purchase_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCStorePurchaseInit_LineItem.purchase_type)
  return purchase_type_;
}
void CGCStorePurchaseInit_LineItem::set_purchase_type(::google::protobuf::uint32 value) {
  set_has_purchase_type();
  purchase_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCStorePurchaseInit_LineItem.purchase_type)
}

// optional uint64 source_reference_id = 5;
bool CGCStorePurchaseInit_LineItem::has_source_reference_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGCStorePurchaseInit_LineItem::set_has_source_reference_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CGCStorePurchaseInit_LineItem::clear_has_source_reference_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGCStorePurchaseInit_LineItem::clear_source_reference_id() {
  source_reference_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_reference_id();
}
::google::protobuf::uint64 CGCStorePurchaseInit_LineItem::source_reference_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCStorePurchaseInit_LineItem.source_reference_id)
  return source_reference_id_;
}
void CGCStorePurchaseInit_LineItem::set_source_reference_id(::google::protobuf::uint64 value) {
  set_has_source_reference_id();
  source_reference_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCStorePurchaseInit_LineItem.source_reference_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseInit::kCountryFieldNumber;
const int CMsgGCStorePurchaseInit::kLanguageFieldNumber;
const int CMsgGCStorePurchaseInit::kCurrencyFieldNumber;
const int CMsgGCStorePurchaseInit::kLineItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseInit)
}
CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(const CMsgGCStorePurchaseInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      line_items_(from.line_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  ::memcpy(&language_, &from.language_,
    reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&language_) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseInit)
}

void CMsgGCStorePurchaseInit::SharedCtor() {
  _cached_size_ = 0;
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&language_, 0, reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&language_) + sizeof(currency_));
}

CMsgGCStorePurchaseInit::~CMsgGCStorePurchaseInit() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseInit)
  SharedDtor();
}

void CMsgGCStorePurchaseInit::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCStorePurchaseInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseInit::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCStorePurchaseInit& CMsgGCStorePurchaseInit::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCStorePurchaseInit* CMsgGCStorePurchaseInit::New(::google::protobuf::Arena* arena) const {
  CMsgGCStorePurchaseInit* n = new CMsgGCStorePurchaseInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCStorePurchaseInit::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseInit)
  line_items_.Clear();
  if (has_country()) {
    GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*country_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&language_, 0, reinterpret_cast<char*>(&currency_) -
      reinterpret_cast<char*>(&language_) + sizeof(currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCStorePurchaseInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCStorePurchaseInit.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 currency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseInit)
  return false;
#undef DO_
}

void CMsgGCStorePurchaseInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCStorePurchaseInit.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country(), output);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->language(), output);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currency(), output);
  }

  // repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
  for (unsigned int i = 0, n = this->line_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->line_items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseInit)
}

::google::protobuf::uint8* CMsgGCStorePurchaseInit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCStorePurchaseInit.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->language(), target);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currency(), target);
  }

  // repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
  for (unsigned int i = 0, n = this->line_items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->line_items(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseInit)
  return target;
}

size_t CMsgGCStorePurchaseInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
  {
    unsigned int count = this->line_items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line_items(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional int32 language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // optional int32 currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseInit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseInit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCStorePurchaseInit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseInit)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseInit::MergeFrom(const CMsgGCStorePurchaseInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_items_.MergeFrom(from.line_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000004u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCStorePurchaseInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInit::CopyFrom(const CMsgGCStorePurchaseInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInit::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInit::Swap(CMsgGCStorePurchaseInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseInit::InternalSwap(CMsgGCStorePurchaseInit* other) {
  line_items_.InternalSwap(&other->line_items_);
  country_.Swap(&other->country_);
  std::swap(language_, other->language_);
  std::swap(currency_, other->currency_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseInit::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCStorePurchaseInit

// optional string country = 1;
bool CMsgGCStorePurchaseInit::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCStorePurchaseInit::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCStorePurchaseInit::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCStorePurchaseInit::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& CMsgGCStorePurchaseInit::country() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseInit.country)
  return country_.GetNoArena();
}
void CMsgGCStorePurchaseInit::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseInit.country)
}
#if LANG_CXX11
void CMsgGCStorePurchaseInit::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCStorePurchaseInit.country)
}
#endif
void CMsgGCStorePurchaseInit::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCStorePurchaseInit.country)
}
void CMsgGCStorePurchaseInit::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCStorePurchaseInit.country)
}
::std::string* CMsgGCStorePurchaseInit::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCStorePurchaseInit.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCStorePurchaseInit::release_country() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCStorePurchaseInit.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCStorePurchaseInit::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCStorePurchaseInit.country)
}

// optional int32 language = 2;
bool CMsgGCStorePurchaseInit::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCStorePurchaseInit::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCStorePurchaseInit::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCStorePurchaseInit::clear_language() {
  language_ = 0;
  clear_has_language();
}
::google::protobuf::int32 CMsgGCStorePurchaseInit::language() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseInit.language)
  return language_;
}
void CMsgGCStorePurchaseInit::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseInit.language)
}

// optional int32 currency = 3;
bool CMsgGCStorePurchaseInit::has_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCStorePurchaseInit::set_has_currency() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCStorePurchaseInit::clear_has_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCStorePurchaseInit::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
::google::protobuf::int32 CMsgGCStorePurchaseInit::currency() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseInit.currency)
  return currency_;
}
void CMsgGCStorePurchaseInit::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseInit.currency)
}

// repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
int CMsgGCStorePurchaseInit::line_items_size() const {
  return line_items_.size();
}
void CMsgGCStorePurchaseInit::clear_line_items() {
  line_items_.Clear();
}
const ::proto::dota::CGCStorePurchaseInit_LineItem& CMsgGCStorePurchaseInit::line_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseInit.line_items)
  return line_items_.Get(index);
}
::proto::dota::CGCStorePurchaseInit_LineItem* CMsgGCStorePurchaseInit::mutable_line_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCStorePurchaseInit.line_items)
  return line_items_.Mutable(index);
}
::proto::dota::CGCStorePurchaseInit_LineItem* CMsgGCStorePurchaseInit::add_line_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCStorePurchaseInit.line_items)
  return line_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CGCStorePurchaseInit_LineItem >*
CMsgGCStorePurchaseInit::mutable_line_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCStorePurchaseInit.line_items)
  return &line_items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGCStorePurchaseInit_LineItem >&
CMsgGCStorePurchaseInit::line_items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCStorePurchaseInit.line_items)
  return line_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseInitResponse::kResultFieldNumber;
const int CMsgGCStorePurchaseInitResponse::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseInitResponse)
}
CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(const CMsgGCStorePurchaseInitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&txn_id_, &from.txn_id_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&txn_id_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseInitResponse)
}

void CMsgGCStorePurchaseInitResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&txn_id_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&txn_id_) + sizeof(result_));
}

CMsgGCStorePurchaseInitResponse::~CMsgGCStorePurchaseInitResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseInitResponse)
  SharedDtor();
}

void CMsgGCStorePurchaseInitResponse::SharedDtor() {
}

void CMsgGCStorePurchaseInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseInitResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCStorePurchaseInitResponse& CMsgGCStorePurchaseInitResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCStorePurchaseInitResponse* CMsgGCStorePurchaseInitResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCStorePurchaseInitResponse* n = new CMsgGCStorePurchaseInitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCStorePurchaseInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&txn_id_, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&txn_id_) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCStorePurchaseInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_txn_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseInitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseInitResponse)
  return false;
#undef DO_
}

void CMsgGCStorePurchaseInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 txn_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseInitResponse)
}

::google::protobuf::uint8* CMsgGCStorePurchaseInitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 txn_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->txn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseInitResponse)
  return target;
}

size_t CMsgGCStorePurchaseInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 txn_id = 2;
    if (has_txn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_id());
    }

    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseInitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCStorePurchaseInitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseInitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseInitResponse)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseInitResponse::MergeFrom(const CMsgGCStorePurchaseInitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      txn_id_ = from.txn_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const CMsgGCStorePurchaseInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInitResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInitResponse::Swap(CMsgGCStorePurchaseInitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseInitResponse::InternalSwap(CMsgGCStorePurchaseInitResponse* other) {
  std::swap(txn_id_, other->txn_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseInitResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCStorePurchaseInitResponse

// optional int32 result = 1;
bool CMsgGCStorePurchaseInitResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCStorePurchaseInitResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCStorePurchaseInitResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCStorePurchaseInitResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 CMsgGCStorePurchaseInitResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseInitResponse.result)
  return result_;
}
void CMsgGCStorePurchaseInitResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseInitResponse.result)
}

// optional uint64 txn_id = 2;
bool CMsgGCStorePurchaseInitResponse::has_txn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCStorePurchaseInitResponse::set_has_txn_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCStorePurchaseInitResponse::clear_has_txn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCStorePurchaseInitResponse::clear_txn_id() {
  txn_id_ = GOOGLE_ULONGLONG(0);
  clear_has_txn_id();
}
::google::protobuf::uint64 CMsgGCStorePurchaseInitResponse::txn_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseInitResponse.txn_id)
  return txn_id_;
}
void CMsgGCStorePurchaseInitResponse::set_txn_id(::google::protobuf::uint64 value) {
  set_has_txn_id();
  txn_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseInitResponse.txn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSystemBroadcast::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSystemBroadcast::CMsgSystemBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSystemBroadcast)
}
CMsgSystemBroadcast::CMsgSystemBroadcast(const CMsgSystemBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSystemBroadcast)
}

void CMsgSystemBroadcast::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSystemBroadcast::~CMsgSystemBroadcast() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSystemBroadcast)
  SharedDtor();
}

void CMsgSystemBroadcast::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSystemBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSystemBroadcast::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSystemBroadcast& CMsgSystemBroadcast::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSystemBroadcast* CMsgSystemBroadcast::New(::google::protobuf::Arena* arena) const {
  CMsgSystemBroadcast* n = new CMsgSystemBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSystemBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSystemBroadcast)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSystemBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSystemBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSystemBroadcast.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSystemBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSystemBroadcast)
  return false;
#undef DO_
}

void CMsgSystemBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSystemBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSystemBroadcast.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSystemBroadcast)
}

::google::protobuf::uint8* CMsgSystemBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSystemBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSystemBroadcast.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSystemBroadcast)
  return target;
}

size_t CMsgSystemBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSystemBroadcast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSystemBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSystemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSystemBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSystemBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSystemBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSystemBroadcast)
    MergeFrom(*source);
  }
}

void CMsgSystemBroadcast::MergeFrom(const CMsgSystemBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSystemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    set_has_message();
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CMsgSystemBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSystemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSystemBroadcast::CopyFrom(const CMsgSystemBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSystemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSystemBroadcast::IsInitialized() const {
  return true;
}

void CMsgSystemBroadcast::Swap(CMsgSystemBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSystemBroadcast::InternalSwap(CMsgSystemBroadcast* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSystemBroadcast::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSystemBroadcast

// optional string message = 1;
bool CMsgSystemBroadcast::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSystemBroadcast::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSystemBroadcast::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSystemBroadcast::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgSystemBroadcast::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSystemBroadcast.message)
  return message_.GetNoArena();
}
void CMsgSystemBroadcast::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSystemBroadcast.message)
}
#if LANG_CXX11
void CMsgSystemBroadcast::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSystemBroadcast.message)
}
#endif
void CMsgSystemBroadcast::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSystemBroadcast.message)
}
void CMsgSystemBroadcast::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSystemBroadcast.message)
}
::std::string* CMsgSystemBroadcast::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSystemBroadcast.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSystemBroadcast::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSystemBroadcast.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSystemBroadcast::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSystemBroadcast.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPingData::kRelayCodesFieldNumber;
const int CMsgClientPingData::kRelayPingsFieldNumber;
const int CMsgClientPingData::kRegionCodesFieldNumber;
const int CMsgClientPingData::kRegionPingsFieldNumber;
const int CMsgClientPingData::kRegionPingFailedBitmaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPingData::CMsgClientPingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientPingData)
}
CMsgClientPingData::CMsgClientPingData(const CMsgClientPingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      relay_codes_(from.relay_codes_),
      relay_pings_(from.relay_pings_),
      region_codes_(from.region_codes_),
      region_pings_(from.region_pings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_ping_failed_bitmask_ = from.region_ping_failed_bitmask_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientPingData)
}

void CMsgClientPingData::SharedCtor() {
  _cached_size_ = 0;
  region_ping_failed_bitmask_ = 0u;
}

CMsgClientPingData::~CMsgClientPingData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientPingData)
  SharedDtor();
}

void CMsgClientPingData::SharedDtor() {
}

void CMsgClientPingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPingData::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientPingData& CMsgClientPingData::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientPingData* CMsgClientPingData::New(::google::protobuf::Arena* arena) const {
  CMsgClientPingData* n = new CMsgClientPingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientPingData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientPingData)
  relay_codes_.Clear();
  relay_pings_.Clear();
  region_codes_.Clear();
  region_pings_.Clear();
  region_ping_failed_bitmask_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientPingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientPingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 relay_codes = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_relay_codes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(37u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 34u, input, this->mutable_relay_codes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 relay_pings = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_relay_pings())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_relay_pings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 region_codes = 8 [packed = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_codes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_region_codes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 region_pings = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_pings())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_region_pings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_ping_failed_bitmask = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_region_ping_failed_bitmask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_ping_failed_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientPingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientPingData)
  return false;
#undef DO_
}

void CMsgClientPingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientPingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 relay_codes = 4 [packed = true];
  if (this->relay_codes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_relay_codes_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->relay_codes().data(), this->relay_codes_size(), output);
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  if (this->relay_pings_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_relay_pings_cached_byte_size_);
  }
  for (int i = 0, n = this->relay_pings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->relay_pings(i), output);
  }

  // repeated uint32 region_codes = 8 [packed = true];
  if (this->region_codes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_codes_cached_byte_size_);
  }
  for (int i = 0, n = this->region_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_codes(i), output);
  }

  // repeated uint32 region_pings = 9 [packed = true];
  if (this->region_pings_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_pings_cached_byte_size_);
  }
  for (int i = 0, n = this->region_pings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_pings(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 region_ping_failed_bitmask = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->region_ping_failed_bitmask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientPingData)
}

::google::protobuf::uint8* CMsgClientPingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientPingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 relay_codes = 4 [packed = true];
  if (this->relay_codes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _relay_codes_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->relay_codes_, target);
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  if (this->relay_pings_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _relay_pings_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->relay_pings_, target);
  }

  // repeated uint32 region_codes = 8 [packed = true];
  if (this->region_codes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _region_codes_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_codes_, target);
  }

  // repeated uint32 region_pings = 9 [packed = true];
  if (this->region_pings_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _region_pings_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_pings_, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 region_ping_failed_bitmask = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->region_ping_failed_bitmask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientPingData)
  return target;
}

size_t CMsgClientPingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientPingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed32 relay_codes = 4 [packed = true];
  {
    unsigned int count = this->relay_codes_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _relay_codes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->relay_pings_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _relay_pings_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 region_codes = 8 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->region_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _region_codes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 region_pings = 9 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->region_pings_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _region_pings_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional uint32 region_ping_failed_bitmask = 10;
  if (has_region_ping_failed_bitmask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_ping_failed_bitmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientPingData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientPingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientPingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientPingData)
    MergeFrom(*source);
  }
}

void CMsgClientPingData::MergeFrom(const CMsgClientPingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientPingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relay_codes_.MergeFrom(from.relay_codes_);
  relay_pings_.MergeFrom(from.relay_pings_);
  region_codes_.MergeFrom(from.region_codes_);
  region_pings_.MergeFrom(from.region_pings_);
  if (from.has_region_ping_failed_bitmask()) {
    set_region_ping_failed_bitmask(from.region_ping_failed_bitmask());
  }
}

void CMsgClientPingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientPingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPingData::CopyFrom(const CMsgClientPingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientPingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPingData::IsInitialized() const {
  return true;
}

void CMsgClientPingData::Swap(CMsgClientPingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPingData::InternalSwap(CMsgClientPingData* other) {
  relay_codes_.InternalSwap(&other->relay_codes_);
  relay_pings_.InternalSwap(&other->relay_pings_);
  region_codes_.InternalSwap(&other->region_codes_);
  region_pings_.InternalSwap(&other->region_pings_);
  std::swap(region_ping_failed_bitmask_, other->region_ping_failed_bitmask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientPingData::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientPingData

// repeated fixed32 relay_codes = 4 [packed = true];
int CMsgClientPingData::relay_codes_size() const {
  return relay_codes_.size();
}
void CMsgClientPingData::clear_relay_codes() {
  relay_codes_.Clear();
}
::google::protobuf::uint32 CMsgClientPingData::relay_codes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientPingData.relay_codes)
  return relay_codes_.Get(index);
}
void CMsgClientPingData::set_relay_codes(int index, ::google::protobuf::uint32 value) {
  relay_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientPingData.relay_codes)
}
void CMsgClientPingData::add_relay_codes(::google::protobuf::uint32 value) {
  relay_codes_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientPingData.relay_codes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPingData::relay_codes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientPingData.relay_codes)
  return relay_codes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPingData::mutable_relay_codes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientPingData.relay_codes)
  return &relay_codes_;
}

// repeated uint32 relay_pings = 5 [packed = true];
int CMsgClientPingData::relay_pings_size() const {
  return relay_pings_.size();
}
void CMsgClientPingData::clear_relay_pings() {
  relay_pings_.Clear();
}
::google::protobuf::uint32 CMsgClientPingData::relay_pings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientPingData.relay_pings)
  return relay_pings_.Get(index);
}
void CMsgClientPingData::set_relay_pings(int index, ::google::protobuf::uint32 value) {
  relay_pings_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientPingData.relay_pings)
}
void CMsgClientPingData::add_relay_pings(::google::protobuf::uint32 value) {
  relay_pings_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientPingData.relay_pings)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPingData::relay_pings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientPingData.relay_pings)
  return relay_pings_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPingData::mutable_relay_pings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientPingData.relay_pings)
  return &relay_pings_;
}

// repeated uint32 region_codes = 8 [packed = true];
int CMsgClientPingData::region_codes_size() const {
  return region_codes_.size();
}
void CMsgClientPingData::clear_region_codes() {
  region_codes_.Clear();
}
::google::protobuf::uint32 CMsgClientPingData::region_codes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientPingData.region_codes)
  return region_codes_.Get(index);
}
void CMsgClientPingData::set_region_codes(int index, ::google::protobuf::uint32 value) {
  region_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientPingData.region_codes)
}
void CMsgClientPingData::add_region_codes(::google::protobuf::uint32 value) {
  region_codes_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientPingData.region_codes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPingData::region_codes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientPingData.region_codes)
  return region_codes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPingData::mutable_region_codes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientPingData.region_codes)
  return &region_codes_;
}

// repeated uint32 region_pings = 9 [packed = true];
int CMsgClientPingData::region_pings_size() const {
  return region_pings_.size();
}
void CMsgClientPingData::clear_region_pings() {
  region_pings_.Clear();
}
::google::protobuf::uint32 CMsgClientPingData::region_pings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientPingData.region_pings)
  return region_pings_.Get(index);
}
void CMsgClientPingData::set_region_pings(int index, ::google::protobuf::uint32 value) {
  region_pings_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientPingData.region_pings)
}
void CMsgClientPingData::add_region_pings(::google::protobuf::uint32 value) {
  region_pings_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientPingData.region_pings)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientPingData::region_pings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientPingData.region_pings)
  return region_pings_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientPingData::mutable_region_pings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientPingData.region_pings)
  return &region_pings_;
}

// optional uint32 region_ping_failed_bitmask = 10;
bool CMsgClientPingData::has_region_ping_failed_bitmask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientPingData::set_has_region_ping_failed_bitmask() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientPingData::clear_has_region_ping_failed_bitmask() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientPingData::clear_region_ping_failed_bitmask() {
  region_ping_failed_bitmask_ = 0u;
  clear_has_region_ping_failed_bitmask();
}
::google::protobuf::uint32 CMsgClientPingData::region_ping_failed_bitmask() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientPingData.region_ping_failed_bitmask)
  return region_ping_failed_bitmask_;
}
void CMsgClientPingData::set_region_ping_failed_bitmask(::google::protobuf::uint32 value) {
  set_has_region_ping_failed_bitmask();
  region_ping_failed_bitmask_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientPingData.region_ping_failed_bitmask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgInviteToParty::kSteamIdFieldNumber;
const int CMsgInviteToParty::kClientVersionFieldNumber;
const int CMsgInviteToParty::kTeamIdFieldNumber;
const int CMsgInviteToParty::kAsCoachFieldNumber;
const int CMsgInviteToParty::kPingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgInviteToParty::CMsgInviteToParty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgInviteToParty)
}
CMsgInviteToParty::CMsgInviteToParty(const CMsgInviteToParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ping_data()) {
    ping_data_ = new ::proto::dota::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = NULL;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&as_coach_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(as_coach_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgInviteToParty)
}

void CMsgInviteToParty::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ping_data_, 0, reinterpret_cast<char*>(&as_coach_) -
    reinterpret_cast<char*>(&ping_data_) + sizeof(as_coach_));
}

CMsgInviteToParty::~CMsgInviteToParty() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgInviteToParty)
  SharedDtor();
}

void CMsgInviteToParty::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ping_data_;
  }
}

void CMsgInviteToParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgInviteToParty::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgInviteToParty& CMsgInviteToParty::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgInviteToParty* CMsgInviteToParty::New(::google::protobuf::Arena* arena) const {
  CMsgInviteToParty* n = new CMsgInviteToParty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgInviteToParty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgInviteToParty)
  if (has_ping_data()) {
    GOOGLE_DCHECK(ping_data_ != NULL);
    ping_data_->::proto::dota::CMsgClientPingData::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&as_coach_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(as_coach_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgInviteToParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgInviteToParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool as_coach = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_as_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientPingData ping_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgInviteToParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgInviteToParty)
  return false;
#undef DO_
}

void CMsgInviteToParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgInviteToParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }

  // optional bool as_coach = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->as_coach(), output);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ping_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgInviteToParty)
}

::google::protobuf::uint8* CMsgInviteToParty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgInviteToParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }

  // optional bool as_coach = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->as_coach(), target);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ping_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgInviteToParty)
  return target;
}

size_t CMsgInviteToParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgInviteToParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgClientPingData ping_data = 5;
    if (has_ping_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ping_data_);
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool as_coach = 4;
    if (has_as_coach()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgInviteToParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgInviteToParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInviteToParty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgInviteToParty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgInviteToParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgInviteToParty)
    MergeFrom(*source);
  }
}

void CMsgInviteToParty::MergeFrom(const CMsgInviteToParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgInviteToParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ping_data()->::proto::dota::CMsgClientPingData::MergeFrom(from.ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      as_coach_ = from.as_coach_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInviteToParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgInviteToParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInviteToParty::CopyFrom(const CMsgInviteToParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgInviteToParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToParty::IsInitialized() const {
  return true;
}

void CMsgInviteToParty::Swap(CMsgInviteToParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgInviteToParty::InternalSwap(CMsgInviteToParty* other) {
  std::swap(ping_data_, other->ping_data_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(client_version_, other->client_version_);
  std::swap(team_id_, other->team_id_);
  std::swap(as_coach_, other->as_coach_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgInviteToParty::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgInviteToParty

// optional fixed64 steam_id = 1;
bool CMsgInviteToParty::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgInviteToParty::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgInviteToParty::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgInviteToParty::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgInviteToParty::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInviteToParty.steam_id)
  return steam_id_;
}
void CMsgInviteToParty::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgInviteToParty.steam_id)
}

// optional uint32 client_version = 2;
bool CMsgInviteToParty::has_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgInviteToParty::set_has_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgInviteToParty::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgInviteToParty::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgInviteToParty::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInviteToParty.client_version)
  return client_version_;
}
void CMsgInviteToParty::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgInviteToParty.client_version)
}

// optional uint32 team_id = 3;
bool CMsgInviteToParty::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgInviteToParty::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgInviteToParty::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgInviteToParty::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgInviteToParty::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInviteToParty.team_id)
  return team_id_;
}
void CMsgInviteToParty::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgInviteToParty.team_id)
}

// optional bool as_coach = 4;
bool CMsgInviteToParty::has_as_coach() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgInviteToParty::set_has_as_coach() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgInviteToParty::clear_has_as_coach() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgInviteToParty::clear_as_coach() {
  as_coach_ = false;
  clear_has_as_coach();
}
bool CMsgInviteToParty::as_coach() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInviteToParty.as_coach)
  return as_coach_;
}
void CMsgInviteToParty::set_as_coach(bool value) {
  set_has_as_coach();
  as_coach_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgInviteToParty.as_coach)
}

// optional .proto.dota.CMsgClientPingData ping_data = 5;
bool CMsgInviteToParty::has_ping_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgInviteToParty::set_has_ping_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgInviteToParty::clear_has_ping_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgInviteToParty::clear_ping_data() {
  if (ping_data_ != NULL) ping_data_->::proto::dota::CMsgClientPingData::Clear();
  clear_has_ping_data();
}
const ::proto::dota::CMsgClientPingData& CMsgInviteToParty::ping_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInviteToParty.ping_data)
  return ping_data_ != NULL ? *ping_data_
                         : *::proto::dota::CMsgClientPingData::internal_default_instance();
}
::proto::dota::CMsgClientPingData* CMsgInviteToParty::mutable_ping_data() {
  set_has_ping_data();
  if (ping_data_ == NULL) {
    ping_data_ = new ::proto::dota::CMsgClientPingData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgInviteToParty.ping_data)
  return ping_data_;
}
::proto::dota::CMsgClientPingData* CMsgInviteToParty::release_ping_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgInviteToParty.ping_data)
  clear_has_ping_data();
  ::proto::dota::CMsgClientPingData* temp = ping_data_;
  ping_data_ = NULL;
  return temp;
}
void CMsgInviteToParty::set_allocated_ping_data(::proto::dota::CMsgClientPingData* ping_data) {
  delete ping_data_;
  ping_data_ = ping_data;
  if (ping_data) {
    set_has_ping_data();
  } else {
    clear_has_ping_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgInviteToParty.ping_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgInviteToLobby::kSteamIdFieldNumber;
const int CMsgInviteToLobby::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgInviteToLobby::CMsgInviteToLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgInviteToLobby)
}
CMsgInviteToLobby::CMsgInviteToLobby(const CMsgInviteToLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgInviteToLobby)
}

void CMsgInviteToLobby::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(client_version_));
}

CMsgInviteToLobby::~CMsgInviteToLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgInviteToLobby)
  SharedDtor();
}

void CMsgInviteToLobby::SharedDtor() {
}

void CMsgInviteToLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgInviteToLobby::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgInviteToLobby& CMsgInviteToLobby::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgInviteToLobby* CMsgInviteToLobby::New(::google::protobuf::Arena* arena) const {
  CMsgInviteToLobby* n = new CMsgInviteToLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgInviteToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgInviteToLobby)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgInviteToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgInviteToLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgInviteToLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgInviteToLobby)
  return false;
#undef DO_
}

void CMsgInviteToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgInviteToLobby)
}

::google::protobuf::uint8* CMsgInviteToLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgInviteToLobby)
  return target;
}

size_t CMsgInviteToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgInviteToLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgInviteToLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInviteToLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgInviteToLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgInviteToLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgInviteToLobby)
    MergeFrom(*source);
  }
}

void CMsgInviteToLobby::MergeFrom(const CMsgInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInviteToLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInviteToLobby::CopyFrom(const CMsgInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToLobby::IsInitialized() const {
  return true;
}

void CMsgInviteToLobby::Swap(CMsgInviteToLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgInviteToLobby::InternalSwap(CMsgInviteToLobby* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(client_version_, other->client_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgInviteToLobby::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgInviteToLobby

// optional fixed64 steam_id = 1;
bool CMsgInviteToLobby::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgInviteToLobby::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgInviteToLobby::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgInviteToLobby::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgInviteToLobby::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInviteToLobby.steam_id)
  return steam_id_;
}
void CMsgInviteToLobby::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgInviteToLobby.steam_id)
}

// optional uint32 client_version = 2;
bool CMsgInviteToLobby::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgInviteToLobby::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgInviteToLobby::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgInviteToLobby::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgInviteToLobby::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInviteToLobby.client_version)
  return client_version_;
}
void CMsgInviteToLobby::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgInviteToLobby.client_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgInvitationCreated::kGroupIdFieldNumber;
const int CMsgInvitationCreated::kSteamIdFieldNumber;
const int CMsgInvitationCreated::kUserOfflineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgInvitationCreated::CMsgInvitationCreated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgInvitationCreated)
}
CMsgInvitationCreated::CMsgInvitationCreated(const CMsgInvitationCreated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&user_offline_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_offline_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgInvitationCreated)
}

void CMsgInvitationCreated::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&user_offline_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(user_offline_));
}

CMsgInvitationCreated::~CMsgInvitationCreated() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgInvitationCreated)
  SharedDtor();
}

void CMsgInvitationCreated::SharedDtor() {
}

void CMsgInvitationCreated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgInvitationCreated::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgInvitationCreated& CMsgInvitationCreated::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgInvitationCreated* CMsgInvitationCreated::New(::google::protobuf::Arena* arena) const {
  CMsgInvitationCreated* n = new CMsgInvitationCreated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgInvitationCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgInvitationCreated)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&group_id_, 0, reinterpret_cast<char*>(&user_offline_) -
      reinterpret_cast<char*>(&group_id_) + sizeof(user_offline_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgInvitationCreated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgInvitationCreated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool user_offline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_user_offline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_offline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgInvitationCreated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgInvitationCreated)
  return false;
#undef DO_
}

void CMsgInvitationCreated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgInvitationCreated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional bool user_offline = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->user_offline(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgInvitationCreated)
}

::google::protobuf::uint8* CMsgInvitationCreated::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgInvitationCreated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional bool user_offline = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->user_offline(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgInvitationCreated)
  return target;
}

size_t CMsgInvitationCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgInvitationCreated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional bool user_offline = 3;
    if (has_user_offline()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgInvitationCreated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgInvitationCreated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInvitationCreated* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgInvitationCreated>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgInvitationCreated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgInvitationCreated)
    MergeFrom(*source);
  }
}

void CMsgInvitationCreated::MergeFrom(const CMsgInvitationCreated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgInvitationCreated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_offline_ = from.user_offline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInvitationCreated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgInvitationCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInvitationCreated::CopyFrom(const CMsgInvitationCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgInvitationCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInvitationCreated::IsInitialized() const {
  return true;
}

void CMsgInvitationCreated::Swap(CMsgInvitationCreated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgInvitationCreated::InternalSwap(CMsgInvitationCreated* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(user_offline_, other->user_offline_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgInvitationCreated::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgInvitationCreated

// optional uint64 group_id = 1;
bool CMsgInvitationCreated::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgInvitationCreated::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgInvitationCreated::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgInvitationCreated::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
::google::protobuf::uint64 CMsgInvitationCreated::group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInvitationCreated.group_id)
  return group_id_;
}
void CMsgInvitationCreated::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgInvitationCreated.group_id)
}

// optional fixed64 steam_id = 2;
bool CMsgInvitationCreated::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgInvitationCreated::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgInvitationCreated::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgInvitationCreated::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgInvitationCreated::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInvitationCreated.steam_id)
  return steam_id_;
}
void CMsgInvitationCreated::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgInvitationCreated.steam_id)
}

// optional bool user_offline = 3;
bool CMsgInvitationCreated::has_user_offline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgInvitationCreated::set_has_user_offline() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgInvitationCreated::clear_has_user_offline() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgInvitationCreated::clear_user_offline() {
  user_offline_ = false;
  clear_has_user_offline();
}
bool CMsgInvitationCreated::user_offline() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgInvitationCreated.user_offline)
  return user_offline_;
}
void CMsgInvitationCreated::set_user_offline(bool value) {
  set_has_user_offline();
  user_offline_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgInvitationCreated.user_offline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPartyInviteResponse::kPartyIdFieldNumber;
const int CMsgPartyInviteResponse::kAcceptFieldNumber;
const int CMsgPartyInviteResponse::kClientVersionFieldNumber;
const int CMsgPartyInviteResponse::kPingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPartyInviteResponse::CMsgPartyInviteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPartyInviteResponse)
}
CMsgPartyInviteResponse::CMsgPartyInviteResponse(const CMsgPartyInviteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ping_data()) {
    ping_data_ = new ::proto::dota::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = NULL;
  }
  ::memcpy(&party_id_, &from.party_id_,
    reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&party_id_) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPartyInviteResponse)
}

void CMsgPartyInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ping_data_, 0, reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&ping_data_) + sizeof(client_version_));
}

CMsgPartyInviteResponse::~CMsgPartyInviteResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPartyInviteResponse)
  SharedDtor();
}

void CMsgPartyInviteResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ping_data_;
  }
}

void CMsgPartyInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyInviteResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPartyInviteResponse& CMsgPartyInviteResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPartyInviteResponse* CMsgPartyInviteResponse::New(::google::protobuf::Arena* arena) const {
  CMsgPartyInviteResponse* n = new CMsgPartyInviteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPartyInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPartyInviteResponse)
  if (has_ping_data()) {
    GOOGLE_DCHECK(ping_data_ != NULL);
    ping_data_->::proto::dota::CMsgClientPingData::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&party_id_, 0, reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&party_id_) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPartyInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPartyInviteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accept = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_accept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientPingData ping_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPartyInviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPartyInviteResponse)
  return false;
#undef DO_
}

void CMsgPartyInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPartyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ping_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPartyInviteResponse)
}

::google::protobuf::uint8* CMsgPartyInviteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPartyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->ping_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPartyInviteResponse)
  return target;
}

size_t CMsgPartyInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPartyInviteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgClientPingData ping_data = 8;
    if (has_ping_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ping_data_);
    }

    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPartyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyInviteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPartyInviteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPartyInviteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPartyInviteResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyInviteResponse::MergeFrom(const CMsgPartyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPartyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ping_data()->::proto::dota::CMsgClientPingData::MergeFrom(from.ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPartyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyInviteResponse::CopyFrom(const CMsgPartyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPartyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyInviteResponse::IsInitialized() const {
  return true;
}

void CMsgPartyInviteResponse::Swap(CMsgPartyInviteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPartyInviteResponse::InternalSwap(CMsgPartyInviteResponse* other) {
  std::swap(ping_data_, other->ping_data_);
  std::swap(party_id_, other->party_id_);
  std::swap(accept_, other->accept_);
  std::swap(client_version_, other->client_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPartyInviteResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPartyInviteResponse

// optional uint64 party_id = 1;
bool CMsgPartyInviteResponse::has_party_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPartyInviteResponse::set_has_party_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPartyInviteResponse::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPartyInviteResponse::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
::google::protobuf::uint64 CMsgPartyInviteResponse::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyInviteResponse.party_id)
  return party_id_;
}
void CMsgPartyInviteResponse::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyInviteResponse.party_id)
}

// optional bool accept = 2;
bool CMsgPartyInviteResponse::has_accept() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPartyInviteResponse::set_has_accept() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPartyInviteResponse::clear_has_accept() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPartyInviteResponse::clear_accept() {
  accept_ = false;
  clear_has_accept();
}
bool CMsgPartyInviteResponse::accept() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyInviteResponse.accept)
  return accept_;
}
void CMsgPartyInviteResponse::set_accept(bool value) {
  set_has_accept();
  accept_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyInviteResponse.accept)
}

// optional uint32 client_version = 3;
bool CMsgPartyInviteResponse::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPartyInviteResponse::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPartyInviteResponse::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPartyInviteResponse::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgPartyInviteResponse::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyInviteResponse.client_version)
  return client_version_;
}
void CMsgPartyInviteResponse::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyInviteResponse.client_version)
}

// optional .proto.dota.CMsgClientPingData ping_data = 8;
bool CMsgPartyInviteResponse::has_ping_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPartyInviteResponse::set_has_ping_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPartyInviteResponse::clear_has_ping_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPartyInviteResponse::clear_ping_data() {
  if (ping_data_ != NULL) ping_data_->::proto::dota::CMsgClientPingData::Clear();
  clear_has_ping_data();
}
const ::proto::dota::CMsgClientPingData& CMsgPartyInviteResponse::ping_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyInviteResponse.ping_data)
  return ping_data_ != NULL ? *ping_data_
                         : *::proto::dota::CMsgClientPingData::internal_default_instance();
}
::proto::dota::CMsgClientPingData* CMsgPartyInviteResponse::mutable_ping_data() {
  set_has_ping_data();
  if (ping_data_ == NULL) {
    ping_data_ = new ::proto::dota::CMsgClientPingData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPartyInviteResponse.ping_data)
  return ping_data_;
}
::proto::dota::CMsgClientPingData* CMsgPartyInviteResponse::release_ping_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPartyInviteResponse.ping_data)
  clear_has_ping_data();
  ::proto::dota::CMsgClientPingData* temp = ping_data_;
  ping_data_ = NULL;
  return temp;
}
void CMsgPartyInviteResponse::set_allocated_ping_data(::proto::dota::CMsgClientPingData* ping_data) {
  delete ping_data_;
  ping_data_ = ping_data;
  if (ping_data) {
    set_has_ping_data();
  } else {
    clear_has_ping_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPartyInviteResponse.ping_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyInviteResponse::kLobbyIdFieldNumber;
const int CMsgLobbyInviteResponse::kAcceptFieldNumber;
const int CMsgLobbyInviteResponse::kClientVersionFieldNumber;
const int CMsgLobbyInviteResponse::kCustomGameCrcFieldNumber;
const int CMsgLobbyInviteResponse::kCustomGameTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyInviteResponse::CMsgLobbyInviteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyInviteResponse)
}
CMsgLobbyInviteResponse::CMsgLobbyInviteResponse(const CMsgLobbyInviteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(custom_game_timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyInviteResponse)
}

void CMsgLobbyInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(custom_game_timestamp_));
}

CMsgLobbyInviteResponse::~CMsgLobbyInviteResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyInviteResponse)
  SharedDtor();
}

void CMsgLobbyInviteResponse::SharedDtor() {
}

void CMsgLobbyInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyInviteResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLobbyInviteResponse& CMsgLobbyInviteResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLobbyInviteResponse* CMsgLobbyInviteResponse::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyInviteResponse* n = new CMsgLobbyInviteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyInviteResponse)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&custom_game_timestamp_) -
      reinterpret_cast<char*>(&lobby_id_) + sizeof(custom_game_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLobbyInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyInviteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accept = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_accept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_custom_game_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_custom_game_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyInviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyInviteResponse)
  return false;
#undef DO_
}

void CMsgLobbyInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional fixed64 custom_game_crc = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->custom_game_crc(), output);
  }

  // optional fixed32 custom_game_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->custom_game_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyInviteResponse)
}

::google::protobuf::uint8* CMsgLobbyInviteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional fixed64 custom_game_crc = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->custom_game_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyInviteResponse)
  return target;
}

size_t CMsgLobbyInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyInviteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional fixed64 custom_game_crc = 6;
    if (has_custom_game_crc()) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 7;
    if (has_custom_game_timestamp()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyInviteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyInviteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyInviteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyInviteResponse)
    MergeFrom(*source);
  }
}

void CMsgLobbyInviteResponse::MergeFrom(const CMsgLobbyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyInviteResponse::CopyFrom(const CMsgLobbyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyInviteResponse::IsInitialized() const {
  return true;
}

void CMsgLobbyInviteResponse::Swap(CMsgLobbyInviteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyInviteResponse::InternalSwap(CMsgLobbyInviteResponse* other) {
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(accept_, other->accept_);
  std::swap(client_version_, other->client_version_);
  std::swap(custom_game_crc_, other->custom_game_crc_);
  std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyInviteResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLobbyInviteResponse

// optional fixed64 lobby_id = 1;
bool CMsgLobbyInviteResponse::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLobbyInviteResponse::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLobbyInviteResponse::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLobbyInviteResponse::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgLobbyInviteResponse::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyInviteResponse.lobby_id)
  return lobby_id_;
}
void CMsgLobbyInviteResponse::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyInviteResponse.lobby_id)
}

// optional bool accept = 2;
bool CMsgLobbyInviteResponse::has_accept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLobbyInviteResponse::set_has_accept() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLobbyInviteResponse::clear_has_accept() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLobbyInviteResponse::clear_accept() {
  accept_ = false;
  clear_has_accept();
}
bool CMsgLobbyInviteResponse::accept() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyInviteResponse.accept)
  return accept_;
}
void CMsgLobbyInviteResponse::set_accept(bool value) {
  set_has_accept();
  accept_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyInviteResponse.accept)
}

// optional uint32 client_version = 3;
bool CMsgLobbyInviteResponse::has_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLobbyInviteResponse::set_has_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLobbyInviteResponse::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLobbyInviteResponse::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgLobbyInviteResponse::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyInviteResponse.client_version)
  return client_version_;
}
void CMsgLobbyInviteResponse::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyInviteResponse.client_version)
}

// optional fixed64 custom_game_crc = 6;
bool CMsgLobbyInviteResponse::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgLobbyInviteResponse::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgLobbyInviteResponse::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgLobbyInviteResponse::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
::google::protobuf::uint64 CMsgLobbyInviteResponse::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyInviteResponse.custom_game_crc)
  return custom_game_crc_;
}
void CMsgLobbyInviteResponse::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyInviteResponse.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 7;
bool CMsgLobbyInviteResponse::has_custom_game_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgLobbyInviteResponse::set_has_custom_game_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgLobbyInviteResponse::clear_has_custom_game_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgLobbyInviteResponse::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
::google::protobuf::uint32 CMsgLobbyInviteResponse::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyInviteResponse.custom_game_timestamp)
  return custom_game_timestamp_;
}
void CMsgLobbyInviteResponse::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyInviteResponse.custom_game_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgKickFromParty::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgKickFromParty::CMsgKickFromParty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgKickFromParty)
}
CMsgKickFromParty::CMsgKickFromParty(const CMsgKickFromParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgKickFromParty)
}

void CMsgKickFromParty::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgKickFromParty::~CMsgKickFromParty() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgKickFromParty)
  SharedDtor();
}

void CMsgKickFromParty::SharedDtor() {
}

void CMsgKickFromParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKickFromParty::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgKickFromParty& CMsgKickFromParty::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgKickFromParty* CMsgKickFromParty::New(::google::protobuf::Arena* arena) const {
  CMsgKickFromParty* n = new CMsgKickFromParty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgKickFromParty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgKickFromParty)
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgKickFromParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgKickFromParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgKickFromParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgKickFromParty)
  return false;
#undef DO_
}

void CMsgKickFromParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgKickFromParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgKickFromParty)
}

::google::protobuf::uint8* CMsgKickFromParty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgKickFromParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgKickFromParty)
  return target;
}

size_t CMsgKickFromParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgKickFromParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKickFromParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgKickFromParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKickFromParty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgKickFromParty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgKickFromParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgKickFromParty)
    MergeFrom(*source);
  }
}

void CMsgKickFromParty::MergeFrom(const CMsgKickFromParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgKickFromParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steam_id()) {
    set_steam_id(from.steam_id());
  }
}

void CMsgKickFromParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgKickFromParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKickFromParty::CopyFrom(const CMsgKickFromParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgKickFromParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickFromParty::IsInitialized() const {
  return true;
}

void CMsgKickFromParty::Swap(CMsgKickFromParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgKickFromParty::InternalSwap(CMsgKickFromParty* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgKickFromParty::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgKickFromParty

// optional fixed64 steam_id = 1;
bool CMsgKickFromParty::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgKickFromParty::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgKickFromParty::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgKickFromParty::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgKickFromParty::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgKickFromParty.steam_id)
  return steam_id_;
}
void CMsgKickFromParty::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgKickFromParty.steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeaveParty::CMsgLeaveParty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeaveParty)
}
CMsgLeaveParty::CMsgLeaveParty(const CMsgLeaveParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeaveParty)
}

void CMsgLeaveParty::SharedCtor() {
  _cached_size_ = 0;
}

CMsgLeaveParty::~CMsgLeaveParty() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeaveParty)
  SharedDtor();
}

void CMsgLeaveParty::SharedDtor() {
}

void CMsgLeaveParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaveParty::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLeaveParty& CMsgLeaveParty::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLeaveParty* CMsgLeaveParty::New(::google::protobuf::Arena* arena) const {
  CMsgLeaveParty* n = new CMsgLeaveParty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLeaveParty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeaveParty)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLeaveParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeaveParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeaveParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeaveParty)
  return false;
#undef DO_
}

void CMsgLeaveParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeaveParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeaveParty)
}

::google::protobuf::uint8* CMsgLeaveParty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeaveParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeaveParty)
  return target;
}

size_t CMsgLeaveParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeaveParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaveParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeaveParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaveParty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLeaveParty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeaveParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeaveParty)
    MergeFrom(*source);
  }
}

void CMsgLeaveParty::MergeFrom(const CMsgLeaveParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeaveParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgLeaveParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeaveParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaveParty::CopyFrom(const CMsgLeaveParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeaveParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaveParty::IsInitialized() const {
  return true;
}

void CMsgLeaveParty::Swap(CMsgLeaveParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaveParty::InternalSwap(CMsgLeaveParty* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLeaveParty::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLeaveParty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCustomGameInstallStatus::kStatusFieldNumber;
const int CMsgCustomGameInstallStatus::kMessageFieldNumber;
const int CMsgCustomGameInstallStatus::kLatestTimestampFromSteamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCustomGameInstallStatus)
}
CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus(const CMsgCustomGameInstallStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&latest_timestamp_from_steam_) -
    reinterpret_cast<char*>(&status_) + sizeof(latest_timestamp_from_steam_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCustomGameInstallStatus)
}

void CMsgCustomGameInstallStatus::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&latest_timestamp_from_steam_) -
    reinterpret_cast<char*>(&status_) + sizeof(latest_timestamp_from_steam_));
}

CMsgCustomGameInstallStatus::~CMsgCustomGameInstallStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCustomGameInstallStatus)
  SharedDtor();
}

void CMsgCustomGameInstallStatus::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgCustomGameInstallStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCustomGameInstallStatus::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCustomGameInstallStatus& CMsgCustomGameInstallStatus::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCustomGameInstallStatus* CMsgCustomGameInstallStatus::New(::google::protobuf::Arena* arena) const {
  CMsgCustomGameInstallStatus* n = new CMsgCustomGameInstallStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCustomGameInstallStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCustomGameInstallStatus)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&latest_timestamp_from_steam_) -
      reinterpret_cast<char*>(&status_) + sizeof(latest_timestamp_from_steam_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCustomGameInstallStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCustomGameInstallStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ECustomGameInstallStatus_IsValid(value)) {
            set_status(static_cast< ::proto::dota::ECustomGameInstallStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgCustomGameInstallStatus.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 latest_timestamp_from_steam = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_latest_timestamp_from_steam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &latest_timestamp_from_steam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCustomGameInstallStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCustomGameInstallStatus)
  return false;
#undef DO_
}

void CMsgCustomGameInstallStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCustomGameInstallStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameInstallStatus.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional fixed32 latest_timestamp_from_steam = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->latest_timestamp_from_steam(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCustomGameInstallStatus)
}

::google::protobuf::uint8* CMsgCustomGameInstallStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCustomGameInstallStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameInstallStatus.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional fixed32 latest_timestamp_from_steam = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->latest_timestamp_from_steam(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCustomGameInstallStatus)
  return target;
}

size_t CMsgCustomGameInstallStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCustomGameInstallStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional fixed32 latest_timestamp_from_steam = 3;
    if (has_latest_timestamp_from_steam()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCustomGameInstallStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCustomGameInstallStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCustomGameInstallStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCustomGameInstallStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCustomGameInstallStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCustomGameInstallStatus)
    MergeFrom(*source);
  }
}

void CMsgCustomGameInstallStatus::MergeFrom(const CMsgCustomGameInstallStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCustomGameInstallStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      latest_timestamp_from_steam_ = from.latest_timestamp_from_steam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCustomGameInstallStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCustomGameInstallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameInstallStatus::CopyFrom(const CMsgCustomGameInstallStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCustomGameInstallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameInstallStatus::IsInitialized() const {
  return true;
}

void CMsgCustomGameInstallStatus::Swap(CMsgCustomGameInstallStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCustomGameInstallStatus::InternalSwap(CMsgCustomGameInstallStatus* other) {
  message_.Swap(&other->message_);
  std::swap(status_, other->status_);
  std::swap(latest_timestamp_from_steam_, other->latest_timestamp_from_steam_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCustomGameInstallStatus::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCustomGameInstallStatus

// optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
bool CMsgCustomGameInstallStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgCustomGameInstallStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgCustomGameInstallStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgCustomGameInstallStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
::proto::dota::ECustomGameInstallStatus CMsgCustomGameInstallStatus::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCustomGameInstallStatus.status)
  return static_cast< ::proto::dota::ECustomGameInstallStatus >(status_);
}
void CMsgCustomGameInstallStatus::set_status(::proto::dota::ECustomGameInstallStatus value) {
  assert(::proto::dota::ECustomGameInstallStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCustomGameInstallStatus.status)
}

// optional string message = 2;
bool CMsgCustomGameInstallStatus::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgCustomGameInstallStatus::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgCustomGameInstallStatus::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgCustomGameInstallStatus::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgCustomGameInstallStatus::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCustomGameInstallStatus.message)
  return message_.GetNoArena();
}
void CMsgCustomGameInstallStatus::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCustomGameInstallStatus.message)
}
#if LANG_CXX11
void CMsgCustomGameInstallStatus::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgCustomGameInstallStatus.message)
}
#endif
void CMsgCustomGameInstallStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgCustomGameInstallStatus.message)
}
void CMsgCustomGameInstallStatus::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgCustomGameInstallStatus.message)
}
::std::string* CMsgCustomGameInstallStatus::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgCustomGameInstallStatus.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgCustomGameInstallStatus::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgCustomGameInstallStatus.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgCustomGameInstallStatus::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgCustomGameInstallStatus.message)
}

// optional fixed32 latest_timestamp_from_steam = 3;
bool CMsgCustomGameInstallStatus::has_latest_timestamp_from_steam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgCustomGameInstallStatus::set_has_latest_timestamp_from_steam() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgCustomGameInstallStatus::clear_has_latest_timestamp_from_steam() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgCustomGameInstallStatus::clear_latest_timestamp_from_steam() {
  latest_timestamp_from_steam_ = 0u;
  clear_has_latest_timestamp_from_steam();
}
::google::protobuf::uint32 CMsgCustomGameInstallStatus::latest_timestamp_from_steam() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCustomGameInstallStatus.latest_timestamp_from_steam)
  return latest_timestamp_from_steam_;
}
void CMsgCustomGameInstallStatus::set_latest_timestamp_from_steam(::google::protobuf::uint32 value) {
  set_has_latest_timestamp_from_steam();
  latest_timestamp_from_steam_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCustomGameInstallStatus.latest_timestamp_from_steam)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerAvailable::kCustomGameInstallStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerAvailable::CMsgServerAvailable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerAvailable)
}
CMsgServerAvailable::CMsgServerAvailable(const CMsgServerAvailable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_custom_game_install_status()) {
    custom_game_install_status_ = new ::proto::dota::CMsgCustomGameInstallStatus(*from.custom_game_install_status_);
  } else {
    custom_game_install_status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerAvailable)
}

void CMsgServerAvailable::SharedCtor() {
  _cached_size_ = 0;
  custom_game_install_status_ = NULL;
}

CMsgServerAvailable::~CMsgServerAvailable() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerAvailable)
  SharedDtor();
}

void CMsgServerAvailable::SharedDtor() {
  if (this != internal_default_instance()) {
    delete custom_game_install_status_;
  }
}

void CMsgServerAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerAvailable::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerAvailable& CMsgServerAvailable::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerAvailable* CMsgServerAvailable::New(::google::protobuf::Arena* arena) const {
  CMsgServerAvailable* n = new CMsgServerAvailable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerAvailable)
  if (has_custom_game_install_status()) {
    GOOGLE_DCHECK(custom_game_install_status_ != NULL);
    custom_game_install_status_->::proto::dota::CMsgCustomGameInstallStatus::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerAvailable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_game_install_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerAvailable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerAvailable)
  return false;
#undef DO_
}

void CMsgServerAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->custom_game_install_status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerAvailable)
}

::google::protobuf::uint8* CMsgServerAvailable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->custom_game_install_status_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerAvailable)
  return target;
}

size_t CMsgServerAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerAvailable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
  if (has_custom_game_install_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->custom_game_install_status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerAvailable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerAvailable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerAvailable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerAvailable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerAvailable)
    MergeFrom(*source);
  }
}

void CMsgServerAvailable::MergeFrom(const CMsgServerAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_custom_game_install_status()) {
    mutable_custom_game_install_status()->::proto::dota::CMsgCustomGameInstallStatus::MergeFrom(from.custom_game_install_status());
  }
}

void CMsgServerAvailable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerAvailable::CopyFrom(const CMsgServerAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerAvailable::IsInitialized() const {
  return true;
}

void CMsgServerAvailable::Swap(CMsgServerAvailable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerAvailable::InternalSwap(CMsgServerAvailable* other) {
  std::swap(custom_game_install_status_, other->custom_game_install_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerAvailable::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerAvailable

// optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
bool CMsgServerAvailable::has_custom_game_install_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerAvailable::set_has_custom_game_install_status() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerAvailable::clear_has_custom_game_install_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerAvailable::clear_custom_game_install_status() {
  if (custom_game_install_status_ != NULL) custom_game_install_status_->::proto::dota::CMsgCustomGameInstallStatus::Clear();
  clear_has_custom_game_install_status();
}
const ::proto::dota::CMsgCustomGameInstallStatus& CMsgServerAvailable::custom_game_install_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerAvailable.custom_game_install_status)
  return custom_game_install_status_ != NULL ? *custom_game_install_status_
                         : *::proto::dota::CMsgCustomGameInstallStatus::internal_default_instance();
}
::proto::dota::CMsgCustomGameInstallStatus* CMsgServerAvailable::mutable_custom_game_install_status() {
  set_has_custom_game_install_status();
  if (custom_game_install_status_ == NULL) {
    custom_game_install_status_ = new ::proto::dota::CMsgCustomGameInstallStatus;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerAvailable.custom_game_install_status)
  return custom_game_install_status_;
}
::proto::dota::CMsgCustomGameInstallStatus* CMsgServerAvailable::release_custom_game_install_status() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgServerAvailable.custom_game_install_status)
  clear_has_custom_game_install_status();
  ::proto::dota::CMsgCustomGameInstallStatus* temp = custom_game_install_status_;
  custom_game_install_status_ = NULL;
  return temp;
}
void CMsgServerAvailable::set_allocated_custom_game_install_status(::proto::dota::CMsgCustomGameInstallStatus* custom_game_install_status) {
  delete custom_game_install_status_;
  custom_game_install_status_ = custom_game_install_status;
  if (custom_game_install_status) {
    set_has_custom_game_install_status();
  } else {
    clear_has_custom_game_install_status();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgServerAvailable.custom_game_install_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLANServerAvailable::kLobbyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLANServerAvailable::CMsgLANServerAvailable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLANServerAvailable)
}
CMsgLANServerAvailable::CMsgLANServerAvailable(const CMsgLANServerAvailable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLANServerAvailable)
}

void CMsgLANServerAvailable::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
}

CMsgLANServerAvailable::~CMsgLANServerAvailable() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLANServerAvailable)
  SharedDtor();
}

void CMsgLANServerAvailable::SharedDtor() {
}

void CMsgLANServerAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLANServerAvailable::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLANServerAvailable& CMsgLANServerAvailable::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLANServerAvailable* CMsgLANServerAvailable::New(::google::protobuf::Arena* arena) const {
  CMsgLANServerAvailable* n = new CMsgLANServerAvailable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLANServerAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLANServerAvailable)
  lobby_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLANServerAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLANServerAvailable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLANServerAvailable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLANServerAvailable)
  return false;
#undef DO_
}

void CMsgLANServerAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLANServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLANServerAvailable)
}

::google::protobuf::uint8* CMsgLANServerAvailable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLANServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLANServerAvailable)
  return target;
}

size_t CMsgLANServerAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLANServerAvailable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 lobby_id = 1;
  if (has_lobby_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLANServerAvailable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLANServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLANServerAvailable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLANServerAvailable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLANServerAvailable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLANServerAvailable)
    MergeFrom(*source);
  }
}

void CMsgLANServerAvailable::MergeFrom(const CMsgLANServerAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLANServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lobby_id()) {
    set_lobby_id(from.lobby_id());
  }
}

void CMsgLANServerAvailable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLANServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLANServerAvailable::CopyFrom(const CMsgLANServerAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLANServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLANServerAvailable::IsInitialized() const {
  return true;
}

void CMsgLANServerAvailable::Swap(CMsgLANServerAvailable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLANServerAvailable::InternalSwap(CMsgLANServerAvailable* other) {
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLANServerAvailable::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLANServerAvailable

// optional fixed64 lobby_id = 1;
bool CMsgLANServerAvailable::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLANServerAvailable::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLANServerAvailable::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLANServerAvailable::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgLANServerAvailable::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLANServerAvailable.lobby_id)
  return lobby_id_;
}
void CMsgLANServerAvailable::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLANServerAvailable.lobby_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconGameAccountClient::kAdditionalBackpackSlotsFieldNumber;
const int CSOEconGameAccountClient::kTrialAccountFieldNumber;
const int CSOEconGameAccountClient::kEligibleForOnlinePlayFieldNumber;
const int CSOEconGameAccountClient::kNeedToChooseMostHelpfulFriendFieldNumber;
const int CSOEconGameAccountClient::kInCoachesListFieldNumber;
const int CSOEconGameAccountClient::kTradeBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kDuelBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kMadeFirstPurchaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconGameAccountClient::CSOEconGameAccountClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconGameAccountClient)
}
CSOEconGameAccountClient::CSOEconGameAccountClient(const CSOEconGameAccountClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&additional_backpack_slots_, &from.additional_backpack_slots_,
    reinterpret_cast<char*>(&eligible_for_online_play_) -
    reinterpret_cast<char*>(&additional_backpack_slots_) + sizeof(eligible_for_online_play_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconGameAccountClient)
}

void CSOEconGameAccountClient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&additional_backpack_slots_, 0, reinterpret_cast<char*>(&duel_ban_expiration_) -
    reinterpret_cast<char*>(&additional_backpack_slots_) + sizeof(duel_ban_expiration_));
  eligible_for_online_play_ = true;
}

CSOEconGameAccountClient::~CSOEconGameAccountClient() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconGameAccountClient)
  SharedDtor();
}

void CSOEconGameAccountClient::SharedDtor() {
}

void CSOEconGameAccountClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconGameAccountClient::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconGameAccountClient& CSOEconGameAccountClient::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOEconGameAccountClient* CSOEconGameAccountClient::New(::google::protobuf::Arena* arena) const {
  CSOEconGameAccountClient* n = new CSOEconGameAccountClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOEconGameAccountClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconGameAccountClient)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&additional_backpack_slots_, 0, reinterpret_cast<char*>(&duel_ban_expiration_) -
      reinterpret_cast<char*>(&additional_backpack_slots_) + sizeof(duel_ban_expiration_));
    eligible_for_online_play_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconGameAccountClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 additional_backpack_slots = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_additional_backpack_slots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_backpack_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trial_account = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_trial_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trial_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eligible_for_online_play = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_eligible_for_online_play();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eligible_for_online_play_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_to_choose_most_helpful_friend = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_need_to_choose_most_helpful_friend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_to_choose_most_helpful_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_coaches_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_in_coaches_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_coaches_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 trade_ban_expiration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_trade_ban_expiration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &trade_ban_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 duel_ban_expiration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_duel_ban_expiration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &duel_ban_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool made_first_purchase = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_made_first_purchase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &made_first_purchase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconGameAccountClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconGameAccountClient)
  return false;
#undef DO_
}

void CSOEconGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->additional_backpack_slots(), output);
  }

  // optional bool trial_account = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trial_account(), output);
  }

  // optional bool eligible_for_online_play = 3 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->eligible_for_online_play(), output);
  }

  // optional bool need_to_choose_most_helpful_friend = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->need_to_choose_most_helpful_friend(), output);
  }

  // optional bool in_coaches_list = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->in_coaches_list(), output);
  }

  // optional fixed32 trade_ban_expiration = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->trade_ban_expiration(), output);
  }

  // optional fixed32 duel_ban_expiration = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->duel_ban_expiration(), output);
  }

  // optional bool made_first_purchase = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->made_first_purchase(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconGameAccountClient)
}

::google::protobuf::uint8* CSOEconGameAccountClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->additional_backpack_slots(), target);
  }

  // optional bool trial_account = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trial_account(), target);
  }

  // optional bool eligible_for_online_play = 3 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->eligible_for_online_play(), target);
  }

  // optional bool need_to_choose_most_helpful_friend = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->need_to_choose_most_helpful_friend(), target);
  }

  // optional bool in_coaches_list = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->in_coaches_list(), target);
  }

  // optional fixed32 trade_ban_expiration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->trade_ban_expiration(), target);
  }

  // optional fixed32 duel_ban_expiration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->duel_ban_expiration(), target);
  }

  // optional bool made_first_purchase = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->made_first_purchase(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconGameAccountClient)
  return target;
}

size_t CSOEconGameAccountClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconGameAccountClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 additional_backpack_slots = 1 [default = 0];
    if (has_additional_backpack_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additional_backpack_slots());
    }

    // optional bool trial_account = 2 [default = false];
    if (has_trial_account()) {
      total_size += 1 + 1;
    }

    // optional bool need_to_choose_most_helpful_friend = 4;
    if (has_need_to_choose_most_helpful_friend()) {
      total_size += 1 + 1;
    }

    // optional bool in_coaches_list = 5;
    if (has_in_coaches_list()) {
      total_size += 1 + 1;
    }

    // optional bool made_first_purchase = 9 [default = false];
    if (has_made_first_purchase()) {
      total_size += 1 + 1;
    }

    // optional fixed32 trade_ban_expiration = 6;
    if (has_trade_ban_expiration()) {
      total_size += 1 + 4;
    }

    // optional fixed32 duel_ban_expiration = 7;
    if (has_duel_ban_expiration()) {
      total_size += 1 + 4;
    }

    // optional bool eligible_for_online_play = 3 [default = true];
    if (has_eligible_for_online_play()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconGameAccountClient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconGameAccountClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconGameAccountClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconGameAccountClient)
    MergeFrom(*source);
  }
}

void CSOEconGameAccountClient::MergeFrom(const CSOEconGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      additional_backpack_slots_ = from.additional_backpack_slots_;
    }
    if (cached_has_bits & 0x00000002u) {
      trial_account_ = from.trial_account_;
    }
    if (cached_has_bits & 0x00000004u) {
      need_to_choose_most_helpful_friend_ = from.need_to_choose_most_helpful_friend_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_coaches_list_ = from.in_coaches_list_;
    }
    if (cached_has_bits & 0x00000010u) {
      made_first_purchase_ = from.made_first_purchase_;
    }
    if (cached_has_bits & 0x00000020u) {
      trade_ban_expiration_ = from.trade_ban_expiration_;
    }
    if (cached_has_bits & 0x00000040u) {
      duel_ban_expiration_ = from.duel_ban_expiration_;
    }
    if (cached_has_bits & 0x00000080u) {
      eligible_for_online_play_ = from.eligible_for_online_play_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconGameAccountClient::CopyFrom(const CSOEconGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconGameAccountClient::IsInitialized() const {
  return true;
}

void CSOEconGameAccountClient::Swap(CSOEconGameAccountClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconGameAccountClient::InternalSwap(CSOEconGameAccountClient* other) {
  std::swap(additional_backpack_slots_, other->additional_backpack_slots_);
  std::swap(trial_account_, other->trial_account_);
  std::swap(need_to_choose_most_helpful_friend_, other->need_to_choose_most_helpful_friend_);
  std::swap(in_coaches_list_, other->in_coaches_list_);
  std::swap(made_first_purchase_, other->made_first_purchase_);
  std::swap(trade_ban_expiration_, other->trade_ban_expiration_);
  std::swap(duel_ban_expiration_, other->duel_ban_expiration_);
  std::swap(eligible_for_online_play_, other->eligible_for_online_play_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOEconGameAccountClient::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOEconGameAccountClient

// optional uint32 additional_backpack_slots = 1 [default = 0];
bool CSOEconGameAccountClient::has_additional_backpack_slots() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOEconGameAccountClient::set_has_additional_backpack_slots() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOEconGameAccountClient::clear_has_additional_backpack_slots() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOEconGameAccountClient::clear_additional_backpack_slots() {
  additional_backpack_slots_ = 0u;
  clear_has_additional_backpack_slots();
}
::google::protobuf::uint32 CSOEconGameAccountClient::additional_backpack_slots() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconGameAccountClient.additional_backpack_slots)
  return additional_backpack_slots_;
}
void CSOEconGameAccountClient::set_additional_backpack_slots(::google::protobuf::uint32 value) {
  set_has_additional_backpack_slots();
  additional_backpack_slots_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconGameAccountClient.additional_backpack_slots)
}

// optional bool trial_account = 2 [default = false];
bool CSOEconGameAccountClient::has_trial_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOEconGameAccountClient::set_has_trial_account() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOEconGameAccountClient::clear_has_trial_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOEconGameAccountClient::clear_trial_account() {
  trial_account_ = false;
  clear_has_trial_account();
}
bool CSOEconGameAccountClient::trial_account() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconGameAccountClient.trial_account)
  return trial_account_;
}
void CSOEconGameAccountClient::set_trial_account(bool value) {
  set_has_trial_account();
  trial_account_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconGameAccountClient.trial_account)
}

// optional bool eligible_for_online_play = 3 [default = true];
bool CSOEconGameAccountClient::has_eligible_for_online_play() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSOEconGameAccountClient::set_has_eligible_for_online_play() {
  _has_bits_[0] |= 0x00000080u;
}
void CSOEconGameAccountClient::clear_has_eligible_for_online_play() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSOEconGameAccountClient::clear_eligible_for_online_play() {
  eligible_for_online_play_ = true;
  clear_has_eligible_for_online_play();
}
bool CSOEconGameAccountClient::eligible_for_online_play() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconGameAccountClient.eligible_for_online_play)
  return eligible_for_online_play_;
}
void CSOEconGameAccountClient::set_eligible_for_online_play(bool value) {
  set_has_eligible_for_online_play();
  eligible_for_online_play_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconGameAccountClient.eligible_for_online_play)
}

// optional bool need_to_choose_most_helpful_friend = 4;
bool CSOEconGameAccountClient::has_need_to_choose_most_helpful_friend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOEconGameAccountClient::set_has_need_to_choose_most_helpful_friend() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOEconGameAccountClient::clear_has_need_to_choose_most_helpful_friend() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOEconGameAccountClient::clear_need_to_choose_most_helpful_friend() {
  need_to_choose_most_helpful_friend_ = false;
  clear_has_need_to_choose_most_helpful_friend();
}
bool CSOEconGameAccountClient::need_to_choose_most_helpful_friend() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconGameAccountClient.need_to_choose_most_helpful_friend)
  return need_to_choose_most_helpful_friend_;
}
void CSOEconGameAccountClient::set_need_to_choose_most_helpful_friend(bool value) {
  set_has_need_to_choose_most_helpful_friend();
  need_to_choose_most_helpful_friend_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconGameAccountClient.need_to_choose_most_helpful_friend)
}

// optional bool in_coaches_list = 5;
bool CSOEconGameAccountClient::has_in_coaches_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSOEconGameAccountClient::set_has_in_coaches_list() {
  _has_bits_[0] |= 0x00000008u;
}
void CSOEconGameAccountClient::clear_has_in_coaches_list() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSOEconGameAccountClient::clear_in_coaches_list() {
  in_coaches_list_ = false;
  clear_has_in_coaches_list();
}
bool CSOEconGameAccountClient::in_coaches_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconGameAccountClient.in_coaches_list)
  return in_coaches_list_;
}
void CSOEconGameAccountClient::set_in_coaches_list(bool value) {
  set_has_in_coaches_list();
  in_coaches_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconGameAccountClient.in_coaches_list)
}

// optional fixed32 trade_ban_expiration = 6;
bool CSOEconGameAccountClient::has_trade_ban_expiration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSOEconGameAccountClient::set_has_trade_ban_expiration() {
  _has_bits_[0] |= 0x00000020u;
}
void CSOEconGameAccountClient::clear_has_trade_ban_expiration() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSOEconGameAccountClient::clear_trade_ban_expiration() {
  trade_ban_expiration_ = 0u;
  clear_has_trade_ban_expiration();
}
::google::protobuf::uint32 CSOEconGameAccountClient::trade_ban_expiration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconGameAccountClient.trade_ban_expiration)
  return trade_ban_expiration_;
}
void CSOEconGameAccountClient::set_trade_ban_expiration(::google::protobuf::uint32 value) {
  set_has_trade_ban_expiration();
  trade_ban_expiration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconGameAccountClient.trade_ban_expiration)
}

// optional fixed32 duel_ban_expiration = 7;
bool CSOEconGameAccountClient::has_duel_ban_expiration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSOEconGameAccountClient::set_has_duel_ban_expiration() {
  _has_bits_[0] |= 0x00000040u;
}
void CSOEconGameAccountClient::clear_has_duel_ban_expiration() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSOEconGameAccountClient::clear_duel_ban_expiration() {
  duel_ban_expiration_ = 0u;
  clear_has_duel_ban_expiration();
}
::google::protobuf::uint32 CSOEconGameAccountClient::duel_ban_expiration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconGameAccountClient.duel_ban_expiration)
  return duel_ban_expiration_;
}
void CSOEconGameAccountClient::set_duel_ban_expiration(::google::protobuf::uint32 value) {
  set_has_duel_ban_expiration();
  duel_ban_expiration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconGameAccountClient.duel_ban_expiration)
}

// optional bool made_first_purchase = 9 [default = false];
bool CSOEconGameAccountClient::has_made_first_purchase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSOEconGameAccountClient::set_has_made_first_purchase() {
  _has_bits_[0] |= 0x00000010u;
}
void CSOEconGameAccountClient::clear_has_made_first_purchase() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSOEconGameAccountClient::clear_made_first_purchase() {
  made_first_purchase_ = false;
  clear_has_made_first_purchase();
}
bool CSOEconGameAccountClient::made_first_purchase() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconGameAccountClient.made_first_purchase)
  return made_first_purchase_;
}
void CSOEconGameAccountClient::set_made_first_purchase(bool value) {
  set_has_made_first_purchase();
  made_first_purchase_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconGameAccountClient.made_first_purchase)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOItemCriteriaCondition::kOpFieldNumber;
const int CSOItemCriteriaCondition::kFieldFieldNumber;
const int CSOItemCriteriaCondition::kRequiredFieldNumber;
const int CSOItemCriteriaCondition::kFloatValueFieldNumber;
const int CSOItemCriteriaCondition::kStringValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOItemCriteriaCondition::CSOItemCriteriaCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOItemCriteriaCondition)
}
CSOItemCriteriaCondition::CSOItemCriteriaCondition(const CSOItemCriteriaCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_field()) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&op_, &from.op_,
    reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&op_) + sizeof(float_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOItemCriteriaCondition)
}

void CSOItemCriteriaCondition::SharedCtor() {
  _cached_size_ = 0;
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_, 0, reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&op_) + sizeof(float_value_));
}

CSOItemCriteriaCondition::~CSOItemCriteriaCondition() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOItemCriteriaCondition)
  SharedDtor();
}

void CSOItemCriteriaCondition::SharedDtor() {
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOItemCriteriaCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemCriteriaCondition::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOItemCriteriaCondition& CSOItemCriteriaCondition::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOItemCriteriaCondition* CSOItemCriteriaCondition::New(::google::protobuf::Arena* arena) const {
  CSOItemCriteriaCondition* n = new CSOItemCriteriaCondition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOItemCriteriaCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOItemCriteriaCondition)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_field()) {
      GOOGLE_DCHECK(!field_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*field_.UnsafeRawStringPointer())->clear();
    }
    if (has_string_value()) {
      GOOGLE_DCHECK(!string_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*string_value_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&op_, 0, reinterpret_cast<char*>(&float_value_) -
      reinterpret_cast<char*>(&op_) + sizeof(float_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOItemCriteriaCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOItemCriteriaCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_op();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemCriteriaCondition.field");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool required = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_float_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemCriteriaCondition.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOItemCriteriaCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOItemCriteriaCondition)
  return false;
#undef DO_
}

void CSOItemCriteriaCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOItemCriteriaCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 op = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // optional string field = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemCriteriaCondition.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  // optional bool required = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->required(), output);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_value(), output);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemCriteriaCondition.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->string_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOItemCriteriaCondition)
}

::google::protobuf::uint8* CSOItemCriteriaCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOItemCriteriaCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 op = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // optional string field = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemCriteriaCondition.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  // optional bool required = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->required(), target);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_value(), target);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemCriteriaCondition.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOItemCriteriaCondition)
  return target;
}

size_t CSOItemCriteriaCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOItemCriteriaCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string field = 2;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }

    // optional string string_value = 5;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional bool required = 3;
    if (has_required()) {
      total_size += 1 + 1;
    }

    // optional float float_value = 4;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemCriteriaCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOItemCriteriaCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOItemCriteriaCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOItemCriteriaCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOItemCriteriaCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOItemCriteriaCondition)
    MergeFrom(*source);
  }
}

void CSOItemCriteriaCondition::MergeFrom(const CSOItemCriteriaCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOItemCriteriaCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_field();
      field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_string_value();
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000004u) {
      op_ = from.op_;
    }
    if (cached_has_bits & 0x00000008u) {
      required_ = from.required_;
    }
    if (cached_has_bits & 0x00000010u) {
      float_value_ = from.float_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOItemCriteriaCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOItemCriteriaCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteriaCondition::CopyFrom(const CSOItemCriteriaCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOItemCriteriaCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteriaCondition::IsInitialized() const {
  return true;
}

void CSOItemCriteriaCondition::Swap(CSOItemCriteriaCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOItemCriteriaCondition::InternalSwap(CSOItemCriteriaCondition* other) {
  field_.Swap(&other->field_);
  string_value_.Swap(&other->string_value_);
  std::swap(op_, other->op_);
  std::swap(required_, other->required_);
  std::swap(float_value_, other->float_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOItemCriteriaCondition::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOItemCriteriaCondition

// optional int32 op = 1;
bool CSOItemCriteriaCondition::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOItemCriteriaCondition::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOItemCriteriaCondition::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOItemCriteriaCondition::clear_op() {
  op_ = 0;
  clear_has_op();
}
::google::protobuf::int32 CSOItemCriteriaCondition::op() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteriaCondition.op)
  return op_;
}
void CSOItemCriteriaCondition::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteriaCondition.op)
}

// optional string field = 2;
bool CSOItemCriteriaCondition::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOItemCriteriaCondition::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOItemCriteriaCondition::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOItemCriteriaCondition::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field();
}
const ::std::string& CSOItemCriteriaCondition::field() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteriaCondition.field)
  return field_.GetNoArena();
}
void CSOItemCriteriaCondition::set_field(const ::std::string& value) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteriaCondition.field)
}
#if LANG_CXX11
void CSOItemCriteriaCondition::set_field(::std::string&& value) {
  set_has_field();
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemCriteriaCondition.field)
}
#endif
void CSOItemCriteriaCondition::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemCriteriaCondition.field)
}
void CSOItemCriteriaCondition::set_field(const char* value, size_t size) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemCriteriaCondition.field)
}
::std::string* CSOItemCriteriaCondition::mutable_field() {
  set_has_field();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemCriteriaCondition.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemCriteriaCondition::release_field() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemCriteriaCondition.field)
  clear_has_field();
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemCriteriaCondition::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    set_has_field();
  } else {
    clear_has_field();
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemCriteriaCondition.field)
}

// optional bool required = 3;
bool CSOItemCriteriaCondition::has_required() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSOItemCriteriaCondition::set_has_required() {
  _has_bits_[0] |= 0x00000008u;
}
void CSOItemCriteriaCondition::clear_has_required() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSOItemCriteriaCondition::clear_required() {
  required_ = false;
  clear_has_required();
}
bool CSOItemCriteriaCondition::required() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteriaCondition.required)
  return required_;
}
void CSOItemCriteriaCondition::set_required(bool value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteriaCondition.required)
}

// optional float float_value = 4;
bool CSOItemCriteriaCondition::has_float_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSOItemCriteriaCondition::set_has_float_value() {
  _has_bits_[0] |= 0x00000010u;
}
void CSOItemCriteriaCondition::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSOItemCriteriaCondition::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
float CSOItemCriteriaCondition::float_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteriaCondition.float_value)
  return float_value_;
}
void CSOItemCriteriaCondition::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteriaCondition.float_value)
}

// optional string string_value = 5;
bool CSOItemCriteriaCondition::has_string_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOItemCriteriaCondition::set_has_string_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOItemCriteriaCondition::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOItemCriteriaCondition::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
const ::std::string& CSOItemCriteriaCondition::string_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteriaCondition.string_value)
  return string_value_.GetNoArena();
}
void CSOItemCriteriaCondition::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteriaCondition.string_value)
}
#if LANG_CXX11
void CSOItemCriteriaCondition::set_string_value(::std::string&& value) {
  set_has_string_value();
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemCriteriaCondition.string_value)
}
#endif
void CSOItemCriteriaCondition::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemCriteriaCondition.string_value)
}
void CSOItemCriteriaCondition::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemCriteriaCondition.string_value)
}
::std::string* CSOItemCriteriaCondition::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemCriteriaCondition.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemCriteriaCondition::release_string_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemCriteriaCondition.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemCriteriaCondition::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemCriteriaCondition.string_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOItemCriteria::kItemLevelFieldNumber;
const int CSOItemCriteria::kItemQualityFieldNumber;
const int CSOItemCriteria::kItemLevelSetFieldNumber;
const int CSOItemCriteria::kItemQualitySetFieldNumber;
const int CSOItemCriteria::kInitialInventoryFieldNumber;
const int CSOItemCriteria::kInitialQuantityFieldNumber;
const int CSOItemCriteria::kIgnoreEnabledFlagFieldNumber;
const int CSOItemCriteria::kConditionsFieldNumber;
const int CSOItemCriteria::kRecentOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOItemCriteria::CSOItemCriteria()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOItemCriteria)
}
CSOItemCriteria::CSOItemCriteria(const CSOItemCriteria& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_level_, &from.item_level_,
    reinterpret_cast<char*>(&recent_only_) -
    reinterpret_cast<char*>(&item_level_) + sizeof(recent_only_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOItemCriteria)
}

void CSOItemCriteria::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_level_, 0, reinterpret_cast<char*>(&recent_only_) -
    reinterpret_cast<char*>(&item_level_) + sizeof(recent_only_));
}

CSOItemCriteria::~CSOItemCriteria() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOItemCriteria)
  SharedDtor();
}

void CSOItemCriteria::SharedDtor() {
}

void CSOItemCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemCriteria::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOItemCriteria& CSOItemCriteria::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOItemCriteria* CSOItemCriteria::New(::google::protobuf::Arena* arena) const {
  CSOItemCriteria* n = new CSOItemCriteria;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOItemCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOItemCriteria)
  conditions_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&item_level_, 0, reinterpret_cast<char*>(&recent_only_) -
      reinterpret_cast<char*>(&item_level_) + sizeof(recent_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOItemCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOItemCriteria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 item_quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool item_level_set = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_item_level_set();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_level_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool item_quality_set = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_item_quality_set();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_quality_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_inventory = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_initial_inventory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_inventory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_quantity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_initial_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ignore_enabled_flag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_ignore_enabled_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_enabled_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool recent_only = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_recent_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recent_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOItemCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOItemCriteria)
  return false;
#undef DO_
}

void CSOItemCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOItemCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_level(), output);
  }

  // optional int32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_quality(), output);
  }

  // optional bool item_level_set = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->item_level_set(), output);
  }

  // optional bool item_quality_set = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->item_quality_set(), output);
  }

  // optional uint32 initial_inventory = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->initial_inventory(), output);
  }

  // optional uint32 initial_quantity = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->initial_quantity(), output);
  }

  // optional bool ignore_enabled_flag = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ignore_enabled_flag(), output);
  }

  // repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
  for (unsigned int i = 0, n = this->conditions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->conditions(i), output);
  }

  // optional bool recent_only = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->recent_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOItemCriteria)
}

::google::protobuf::uint8* CSOItemCriteria::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOItemCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_level(), target);
  }

  // optional int32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_quality(), target);
  }

  // optional bool item_level_set = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->item_level_set(), target);
  }

  // optional bool item_quality_set = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->item_quality_set(), target);
  }

  // optional uint32 initial_inventory = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->initial_inventory(), target);
  }

  // optional uint32 initial_quantity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->initial_quantity(), target);
  }

  // optional bool ignore_enabled_flag = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ignore_enabled_flag(), target);
  }

  // repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
  for (unsigned int i = 0, n = this->conditions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->conditions(i), deterministic, target);
  }

  // optional bool recent_only = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->recent_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOItemCriteria)
  return target;
}

size_t CSOItemCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOItemCriteria)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
  {
    unsigned int count = this->conditions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditions(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 item_level = 1;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }

    // optional int32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_quality());
    }

    // optional uint32 initial_inventory = 5;
    if (has_initial_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_inventory());
    }

    // optional uint32 initial_quantity = 6;
    if (has_initial_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_quantity());
    }

    // optional bool item_level_set = 3;
    if (has_item_level_set()) {
      total_size += 1 + 1;
    }

    // optional bool item_quality_set = 4;
    if (has_item_quality_set()) {
      total_size += 1 + 1;
    }

    // optional bool ignore_enabled_flag = 8;
    if (has_ignore_enabled_flag()) {
      total_size += 1 + 1;
    }

    // optional bool recent_only = 10;
    if (has_recent_only()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemCriteria::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOItemCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOItemCriteria* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOItemCriteria>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOItemCriteria)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOItemCriteria)
    MergeFrom(*source);
  }
}

void CSOItemCriteria::MergeFrom(const CSOItemCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOItemCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      item_level_ = from.item_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_inventory_ = from.initial_inventory_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_quantity_ = from.initial_quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_level_set_ = from.item_level_set_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_quality_set_ = from.item_quality_set_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_enabled_flag_ = from.ignore_enabled_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      recent_only_ = from.recent_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOItemCriteria::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOItemCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteria::CopyFrom(const CSOItemCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOItemCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteria::IsInitialized() const {
  return true;
}

void CSOItemCriteria::Swap(CSOItemCriteria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOItemCriteria::InternalSwap(CSOItemCriteria* other) {
  conditions_.InternalSwap(&other->conditions_);
  std::swap(item_level_, other->item_level_);
  std::swap(item_quality_, other->item_quality_);
  std::swap(initial_inventory_, other->initial_inventory_);
  std::swap(initial_quantity_, other->initial_quantity_);
  std::swap(item_level_set_, other->item_level_set_);
  std::swap(item_quality_set_, other->item_quality_set_);
  std::swap(ignore_enabled_flag_, other->ignore_enabled_flag_);
  std::swap(recent_only_, other->recent_only_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOItemCriteria::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOItemCriteria

// optional uint32 item_level = 1;
bool CSOItemCriteria::has_item_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOItemCriteria::set_has_item_level() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOItemCriteria::clear_has_item_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOItemCriteria::clear_item_level() {
  item_level_ = 0u;
  clear_has_item_level();
}
::google::protobuf::uint32 CSOItemCriteria::item_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteria.item_level)
  return item_level_;
}
void CSOItemCriteria::set_item_level(::google::protobuf::uint32 value) {
  set_has_item_level();
  item_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteria.item_level)
}

// optional int32 item_quality = 2;
bool CSOItemCriteria::has_item_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOItemCriteria::set_has_item_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOItemCriteria::clear_has_item_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOItemCriteria::clear_item_quality() {
  item_quality_ = 0;
  clear_has_item_quality();
}
::google::protobuf::int32 CSOItemCriteria::item_quality() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteria.item_quality)
  return item_quality_;
}
void CSOItemCriteria::set_item_quality(::google::protobuf::int32 value) {
  set_has_item_quality();
  item_quality_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteria.item_quality)
}

// optional bool item_level_set = 3;
bool CSOItemCriteria::has_item_level_set() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSOItemCriteria::set_has_item_level_set() {
  _has_bits_[0] |= 0x00000010u;
}
void CSOItemCriteria::clear_has_item_level_set() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSOItemCriteria::clear_item_level_set() {
  item_level_set_ = false;
  clear_has_item_level_set();
}
bool CSOItemCriteria::item_level_set() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteria.item_level_set)
  return item_level_set_;
}
void CSOItemCriteria::set_item_level_set(bool value) {
  set_has_item_level_set();
  item_level_set_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteria.item_level_set)
}

// optional bool item_quality_set = 4;
bool CSOItemCriteria::has_item_quality_set() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSOItemCriteria::set_has_item_quality_set() {
  _has_bits_[0] |= 0x00000020u;
}
void CSOItemCriteria::clear_has_item_quality_set() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSOItemCriteria::clear_item_quality_set() {
  item_quality_set_ = false;
  clear_has_item_quality_set();
}
bool CSOItemCriteria::item_quality_set() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteria.item_quality_set)
  return item_quality_set_;
}
void CSOItemCriteria::set_item_quality_set(bool value) {
  set_has_item_quality_set();
  item_quality_set_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteria.item_quality_set)
}

// optional uint32 initial_inventory = 5;
bool CSOItemCriteria::has_initial_inventory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOItemCriteria::set_has_initial_inventory() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOItemCriteria::clear_has_initial_inventory() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOItemCriteria::clear_initial_inventory() {
  initial_inventory_ = 0u;
  clear_has_initial_inventory();
}
::google::protobuf::uint32 CSOItemCriteria::initial_inventory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteria.initial_inventory)
  return initial_inventory_;
}
void CSOItemCriteria::set_initial_inventory(::google::protobuf::uint32 value) {
  set_has_initial_inventory();
  initial_inventory_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteria.initial_inventory)
}

// optional uint32 initial_quantity = 6;
bool CSOItemCriteria::has_initial_quantity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSOItemCriteria::set_has_initial_quantity() {
  _has_bits_[0] |= 0x00000008u;
}
void CSOItemCriteria::clear_has_initial_quantity() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSOItemCriteria::clear_initial_quantity() {
  initial_quantity_ = 0u;
  clear_has_initial_quantity();
}
::google::protobuf::uint32 CSOItemCriteria::initial_quantity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteria.initial_quantity)
  return initial_quantity_;
}
void CSOItemCriteria::set_initial_quantity(::google::protobuf::uint32 value) {
  set_has_initial_quantity();
  initial_quantity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteria.initial_quantity)
}

// optional bool ignore_enabled_flag = 8;
bool CSOItemCriteria::has_ignore_enabled_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSOItemCriteria::set_has_ignore_enabled_flag() {
  _has_bits_[0] |= 0x00000040u;
}
void CSOItemCriteria::clear_has_ignore_enabled_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSOItemCriteria::clear_ignore_enabled_flag() {
  ignore_enabled_flag_ = false;
  clear_has_ignore_enabled_flag();
}
bool CSOItemCriteria::ignore_enabled_flag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteria.ignore_enabled_flag)
  return ignore_enabled_flag_;
}
void CSOItemCriteria::set_ignore_enabled_flag(bool value) {
  set_has_ignore_enabled_flag();
  ignore_enabled_flag_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteria.ignore_enabled_flag)
}

// repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
int CSOItemCriteria::conditions_size() const {
  return conditions_.size();
}
void CSOItemCriteria::clear_conditions() {
  conditions_.Clear();
}
const ::proto::dota::CSOItemCriteriaCondition& CSOItemCriteria::conditions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteria.conditions)
  return conditions_.Get(index);
}
::proto::dota::CSOItemCriteriaCondition* CSOItemCriteria::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemCriteria.conditions)
  return conditions_.Mutable(index);
}
::proto::dota::CSOItemCriteriaCondition* CSOItemCriteria::add_conditions() {
  // @@protoc_insertion_point(field_add:proto.dota.CSOItemCriteria.conditions)
  return conditions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSOItemCriteriaCondition >*
CSOItemCriteria::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSOItemCriteria.conditions)
  return &conditions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOItemCriteriaCondition >&
CSOItemCriteria::conditions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSOItemCriteria.conditions)
  return conditions_;
}

// optional bool recent_only = 10;
bool CSOItemCriteria::has_recent_only() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSOItemCriteria::set_has_recent_only() {
  _has_bits_[0] |= 0x00000080u;
}
void CSOItemCriteria::clear_has_recent_only() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSOItemCriteria::clear_recent_only() {
  recent_only_ = false;
  clear_has_recent_only();
}
bool CSOItemCriteria::recent_only() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemCriteria.recent_only)
  return recent_only_;
}
void CSOItemCriteria::set_recent_only(bool value) {
  set_has_recent_only();
  recent_only_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemCriteria.recent_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOItemRecipe::kDefIndexFieldNumber;
const int CSOItemRecipe::kNameFieldNumber;
const int CSOItemRecipe::kNAFieldNumber;
const int CSOItemRecipe::kDescInputsFieldNumber;
const int CSOItemRecipe::kDescOutputsFieldNumber;
const int CSOItemRecipe::kDiAFieldNumber;
const int CSOItemRecipe::kDiBFieldNumber;
const int CSOItemRecipe::kDiCFieldNumber;
const int CSOItemRecipe::kDoAFieldNumber;
const int CSOItemRecipe::kDoBFieldNumber;
const int CSOItemRecipe::kDoCFieldNumber;
const int CSOItemRecipe::kRequiresAllSameClassFieldNumber;
const int CSOItemRecipe::kRequiresAllSameSlotFieldNumber;
const int CSOItemRecipe::kClassUsageForOutputFieldNumber;
const int CSOItemRecipe::kSlotUsageForOutputFieldNumber;
const int CSOItemRecipe::kSetForOutputFieldNumber;
const int CSOItemRecipe::kInputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kOutputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kInputItemDupeCountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOItemRecipe::CSOItemRecipe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOItemRecipe)
}
CSOItemRecipe::CSOItemRecipe(const CSOItemRecipe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      input_items_criteria_(from.input_items_criteria_),
      output_items_criteria_(from.output_items_criteria_),
      input_item_dupe_counts_(from.input_item_dupe_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  n_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_n_a()) {
    n_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.n_a_);
  }
  desc_inputs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc_inputs()) {
    desc_inputs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_inputs_);
  }
  desc_outputs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc_outputs()) {
    desc_outputs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_outputs_);
  }
  di_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_di_a()) {
    di_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_a_);
  }
  di_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_di_b()) {
    di_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_b_);
  }
  di_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_di_c()) {
    di_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_c_);
  }
  do_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_do_a()) {
    do_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_a_);
  }
  do_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_do_b()) {
    do_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_b_);
  }
  do_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_do_c()) {
    do_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_c_);
  }
  ::memcpy(&def_index_, &from.def_index_,
    reinterpret_cast<char*>(&set_for_output_) -
    reinterpret_cast<char*>(&def_index_) + sizeof(set_for_output_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOItemRecipe)
}

void CSOItemRecipe::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  n_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_inputs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_outputs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&def_index_, 0, reinterpret_cast<char*>(&set_for_output_) -
    reinterpret_cast<char*>(&def_index_) + sizeof(set_for_output_));
}

CSOItemRecipe::~CSOItemRecipe() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOItemRecipe)
  SharedDtor();
}

void CSOItemRecipe::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  n_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_inputs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_outputs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_c_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_c_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOItemRecipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemRecipe::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOItemRecipe& CSOItemRecipe::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOItemRecipe* CSOItemRecipe::New(::google::protobuf::Arena* arena) const {
  CSOItemRecipe* n = new CSOItemRecipe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOItemRecipe::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOItemRecipe)
  input_items_criteria_.Clear();
  output_items_criteria_.Clear();
  input_item_dupe_counts_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_n_a()) {
      GOOGLE_DCHECK(!n_a_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*n_a_.UnsafeRawStringPointer())->clear();
    }
    if (has_desc_inputs()) {
      GOOGLE_DCHECK(!desc_inputs_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_inputs_.UnsafeRawStringPointer())->clear();
    }
    if (has_desc_outputs()) {
      GOOGLE_DCHECK(!desc_outputs_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_outputs_.UnsafeRawStringPointer())->clear();
    }
    if (has_di_a()) {
      GOOGLE_DCHECK(!di_a_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*di_a_.UnsafeRawStringPointer())->clear();
    }
    if (has_di_b()) {
      GOOGLE_DCHECK(!di_b_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*di_b_.UnsafeRawStringPointer())->clear();
    }
    if (has_di_c()) {
      GOOGLE_DCHECK(!di_c_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*di_c_.UnsafeRawStringPointer())->clear();
    }
    if (has_do_a()) {
      GOOGLE_DCHECK(!do_a_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*do_a_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_do_b()) {
      GOOGLE_DCHECK(!do_b_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*do_b_.UnsafeRawStringPointer())->clear();
    }
    if (has_do_c()) {
      GOOGLE_DCHECK(!do_c_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*do_c_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 64512u) {
    ::memset(&def_index_, 0, reinterpret_cast<char*>(&set_for_output_) -
      reinterpret_cast<char*>(&def_index_) + sizeof(set_for_output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOItemRecipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOItemRecipe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string n_a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_n_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->n_a().data(), this->n_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.n_a");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc_inputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_inputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc_inputs().data(), this->desc_inputs().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.desc_inputs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc_outputs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_outputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc_outputs().data(), this->desc_outputs().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.desc_outputs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string di_a = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->di_a().data(), this->di_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.di_a");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string di_b = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->di_b().data(), this->di_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.di_b");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string di_c = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->di_c().data(), this->di_c().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.di_c");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string do_a = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->do_a().data(), this->do_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.do_a");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string do_b = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->do_b().data(), this->do_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.do_b");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string do_c = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->do_c().data(), this->do_c().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.do_c");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_all_same_class = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_requires_all_same_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_all_same_slot = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_requires_all_same_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 class_usage_for_output = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_class_usage_for_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_usage_for_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 slot_usage_for_output = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_slot_usage_for_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_usage_for_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 set_for_output = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_set_for_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_for_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_items_criteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_items_criteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 input_item_dupe_counts = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176u, input, this->mutable_input_item_dupe_counts())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(178u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_input_item_dupe_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOItemRecipe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOItemRecipe)
  return false;
#undef DO_
}

void CSOItemRecipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOItemRecipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string n_a = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->n_a().data(), this->n_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.n_a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->n_a(), output);
  }

  // optional string desc_inputs = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc_inputs().data(), this->desc_inputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.desc_inputs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc_inputs(), output);
  }

  // optional string desc_outputs = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc_outputs().data(), this->desc_outputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.desc_outputs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->desc_outputs(), output);
  }

  // optional string di_a = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_a().data(), this->di_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->di_a(), output);
  }

  // optional string di_b = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_b().data(), this->di_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->di_b(), output);
  }

  // optional string di_c = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_c().data(), this->di_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_c");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->di_c(), output);
  }

  // optional string do_a = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_a().data(), this->do_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->do_a(), output);
  }

  // optional string do_b = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_b().data(), this->do_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->do_b(), output);
  }

  // optional string do_c = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_c().data(), this->do_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_c");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->do_c(), output);
  }

  // optional bool requires_all_same_class = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->requires_all_same_class(), output);
  }

  // optional bool requires_all_same_slot = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->requires_all_same_slot(), output);
  }

  // optional int32 class_usage_for_output = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->class_usage_for_output(), output);
  }

  // optional int32 slot_usage_for_output = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->slot_usage_for_output(), output);
  }

  // optional int32 set_for_output = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->set_for_output(), output);
  }

  // repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
  for (unsigned int i = 0, n = this->input_items_criteria_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->input_items_criteria(i), output);
  }

  // repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
  for (unsigned int i = 0, n = this->output_items_criteria_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->output_items_criteria(i), output);
  }

  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0, n = this->input_item_dupe_counts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->input_item_dupe_counts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOItemRecipe)
}

::google::protobuf::uint8* CSOItemRecipe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOItemRecipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string n_a = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->n_a().data(), this->n_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.n_a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->n_a(), target);
  }

  // optional string desc_inputs = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc_inputs().data(), this->desc_inputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.desc_inputs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc_inputs(), target);
  }

  // optional string desc_outputs = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc_outputs().data(), this->desc_outputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.desc_outputs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc_outputs(), target);
  }

  // optional string di_a = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_a().data(), this->di_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->di_a(), target);
  }

  // optional string di_b = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_b().data(), this->di_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->di_b(), target);
  }

  // optional string di_c = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_c().data(), this->di_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_c");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->di_c(), target);
  }

  // optional string do_a = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_a().data(), this->do_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->do_a(), target);
  }

  // optional string do_b = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_b().data(), this->do_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->do_b(), target);
  }

  // optional string do_c = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_c().data(), this->do_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_c");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->do_c(), target);
  }

  // optional bool requires_all_same_class = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->requires_all_same_class(), target);
  }

  // optional bool requires_all_same_slot = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->requires_all_same_slot(), target);
  }

  // optional int32 class_usage_for_output = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->class_usage_for_output(), target);
  }

  // optional int32 slot_usage_for_output = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->slot_usage_for_output(), target);
  }

  // optional int32 set_for_output = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->set_for_output(), target);
  }

  // repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
  for (unsigned int i = 0, n = this->input_items_criteria_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->input_items_criteria(i), deterministic, target);
  }

  // repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
  for (unsigned int i = 0, n = this->output_items_criteria_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->output_items_criteria(i), deterministic, target);
  }

  // repeated uint32 input_item_dupe_counts = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(22, this->input_item_dupe_counts_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOItemRecipe)
  return target;
}

size_t CSOItemRecipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOItemRecipe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
  {
    unsigned int count = this->input_items_criteria_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_items_criteria(i));
    }
  }

  // repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
  {
    unsigned int count = this->output_items_criteria_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output_items_criteria(i));
    }
  }

  // repeated uint32 input_item_dupe_counts = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->input_item_dupe_counts_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->input_item_dupe_counts_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string n_a = 3;
    if (has_n_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->n_a());
    }

    // optional string desc_inputs = 4;
    if (has_desc_inputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_inputs());
    }

    // optional string desc_outputs = 5;
    if (has_desc_outputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_outputs());
    }

    // optional string di_a = 6;
    if (has_di_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_a());
    }

    // optional string di_b = 7;
    if (has_di_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_b());
    }

    // optional string di_c = 8;
    if (has_di_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_c());
    }

    // optional string do_a = 9;
    if (has_do_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_a());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string do_b = 10;
    if (has_do_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_b());
    }

    // optional string do_c = 11;
    if (has_do_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_c());
    }

    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional bool requires_all_same_class = 12;
    if (has_requires_all_same_class()) {
      total_size += 1 + 1;
    }

    // optional bool requires_all_same_slot = 13;
    if (has_requires_all_same_slot()) {
      total_size += 1 + 1;
    }

    // optional int32 class_usage_for_output = 14;
    if (has_class_usage_for_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_usage_for_output());
    }

    // optional int32 slot_usage_for_output = 15;
    if (has_slot_usage_for_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_usage_for_output());
    }

    // optional int32 set_for_output = 16;
    if (has_set_for_output()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_for_output());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemRecipe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOItemRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOItemRecipe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOItemRecipe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOItemRecipe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOItemRecipe)
    MergeFrom(*source);
  }
}

void CSOItemRecipe::MergeFrom(const CSOItemRecipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOItemRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_items_criteria_.MergeFrom(from.input_items_criteria_);
  output_items_criteria_.MergeFrom(from.output_items_criteria_);
  input_item_dupe_counts_.MergeFrom(from.input_item_dupe_counts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_n_a();
      n_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.n_a_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_desc_inputs();
      desc_inputs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_inputs_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_desc_outputs();
      desc_outputs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_outputs_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_di_a();
      di_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_a_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_di_b();
      di_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_b_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_di_c();
      di_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_c_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_do_a();
      do_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_a_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_do_b();
      do_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_b_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_do_c();
      do_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_c_);
    }
    if (cached_has_bits & 0x00000400u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      requires_all_same_class_ = from.requires_all_same_class_;
    }
    if (cached_has_bits & 0x00001000u) {
      requires_all_same_slot_ = from.requires_all_same_slot_;
    }
    if (cached_has_bits & 0x00002000u) {
      class_usage_for_output_ = from.class_usage_for_output_;
    }
    if (cached_has_bits & 0x00004000u) {
      slot_usage_for_output_ = from.slot_usage_for_output_;
    }
    if (cached_has_bits & 0x00008000u) {
      set_for_output_ = from.set_for_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOItemRecipe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOItemRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemRecipe::CopyFrom(const CSOItemRecipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOItemRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemRecipe::IsInitialized() const {
  return true;
}

void CSOItemRecipe::Swap(CSOItemRecipe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOItemRecipe::InternalSwap(CSOItemRecipe* other) {
  input_items_criteria_.InternalSwap(&other->input_items_criteria_);
  output_items_criteria_.InternalSwap(&other->output_items_criteria_);
  input_item_dupe_counts_.InternalSwap(&other->input_item_dupe_counts_);
  name_.Swap(&other->name_);
  n_a_.Swap(&other->n_a_);
  desc_inputs_.Swap(&other->desc_inputs_);
  desc_outputs_.Swap(&other->desc_outputs_);
  di_a_.Swap(&other->di_a_);
  di_b_.Swap(&other->di_b_);
  di_c_.Swap(&other->di_c_);
  do_a_.Swap(&other->do_a_);
  do_b_.Swap(&other->do_b_);
  do_c_.Swap(&other->do_c_);
  std::swap(def_index_, other->def_index_);
  std::swap(requires_all_same_class_, other->requires_all_same_class_);
  std::swap(requires_all_same_slot_, other->requires_all_same_slot_);
  std::swap(class_usage_for_output_, other->class_usage_for_output_);
  std::swap(slot_usage_for_output_, other->slot_usage_for_output_);
  std::swap(set_for_output_, other->set_for_output_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOItemRecipe::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOItemRecipe

// optional uint32 def_index = 1;
bool CSOItemRecipe::has_def_index() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSOItemRecipe::set_has_def_index() {
  _has_bits_[0] |= 0x00000400u;
}
void CSOItemRecipe::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSOItemRecipe::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
::google::protobuf::uint32 CSOItemRecipe::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.def_index)
  return def_index_;
}
void CSOItemRecipe::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.def_index)
}

// optional string name = 2;
bool CSOItemRecipe::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOItemRecipe::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOItemRecipe::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOItemRecipe::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CSOItemRecipe::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.name)
  return name_.GetNoArena();
}
void CSOItemRecipe::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.name)
}
#if LANG_CXX11
void CSOItemRecipe::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.name)
}
#endif
void CSOItemRecipe::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.name)
}
void CSOItemRecipe::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.name)
}
::std::string* CSOItemRecipe::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.name)
}

// optional string n_a = 3;
bool CSOItemRecipe::has_n_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOItemRecipe::set_has_n_a() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOItemRecipe::clear_has_n_a() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOItemRecipe::clear_n_a() {
  n_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_n_a();
}
const ::std::string& CSOItemRecipe::n_a() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.n_a)
  return n_a_.GetNoArena();
}
void CSOItemRecipe::set_n_a(const ::std::string& value) {
  set_has_n_a();
  n_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.n_a)
}
#if LANG_CXX11
void CSOItemRecipe::set_n_a(::std::string&& value) {
  set_has_n_a();
  n_a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.n_a)
}
#endif
void CSOItemRecipe::set_n_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_n_a();
  n_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.n_a)
}
void CSOItemRecipe::set_n_a(const char* value, size_t size) {
  set_has_n_a();
  n_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.n_a)
}
::std::string* CSOItemRecipe::mutable_n_a() {
  set_has_n_a();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.n_a)
  return n_a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_n_a() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.n_a)
  clear_has_n_a();
  return n_a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_n_a(::std::string* n_a) {
  if (n_a != NULL) {
    set_has_n_a();
  } else {
    clear_has_n_a();
  }
  n_a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), n_a);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.n_a)
}

// optional string desc_inputs = 4;
bool CSOItemRecipe::has_desc_inputs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOItemRecipe::set_has_desc_inputs() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOItemRecipe::clear_has_desc_inputs() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOItemRecipe::clear_desc_inputs() {
  desc_inputs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc_inputs();
}
const ::std::string& CSOItemRecipe::desc_inputs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.desc_inputs)
  return desc_inputs_.GetNoArena();
}
void CSOItemRecipe::set_desc_inputs(const ::std::string& value) {
  set_has_desc_inputs();
  desc_inputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.desc_inputs)
}
#if LANG_CXX11
void CSOItemRecipe::set_desc_inputs(::std::string&& value) {
  set_has_desc_inputs();
  desc_inputs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.desc_inputs)
}
#endif
void CSOItemRecipe::set_desc_inputs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc_inputs();
  desc_inputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.desc_inputs)
}
void CSOItemRecipe::set_desc_inputs(const char* value, size_t size) {
  set_has_desc_inputs();
  desc_inputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.desc_inputs)
}
::std::string* CSOItemRecipe::mutable_desc_inputs() {
  set_has_desc_inputs();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.desc_inputs)
  return desc_inputs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_desc_inputs() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.desc_inputs)
  clear_has_desc_inputs();
  return desc_inputs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_desc_inputs(::std::string* desc_inputs) {
  if (desc_inputs != NULL) {
    set_has_desc_inputs();
  } else {
    clear_has_desc_inputs();
  }
  desc_inputs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc_inputs);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.desc_inputs)
}

// optional string desc_outputs = 5;
bool CSOItemRecipe::has_desc_outputs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSOItemRecipe::set_has_desc_outputs() {
  _has_bits_[0] |= 0x00000008u;
}
void CSOItemRecipe::clear_has_desc_outputs() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSOItemRecipe::clear_desc_outputs() {
  desc_outputs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc_outputs();
}
const ::std::string& CSOItemRecipe::desc_outputs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.desc_outputs)
  return desc_outputs_.GetNoArena();
}
void CSOItemRecipe::set_desc_outputs(const ::std::string& value) {
  set_has_desc_outputs();
  desc_outputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.desc_outputs)
}
#if LANG_CXX11
void CSOItemRecipe::set_desc_outputs(::std::string&& value) {
  set_has_desc_outputs();
  desc_outputs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.desc_outputs)
}
#endif
void CSOItemRecipe::set_desc_outputs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc_outputs();
  desc_outputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.desc_outputs)
}
void CSOItemRecipe::set_desc_outputs(const char* value, size_t size) {
  set_has_desc_outputs();
  desc_outputs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.desc_outputs)
}
::std::string* CSOItemRecipe::mutable_desc_outputs() {
  set_has_desc_outputs();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.desc_outputs)
  return desc_outputs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_desc_outputs() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.desc_outputs)
  clear_has_desc_outputs();
  return desc_outputs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_desc_outputs(::std::string* desc_outputs) {
  if (desc_outputs != NULL) {
    set_has_desc_outputs();
  } else {
    clear_has_desc_outputs();
  }
  desc_outputs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc_outputs);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.desc_outputs)
}

// optional string di_a = 6;
bool CSOItemRecipe::has_di_a() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSOItemRecipe::set_has_di_a() {
  _has_bits_[0] |= 0x00000010u;
}
void CSOItemRecipe::clear_has_di_a() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSOItemRecipe::clear_di_a() {
  di_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_di_a();
}
const ::std::string& CSOItemRecipe::di_a() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.di_a)
  return di_a_.GetNoArena();
}
void CSOItemRecipe::set_di_a(const ::std::string& value) {
  set_has_di_a();
  di_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.di_a)
}
#if LANG_CXX11
void CSOItemRecipe::set_di_a(::std::string&& value) {
  set_has_di_a();
  di_a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.di_a)
}
#endif
void CSOItemRecipe::set_di_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_di_a();
  di_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.di_a)
}
void CSOItemRecipe::set_di_a(const char* value, size_t size) {
  set_has_di_a();
  di_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.di_a)
}
::std::string* CSOItemRecipe::mutable_di_a() {
  set_has_di_a();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.di_a)
  return di_a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_di_a() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.di_a)
  clear_has_di_a();
  return di_a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_di_a(::std::string* di_a) {
  if (di_a != NULL) {
    set_has_di_a();
  } else {
    clear_has_di_a();
  }
  di_a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), di_a);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.di_a)
}

// optional string di_b = 7;
bool CSOItemRecipe::has_di_b() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSOItemRecipe::set_has_di_b() {
  _has_bits_[0] |= 0x00000020u;
}
void CSOItemRecipe::clear_has_di_b() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSOItemRecipe::clear_di_b() {
  di_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_di_b();
}
const ::std::string& CSOItemRecipe::di_b() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.di_b)
  return di_b_.GetNoArena();
}
void CSOItemRecipe::set_di_b(const ::std::string& value) {
  set_has_di_b();
  di_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.di_b)
}
#if LANG_CXX11
void CSOItemRecipe::set_di_b(::std::string&& value) {
  set_has_di_b();
  di_b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.di_b)
}
#endif
void CSOItemRecipe::set_di_b(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_di_b();
  di_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.di_b)
}
void CSOItemRecipe::set_di_b(const char* value, size_t size) {
  set_has_di_b();
  di_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.di_b)
}
::std::string* CSOItemRecipe::mutable_di_b() {
  set_has_di_b();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.di_b)
  return di_b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_di_b() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.di_b)
  clear_has_di_b();
  return di_b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_di_b(::std::string* di_b) {
  if (di_b != NULL) {
    set_has_di_b();
  } else {
    clear_has_di_b();
  }
  di_b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), di_b);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.di_b)
}

// optional string di_c = 8;
bool CSOItemRecipe::has_di_c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSOItemRecipe::set_has_di_c() {
  _has_bits_[0] |= 0x00000040u;
}
void CSOItemRecipe::clear_has_di_c() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSOItemRecipe::clear_di_c() {
  di_c_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_di_c();
}
const ::std::string& CSOItemRecipe::di_c() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.di_c)
  return di_c_.GetNoArena();
}
void CSOItemRecipe::set_di_c(const ::std::string& value) {
  set_has_di_c();
  di_c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.di_c)
}
#if LANG_CXX11
void CSOItemRecipe::set_di_c(::std::string&& value) {
  set_has_di_c();
  di_c_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.di_c)
}
#endif
void CSOItemRecipe::set_di_c(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_di_c();
  di_c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.di_c)
}
void CSOItemRecipe::set_di_c(const char* value, size_t size) {
  set_has_di_c();
  di_c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.di_c)
}
::std::string* CSOItemRecipe::mutable_di_c() {
  set_has_di_c();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.di_c)
  return di_c_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_di_c() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.di_c)
  clear_has_di_c();
  return di_c_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_di_c(::std::string* di_c) {
  if (di_c != NULL) {
    set_has_di_c();
  } else {
    clear_has_di_c();
  }
  di_c_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), di_c);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.di_c)
}

// optional string do_a = 9;
bool CSOItemRecipe::has_do_a() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSOItemRecipe::set_has_do_a() {
  _has_bits_[0] |= 0x00000080u;
}
void CSOItemRecipe::clear_has_do_a() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSOItemRecipe::clear_do_a() {
  do_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_do_a();
}
const ::std::string& CSOItemRecipe::do_a() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.do_a)
  return do_a_.GetNoArena();
}
void CSOItemRecipe::set_do_a(const ::std::string& value) {
  set_has_do_a();
  do_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.do_a)
}
#if LANG_CXX11
void CSOItemRecipe::set_do_a(::std::string&& value) {
  set_has_do_a();
  do_a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.do_a)
}
#endif
void CSOItemRecipe::set_do_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_do_a();
  do_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.do_a)
}
void CSOItemRecipe::set_do_a(const char* value, size_t size) {
  set_has_do_a();
  do_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.do_a)
}
::std::string* CSOItemRecipe::mutable_do_a() {
  set_has_do_a();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.do_a)
  return do_a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_do_a() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.do_a)
  clear_has_do_a();
  return do_a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_do_a(::std::string* do_a) {
  if (do_a != NULL) {
    set_has_do_a();
  } else {
    clear_has_do_a();
  }
  do_a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), do_a);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.do_a)
}

// optional string do_b = 10;
bool CSOItemRecipe::has_do_b() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSOItemRecipe::set_has_do_b() {
  _has_bits_[0] |= 0x00000100u;
}
void CSOItemRecipe::clear_has_do_b() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSOItemRecipe::clear_do_b() {
  do_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_do_b();
}
const ::std::string& CSOItemRecipe::do_b() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.do_b)
  return do_b_.GetNoArena();
}
void CSOItemRecipe::set_do_b(const ::std::string& value) {
  set_has_do_b();
  do_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.do_b)
}
#if LANG_CXX11
void CSOItemRecipe::set_do_b(::std::string&& value) {
  set_has_do_b();
  do_b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.do_b)
}
#endif
void CSOItemRecipe::set_do_b(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_do_b();
  do_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.do_b)
}
void CSOItemRecipe::set_do_b(const char* value, size_t size) {
  set_has_do_b();
  do_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.do_b)
}
::std::string* CSOItemRecipe::mutable_do_b() {
  set_has_do_b();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.do_b)
  return do_b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_do_b() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.do_b)
  clear_has_do_b();
  return do_b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_do_b(::std::string* do_b) {
  if (do_b != NULL) {
    set_has_do_b();
  } else {
    clear_has_do_b();
  }
  do_b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), do_b);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.do_b)
}

// optional string do_c = 11;
bool CSOItemRecipe::has_do_c() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSOItemRecipe::set_has_do_c() {
  _has_bits_[0] |= 0x00000200u;
}
void CSOItemRecipe::clear_has_do_c() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSOItemRecipe::clear_do_c() {
  do_c_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_do_c();
}
const ::std::string& CSOItemRecipe::do_c() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.do_c)
  return do_c_.GetNoArena();
}
void CSOItemRecipe::set_do_c(const ::std::string& value) {
  set_has_do_c();
  do_c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.do_c)
}
#if LANG_CXX11
void CSOItemRecipe::set_do_c(::std::string&& value) {
  set_has_do_c();
  do_c_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOItemRecipe.do_c)
}
#endif
void CSOItemRecipe::set_do_c(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_do_c();
  do_c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOItemRecipe.do_c)
}
void CSOItemRecipe::set_do_c(const char* value, size_t size) {
  set_has_do_c();
  do_c_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOItemRecipe.do_c)
}
::std::string* CSOItemRecipe::mutable_do_c() {
  set_has_do_c();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.do_c)
  return do_c_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOItemRecipe::release_do_c() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOItemRecipe.do_c)
  clear_has_do_c();
  return do_c_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOItemRecipe::set_allocated_do_c(::std::string* do_c) {
  if (do_c != NULL) {
    set_has_do_c();
  } else {
    clear_has_do_c();
  }
  do_c_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), do_c);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOItemRecipe.do_c)
}

// optional bool requires_all_same_class = 12;
bool CSOItemRecipe::has_requires_all_same_class() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSOItemRecipe::set_has_requires_all_same_class() {
  _has_bits_[0] |= 0x00000800u;
}
void CSOItemRecipe::clear_has_requires_all_same_class() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSOItemRecipe::clear_requires_all_same_class() {
  requires_all_same_class_ = false;
  clear_has_requires_all_same_class();
}
bool CSOItemRecipe::requires_all_same_class() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.requires_all_same_class)
  return requires_all_same_class_;
}
void CSOItemRecipe::set_requires_all_same_class(bool value) {
  set_has_requires_all_same_class();
  requires_all_same_class_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.requires_all_same_class)
}

// optional bool requires_all_same_slot = 13;
bool CSOItemRecipe::has_requires_all_same_slot() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSOItemRecipe::set_has_requires_all_same_slot() {
  _has_bits_[0] |= 0x00001000u;
}
void CSOItemRecipe::clear_has_requires_all_same_slot() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSOItemRecipe::clear_requires_all_same_slot() {
  requires_all_same_slot_ = false;
  clear_has_requires_all_same_slot();
}
bool CSOItemRecipe::requires_all_same_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.requires_all_same_slot)
  return requires_all_same_slot_;
}
void CSOItemRecipe::set_requires_all_same_slot(bool value) {
  set_has_requires_all_same_slot();
  requires_all_same_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.requires_all_same_slot)
}

// optional int32 class_usage_for_output = 14;
bool CSOItemRecipe::has_class_usage_for_output() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSOItemRecipe::set_has_class_usage_for_output() {
  _has_bits_[0] |= 0x00002000u;
}
void CSOItemRecipe::clear_has_class_usage_for_output() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSOItemRecipe::clear_class_usage_for_output() {
  class_usage_for_output_ = 0;
  clear_has_class_usage_for_output();
}
::google::protobuf::int32 CSOItemRecipe::class_usage_for_output() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.class_usage_for_output)
  return class_usage_for_output_;
}
void CSOItemRecipe::set_class_usage_for_output(::google::protobuf::int32 value) {
  set_has_class_usage_for_output();
  class_usage_for_output_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.class_usage_for_output)
}

// optional int32 slot_usage_for_output = 15;
bool CSOItemRecipe::has_slot_usage_for_output() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CSOItemRecipe::set_has_slot_usage_for_output() {
  _has_bits_[0] |= 0x00004000u;
}
void CSOItemRecipe::clear_has_slot_usage_for_output() {
  _has_bits_[0] &= ~0x00004000u;
}
void CSOItemRecipe::clear_slot_usage_for_output() {
  slot_usage_for_output_ = 0;
  clear_has_slot_usage_for_output();
}
::google::protobuf::int32 CSOItemRecipe::slot_usage_for_output() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.slot_usage_for_output)
  return slot_usage_for_output_;
}
void CSOItemRecipe::set_slot_usage_for_output(::google::protobuf::int32 value) {
  set_has_slot_usage_for_output();
  slot_usage_for_output_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.slot_usage_for_output)
}

// optional int32 set_for_output = 16;
bool CSOItemRecipe::has_set_for_output() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSOItemRecipe::set_has_set_for_output() {
  _has_bits_[0] |= 0x00008000u;
}
void CSOItemRecipe::clear_has_set_for_output() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSOItemRecipe::clear_set_for_output() {
  set_for_output_ = 0;
  clear_has_set_for_output();
}
::google::protobuf::int32 CSOItemRecipe::set_for_output() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.set_for_output)
  return set_for_output_;
}
void CSOItemRecipe::set_set_for_output(::google::protobuf::int32 value) {
  set_has_set_for_output();
  set_for_output_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.set_for_output)
}

// repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
int CSOItemRecipe::input_items_criteria_size() const {
  return input_items_criteria_.size();
}
void CSOItemRecipe::clear_input_items_criteria() {
  input_items_criteria_.Clear();
}
const ::proto::dota::CSOItemCriteria& CSOItemRecipe::input_items_criteria(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.input_items_criteria)
  return input_items_criteria_.Get(index);
}
::proto::dota::CSOItemCriteria* CSOItemRecipe::mutable_input_items_criteria(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.input_items_criteria)
  return input_items_criteria_.Mutable(index);
}
::proto::dota::CSOItemCriteria* CSOItemRecipe::add_input_items_criteria() {
  // @@protoc_insertion_point(field_add:proto.dota.CSOItemRecipe.input_items_criteria)
  return input_items_criteria_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSOItemCriteria >*
CSOItemRecipe::mutable_input_items_criteria() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSOItemRecipe.input_items_criteria)
  return &input_items_criteria_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOItemCriteria >&
CSOItemRecipe::input_items_criteria() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSOItemRecipe.input_items_criteria)
  return input_items_criteria_;
}

// repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
int CSOItemRecipe::output_items_criteria_size() const {
  return output_items_criteria_.size();
}
void CSOItemRecipe::clear_output_items_criteria() {
  output_items_criteria_.Clear();
}
const ::proto::dota::CSOItemCriteria& CSOItemRecipe::output_items_criteria(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.output_items_criteria)
  return output_items_criteria_.Get(index);
}
::proto::dota::CSOItemCriteria* CSOItemRecipe::mutable_output_items_criteria(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOItemRecipe.output_items_criteria)
  return output_items_criteria_.Mutable(index);
}
::proto::dota::CSOItemCriteria* CSOItemRecipe::add_output_items_criteria() {
  // @@protoc_insertion_point(field_add:proto.dota.CSOItemRecipe.output_items_criteria)
  return output_items_criteria_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSOItemCriteria >*
CSOItemRecipe::mutable_output_items_criteria() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSOItemRecipe.output_items_criteria)
  return &output_items_criteria_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOItemCriteria >&
CSOItemRecipe::output_items_criteria() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSOItemRecipe.output_items_criteria)
  return output_items_criteria_;
}

// repeated uint32 input_item_dupe_counts = 22;
int CSOItemRecipe::input_item_dupe_counts_size() const {
  return input_item_dupe_counts_.size();
}
void CSOItemRecipe::clear_input_item_dupe_counts() {
  input_item_dupe_counts_.Clear();
}
::google::protobuf::uint32 CSOItemRecipe::input_item_dupe_counts(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOItemRecipe.input_item_dupe_counts)
  return input_item_dupe_counts_.Get(index);
}
void CSOItemRecipe::set_input_item_dupe_counts(int index, ::google::protobuf::uint32 value) {
  input_item_dupe_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOItemRecipe.input_item_dupe_counts)
}
void CSOItemRecipe::add_input_item_dupe_counts(::google::protobuf::uint32 value) {
  input_item_dupe_counts_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSOItemRecipe.input_item_dupe_counts)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSOItemRecipe::input_item_dupe_counts() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSOItemRecipe.input_item_dupe_counts)
  return input_item_dupe_counts_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSOItemRecipe::mutable_input_item_dupe_counts() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSOItemRecipe.input_item_dupe_counts)
  return &input_item_dupe_counts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgApplyStrangePart::kStrangePartItemIdFieldNumber;
const int CMsgApplyStrangePart::kItemItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgApplyStrangePart::CMsgApplyStrangePart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgApplyStrangePart)
}
CMsgApplyStrangePart::CMsgApplyStrangePart(const CMsgApplyStrangePart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&strange_part_item_id_, &from.strange_part_item_id_,
    reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&strange_part_item_id_) + sizeof(item_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgApplyStrangePart)
}

void CMsgApplyStrangePart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&strange_part_item_id_, 0, reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&strange_part_item_id_) + sizeof(item_item_id_));
}

CMsgApplyStrangePart::~CMsgApplyStrangePart() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgApplyStrangePart)
  SharedDtor();
}

void CMsgApplyStrangePart::SharedDtor() {
}

void CMsgApplyStrangePart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyStrangePart::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgApplyStrangePart& CMsgApplyStrangePart::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgApplyStrangePart* CMsgApplyStrangePart::New(::google::protobuf::Arena* arena) const {
  CMsgApplyStrangePart* n = new CMsgApplyStrangePart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgApplyStrangePart::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgApplyStrangePart)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&strange_part_item_id_, 0, reinterpret_cast<char*>(&item_item_id_) -
      reinterpret_cast<char*>(&strange_part_item_id_) + sizeof(item_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgApplyStrangePart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgApplyStrangePart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 strange_part_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_strange_part_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &strange_part_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgApplyStrangePart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgApplyStrangePart)
  return false;
#undef DO_
}

void CMsgApplyStrangePart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgApplyStrangePart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 strange_part_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->strange_part_item_id(), output);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgApplyStrangePart)
}

::google::protobuf::uint8* CMsgApplyStrangePart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgApplyStrangePart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 strange_part_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->strange_part_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgApplyStrangePart)
  return target;
}

size_t CMsgApplyStrangePart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgApplyStrangePart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 strange_part_item_id = 1;
    if (has_strange_part_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->strange_part_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyStrangePart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgApplyStrangePart)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyStrangePart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgApplyStrangePart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgApplyStrangePart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgApplyStrangePart)
    MergeFrom(*source);
  }
}

void CMsgApplyStrangePart::MergeFrom(const CMsgApplyStrangePart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgApplyStrangePart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      strange_part_item_id_ = from.strange_part_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyStrangePart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgApplyStrangePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyStrangePart::CopyFrom(const CMsgApplyStrangePart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgApplyStrangePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyStrangePart::IsInitialized() const {
  return true;
}

void CMsgApplyStrangePart::Swap(CMsgApplyStrangePart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgApplyStrangePart::InternalSwap(CMsgApplyStrangePart* other) {
  std::swap(strange_part_item_id_, other->strange_part_item_id_);
  std::swap(item_item_id_, other->item_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgApplyStrangePart::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgApplyStrangePart

// optional uint64 strange_part_item_id = 1;
bool CMsgApplyStrangePart::has_strange_part_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgApplyStrangePart::set_has_strange_part_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgApplyStrangePart::clear_has_strange_part_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgApplyStrangePart::clear_strange_part_item_id() {
  strange_part_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_strange_part_item_id();
}
::google::protobuf::uint64 CMsgApplyStrangePart::strange_part_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgApplyStrangePart.strange_part_item_id)
  return strange_part_item_id_;
}
void CMsgApplyStrangePart::set_strange_part_item_id(::google::protobuf::uint64 value) {
  set_has_strange_part_item_id();
  strange_part_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgApplyStrangePart.strange_part_item_id)
}

// optional uint64 item_item_id = 2;
bool CMsgApplyStrangePart::has_item_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgApplyStrangePart::set_has_item_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgApplyStrangePart::clear_has_item_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgApplyStrangePart::clear_item_item_id() {
  item_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_item_id();
}
::google::protobuf::uint64 CMsgApplyStrangePart::item_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgApplyStrangePart.item_item_id)
  return item_item_id_;
}
void CMsgApplyStrangePart::set_item_item_id(::google::protobuf::uint64 value) {
  set_has_item_item_id();
  item_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgApplyStrangePart.item_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgApplyPennantUpgrade::kUpgradeItemIdFieldNumber;
const int CMsgApplyPennantUpgrade::kPennantItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgApplyPennantUpgrade)
}
CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(const CMsgApplyPennantUpgrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upgrade_item_id_, &from.upgrade_item_id_,
    reinterpret_cast<char*>(&pennant_item_id_) -
    reinterpret_cast<char*>(&upgrade_item_id_) + sizeof(pennant_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgApplyPennantUpgrade)
}

void CMsgApplyPennantUpgrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&upgrade_item_id_, 0, reinterpret_cast<char*>(&pennant_item_id_) -
    reinterpret_cast<char*>(&upgrade_item_id_) + sizeof(pennant_item_id_));
}

CMsgApplyPennantUpgrade::~CMsgApplyPennantUpgrade() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgApplyPennantUpgrade)
  SharedDtor();
}

void CMsgApplyPennantUpgrade::SharedDtor() {
}

void CMsgApplyPennantUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyPennantUpgrade::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgApplyPennantUpgrade& CMsgApplyPennantUpgrade::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgApplyPennantUpgrade* CMsgApplyPennantUpgrade::New(::google::protobuf::Arena* arena) const {
  CMsgApplyPennantUpgrade* n = new CMsgApplyPennantUpgrade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgApplyPennantUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgApplyPennantUpgrade)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&upgrade_item_id_, 0, reinterpret_cast<char*>(&pennant_item_id_) -
      reinterpret_cast<char*>(&upgrade_item_id_) + sizeof(pennant_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgApplyPennantUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgApplyPennantUpgrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 upgrade_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_upgrade_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upgrade_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pennant_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pennant_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pennant_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgApplyPennantUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgApplyPennantUpgrade)
  return false;
#undef DO_
}

void CMsgApplyPennantUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgApplyPennantUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upgrade_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->upgrade_item_id(), output);
  }

  // optional uint64 pennant_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pennant_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgApplyPennantUpgrade)
}

::google::protobuf::uint8* CMsgApplyPennantUpgrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgApplyPennantUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upgrade_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->upgrade_item_id(), target);
  }

  // optional uint64 pennant_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pennant_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgApplyPennantUpgrade)
  return target;
}

size_t CMsgApplyPennantUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgApplyPennantUpgrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 upgrade_item_id = 1;
    if (has_upgrade_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upgrade_item_id());
    }

    // optional uint64 pennant_item_id = 2;
    if (has_pennant_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pennant_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyPennantUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgApplyPennantUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyPennantUpgrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgApplyPennantUpgrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgApplyPennantUpgrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgApplyPennantUpgrade)
    MergeFrom(*source);
  }
}

void CMsgApplyPennantUpgrade::MergeFrom(const CMsgApplyPennantUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgApplyPennantUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      upgrade_item_id_ = from.upgrade_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pennant_item_id_ = from.pennant_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyPennantUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgApplyPennantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyPennantUpgrade::CopyFrom(const CMsgApplyPennantUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgApplyPennantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyPennantUpgrade::IsInitialized() const {
  return true;
}

void CMsgApplyPennantUpgrade::Swap(CMsgApplyPennantUpgrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgApplyPennantUpgrade::InternalSwap(CMsgApplyPennantUpgrade* other) {
  std::swap(upgrade_item_id_, other->upgrade_item_id_);
  std::swap(pennant_item_id_, other->pennant_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgApplyPennantUpgrade::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgApplyPennantUpgrade

// optional uint64 upgrade_item_id = 1;
bool CMsgApplyPennantUpgrade::has_upgrade_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgApplyPennantUpgrade::set_has_upgrade_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgApplyPennantUpgrade::clear_has_upgrade_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgApplyPennantUpgrade::clear_upgrade_item_id() {
  upgrade_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_upgrade_item_id();
}
::google::protobuf::uint64 CMsgApplyPennantUpgrade::upgrade_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgApplyPennantUpgrade.upgrade_item_id)
  return upgrade_item_id_;
}
void CMsgApplyPennantUpgrade::set_upgrade_item_id(::google::protobuf::uint64 value) {
  set_has_upgrade_item_id();
  upgrade_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgApplyPennantUpgrade.upgrade_item_id)
}

// optional uint64 pennant_item_id = 2;
bool CMsgApplyPennantUpgrade::has_pennant_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgApplyPennantUpgrade::set_has_pennant_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgApplyPennantUpgrade::clear_has_pennant_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgApplyPennantUpgrade::clear_pennant_item_id() {
  pennant_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_pennant_item_id();
}
::google::protobuf::uint64 CMsgApplyPennantUpgrade::pennant_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgApplyPennantUpgrade.pennant_item_id)
  return pennant_item_id_;
}
void CMsgApplyPennantUpgrade::set_pennant_item_id(::google::protobuf::uint64 value) {
  set_has_pennant_item_id();
  pennant_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgApplyPennantUpgrade.pennant_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgApplyEggEssence::kEssenceItemIdFieldNumber;
const int CMsgApplyEggEssence::kEggItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgApplyEggEssence::CMsgApplyEggEssence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgApplyEggEssence)
}
CMsgApplyEggEssence::CMsgApplyEggEssence(const CMsgApplyEggEssence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&essence_item_id_, &from.essence_item_id_,
    reinterpret_cast<char*>(&egg_item_id_) -
    reinterpret_cast<char*>(&essence_item_id_) + sizeof(egg_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgApplyEggEssence)
}

void CMsgApplyEggEssence::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&essence_item_id_, 0, reinterpret_cast<char*>(&egg_item_id_) -
    reinterpret_cast<char*>(&essence_item_id_) + sizeof(egg_item_id_));
}

CMsgApplyEggEssence::~CMsgApplyEggEssence() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgApplyEggEssence)
  SharedDtor();
}

void CMsgApplyEggEssence::SharedDtor() {
}

void CMsgApplyEggEssence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyEggEssence::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgApplyEggEssence& CMsgApplyEggEssence::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgApplyEggEssence* CMsgApplyEggEssence::New(::google::protobuf::Arena* arena) const {
  CMsgApplyEggEssence* n = new CMsgApplyEggEssence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgApplyEggEssence::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgApplyEggEssence)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&essence_item_id_, 0, reinterpret_cast<char*>(&egg_item_id_) -
      reinterpret_cast<char*>(&essence_item_id_) + sizeof(egg_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgApplyEggEssence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgApplyEggEssence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 essence_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_essence_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &essence_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 egg_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_egg_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egg_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgApplyEggEssence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgApplyEggEssence)
  return false;
#undef DO_
}

void CMsgApplyEggEssence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgApplyEggEssence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 essence_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->essence_item_id(), output);
  }

  // optional uint64 egg_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->egg_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgApplyEggEssence)
}

::google::protobuf::uint8* CMsgApplyEggEssence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgApplyEggEssence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 essence_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->essence_item_id(), target);
  }

  // optional uint64 egg_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->egg_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgApplyEggEssence)
  return target;
}

size_t CMsgApplyEggEssence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgApplyEggEssence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 essence_item_id = 1;
    if (has_essence_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->essence_item_id());
    }

    // optional uint64 egg_item_id = 2;
    if (has_egg_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egg_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyEggEssence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgApplyEggEssence)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyEggEssence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgApplyEggEssence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgApplyEggEssence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgApplyEggEssence)
    MergeFrom(*source);
  }
}

void CMsgApplyEggEssence::MergeFrom(const CMsgApplyEggEssence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgApplyEggEssence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      essence_item_id_ = from.essence_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      egg_item_id_ = from.egg_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyEggEssence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgApplyEggEssence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyEggEssence::CopyFrom(const CMsgApplyEggEssence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgApplyEggEssence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyEggEssence::IsInitialized() const {
  return true;
}

void CMsgApplyEggEssence::Swap(CMsgApplyEggEssence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgApplyEggEssence::InternalSwap(CMsgApplyEggEssence* other) {
  std::swap(essence_item_id_, other->essence_item_id_);
  std::swap(egg_item_id_, other->egg_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgApplyEggEssence::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgApplyEggEssence

// optional uint64 essence_item_id = 1;
bool CMsgApplyEggEssence::has_essence_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgApplyEggEssence::set_has_essence_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgApplyEggEssence::clear_has_essence_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgApplyEggEssence::clear_essence_item_id() {
  essence_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_essence_item_id();
}
::google::protobuf::uint64 CMsgApplyEggEssence::essence_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgApplyEggEssence.essence_item_id)
  return essence_item_id_;
}
void CMsgApplyEggEssence::set_essence_item_id(::google::protobuf::uint64 value) {
  set_has_essence_item_id();
  essence_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgApplyEggEssence.essence_item_id)
}

// optional uint64 egg_item_id = 2;
bool CMsgApplyEggEssence::has_egg_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgApplyEggEssence::set_has_egg_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgApplyEggEssence::clear_has_egg_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgApplyEggEssence::clear_egg_item_id() {
  egg_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_egg_item_id();
}
::google::protobuf::uint64 CMsgApplyEggEssence::egg_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgApplyEggEssence.egg_item_id)
  return egg_item_id_;
}
void CMsgApplyEggEssence::set_egg_item_id(::google::protobuf::uint64 value) {
  set_has_egg_item_id();
  egg_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgApplyEggEssence.egg_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemAttribute::kDefIndexFieldNumber;
const int CSOEconItemAttribute::kValueFieldNumber;
const int CSOEconItemAttribute::kValueBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemAttribute::CSOEconItemAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemAttribute)
}
CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value_bytes()) {
    value_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_bytes_);
  }
  ::memcpy(&def_index_, &from.def_index_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemAttribute)
}

void CSOEconItemAttribute::SharedCtor() {
  _cached_size_ = 0;
  value_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&def_index_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_) + sizeof(value_));
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemAttribute)
  SharedDtor();
}

void CSOEconItemAttribute::SharedDtor() {
  value_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOEconItemAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemAttribute::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconItemAttribute& CSOEconItemAttribute::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOEconItemAttribute* CSOEconItemAttribute::New(::google::protobuf::Arena* arena) const {
  CSOEconItemAttribute* n = new CSOEconItemAttribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOEconItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemAttribute)
  if (has_value_bytes()) {
    GOOGLE_DCHECK(!value_bytes_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_bytes_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&def_index_, 0, reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&def_index_) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconItemAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemAttribute)
  return false;
#undef DO_
}

void CSOEconItemAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional bytes value_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemAttribute)
}

::google::protobuf::uint8* CSOEconItemAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional bytes value_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemAttribute)
  return target;
}

size_t CSOEconItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes value_bytes = 3;
    if (has_value_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value_bytes());
    }

    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconItemAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemAttribute)
    MergeFrom(*source);
  }
}

void CSOEconItemAttribute::MergeFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value_bytes();
      value_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_bytes_);
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  return true;
}

void CSOEconItemAttribute::Swap(CSOEconItemAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemAttribute::InternalSwap(CSOEconItemAttribute* other) {
  value_bytes_.Swap(&other->value_bytes_);
  std::swap(def_index_, other->def_index_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOEconItemAttribute::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOEconItemAttribute

// optional uint32 def_index = 1;
bool CSOEconItemAttribute::has_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOEconItemAttribute::set_has_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOEconItemAttribute::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOEconItemAttribute::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
::google::protobuf::uint32 CSOEconItemAttribute::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemAttribute.def_index)
  return def_index_;
}
void CSOEconItemAttribute::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemAttribute.def_index)
}

// optional uint32 value = 2;
bool CSOEconItemAttribute::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOEconItemAttribute::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOEconItemAttribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOEconItemAttribute::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 CSOEconItemAttribute::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemAttribute.value)
  return value_;
}
void CSOEconItemAttribute::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemAttribute.value)
}

// optional bytes value_bytes = 3;
bool CSOEconItemAttribute::has_value_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOEconItemAttribute::set_has_value_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOEconItemAttribute::clear_has_value_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOEconItemAttribute::clear_value_bytes() {
  value_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_bytes();
}
const ::std::string& CSOEconItemAttribute::value_bytes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemAttribute.value_bytes)
  return value_bytes_.GetNoArena();
}
void CSOEconItemAttribute::set_value_bytes(const ::std::string& value) {
  set_has_value_bytes();
  value_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemAttribute.value_bytes)
}
#if LANG_CXX11
void CSOEconItemAttribute::set_value_bytes(::std::string&& value) {
  set_has_value_bytes();
  value_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOEconItemAttribute.value_bytes)
}
#endif
void CSOEconItemAttribute::set_value_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value_bytes();
  value_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOEconItemAttribute.value_bytes)
}
void CSOEconItemAttribute::set_value_bytes(const void* value, size_t size) {
  set_has_value_bytes();
  value_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOEconItemAttribute.value_bytes)
}
::std::string* CSOEconItemAttribute::mutable_value_bytes() {
  set_has_value_bytes();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOEconItemAttribute.value_bytes)
  return value_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOEconItemAttribute::release_value_bytes() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOEconItemAttribute.value_bytes)
  clear_has_value_bytes();
  return value_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOEconItemAttribute::set_allocated_value_bytes(::std::string* value_bytes) {
  if (value_bytes != NULL) {
    set_has_value_bytes();
  } else {
    clear_has_value_bytes();
  }
  value_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_bytes);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOEconItemAttribute.value_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemEquipped::kNewClassFieldNumber;
const int CSOEconItemEquipped::kNewSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemEquipped::CSOEconItemEquipped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemEquipped)
}
CSOEconItemEquipped::CSOEconItemEquipped(const CSOEconItemEquipped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_class_, &from.new_class_,
    reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_) + sizeof(new_slot_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemEquipped)
}

void CSOEconItemEquipped::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&new_class_, 0, reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_) + sizeof(new_slot_));
}

CSOEconItemEquipped::~CSOEconItemEquipped() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemEquipped)
  SharedDtor();
}

void CSOEconItemEquipped::SharedDtor() {
}

void CSOEconItemEquipped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemEquipped::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconItemEquipped& CSOEconItemEquipped::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOEconItemEquipped* CSOEconItemEquipped::New(::google::protobuf::Arena* arena) const {
  CSOEconItemEquipped* n = new CSOEconItemEquipped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOEconItemEquipped::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemEquipped)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&new_class_, 0, reinterpret_cast<char*>(&new_slot_) -
      reinterpret_cast<char*>(&new_class_) + sizeof(new_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconItemEquipped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemEquipped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_class = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_new_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_new_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemEquipped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemEquipped)
  return false;
#undef DO_
}

void CSOEconItemEquipped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemEquipped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_class = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_class(), output);
  }

  // optional uint32 new_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemEquipped)
}

::google::protobuf::uint8* CSOEconItemEquipped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemEquipped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_class = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_class(), target);
  }

  // optional uint32 new_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemEquipped)
  return target;
}

size_t CSOEconItemEquipped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemEquipped)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 new_class = 1;
    if (has_new_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_class());
    }

    // optional uint32 new_slot = 2;
    if (has_new_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_slot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemEquipped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemEquipped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconItemEquipped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemEquipped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemEquipped)
    MergeFrom(*source);
  }
}

void CSOEconItemEquipped::MergeFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      new_class_ = from.new_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_slot_ = from.new_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemEquipped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemEquipped::CopyFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEquipped::IsInitialized() const {
  return true;
}

void CSOEconItemEquipped::Swap(CSOEconItemEquipped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemEquipped::InternalSwap(CSOEconItemEquipped* other) {
  std::swap(new_class_, other->new_class_);
  std::swap(new_slot_, other->new_slot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOEconItemEquipped::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOEconItemEquipped

// optional uint32 new_class = 1;
bool CSOEconItemEquipped::has_new_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOEconItemEquipped::set_has_new_class() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOEconItemEquipped::clear_has_new_class() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOEconItemEquipped::clear_new_class() {
  new_class_ = 0u;
  clear_has_new_class();
}
::google::protobuf::uint32 CSOEconItemEquipped::new_class() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemEquipped.new_class)
  return new_class_;
}
void CSOEconItemEquipped::set_new_class(::google::protobuf::uint32 value) {
  set_has_new_class();
  new_class_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemEquipped.new_class)
}

// optional uint32 new_slot = 2;
bool CSOEconItemEquipped::has_new_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOEconItemEquipped::set_has_new_slot() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOEconItemEquipped::clear_has_new_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOEconItemEquipped::clear_new_slot() {
  new_slot_ = 0u;
  clear_has_new_slot();
}
::google::protobuf::uint32 CSOEconItemEquipped::new_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemEquipped.new_slot)
  return new_slot_;
}
void CSOEconItemEquipped::set_new_slot(::google::protobuf::uint32 value) {
  set_has_new_slot();
  new_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemEquipped.new_slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItem::kIdFieldNumber;
const int CSOEconItem::kAccountIdFieldNumber;
const int CSOEconItem::kInventoryFieldNumber;
const int CSOEconItem::kDefIndexFieldNumber;
const int CSOEconItem::kQuantityFieldNumber;
const int CSOEconItem::kLevelFieldNumber;
const int CSOEconItem::kQualityFieldNumber;
const int CSOEconItem::kFlagsFieldNumber;
const int CSOEconItem::kOriginFieldNumber;
const int CSOEconItem::kAttributeFieldNumber;
const int CSOEconItem::kInteriorItemFieldNumber;
const int CSOEconItem::kInUseFieldNumber;
const int CSOEconItem::kStyleFieldNumber;
const int CSOEconItem::kOriginalIdFieldNumber;
const int CSOEconItem::kEquippedStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItem::CSOEconItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItem)
}
CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      attribute_(from.attribute_),
      equipped_state_(from.equipped_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interior_item()) {
    interior_item_ = new ::proto::dota::CSOEconItem(*from.interior_item_);
  } else {
    interior_item_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItem)
}

void CSOEconItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&interior_item_, 0, reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&interior_item_) + sizeof(style_));
  quality_ = 4u;
  quantity_ = 1u;
  level_ = 1u;
}

CSOEconItem::~CSOEconItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItem)
  SharedDtor();
}

void CSOEconItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete interior_item_;
  }
}

void CSOEconItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItem::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconItem& CSOEconItem::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOEconItem* CSOEconItem::New(::google::protobuf::Arena* arena) const {
  CSOEconItem* n = new CSOEconItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOEconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItem)
  attribute_.Clear();
  equipped_state_.Clear();
  if (has_interior_item()) {
    GOOGLE_DCHECK(interior_item_ != NULL);
    interior_item_->::proto::dota::CSOEconItem::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&in_use_) -
      reinterpret_cast<char*>(&id_) + sizeof(in_use_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&original_id_, 0, reinterpret_cast<char*>(&style_) -
      reinterpret_cast<char*>(&original_id_) + sizeof(style_));
    quality_ = 4u;
    quantity_ = 1u;
    level_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inventory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_inventory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality = 7 [default = 4];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 origin = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_origin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOEconItemAttribute attribute = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSOEconItem interior_item = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interior_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_use = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_in_use();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 style = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 original_id = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_original_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipped_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItem)
  return false;
#undef DO_
}

void CSOEconItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 inventory = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inventory(), output);
  }

  // optional uint32 def_index = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def_index(), output);
  }

  // optional uint32 quantity = 5 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quantity(), output);
  }

  // optional uint32 level = 6 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 quality = 7 [default = 4];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->quality(), output);
  }

  // optional uint32 flags = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flags(), output);
  }

  // optional uint32 origin = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->origin(), output);
  }

  // repeated .proto.dota.CSOEconItemAttribute attribute = 12;
  for (unsigned int i = 0, n = this->attribute_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->attribute(i), output);
  }

  // optional .proto.dota.CSOEconItem interior_item = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->interior_item_, output);
  }

  // optional bool in_use = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->in_use(), output);
  }

  // optional uint32 style = 15 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->style(), output);
  }

  // optional uint64 original_id = 16 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->original_id(), output);
  }

  // repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
  for (unsigned int i = 0, n = this->equipped_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->equipped_state(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItem)
}

::google::protobuf::uint8* CSOEconItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 inventory = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inventory(), target);
  }

  // optional uint32 def_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def_index(), target);
  }

  // optional uint32 quantity = 5 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quantity(), target);
  }

  // optional uint32 level = 6 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 quality = 7 [default = 4];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->quality(), target);
  }

  // optional uint32 flags = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flags(), target);
  }

  // optional uint32 origin = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->origin(), target);
  }

  // repeated .proto.dota.CSOEconItemAttribute attribute = 12;
  for (unsigned int i = 0, n = this->attribute_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->attribute(i), deterministic, target);
  }

  // optional .proto.dota.CSOEconItem interior_item = 13;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->interior_item_, deterministic, target);
  }

  // optional bool in_use = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->in_use(), target);
  }

  // optional uint32 style = 15 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->style(), target);
  }

  // optional uint64 original_id = 16 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->original_id(), target);
  }

  // repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
  for (unsigned int i = 0, n = this->equipped_state_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->equipped_state(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItem)
  return target;
}

size_t CSOEconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CSOEconItemAttribute attribute = 12;
  {
    unsigned int count = this->attribute_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attribute(i));
    }
  }

  // repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
  {
    unsigned int count = this->equipped_state_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipped_state(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CSOEconItem interior_item = 13;
    if (has_interior_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->interior_item_);
    }

    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 inventory = 3;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }

    // optional uint32 def_index = 4;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 flags = 8 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 origin = 9 [default = 0];
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

    // optional bool in_use = 14 [default = false];
    if (has_in_use()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint64 original_id = 16 [default = 0];
    if (has_original_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_id());
    }

    // optional uint32 style = 15 [default = 0];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style());
    }

    // optional uint32 quality = 7 [default = 4];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 quantity = 5 [default = 1];
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional uint32 level = 6 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItem)
    MergeFrom(*source);
  }
}

void CSOEconItem::MergeFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  equipped_state_.MergeFrom(from.equipped_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_interior_item()->::proto::dota::CSOEconItem::MergeFrom(from.interior_item());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000010u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000080u) {
      in_use_ = from.in_use_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      original_id_ = from.original_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000400u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000800u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00001000u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  return true;
}

void CSOEconItem::Swap(CSOEconItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItem::InternalSwap(CSOEconItem* other) {
  attribute_.InternalSwap(&other->attribute_);
  equipped_state_.InternalSwap(&other->equipped_state_);
  std::swap(interior_item_, other->interior_item_);
  std::swap(id_, other->id_);
  std::swap(account_id_, other->account_id_);
  std::swap(inventory_, other->inventory_);
  std::swap(def_index_, other->def_index_);
  std::swap(flags_, other->flags_);
  std::swap(origin_, other->origin_);
  std::swap(in_use_, other->in_use_);
  std::swap(original_id_, other->original_id_);
  std::swap(style_, other->style_);
  std::swap(quality_, other->quality_);
  std::swap(quantity_, other->quantity_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOEconItem::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOEconItem

// optional uint64 id = 1;
bool CSOEconItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOEconItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOEconItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOEconItem::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CSOEconItem::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.id)
  return id_;
}
void CSOEconItem::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.id)
}

// optional uint32 account_id = 2;
bool CSOEconItem::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOEconItem::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOEconItem::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOEconItem::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSOEconItem::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.account_id)
  return account_id_;
}
void CSOEconItem::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.account_id)
}

// optional uint32 inventory = 3;
bool CSOEconItem::has_inventory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSOEconItem::set_has_inventory() {
  _has_bits_[0] |= 0x00000008u;
}
void CSOEconItem::clear_has_inventory() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSOEconItem::clear_inventory() {
  inventory_ = 0u;
  clear_has_inventory();
}
::google::protobuf::uint32 CSOEconItem::inventory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.inventory)
  return inventory_;
}
void CSOEconItem::set_inventory(::google::protobuf::uint32 value) {
  set_has_inventory();
  inventory_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.inventory)
}

// optional uint32 def_index = 4;
bool CSOEconItem::has_def_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSOEconItem::set_has_def_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CSOEconItem::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSOEconItem::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
::google::protobuf::uint32 CSOEconItem::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.def_index)
  return def_index_;
}
void CSOEconItem::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.def_index)
}

// optional uint32 quantity = 5 [default = 1];
bool CSOEconItem::has_quantity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSOEconItem::set_has_quantity() {
  _has_bits_[0] |= 0x00000800u;
}
void CSOEconItem::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSOEconItem::clear_quantity() {
  quantity_ = 1u;
  clear_has_quantity();
}
::google::protobuf::uint32 CSOEconItem::quantity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.quantity)
  return quantity_;
}
void CSOEconItem::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.quantity)
}

// optional uint32 level = 6 [default = 1];
bool CSOEconItem::has_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSOEconItem::set_has_level() {
  _has_bits_[0] |= 0x00001000u;
}
void CSOEconItem::clear_has_level() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSOEconItem::clear_level() {
  level_ = 1u;
  clear_has_level();
}
::google::protobuf::uint32 CSOEconItem::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.level)
  return level_;
}
void CSOEconItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.level)
}

// optional uint32 quality = 7 [default = 4];
bool CSOEconItem::has_quality() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSOEconItem::set_has_quality() {
  _has_bits_[0] |= 0x00000400u;
}
void CSOEconItem::clear_has_quality() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSOEconItem::clear_quality() {
  quality_ = 4u;
  clear_has_quality();
}
::google::protobuf::uint32 CSOEconItem::quality() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.quality)
  return quality_;
}
void CSOEconItem::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.quality)
}

// optional uint32 flags = 8 [default = 0];
bool CSOEconItem::has_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSOEconItem::set_has_flags() {
  _has_bits_[0] |= 0x00000020u;
}
void CSOEconItem::clear_has_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSOEconItem::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CSOEconItem::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.flags)
  return flags_;
}
void CSOEconItem::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.flags)
}

// optional uint32 origin = 9 [default = 0];
bool CSOEconItem::has_origin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSOEconItem::set_has_origin() {
  _has_bits_[0] |= 0x00000040u;
}
void CSOEconItem::clear_has_origin() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSOEconItem::clear_origin() {
  origin_ = 0u;
  clear_has_origin();
}
::google::protobuf::uint32 CSOEconItem::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.origin)
  return origin_;
}
void CSOEconItem::set_origin(::google::protobuf::uint32 value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.origin)
}

// repeated .proto.dota.CSOEconItemAttribute attribute = 12;
int CSOEconItem::attribute_size() const {
  return attribute_.size();
}
void CSOEconItem::clear_attribute() {
  attribute_.Clear();
}
const ::proto::dota::CSOEconItemAttribute& CSOEconItem::attribute(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.attribute)
  return attribute_.Get(index);
}
::proto::dota::CSOEconItemAttribute* CSOEconItem::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOEconItem.attribute)
  return attribute_.Mutable(index);
}
::proto::dota::CSOEconItemAttribute* CSOEconItem::add_attribute() {
  // @@protoc_insertion_point(field_add:proto.dota.CSOEconItem.attribute)
  return attribute_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItemAttribute >*
CSOEconItem::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSOEconItem.attribute)
  return &attribute_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItemAttribute >&
CSOEconItem::attribute() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSOEconItem.attribute)
  return attribute_;
}

// optional .proto.dota.CSOEconItem interior_item = 13;
bool CSOEconItem::has_interior_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOEconItem::set_has_interior_item() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOEconItem::clear_has_interior_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOEconItem::clear_interior_item() {
  if (interior_item_ != NULL) interior_item_->::proto::dota::CSOEconItem::Clear();
  clear_has_interior_item();
}
const ::proto::dota::CSOEconItem& CSOEconItem::interior_item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.interior_item)
  return interior_item_ != NULL ? *interior_item_
                         : *::proto::dota::CSOEconItem::internal_default_instance();
}
::proto::dota::CSOEconItem* CSOEconItem::mutable_interior_item() {
  set_has_interior_item();
  if (interior_item_ == NULL) {
    interior_item_ = new ::proto::dota::CSOEconItem;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOEconItem.interior_item)
  return interior_item_;
}
::proto::dota::CSOEconItem* CSOEconItem::release_interior_item() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOEconItem.interior_item)
  clear_has_interior_item();
  ::proto::dota::CSOEconItem* temp = interior_item_;
  interior_item_ = NULL;
  return temp;
}
void CSOEconItem::set_allocated_interior_item(::proto::dota::CSOEconItem* interior_item) {
  delete interior_item_;
  interior_item_ = interior_item;
  if (interior_item) {
    set_has_interior_item();
  } else {
    clear_has_interior_item();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOEconItem.interior_item)
}

// optional bool in_use = 14 [default = false];
bool CSOEconItem::has_in_use() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSOEconItem::set_has_in_use() {
  _has_bits_[0] |= 0x00000080u;
}
void CSOEconItem::clear_has_in_use() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSOEconItem::clear_in_use() {
  in_use_ = false;
  clear_has_in_use();
}
bool CSOEconItem::in_use() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.in_use)
  return in_use_;
}
void CSOEconItem::set_in_use(bool value) {
  set_has_in_use();
  in_use_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.in_use)
}

// optional uint32 style = 15 [default = 0];
bool CSOEconItem::has_style() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSOEconItem::set_has_style() {
  _has_bits_[0] |= 0x00000200u;
}
void CSOEconItem::clear_has_style() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSOEconItem::clear_style() {
  style_ = 0u;
  clear_has_style();
}
::google::protobuf::uint32 CSOEconItem::style() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.style)
  return style_;
}
void CSOEconItem::set_style(::google::protobuf::uint32 value) {
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.style)
}

// optional uint64 original_id = 16 [default = 0];
bool CSOEconItem::has_original_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSOEconItem::set_has_original_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CSOEconItem::clear_has_original_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSOEconItem::clear_original_id() {
  original_id_ = GOOGLE_ULONGLONG(0);
  clear_has_original_id();
}
::google::protobuf::uint64 CSOEconItem::original_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.original_id)
  return original_id_;
}
void CSOEconItem::set_original_id(::google::protobuf::uint64 value) {
  set_has_original_id();
  original_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItem.original_id)
}

// repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
int CSOEconItem::equipped_state_size() const {
  return equipped_state_.size();
}
void CSOEconItem::clear_equipped_state() {
  equipped_state_.Clear();
}
const ::proto::dota::CSOEconItemEquipped& CSOEconItem::equipped_state(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItem.equipped_state)
  return equipped_state_.Get(index);
}
::proto::dota::CSOEconItemEquipped* CSOEconItem::mutable_equipped_state(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOEconItem.equipped_state)
  return equipped_state_.Mutable(index);
}
::proto::dota::CSOEconItemEquipped* CSOEconItem::add_equipped_state() {
  // @@protoc_insertion_point(field_add:proto.dota.CSOEconItem.equipped_state)
  return equipped_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItemEquipped >*
CSOEconItem::mutable_equipped_state() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSOEconItem.equipped_state)
  return &equipped_state_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItemEquipped >&
CSOEconItem::equipped_state() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSOEconItem.equipped_state)
  return equipped_state_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSortItems::kSortTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSortItems::CMsgSortItems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSortItems)
}
CMsgSortItems::CMsgSortItems(const CMsgSortItems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sort_type_ = from.sort_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSortItems)
}

void CMsgSortItems::SharedCtor() {
  _cached_size_ = 0;
  sort_type_ = 0u;
}

CMsgSortItems::~CMsgSortItems() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSortItems)
  SharedDtor();
}

void CMsgSortItems::SharedDtor() {
}

void CMsgSortItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSortItems::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSortItems& CMsgSortItems::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSortItems* CMsgSortItems::New(::google::protobuf::Arena* arena) const {
  CMsgSortItems* n = new CMsgSortItems;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSortItems::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSortItems)
  sort_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSortItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSortItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sort_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sort_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSortItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSortItems)
  return false;
#undef DO_
}

void CMsgSortItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSortItems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sort_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sort_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSortItems)
}

::google::protobuf::uint8* CMsgSortItems::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSortItems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sort_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sort_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSortItems)
  return target;
}

size_t CMsgSortItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSortItems)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 sort_type = 1;
  if (has_sort_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sort_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSortItems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSortItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSortItems* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSortItems>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSortItems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSortItems)
    MergeFrom(*source);
  }
}

void CMsgSortItems::MergeFrom(const CMsgSortItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSortItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sort_type()) {
    set_sort_type(from.sort_type());
  }
}

void CMsgSortItems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSortItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSortItems::CopyFrom(const CMsgSortItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSortItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSortItems::IsInitialized() const {
  return true;
}

void CMsgSortItems::Swap(CMsgSortItems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSortItems::InternalSwap(CMsgSortItems* other) {
  std::swap(sort_type_, other->sort_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSortItems::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSortItems

// optional uint32 sort_type = 1;
bool CMsgSortItems::has_sort_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSortItems::set_has_sort_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSortItems::clear_has_sort_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSortItems::clear_sort_type() {
  sort_type_ = 0u;
  clear_has_sort_type();
}
::google::protobuf::uint32 CMsgSortItems::sort_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSortItems.sort_type)
  return sort_type_;
}
void CMsgSortItems::set_sort_type(::google::protobuf::uint32 value) {
  set_has_sort_type();
  sort_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSortItems.sort_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconClaimCode::kAccountIdFieldNumber;
const int CSOEconClaimCode::kCodeTypeFieldNumber;
const int CSOEconClaimCode::kTimeAcquiredFieldNumber;
const int CSOEconClaimCode::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconClaimCode::CSOEconClaimCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconClaimCode)
}
CSOEconClaimCode::CSOEconClaimCode(const CSOEconClaimCode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&time_acquired_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(time_acquired_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconClaimCode)
}

void CSOEconClaimCode::SharedCtor() {
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&time_acquired_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(time_acquired_));
}

CSOEconClaimCode::~CSOEconClaimCode() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconClaimCode)
  SharedDtor();
}

void CSOEconClaimCode::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOEconClaimCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconClaimCode::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconClaimCode& CSOEconClaimCode::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOEconClaimCode* CSOEconClaimCode::New(::google::protobuf::Arena* arena) const {
  CSOEconClaimCode* n = new CSOEconClaimCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOEconClaimCode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconClaimCode)
  if (has_code()) {
    GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*code_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&time_acquired_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(time_acquired_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconClaimCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconClaimCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 code_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_code_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_acquired = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_acquired();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_acquired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOEconClaimCode.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconClaimCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconClaimCode)
  return false;
#undef DO_
}

void CSOEconClaimCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconClaimCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 code_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code_type(), output);
  }

  // optional uint32 time_acquired = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_acquired(), output);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOEconClaimCode.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconClaimCode)
}

::google::protobuf::uint8* CSOEconClaimCode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconClaimCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 code_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code_type(), target);
  }

  // optional uint32 time_acquired = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_acquired(), target);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOEconClaimCode.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconClaimCode)
  return target;
}

size_t CSOEconClaimCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconClaimCode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 code_type = 2;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

    // optional uint32 time_acquired = 3;
    if (has_time_acquired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_acquired());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconClaimCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconClaimCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconClaimCode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconClaimCode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconClaimCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconClaimCode)
    MergeFrom(*source);
  }
}

void CSOEconClaimCode::MergeFrom(const CSOEconClaimCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconClaimCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      code_type_ = from.code_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_acquired_ = from.time_acquired_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconClaimCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconClaimCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconClaimCode::CopyFrom(const CSOEconClaimCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconClaimCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconClaimCode::IsInitialized() const {
  return true;
}

void CSOEconClaimCode::Swap(CSOEconClaimCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconClaimCode::InternalSwap(CSOEconClaimCode* other) {
  code_.Swap(&other->code_);
  std::swap(account_id_, other->account_id_);
  std::swap(code_type_, other->code_type_);
  std::swap(time_acquired_, other->time_acquired_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOEconClaimCode::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOEconClaimCode

// optional uint32 account_id = 1;
bool CSOEconClaimCode::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOEconClaimCode::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOEconClaimCode::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOEconClaimCode::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSOEconClaimCode::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconClaimCode.account_id)
  return account_id_;
}
void CSOEconClaimCode::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconClaimCode.account_id)
}

// optional uint32 code_type = 2;
bool CSOEconClaimCode::has_code_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOEconClaimCode::set_has_code_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOEconClaimCode::clear_has_code_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOEconClaimCode::clear_code_type() {
  code_type_ = 0u;
  clear_has_code_type();
}
::google::protobuf::uint32 CSOEconClaimCode::code_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconClaimCode.code_type)
  return code_type_;
}
void CSOEconClaimCode::set_code_type(::google::protobuf::uint32 value) {
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconClaimCode.code_type)
}

// optional uint32 time_acquired = 3;
bool CSOEconClaimCode::has_time_acquired() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSOEconClaimCode::set_has_time_acquired() {
  _has_bits_[0] |= 0x00000008u;
}
void CSOEconClaimCode::clear_has_time_acquired() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSOEconClaimCode::clear_time_acquired() {
  time_acquired_ = 0u;
  clear_has_time_acquired();
}
::google::protobuf::uint32 CSOEconClaimCode::time_acquired() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconClaimCode.time_acquired)
  return time_acquired_;
}
void CSOEconClaimCode::set_time_acquired(::google::protobuf::uint32 value) {
  set_has_time_acquired();
  time_acquired_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconClaimCode.time_acquired)
}

// optional string code = 4;
bool CSOEconClaimCode::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOEconClaimCode::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOEconClaimCode::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOEconClaimCode::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& CSOEconClaimCode::code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconClaimCode.code)
  return code_.GetNoArena();
}
void CSOEconClaimCode::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconClaimCode.code)
}
#if LANG_CXX11
void CSOEconClaimCode::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSOEconClaimCode.code)
}
#endif
void CSOEconClaimCode::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSOEconClaimCode.code)
}
void CSOEconClaimCode::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSOEconClaimCode.code)
}
::std::string* CSOEconClaimCode::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSOEconClaimCode.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSOEconClaimCode::release_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CSOEconClaimCode.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSOEconClaimCode::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSOEconClaimCode.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStoreGetUserData::kPriceSheetVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStoreGetUserData::CMsgStoreGetUserData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgStoreGetUserData)
}
CMsgStoreGetUserData::CMsgStoreGetUserData(const CMsgStoreGetUserData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  price_sheet_version_ = from.price_sheet_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgStoreGetUserData)
}

void CMsgStoreGetUserData::SharedCtor() {
  _cached_size_ = 0;
  price_sheet_version_ = 0u;
}

CMsgStoreGetUserData::~CMsgStoreGetUserData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgStoreGetUserData)
  SharedDtor();
}

void CMsgStoreGetUserData::SharedDtor() {
}

void CMsgStoreGetUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStoreGetUserData::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStoreGetUserData& CMsgStoreGetUserData::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStoreGetUserData* CMsgStoreGetUserData::New(::google::protobuf::Arena* arena) const {
  CMsgStoreGetUserData* n = new CMsgStoreGetUserData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStoreGetUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgStoreGetUserData)
  price_sheet_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStoreGetUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgStoreGetUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 price_sheet_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_price_sheet_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &price_sheet_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgStoreGetUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgStoreGetUserData)
  return false;
#undef DO_
}

void CMsgStoreGetUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgStoreGetUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 price_sheet_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->price_sheet_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgStoreGetUserData)
}

::google::protobuf::uint8* CMsgStoreGetUserData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgStoreGetUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 price_sheet_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->price_sheet_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgStoreGetUserData)
  return target;
}

size_t CMsgStoreGetUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgStoreGetUserData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed32 price_sheet_version = 1;
  if (has_price_sheet_version()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStoreGetUserData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgStoreGetUserData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStoreGetUserData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStoreGetUserData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgStoreGetUserData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgStoreGetUserData)
    MergeFrom(*source);
  }
}

void CMsgStoreGetUserData::MergeFrom(const CMsgStoreGetUserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgStoreGetUserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_price_sheet_version()) {
    set_price_sheet_version(from.price_sheet_version());
  }
}

void CMsgStoreGetUserData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgStoreGetUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStoreGetUserData::CopyFrom(const CMsgStoreGetUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgStoreGetUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserData::IsInitialized() const {
  return true;
}

void CMsgStoreGetUserData::Swap(CMsgStoreGetUserData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStoreGetUserData::InternalSwap(CMsgStoreGetUserData* other) {
  std::swap(price_sheet_version_, other->price_sheet_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStoreGetUserData::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStoreGetUserData

// optional fixed32 price_sheet_version = 1;
bool CMsgStoreGetUserData::has_price_sheet_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgStoreGetUserData::set_has_price_sheet_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgStoreGetUserData::clear_has_price_sheet_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgStoreGetUserData::clear_price_sheet_version() {
  price_sheet_version_ = 0u;
  clear_has_price_sheet_version();
}
::google::protobuf::uint32 CMsgStoreGetUserData::price_sheet_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserData.price_sheet_version)
  return price_sheet_version_;
}
void CMsgStoreGetUserData::set_price_sheet_version(::google::protobuf::uint32 value) {
  set_has_price_sheet_version();
  price_sheet_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserData.price_sheet_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStoreGetUserDataResponse::kResultFieldNumber;
const int CMsgStoreGetUserDataResponse::kCurrencyFieldNumber;
const int CMsgStoreGetUserDataResponse::kCountryFieldNumber;
const int CMsgStoreGetUserDataResponse::kPriceSheetVersionFieldNumber;
const int CMsgStoreGetUserDataResponse::kExperimentDataFieldNumber;
const int CMsgStoreGetUserDataResponse::kFeaturedItemIdxFieldNumber;
const int CMsgStoreGetUserDataResponse::kShowHatDescriptionsFieldNumber;
const int CMsgStoreGetUserDataResponse::kPriceSheetFieldNumber;
const int CMsgStoreGetUserDataResponse::kDefaultItemSortFieldNumber;
const int CMsgStoreGetUserDataResponse::kPopularItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgStoreGetUserDataResponse)
}
CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse(const CMsgStoreGetUserDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      popular_items_(from.popular_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  price_sheet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price_sheet()) {
    price_sheet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_sheet_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&show_hat_descriptions_) -
    reinterpret_cast<char*>(&result_) + sizeof(show_hat_descriptions_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgStoreGetUserDataResponse)
}

void CMsgStoreGetUserDataResponse::SharedCtor() {
  _cached_size_ = 0;
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_sheet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&default_item_sort_) -
    reinterpret_cast<char*>(&result_) + sizeof(default_item_sort_));
  show_hat_descriptions_ = true;
}

CMsgStoreGetUserDataResponse::~CMsgStoreGetUserDataResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgStoreGetUserDataResponse)
  SharedDtor();
}

void CMsgStoreGetUserDataResponse::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_sheet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgStoreGetUserDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStoreGetUserDataResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStoreGetUserDataResponse& CMsgStoreGetUserDataResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStoreGetUserDataResponse* CMsgStoreGetUserDataResponse::New(::google::protobuf::Arena* arena) const {
  CMsgStoreGetUserDataResponse* n = new CMsgStoreGetUserDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStoreGetUserDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgStoreGetUserDataResponse)
  popular_items_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_price_sheet()) {
      GOOGLE_DCHECK(!price_sheet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*price_sheet_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&default_item_sort_) -
      reinterpret_cast<char*>(&result_) + sizeof(default_item_sort_));
  }
  show_hat_descriptions_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStoreGetUserDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgStoreGetUserDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 currency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgStoreGetUserDataResponse.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 price_sheet_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_price_sheet_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &price_sheet_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 experiment_data = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_experiment_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &experiment_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 featured_item_idx = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_featured_item_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featured_item_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_hat_descriptions = 7 [default = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_show_hat_descriptions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_hat_descriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes price_sheet = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_price_sheet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 default_item_sort = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_default_item_sort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_item_sort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 popular_items = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_popular_items())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_popular_items())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgStoreGetUserDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgStoreGetUserDataResponse)
  return false;
#undef DO_
}

void CMsgStoreGetUserDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgStoreGetUserDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 currency = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency(), output);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStoreGetUserDataResponse.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country(), output);
  }

  // optional fixed32 price_sheet_version = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->price_sheet_version(), output);
  }

  // optional uint64 experiment_data = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->experiment_data(), output);
  }

  // optional int32 featured_item_idx = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->featured_item_idx(), output);
  }

  // optional bool show_hat_descriptions = 7 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->show_hat_descriptions(), output);
  }

  // optional bytes price_sheet = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->price_sheet(), output);
  }

  // optional int32 default_item_sort = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->default_item_sort(), output);
  }

  // repeated uint32 popular_items = 10;
  for (int i = 0, n = this->popular_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->popular_items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgStoreGetUserDataResponse)
}

::google::protobuf::uint8* CMsgStoreGetUserDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgStoreGetUserDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 currency = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency(), target);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStoreGetUserDataResponse.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }

  // optional fixed32 price_sheet_version = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->price_sheet_version(), target);
  }

  // optional uint64 experiment_data = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->experiment_data(), target);
  }

  // optional int32 featured_item_idx = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->featured_item_idx(), target);
  }

  // optional bool show_hat_descriptions = 7 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->show_hat_descriptions(), target);
  }

  // optional bytes price_sheet = 8;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->price_sheet(), target);
  }

  // optional int32 default_item_sort = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->default_item_sort(), target);
  }

  // repeated uint32 popular_items = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->popular_items_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgStoreGetUserDataResponse)
  return target;
}

size_t CMsgStoreGetUserDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgStoreGetUserDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 popular_items = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->popular_items_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->popular_items_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional bytes price_sheet = 8;
    if (has_price_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->price_sheet());
    }

    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional uint64 experiment_data = 5 [default = 0];
    if (has_experiment_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->experiment_data());
    }

    // optional fixed32 price_sheet_version = 4;
    if (has_price_sheet_version()) {
      total_size += 1 + 4;
    }

    // optional int32 featured_item_idx = 6;
    if (has_featured_item_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featured_item_idx());
    }

    // optional int32 default_item_sort = 9 [default = 0];
    if (has_default_item_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_item_sort());
    }

  }
  // optional bool show_hat_descriptions = 7 [default = true];
  if (has_show_hat_descriptions()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStoreGetUserDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgStoreGetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStoreGetUserDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStoreGetUserDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgStoreGetUserDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgStoreGetUserDataResponse)
    MergeFrom(*source);
  }
}

void CMsgStoreGetUserDataResponse::MergeFrom(const CMsgStoreGetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgStoreGetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  popular_items_.MergeFrom(from.popular_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_price_sheet();
      price_sheet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_sheet_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00000010u) {
      experiment_data_ = from.experiment_data_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_sheet_version_ = from.price_sheet_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      featured_item_idx_ = from.featured_item_idx_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_item_sort_ = from.default_item_sort_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_show_hat_descriptions(from.show_hat_descriptions());
  }
}

void CMsgStoreGetUserDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgStoreGetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStoreGetUserDataResponse::CopyFrom(const CMsgStoreGetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgStoreGetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserDataResponse::IsInitialized() const {
  return true;
}

void CMsgStoreGetUserDataResponse::Swap(CMsgStoreGetUserDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStoreGetUserDataResponse::InternalSwap(CMsgStoreGetUserDataResponse* other) {
  popular_items_.InternalSwap(&other->popular_items_);
  country_.Swap(&other->country_);
  price_sheet_.Swap(&other->price_sheet_);
  std::swap(result_, other->result_);
  std::swap(currency_, other->currency_);
  std::swap(experiment_data_, other->experiment_data_);
  std::swap(price_sheet_version_, other->price_sheet_version_);
  std::swap(featured_item_idx_, other->featured_item_idx_);
  std::swap(default_item_sort_, other->default_item_sort_);
  std::swap(show_hat_descriptions_, other->show_hat_descriptions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStoreGetUserDataResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStoreGetUserDataResponse

// optional int32 result = 1;
bool CMsgStoreGetUserDataResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgStoreGetUserDataResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgStoreGetUserDataResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgStoreGetUserDataResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 CMsgStoreGetUserDataResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.result)
  return result_;
}
void CMsgStoreGetUserDataResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.result)
}

// optional int32 currency = 2;
bool CMsgStoreGetUserDataResponse::has_currency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgStoreGetUserDataResponse::set_has_currency() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgStoreGetUserDataResponse::clear_has_currency() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgStoreGetUserDataResponse::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
::google::protobuf::int32 CMsgStoreGetUserDataResponse::currency() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.currency)
  return currency_;
}
void CMsgStoreGetUserDataResponse::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.currency)
}

// optional string country = 3;
bool CMsgStoreGetUserDataResponse::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgStoreGetUserDataResponse::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgStoreGetUserDataResponse::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgStoreGetUserDataResponse::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& CMsgStoreGetUserDataResponse::country() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.country)
  return country_.GetNoArena();
}
void CMsgStoreGetUserDataResponse::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.country)
}
#if LANG_CXX11
void CMsgStoreGetUserDataResponse::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgStoreGetUserDataResponse.country)
}
#endif
void CMsgStoreGetUserDataResponse::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgStoreGetUserDataResponse.country)
}
void CMsgStoreGetUserDataResponse::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgStoreGetUserDataResponse.country)
}
::std::string* CMsgStoreGetUserDataResponse::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgStoreGetUserDataResponse.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStoreGetUserDataResponse::release_country() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgStoreGetUserDataResponse.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStoreGetUserDataResponse::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgStoreGetUserDataResponse.country)
}

// optional fixed32 price_sheet_version = 4;
bool CMsgStoreGetUserDataResponse::has_price_sheet_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgStoreGetUserDataResponse::set_has_price_sheet_version() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgStoreGetUserDataResponse::clear_has_price_sheet_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgStoreGetUserDataResponse::clear_price_sheet_version() {
  price_sheet_version_ = 0u;
  clear_has_price_sheet_version();
}
::google::protobuf::uint32 CMsgStoreGetUserDataResponse::price_sheet_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.price_sheet_version)
  return price_sheet_version_;
}
void CMsgStoreGetUserDataResponse::set_price_sheet_version(::google::protobuf::uint32 value) {
  set_has_price_sheet_version();
  price_sheet_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.price_sheet_version)
}

// optional uint64 experiment_data = 5 [default = 0];
bool CMsgStoreGetUserDataResponse::has_experiment_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgStoreGetUserDataResponse::set_has_experiment_data() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgStoreGetUserDataResponse::clear_has_experiment_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgStoreGetUserDataResponse::clear_experiment_data() {
  experiment_data_ = GOOGLE_ULONGLONG(0);
  clear_has_experiment_data();
}
::google::protobuf::uint64 CMsgStoreGetUserDataResponse::experiment_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.experiment_data)
  return experiment_data_;
}
void CMsgStoreGetUserDataResponse::set_experiment_data(::google::protobuf::uint64 value) {
  set_has_experiment_data();
  experiment_data_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.experiment_data)
}

// optional int32 featured_item_idx = 6;
bool CMsgStoreGetUserDataResponse::has_featured_item_idx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgStoreGetUserDataResponse::set_has_featured_item_idx() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgStoreGetUserDataResponse::clear_has_featured_item_idx() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgStoreGetUserDataResponse::clear_featured_item_idx() {
  featured_item_idx_ = 0;
  clear_has_featured_item_idx();
}
::google::protobuf::int32 CMsgStoreGetUserDataResponse::featured_item_idx() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.featured_item_idx)
  return featured_item_idx_;
}
void CMsgStoreGetUserDataResponse::set_featured_item_idx(::google::protobuf::int32 value) {
  set_has_featured_item_idx();
  featured_item_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.featured_item_idx)
}

// optional bool show_hat_descriptions = 7 [default = true];
bool CMsgStoreGetUserDataResponse::has_show_hat_descriptions() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgStoreGetUserDataResponse::set_has_show_hat_descriptions() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgStoreGetUserDataResponse::clear_has_show_hat_descriptions() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgStoreGetUserDataResponse::clear_show_hat_descriptions() {
  show_hat_descriptions_ = true;
  clear_has_show_hat_descriptions();
}
bool CMsgStoreGetUserDataResponse::show_hat_descriptions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.show_hat_descriptions)
  return show_hat_descriptions_;
}
void CMsgStoreGetUserDataResponse::set_show_hat_descriptions(bool value) {
  set_has_show_hat_descriptions();
  show_hat_descriptions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.show_hat_descriptions)
}

// optional bytes price_sheet = 8;
bool CMsgStoreGetUserDataResponse::has_price_sheet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgStoreGetUserDataResponse::set_has_price_sheet() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgStoreGetUserDataResponse::clear_has_price_sheet() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgStoreGetUserDataResponse::clear_price_sheet() {
  price_sheet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price_sheet();
}
const ::std::string& CMsgStoreGetUserDataResponse::price_sheet() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.price_sheet)
  return price_sheet_.GetNoArena();
}
void CMsgStoreGetUserDataResponse::set_price_sheet(const ::std::string& value) {
  set_has_price_sheet();
  price_sheet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.price_sheet)
}
#if LANG_CXX11
void CMsgStoreGetUserDataResponse::set_price_sheet(::std::string&& value) {
  set_has_price_sheet();
  price_sheet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgStoreGetUserDataResponse.price_sheet)
}
#endif
void CMsgStoreGetUserDataResponse::set_price_sheet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price_sheet();
  price_sheet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgStoreGetUserDataResponse.price_sheet)
}
void CMsgStoreGetUserDataResponse::set_price_sheet(const void* value, size_t size) {
  set_has_price_sheet();
  price_sheet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgStoreGetUserDataResponse.price_sheet)
}
::std::string* CMsgStoreGetUserDataResponse::mutable_price_sheet() {
  set_has_price_sheet();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgStoreGetUserDataResponse.price_sheet)
  return price_sheet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStoreGetUserDataResponse::release_price_sheet() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgStoreGetUserDataResponse.price_sheet)
  clear_has_price_sheet();
  return price_sheet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStoreGetUserDataResponse::set_allocated_price_sheet(::std::string* price_sheet) {
  if (price_sheet != NULL) {
    set_has_price_sheet();
  } else {
    clear_has_price_sheet();
  }
  price_sheet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_sheet);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgStoreGetUserDataResponse.price_sheet)
}

// optional int32 default_item_sort = 9 [default = 0];
bool CMsgStoreGetUserDataResponse::has_default_item_sort() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgStoreGetUserDataResponse::set_has_default_item_sort() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgStoreGetUserDataResponse::clear_has_default_item_sort() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgStoreGetUserDataResponse::clear_default_item_sort() {
  default_item_sort_ = 0;
  clear_has_default_item_sort();
}
::google::protobuf::int32 CMsgStoreGetUserDataResponse::default_item_sort() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.default_item_sort)
  return default_item_sort_;
}
void CMsgStoreGetUserDataResponse::set_default_item_sort(::google::protobuf::int32 value) {
  set_has_default_item_sort();
  default_item_sort_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.default_item_sort)
}

// repeated uint32 popular_items = 10;
int CMsgStoreGetUserDataResponse::popular_items_size() const {
  return popular_items_.size();
}
void CMsgStoreGetUserDataResponse::clear_popular_items() {
  popular_items_.Clear();
}
::google::protobuf::uint32 CMsgStoreGetUserDataResponse::popular_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStoreGetUserDataResponse.popular_items)
  return popular_items_.Get(index);
}
void CMsgStoreGetUserDataResponse::set_popular_items(int index, ::google::protobuf::uint32 value) {
  popular_items_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStoreGetUserDataResponse.popular_items)
}
void CMsgStoreGetUserDataResponse::add_popular_items(::google::protobuf::uint32 value) {
  popular_items_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgStoreGetUserDataResponse.popular_items)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgStoreGetUserDataResponse::popular_items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgStoreGetUserDataResponse.popular_items)
  return popular_items_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgStoreGetUserDataResponse::mutable_popular_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgStoreGetUserDataResponse.popular_items)
  return &popular_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgUpdateItemSchema::kItemsGameFieldNumber;
const int CMsgUpdateItemSchema::kItemSchemaVersionFieldNumber;
const int CMsgUpdateItemSchema::kItemsGameUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgUpdateItemSchema::CMsgUpdateItemSchema()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgUpdateItemSchema)
}
CMsgUpdateItemSchema::CMsgUpdateItemSchema(const CMsgUpdateItemSchema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_game_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_items_game()) {
    items_game_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_);
  }
  items_game_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_items_game_url()) {
    items_game_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_url_);
  }
  item_schema_version_ = from.item_schema_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgUpdateItemSchema)
}

void CMsgUpdateItemSchema::SharedCtor() {
  _cached_size_ = 0;
  items_game_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_game_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_schema_version_ = 0u;
}

CMsgUpdateItemSchema::~CMsgUpdateItemSchema() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgUpdateItemSchema)
  SharedDtor();
}

void CMsgUpdateItemSchema::SharedDtor() {
  items_game_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_game_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgUpdateItemSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateItemSchema::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgUpdateItemSchema& CMsgUpdateItemSchema::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgUpdateItemSchema* CMsgUpdateItemSchema::New(::google::protobuf::Arena* arena) const {
  CMsgUpdateItemSchema* n = new CMsgUpdateItemSchema;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgUpdateItemSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgUpdateItemSchema)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_items_game()) {
      GOOGLE_DCHECK(!items_game_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*items_game_.UnsafeRawStringPointer())->clear();
    }
    if (has_items_game_url()) {
      GOOGLE_DCHECK(!items_game_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*items_game_url_.UnsafeRawStringPointer())->clear();
    }
  }
  item_schema_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgUpdateItemSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgUpdateItemSchema)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes items_game = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 item_schema_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_item_schema_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &item_schema_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string items_game_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items_game_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->items_game_url().data(), this->items_game_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgUpdateItemSchema.items_game_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgUpdateItemSchema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgUpdateItemSchema)
  return false;
#undef DO_
}

void CMsgUpdateItemSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgUpdateItemSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes items_game = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->items_game(), output);
  }

  // optional fixed32 item_schema_version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->item_schema_version(), output);
  }

  // optional string items_game_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgUpdateItemSchema.items_game_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->items_game_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgUpdateItemSchema)
}

::google::protobuf::uint8* CMsgUpdateItemSchema::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgUpdateItemSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes items_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->items_game(), target);
  }

  // optional fixed32 item_schema_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->item_schema_version(), target);
  }

  // optional string items_game_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgUpdateItemSchema.items_game_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->items_game_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgUpdateItemSchema)
  return target;
}

size_t CMsgUpdateItemSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgUpdateItemSchema)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes items_game = 1;
    if (has_items_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->items_game());
    }

    // optional string items_game_url = 3;
    if (has_items_game_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items_game_url());
    }

    // optional fixed32 item_schema_version = 2;
    if (has_item_schema_version()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateItemSchema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgUpdateItemSchema)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateItemSchema* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgUpdateItemSchema>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgUpdateItemSchema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgUpdateItemSchema)
    MergeFrom(*source);
  }
}

void CMsgUpdateItemSchema::MergeFrom(const CMsgUpdateItemSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgUpdateItemSchema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_items_game();
      items_game_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_items_game_url();
      items_game_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      item_schema_version_ = from.item_schema_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUpdateItemSchema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgUpdateItemSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateItemSchema::CopyFrom(const CMsgUpdateItemSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgUpdateItemSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateItemSchema::IsInitialized() const {
  return true;
}

void CMsgUpdateItemSchema::Swap(CMsgUpdateItemSchema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgUpdateItemSchema::InternalSwap(CMsgUpdateItemSchema* other) {
  items_game_.Swap(&other->items_game_);
  items_game_url_.Swap(&other->items_game_url_);
  std::swap(item_schema_version_, other->item_schema_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgUpdateItemSchema::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgUpdateItemSchema

// optional bytes items_game = 1;
bool CMsgUpdateItemSchema::has_items_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgUpdateItemSchema::set_has_items_game() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgUpdateItemSchema::clear_has_items_game() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgUpdateItemSchema::clear_items_game() {
  items_game_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_items_game();
}
const ::std::string& CMsgUpdateItemSchema::items_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgUpdateItemSchema.items_game)
  return items_game_.GetNoArena();
}
void CMsgUpdateItemSchema::set_items_game(const ::std::string& value) {
  set_has_items_game();
  items_game_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgUpdateItemSchema.items_game)
}
#if LANG_CXX11
void CMsgUpdateItemSchema::set_items_game(::std::string&& value) {
  set_has_items_game();
  items_game_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgUpdateItemSchema.items_game)
}
#endif
void CMsgUpdateItemSchema::set_items_game(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_items_game();
  items_game_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgUpdateItemSchema.items_game)
}
void CMsgUpdateItemSchema::set_items_game(const void* value, size_t size) {
  set_has_items_game();
  items_game_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgUpdateItemSchema.items_game)
}
::std::string* CMsgUpdateItemSchema::mutable_items_game() {
  set_has_items_game();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgUpdateItemSchema.items_game)
  return items_game_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgUpdateItemSchema::release_items_game() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgUpdateItemSchema.items_game)
  clear_has_items_game();
  return items_game_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgUpdateItemSchema::set_allocated_items_game(::std::string* items_game) {
  if (items_game != NULL) {
    set_has_items_game();
  } else {
    clear_has_items_game();
  }
  items_game_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), items_game);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgUpdateItemSchema.items_game)
}

// optional fixed32 item_schema_version = 2;
bool CMsgUpdateItemSchema::has_item_schema_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgUpdateItemSchema::set_has_item_schema_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgUpdateItemSchema::clear_has_item_schema_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgUpdateItemSchema::clear_item_schema_version() {
  item_schema_version_ = 0u;
  clear_has_item_schema_version();
}
::google::protobuf::uint32 CMsgUpdateItemSchema::item_schema_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgUpdateItemSchema.item_schema_version)
  return item_schema_version_;
}
void CMsgUpdateItemSchema::set_item_schema_version(::google::protobuf::uint32 value) {
  set_has_item_schema_version();
  item_schema_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgUpdateItemSchema.item_schema_version)
}

// optional string items_game_url = 3;
bool CMsgUpdateItemSchema::has_items_game_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgUpdateItemSchema::set_has_items_game_url() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgUpdateItemSchema::clear_has_items_game_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgUpdateItemSchema::clear_items_game_url() {
  items_game_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_items_game_url();
}
const ::std::string& CMsgUpdateItemSchema::items_game_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgUpdateItemSchema.items_game_url)
  return items_game_url_.GetNoArena();
}
void CMsgUpdateItemSchema::set_items_game_url(const ::std::string& value) {
  set_has_items_game_url();
  items_game_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgUpdateItemSchema.items_game_url)
}
#if LANG_CXX11
void CMsgUpdateItemSchema::set_items_game_url(::std::string&& value) {
  set_has_items_game_url();
  items_game_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgUpdateItemSchema.items_game_url)
}
#endif
void CMsgUpdateItemSchema::set_items_game_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_items_game_url();
  items_game_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgUpdateItemSchema.items_game_url)
}
void CMsgUpdateItemSchema::set_items_game_url(const char* value, size_t size) {
  set_has_items_game_url();
  items_game_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgUpdateItemSchema.items_game_url)
}
::std::string* CMsgUpdateItemSchema::mutable_items_game_url() {
  set_has_items_game_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgUpdateItemSchema.items_game_url)
  return items_game_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgUpdateItemSchema::release_items_game_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgUpdateItemSchema.items_game_url)
  clear_has_items_game_url();
  return items_game_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgUpdateItemSchema::set_allocated_items_game_url(::std::string* items_game_url) {
  if (items_game_url != NULL) {
    set_has_items_game_url();
  } else {
    clear_has_items_game_url();
  }
  items_game_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), items_game_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgUpdateItemSchema.items_game_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCError::kErrorTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCError::CMsgGCError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCError)
}
CMsgGCError::CMsgGCError(const CMsgGCError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_text()) {
    error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCError)
}

void CMsgGCError::SharedCtor() {
  _cached_size_ = 0;
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCError::~CMsgGCError() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCError)
  SharedDtor();
}

void CMsgGCError::SharedDtor() {
  error_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCError::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCError& CMsgGCError::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCError* CMsgGCError::New(::google::protobuf::Arena* arena) const {
  CMsgGCError* n = new CMsgGCError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCError::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCError)
  if (has_error_text()) {
    GOOGLE_DCHECK(!error_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*error_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCError.error_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCError)
  return false;
#undef DO_
}

void CMsgGCError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCError.error_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCError)
}

::google::protobuf::uint8* CMsgGCError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCError.error_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCError)
  return target;
}

size_t CMsgGCError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string error_text = 1;
  if (has_error_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCError)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCError)
    MergeFrom(*source);
  }
}

void CMsgGCError::MergeFrom(const CMsgGCError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error_text()) {
    set_has_error_text();
    error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
  }
}

void CMsgGCError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCError::CopyFrom(const CMsgGCError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCError::IsInitialized() const {
  return true;
}

void CMsgGCError::Swap(CMsgGCError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCError::InternalSwap(CMsgGCError* other) {
  error_text_.Swap(&other->error_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCError::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCError

// optional string error_text = 1;
bool CMsgGCError::has_error_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCError::set_has_error_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCError::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCError::clear_error_text() {
  error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_text();
}
const ::std::string& CMsgGCError::error_text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCError.error_text)
  return error_text_.GetNoArena();
}
void CMsgGCError::set_error_text(const ::std::string& value) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCError.error_text)
}
#if LANG_CXX11
void CMsgGCError::set_error_text(::std::string&& value) {
  set_has_error_text();
  error_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCError.error_text)
}
#endif
void CMsgGCError::set_error_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCError.error_text)
}
void CMsgGCError::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCError.error_text)
}
::std::string* CMsgGCError::mutable_error_text() {
  set_has_error_text();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCError.error_text)
  return error_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCError::release_error_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCError.error_text)
  clear_has_error_text();
  return error_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCError::set_allocated_error_text(::std::string* error_text) {
  if (error_text != NULL) {
    set_has_error_text();
  } else {
    clear_has_error_text();
  }
  error_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCError.error_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgRequestInventoryRefresh)
}
CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(const CMsgRequestInventoryRefresh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgRequestInventoryRefresh)
}

void CMsgRequestInventoryRefresh::SharedCtor() {
  _cached_size_ = 0;
}

CMsgRequestInventoryRefresh::~CMsgRequestInventoryRefresh() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgRequestInventoryRefresh)
  SharedDtor();
}

void CMsgRequestInventoryRefresh::SharedDtor() {
}

void CMsgRequestInventoryRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestInventoryRefresh::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRequestInventoryRefresh& CMsgRequestInventoryRefresh::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRequestInventoryRefresh* CMsgRequestInventoryRefresh::New(::google::protobuf::Arena* arena) const {
  CMsgRequestInventoryRefresh* n = new CMsgRequestInventoryRefresh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRequestInventoryRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgRequestInventoryRefresh)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRequestInventoryRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgRequestInventoryRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgRequestInventoryRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgRequestInventoryRefresh)
  return false;
#undef DO_
}

void CMsgRequestInventoryRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgRequestInventoryRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgRequestInventoryRefresh)
}

::google::protobuf::uint8* CMsgRequestInventoryRefresh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgRequestInventoryRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgRequestInventoryRefresh)
  return target;
}

size_t CMsgRequestInventoryRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgRequestInventoryRefresh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestInventoryRefresh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgRequestInventoryRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestInventoryRefresh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRequestInventoryRefresh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgRequestInventoryRefresh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgRequestInventoryRefresh)
    MergeFrom(*source);
  }
}

void CMsgRequestInventoryRefresh::MergeFrom(const CMsgRequestInventoryRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgRequestInventoryRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRequestInventoryRefresh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgRequestInventoryRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestInventoryRefresh::CopyFrom(const CMsgRequestInventoryRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgRequestInventoryRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestInventoryRefresh::IsInitialized() const {
  return true;
}

void CMsgRequestInventoryRefresh::Swap(CMsgRequestInventoryRefresh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestInventoryRefresh::InternalSwap(CMsgRequestInventoryRefresh* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRequestInventoryRefresh::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRequestInventoryRefresh

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConVarValue::kNameFieldNumber;
const int CMsgConVarValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConVarValue::CMsgConVarValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConVarValue)
}
CMsgConVarValue::CMsgConVarValue(const CMsgConVarValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConVarValue)
}

void CMsgConVarValue::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgConVarValue::~CMsgConVarValue() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConVarValue)
  SharedDtor();
}

void CMsgConVarValue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgConVarValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConVarValue::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgConVarValue& CMsgConVarValue::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgConVarValue* CMsgConVarValue::New(::google::protobuf::Arena* arena) const {
  CMsgConVarValue* n = new CMsgConVarValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgConVarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConVarValue)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgConVarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConVarValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgConVarValue.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgConVarValue.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConVarValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConVarValue)
  return false;
#undef DO_
}

void CMsgConVarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConVarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgConVarValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgConVarValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConVarValue)
}

::google::protobuf::uint8* CMsgConVarValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConVarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgConVarValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgConVarValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConVarValue)
  return target;
}

size_t CMsgConVarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConVarValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConVarValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConVarValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConVarValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgConVarValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConVarValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConVarValue)
    MergeFrom(*source);
  }
}

void CMsgConVarValue::MergeFrom(const CMsgConVarValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConVarValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgConVarValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConVarValue::CopyFrom(const CMsgConVarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConVarValue::IsInitialized() const {
  return true;
}

void CMsgConVarValue::Swap(CMsgConVarValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConVarValue::InternalSwap(CMsgConVarValue* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgConVarValue::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgConVarValue

// optional string name = 1;
bool CMsgConVarValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgConVarValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgConVarValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgConVarValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgConVarValue::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConVarValue.name)
  return name_.GetNoArena();
}
void CMsgConVarValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConVarValue.name)
}
#if LANG_CXX11
void CMsgConVarValue::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgConVarValue.name)
}
#endif
void CMsgConVarValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgConVarValue.name)
}
void CMsgConVarValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgConVarValue.name)
}
::std::string* CMsgConVarValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgConVarValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgConVarValue::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgConVarValue.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgConVarValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgConVarValue.name)
}

// optional string value = 2;
bool CMsgConVarValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgConVarValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgConVarValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgConVarValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgConVarValue::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConVarValue.value)
  return value_.GetNoArena();
}
void CMsgConVarValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConVarValue.value)
}
#if LANG_CXX11
void CMsgConVarValue::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgConVarValue.value)
}
#endif
void CMsgConVarValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgConVarValue.value)
}
void CMsgConVarValue::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgConVarValue.value)
}
::std::string* CMsgConVarValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgConVarValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgConVarValue::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgConVarValue.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgConVarValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgConVarValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReplicateConVars::kConvarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReplicateConVars::CMsgReplicateConVars()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgReplicateConVars)
}
CMsgReplicateConVars::CMsgReplicateConVars(const CMsgReplicateConVars& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      convars_(from.convars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgReplicateConVars)
}

void CMsgReplicateConVars::SharedCtor() {
  _cached_size_ = 0;
}

CMsgReplicateConVars::~CMsgReplicateConVars() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgReplicateConVars)
  SharedDtor();
}

void CMsgReplicateConVars::SharedDtor() {
}

void CMsgReplicateConVars::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplicateConVars::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgReplicateConVars& CMsgReplicateConVars::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgReplicateConVars* CMsgReplicateConVars::New(::google::protobuf::Arena* arena) const {
  CMsgReplicateConVars* n = new CMsgReplicateConVars;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgReplicateConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgReplicateConVars)
  convars_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgReplicateConVars::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgReplicateConVars)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgConVarValue convars = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_convars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgReplicateConVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgReplicateConVars)
  return false;
#undef DO_
}

void CMsgReplicateConVars::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgReplicateConVars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConVarValue convars = 1;
  for (unsigned int i = 0, n = this->convars_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->convars(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgReplicateConVars)
}

::google::protobuf::uint8* CMsgReplicateConVars::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgReplicateConVars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConVarValue convars = 1;
  for (unsigned int i = 0, n = this->convars_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->convars(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgReplicateConVars)
  return target;
}

size_t CMsgReplicateConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgReplicateConVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgConVarValue convars = 1;
  {
    unsigned int count = this->convars_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->convars(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplicateConVars::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgReplicateConVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReplicateConVars* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgReplicateConVars>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgReplicateConVars)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgReplicateConVars)
    MergeFrom(*source);
  }
}

void CMsgReplicateConVars::MergeFrom(const CMsgReplicateConVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgReplicateConVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  convars_.MergeFrom(from.convars_);
}

void CMsgReplicateConVars::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgReplicateConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplicateConVars::CopyFrom(const CMsgReplicateConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgReplicateConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplicateConVars::IsInitialized() const {
  return true;
}

void CMsgReplicateConVars::Swap(CMsgReplicateConVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReplicateConVars::InternalSwap(CMsgReplicateConVars* other) {
  convars_.InternalSwap(&other->convars_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgReplicateConVars::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgReplicateConVars

// repeated .proto.dota.CMsgConVarValue convars = 1;
int CMsgReplicateConVars::convars_size() const {
  return convars_.size();
}
void CMsgReplicateConVars::clear_convars() {
  convars_.Clear();
}
const ::proto::dota::CMsgConVarValue& CMsgReplicateConVars::convars(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReplicateConVars.convars)
  return convars_.Get(index);
}
::proto::dota::CMsgConVarValue* CMsgReplicateConVars::mutable_convars(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgReplicateConVars.convars)
  return convars_.Mutable(index);
}
::proto::dota::CMsgConVarValue* CMsgReplicateConVars::add_convars() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgReplicateConVars.convars)
  return convars_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConVarValue >*
CMsgReplicateConVars::mutable_convars() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgReplicateConVars.convars)
  return &convars_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConVarValue >&
CMsgReplicateConVars::convars() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgReplicateConVars.convars)
  return convars_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConsumableExhausted::kItemDefIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConsumableExhausted::CMsgConsumableExhausted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConsumableExhausted)
}
CMsgConsumableExhausted::CMsgConsumableExhausted(const CMsgConsumableExhausted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_def_id_ = from.item_def_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConsumableExhausted)
}

void CMsgConsumableExhausted::SharedCtor() {
  _cached_size_ = 0;
  item_def_id_ = 0;
}

CMsgConsumableExhausted::~CMsgConsumableExhausted() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConsumableExhausted)
  SharedDtor();
}

void CMsgConsumableExhausted::SharedDtor() {
}

void CMsgConsumableExhausted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConsumableExhausted::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgConsumableExhausted& CMsgConsumableExhausted::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgConsumableExhausted* CMsgConsumableExhausted::New(::google::protobuf::Arena* arena) const {
  CMsgConsumableExhausted* n = new CMsgConsumableExhausted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgConsumableExhausted::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConsumableExhausted)
  item_def_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgConsumableExhausted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConsumableExhausted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_def_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_def_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_def_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConsumableExhausted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConsumableExhausted)
  return false;
#undef DO_
}

void CMsgConsumableExhausted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConsumableExhausted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_def_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConsumableExhausted)
}

::google::protobuf::uint8* CMsgConsumableExhausted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConsumableExhausted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_def_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConsumableExhausted)
  return target;
}

size_t CMsgConsumableExhausted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConsumableExhausted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 item_def_id = 1;
  if (has_item_def_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_def_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConsumableExhausted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConsumableExhausted)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConsumableExhausted* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgConsumableExhausted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConsumableExhausted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConsumableExhausted)
    MergeFrom(*source);
  }
}

void CMsgConsumableExhausted::MergeFrom(const CMsgConsumableExhausted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConsumableExhausted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_def_id()) {
    set_item_def_id(from.item_def_id());
  }
}

void CMsgConsumableExhausted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConsumableExhausted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConsumableExhausted::CopyFrom(const CMsgConsumableExhausted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConsumableExhausted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConsumableExhausted::IsInitialized() const {
  return true;
}

void CMsgConsumableExhausted::Swap(CMsgConsumableExhausted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConsumableExhausted::InternalSwap(CMsgConsumableExhausted* other) {
  std::swap(item_def_id_, other->item_def_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgConsumableExhausted::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgConsumableExhausted

// optional int32 item_def_id = 1;
bool CMsgConsumableExhausted::has_item_def_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgConsumableExhausted::set_has_item_def_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgConsumableExhausted::clear_has_item_def_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgConsumableExhausted::clear_item_def_id() {
  item_def_id_ = 0;
  clear_has_item_def_id();
}
::google::protobuf::int32 CMsgConsumableExhausted::item_def_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConsumableExhausted.item_def_id)
  return item_def_id_;
}
void CMsgConsumableExhausted::set_item_def_id(::google::protobuf::int32 value) {
  set_has_item_def_id();
  item_def_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConsumableExhausted.item_def_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgItemAcknowledged::kAccountIdFieldNumber;
const int CMsgItemAcknowledged::kInventoryFieldNumber;
const int CMsgItemAcknowledged::kDefIndexFieldNumber;
const int CMsgItemAcknowledged::kQualityFieldNumber;
const int CMsgItemAcknowledged::kRarityFieldNumber;
const int CMsgItemAcknowledged::kOriginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgItemAcknowledged::CMsgItemAcknowledged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgItemAcknowledged)
}
CMsgItemAcknowledged::CMsgItemAcknowledged(const CMsgItemAcknowledged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgItemAcknowledged)
}

void CMsgItemAcknowledged::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(origin_));
}

CMsgItemAcknowledged::~CMsgItemAcknowledged() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgItemAcknowledged)
  SharedDtor();
}

void CMsgItemAcknowledged::SharedDtor() {
}

void CMsgItemAcknowledged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgItemAcknowledged::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgItemAcknowledged& CMsgItemAcknowledged::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgItemAcknowledged* CMsgItemAcknowledged::New(::google::protobuf::Arena* arena) const {
  CMsgItemAcknowledged* n = new CMsgItemAcknowledged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgItemAcknowledged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgItemAcknowledged)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&origin_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgItemAcknowledged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgItemAcknowledged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inventory = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_inventory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rarity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_rarity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rarity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 origin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_origin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgItemAcknowledged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgItemAcknowledged)
  return false;
#undef DO_
}

void CMsgItemAcknowledged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgItemAcknowledged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 inventory = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inventory(), output);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  // optional uint32 quality = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quality(), output);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rarity(), output);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->origin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgItemAcknowledged)
}

::google::protobuf::uint8* CMsgItemAcknowledged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgItemAcknowledged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 inventory = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inventory(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  // optional uint32 quality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quality(), target);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rarity(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->origin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgItemAcknowledged)
  return target;
}

size_t CMsgItemAcknowledged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgItemAcknowledged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 inventory = 2;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }

    // optional uint32 def_index = 3;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 rarity = 5;
    if (has_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rarity());
    }

    // optional uint32 origin = 6;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgItemAcknowledged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemAcknowledged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgItemAcknowledged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgItemAcknowledged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgItemAcknowledged)
    MergeFrom(*source);
  }
}

void CMsgItemAcknowledged::MergeFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      rarity_ = from.rarity_;
    }
    if (cached_has_bits & 0x00000020u) {
      origin_ = from.origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgItemAcknowledged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemAcknowledged::CopyFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged::IsInitialized() const {
  return true;
}

void CMsgItemAcknowledged::Swap(CMsgItemAcknowledged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgItemAcknowledged::InternalSwap(CMsgItemAcknowledged* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(inventory_, other->inventory_);
  std::swap(def_index_, other->def_index_);
  std::swap(quality_, other->quality_);
  std::swap(rarity_, other->rarity_);
  std::swap(origin_, other->origin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgItemAcknowledged::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgItemAcknowledged

// optional uint32 account_id = 1;
bool CMsgItemAcknowledged::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgItemAcknowledged::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgItemAcknowledged::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgItemAcknowledged::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgItemAcknowledged::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgItemAcknowledged.account_id)
  return account_id_;
}
void CMsgItemAcknowledged::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgItemAcknowledged.account_id)
}

// optional uint32 inventory = 2;
bool CMsgItemAcknowledged::has_inventory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgItemAcknowledged::set_has_inventory() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgItemAcknowledged::clear_has_inventory() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgItemAcknowledged::clear_inventory() {
  inventory_ = 0u;
  clear_has_inventory();
}
::google::protobuf::uint32 CMsgItemAcknowledged::inventory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgItemAcknowledged.inventory)
  return inventory_;
}
void CMsgItemAcknowledged::set_inventory(::google::protobuf::uint32 value) {
  set_has_inventory();
  inventory_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgItemAcknowledged.inventory)
}

// optional uint32 def_index = 3;
bool CMsgItemAcknowledged::has_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgItemAcknowledged::set_has_def_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgItemAcknowledged::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgItemAcknowledged::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
::google::protobuf::uint32 CMsgItemAcknowledged::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgItemAcknowledged.def_index)
  return def_index_;
}
void CMsgItemAcknowledged::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgItemAcknowledged.def_index)
}

// optional uint32 quality = 4;
bool CMsgItemAcknowledged::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgItemAcknowledged::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgItemAcknowledged::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgItemAcknowledged::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
::google::protobuf::uint32 CMsgItemAcknowledged::quality() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgItemAcknowledged.quality)
  return quality_;
}
void CMsgItemAcknowledged::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgItemAcknowledged.quality)
}

// optional uint32 rarity = 5;
bool CMsgItemAcknowledged::has_rarity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgItemAcknowledged::set_has_rarity() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgItemAcknowledged::clear_has_rarity() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgItemAcknowledged::clear_rarity() {
  rarity_ = 0u;
  clear_has_rarity();
}
::google::protobuf::uint32 CMsgItemAcknowledged::rarity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgItemAcknowledged.rarity)
  return rarity_;
}
void CMsgItemAcknowledged::set_rarity(::google::protobuf::uint32 value) {
  set_has_rarity();
  rarity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgItemAcknowledged.rarity)
}

// optional uint32 origin = 6;
bool CMsgItemAcknowledged::has_origin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgItemAcknowledged::set_has_origin() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgItemAcknowledged::clear_has_origin() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgItemAcknowledged::clear_origin() {
  origin_ = 0u;
  clear_has_origin();
}
::google::protobuf::uint32 CMsgItemAcknowledged::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgItemAcknowledged.origin)
  return origin_;
}
void CMsgItemAcknowledged::set_origin(::google::protobuf::uint32 value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgItemAcknowledged.origin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetItemPositions_ItemPosition::kItemIdFieldNumber;
const int CMsgSetItemPositions_ItemPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSetItemPositions.ItemPosition)
}
CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(const CMsgSetItemPositions_ItemPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSetItemPositions.ItemPosition)
}

void CMsgSetItemPositions_ItemPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_id_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(position_));
}

CMsgSetItemPositions_ItemPosition::~CMsgSetItemPositions_ItemPosition() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSetItemPositions.ItemPosition)
  SharedDtor();
}

void CMsgSetItemPositions_ItemPosition::SharedDtor() {
}

void CMsgSetItemPositions_ItemPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetItemPositions_ItemPosition::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetItemPositions_ItemPosition& CMsgSetItemPositions_ItemPosition::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetItemPositions_ItemPosition* CMsgSetItemPositions_ItemPosition::New(::google::protobuf::Arena* arena) const {
  CMsgSetItemPositions_ItemPosition* n = new CMsgSetItemPositions_ItemPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetItemPositions_ItemPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_id_, 0, reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&item_id_) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetItemPositions_ItemPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSetItemPositions.ItemPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSetItemPositions.ItemPosition)
  return false;
#undef DO_
}

void CMsgSetItemPositions_ItemPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSetItemPositions.ItemPosition)
}

::google::protobuf::uint8* CMsgSetItemPositions_ItemPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSetItemPositions.ItemPosition)
  return target;
}

size_t CMsgSetItemPositions_ItemPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetItemPositions_ItemPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetItemPositions_ItemPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetItemPositions_ItemPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSetItemPositions.ItemPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSetItemPositions.ItemPosition)
    MergeFrom(*source);
  }
}

void CMsgSetItemPositions_ItemPosition::MergeFrom(const CMsgSetItemPositions_ItemPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const CMsgSetItemPositions_ItemPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions_ItemPosition::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions_ItemPosition::Swap(CMsgSetItemPositions_ItemPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetItemPositions_ItemPosition::InternalSwap(CMsgSetItemPositions_ItemPosition* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(position_, other->position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetItemPositions_ItemPosition::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetItemPositions_ItemPosition

// optional uint64 item_id = 1;
bool CMsgSetItemPositions_ItemPosition::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetItemPositions_ItemPosition::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetItemPositions_ItemPosition::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetItemPositions_ItemPosition::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CMsgSetItemPositions_ItemPosition::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSetItemPositions.ItemPosition.item_id)
  return item_id_;
}
void CMsgSetItemPositions_ItemPosition::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSetItemPositions.ItemPosition.item_id)
}

// optional uint32 position = 2;
bool CMsgSetItemPositions_ItemPosition::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetItemPositions_ItemPosition::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetItemPositions_ItemPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetItemPositions_ItemPosition::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 CMsgSetItemPositions_ItemPosition::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSetItemPositions.ItemPosition.position)
  return position_;
}
void CMsgSetItemPositions_ItemPosition::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSetItemPositions.ItemPosition.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetItemPositions::kItemPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetItemPositions::CMsgSetItemPositions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSetItemPositions)
}
CMsgSetItemPositions::CMsgSetItemPositions(const CMsgSetItemPositions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_positions_(from.item_positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSetItemPositions)
}

void CMsgSetItemPositions::SharedCtor() {
  _cached_size_ = 0;
}

CMsgSetItemPositions::~CMsgSetItemPositions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSetItemPositions)
  SharedDtor();
}

void CMsgSetItemPositions::SharedDtor() {
}

void CMsgSetItemPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetItemPositions::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetItemPositions& CMsgSetItemPositions::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetItemPositions* CMsgSetItemPositions::New(::google::protobuf::Arena* arena) const {
  CMsgSetItemPositions* n = new CMsgSetItemPositions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetItemPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSetItemPositions)
  item_positions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetItemPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSetItemPositions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSetItemPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSetItemPositions)
  return false;
#undef DO_
}

void CMsgSetItemPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSetItemPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
  for (unsigned int i = 0, n = this->item_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_positions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSetItemPositions)
}

::google::protobuf::uint8* CMsgSetItemPositions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSetItemPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
  for (unsigned int i = 0, n = this->item_positions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->item_positions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSetItemPositions)
  return target;
}

size_t CMsgSetItemPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSetItemPositions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
  {
    unsigned int count = this->item_positions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_positions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetItemPositions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSetItemPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetItemPositions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetItemPositions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSetItemPositions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSetItemPositions)
    MergeFrom(*source);
  }
}

void CMsgSetItemPositions::MergeFrom(const CMsgSetItemPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSetItemPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_positions_.MergeFrom(from.item_positions_);
}

void CMsgSetItemPositions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSetItemPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemPositions::CopyFrom(const CMsgSetItemPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSetItemPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions::Swap(CMsgSetItemPositions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetItemPositions::InternalSwap(CMsgSetItemPositions* other) {
  item_positions_.InternalSwap(&other->item_positions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetItemPositions::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetItemPositions

// repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
int CMsgSetItemPositions::item_positions_size() const {
  return item_positions_.size();
}
void CMsgSetItemPositions::clear_item_positions() {
  item_positions_.Clear();
}
const ::proto::dota::CMsgSetItemPositions_ItemPosition& CMsgSetItemPositions::item_positions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSetItemPositions.item_positions)
  return item_positions_.Get(index);
}
::proto::dota::CMsgSetItemPositions_ItemPosition* CMsgSetItemPositions::mutable_item_positions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSetItemPositions.item_positions)
  return item_positions_.Mutable(index);
}
::proto::dota::CMsgSetItemPositions_ItemPosition* CMsgSetItemPositions::add_item_positions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSetItemPositions.item_positions)
  return item_positions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSetItemPositions_ItemPosition >*
CMsgSetItemPositions::mutable_item_positions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSetItemPositions.item_positions)
  return &item_positions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSetItemPositions_ItemPosition >&
CMsgSetItemPositions::item_positions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSetItemPositions.item_positions)
  return item_positions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCNameItemNotification::kPlayerSteamidFieldNumber;
const int CMsgGCNameItemNotification::kItemDefIndexFieldNumber;
const int CMsgGCNameItemNotification::kItemNameCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCNameItemNotification::CMsgGCNameItemNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCNameItemNotification)
}
CMsgGCNameItemNotification::CMsgGCNameItemNotification(const CMsgGCNameItemNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_name_custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_name_custom()) {
    item_name_custom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_custom_);
  }
  ::memcpy(&player_steamid_, &from.player_steamid_,
    reinterpret_cast<char*>(&item_def_index_) -
    reinterpret_cast<char*>(&player_steamid_) + sizeof(item_def_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCNameItemNotification)
}

void CMsgGCNameItemNotification::SharedCtor() {
  _cached_size_ = 0;
  item_name_custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_steamid_, 0, reinterpret_cast<char*>(&item_def_index_) -
    reinterpret_cast<char*>(&player_steamid_) + sizeof(item_def_index_));
}

CMsgGCNameItemNotification::~CMsgGCNameItemNotification() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCNameItemNotification)
  SharedDtor();
}

void CMsgGCNameItemNotification::SharedDtor() {
  item_name_custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCNameItemNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNameItemNotification::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCNameItemNotification& CMsgGCNameItemNotification::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCNameItemNotification* CMsgGCNameItemNotification::New(::google::protobuf::Arena* arena) const {
  CMsgGCNameItemNotification* n = new CMsgGCNameItemNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCNameItemNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCNameItemNotification)
  if (has_item_name_custom()) {
    GOOGLE_DCHECK(!item_name_custom_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*item_name_custom_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&player_steamid_, 0, reinterpret_cast<char*>(&item_def_index_) -
      reinterpret_cast<char*>(&player_steamid_) + sizeof(item_def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCNameItemNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCNameItemNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 player_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_player_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_def_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string item_name_custom = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_name_custom().data(), this->item_name_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCNameItemNotification.item_name_custom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCNameItemNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCNameItemNotification)
  return false;
#undef DO_
}

void CMsgGCNameItemNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCNameItemNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_steamid(), output);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def_index(), output);
  }

  // optional string item_name_custom = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name_custom().data(), this->item_name_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCNameItemNotification.item_name_custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->item_name_custom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCNameItemNotification)
}

::google::protobuf::uint8* CMsgGCNameItemNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCNameItemNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_steamid(), target);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def_index(), target);
  }

  // optional string item_name_custom = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name_custom().data(), this->item_name_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCNameItemNotification.item_name_custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->item_name_custom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCNameItemNotification)
  return target;
}

size_t CMsgGCNameItemNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCNameItemNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string item_name_custom = 3;
    if (has_item_name_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name_custom());
    }

    // optional fixed64 player_steamid = 1;
    if (has_player_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 item_def_index = 2;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNameItemNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCNameItemNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNameItemNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCNameItemNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCNameItemNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCNameItemNotification)
    MergeFrom(*source);
  }
}

void CMsgGCNameItemNotification::MergeFrom(const CMsgGCNameItemNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCNameItemNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_item_name_custom();
      item_name_custom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_custom_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_steamid_ = from.player_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_index_ = from.item_def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCNameItemNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCNameItemNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNameItemNotification::CopyFrom(const CMsgGCNameItemNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCNameItemNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNameItemNotification::IsInitialized() const {
  return true;
}

void CMsgGCNameItemNotification::Swap(CMsgGCNameItemNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCNameItemNotification::InternalSwap(CMsgGCNameItemNotification* other) {
  item_name_custom_.Swap(&other->item_name_custom_);
  std::swap(player_steamid_, other->player_steamid_);
  std::swap(item_def_index_, other->item_def_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCNameItemNotification::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCNameItemNotification

// optional fixed64 player_steamid = 1;
bool CMsgGCNameItemNotification::has_player_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCNameItemNotification::set_has_player_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCNameItemNotification::clear_has_player_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCNameItemNotification::clear_player_steamid() {
  player_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_steamid();
}
::google::protobuf::uint64 CMsgGCNameItemNotification::player_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCNameItemNotification.player_steamid)
  return player_steamid_;
}
void CMsgGCNameItemNotification::set_player_steamid(::google::protobuf::uint64 value) {
  set_has_player_steamid();
  player_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCNameItemNotification.player_steamid)
}

// optional uint32 item_def_index = 2;
bool CMsgGCNameItemNotification::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCNameItemNotification::set_has_item_def_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCNameItemNotification::clear_has_item_def_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCNameItemNotification::clear_item_def_index() {
  item_def_index_ = 0u;
  clear_has_item_def_index();
}
::google::protobuf::uint32 CMsgGCNameItemNotification::item_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCNameItemNotification.item_def_index)
  return item_def_index_;
}
void CMsgGCNameItemNotification::set_item_def_index(::google::protobuf::uint32 value) {
  set_has_item_def_index();
  item_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCNameItemNotification.item_def_index)
}

// optional string item_name_custom = 3;
bool CMsgGCNameItemNotification::has_item_name_custom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCNameItemNotification::set_has_item_name_custom() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCNameItemNotification::clear_has_item_name_custom() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCNameItemNotification::clear_item_name_custom() {
  item_name_custom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_name_custom();
}
const ::std::string& CMsgGCNameItemNotification::item_name_custom() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCNameItemNotification.item_name_custom)
  return item_name_custom_.GetNoArena();
}
void CMsgGCNameItemNotification::set_item_name_custom(const ::std::string& value) {
  set_has_item_name_custom();
  item_name_custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCNameItemNotification.item_name_custom)
}
#if LANG_CXX11
void CMsgGCNameItemNotification::set_item_name_custom(::std::string&& value) {
  set_has_item_name_custom();
  item_name_custom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCNameItemNotification.item_name_custom)
}
#endif
void CMsgGCNameItemNotification::set_item_name_custom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_item_name_custom();
  item_name_custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCNameItemNotification.item_name_custom)
}
void CMsgGCNameItemNotification::set_item_name_custom(const char* value, size_t size) {
  set_has_item_name_custom();
  item_name_custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCNameItemNotification.item_name_custom)
}
::std::string* CMsgGCNameItemNotification::mutable_item_name_custom() {
  set_has_item_name_custom();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCNameItemNotification.item_name_custom)
  return item_name_custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCNameItemNotification::release_item_name_custom() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCNameItemNotification.item_name_custom)
  clear_has_item_name_custom();
  return item_name_custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCNameItemNotification::set_allocated_item_name_custom(::std::string* item_name_custom) {
  if (item_name_custom != NULL) {
    set_has_item_name_custom();
  } else {
    clear_has_item_name_custom();
  }
  item_name_custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_name_custom);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCNameItemNotification.item_name_custom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientDisplayNotification::kNotificationTitleLocalizationKeyFieldNumber;
const int CMsgGCClientDisplayNotification::kNotificationBodyLocalizationKeyFieldNumber;
const int CMsgGCClientDisplayNotification::kBodySubstringKeysFieldNumber;
const int CMsgGCClientDisplayNotification::kBodySubstringValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientDisplayNotification)
}
CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification(const CMsgGCClientDisplayNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      body_substring_keys_(from.body_substring_keys_),
      body_substring_values_(from.body_substring_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notification_title_localization_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notification_title_localization_key()) {
    notification_title_localization_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_title_localization_key_);
  }
  notification_body_localization_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notification_body_localization_key()) {
    notification_body_localization_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_body_localization_key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientDisplayNotification)
}

void CMsgGCClientDisplayNotification::SharedCtor() {
  _cached_size_ = 0;
  notification_title_localization_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notification_body_localization_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCClientDisplayNotification::~CMsgGCClientDisplayNotification() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientDisplayNotification)
  SharedDtor();
}

void CMsgGCClientDisplayNotification::SharedDtor() {
  notification_title_localization_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notification_body_localization_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCClientDisplayNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientDisplayNotification::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCClientDisplayNotification& CMsgGCClientDisplayNotification::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCClientDisplayNotification* CMsgGCClientDisplayNotification::New(::google::protobuf::Arena* arena) const {
  CMsgGCClientDisplayNotification* n = new CMsgGCClientDisplayNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCClientDisplayNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientDisplayNotification)
  body_substring_keys_.Clear();
  body_substring_values_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_notification_title_localization_key()) {
      GOOGLE_DCHECK(!notification_title_localization_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notification_title_localization_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_notification_body_localization_key()) {
      GOOGLE_DCHECK(!notification_body_localization_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notification_body_localization_key_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCClientDisplayNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientDisplayNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notification_title_localization_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_title_localization_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notification_title_localization_key().data(), this->notification_title_localization_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notification_body_localization_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_body_localization_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notification_body_localization_key().data(), this->notification_body_localization_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string body_substring_keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_body_substring_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body_substring_keys(this->body_substring_keys_size() - 1).data(),
            this->body_substring_keys(this->body_substring_keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCClientDisplayNotification.body_substring_keys");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string body_substring_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_body_substring_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body_substring_values(this->body_substring_values_size() - 1).data(),
            this->body_substring_values(this->body_substring_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCClientDisplayNotification.body_substring_values");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientDisplayNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientDisplayNotification)
  return false;
#undef DO_
}

void CMsgGCClientDisplayNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientDisplayNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notification_title_localization_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_title_localization_key().data(), this->notification_title_localization_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->notification_title_localization_key(), output);
  }

  // optional string notification_body_localization_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_body_localization_key().data(), this->notification_body_localization_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notification_body_localization_key(), output);
  }

  // repeated string body_substring_keys = 3;
  for (int i = 0, n = this->body_substring_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_substring_keys(i).data(), this->body_substring_keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.body_substring_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->body_substring_keys(i), output);
  }

  // repeated string body_substring_values = 4;
  for (int i = 0, n = this->body_substring_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_substring_values(i).data(), this->body_substring_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.body_substring_values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->body_substring_values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientDisplayNotification)
}

::google::protobuf::uint8* CMsgGCClientDisplayNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientDisplayNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notification_title_localization_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_title_localization_key().data(), this->notification_title_localization_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notification_title_localization_key(), target);
  }

  // optional string notification_body_localization_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_body_localization_key().data(), this->notification_body_localization_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notification_body_localization_key(), target);
  }

  // repeated string body_substring_keys = 3;
  for (int i = 0, n = this->body_substring_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_substring_keys(i).data(), this->body_substring_keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.body_substring_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->body_substring_keys(i), target);
  }

  // repeated string body_substring_values = 4;
  for (int i = 0, n = this->body_substring_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_substring_values(i).data(), this->body_substring_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.body_substring_values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->body_substring_values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientDisplayNotification)
  return target;
}

size_t CMsgGCClientDisplayNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientDisplayNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string body_substring_keys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->body_substring_keys_size());
  for (int i = 0, n = this->body_substring_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->body_substring_keys(i));
  }

  // repeated string body_substring_values = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->body_substring_values_size());
  for (int i = 0, n = this->body_substring_values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->body_substring_values(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string notification_title_localization_key = 1;
    if (has_notification_title_localization_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_title_localization_key());
    }

    // optional string notification_body_localization_key = 2;
    if (has_notification_body_localization_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_body_localization_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientDisplayNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientDisplayNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientDisplayNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCClientDisplayNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientDisplayNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientDisplayNotification)
    MergeFrom(*source);
  }
}

void CMsgGCClientDisplayNotification::MergeFrom(const CMsgGCClientDisplayNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientDisplayNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_substring_keys_.MergeFrom(from.body_substring_keys_);
  body_substring_values_.MergeFrom(from.body_substring_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_notification_title_localization_key();
      notification_title_localization_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_title_localization_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_notification_body_localization_key();
      notification_body_localization_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_body_localization_key_);
    }
  }
}

void CMsgGCClientDisplayNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientDisplayNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientDisplayNotification::CopyFrom(const CMsgGCClientDisplayNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientDisplayNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientDisplayNotification::IsInitialized() const {
  return true;
}

void CMsgGCClientDisplayNotification::Swap(CMsgGCClientDisplayNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientDisplayNotification::InternalSwap(CMsgGCClientDisplayNotification* other) {
  body_substring_keys_.InternalSwap(&other->body_substring_keys_);
  body_substring_values_.InternalSwap(&other->body_substring_values_);
  notification_title_localization_key_.Swap(&other->notification_title_localization_key_);
  notification_body_localization_key_.Swap(&other->notification_body_localization_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCClientDisplayNotification::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCClientDisplayNotification

// optional string notification_title_localization_key = 1;
bool CMsgGCClientDisplayNotification::has_notification_title_localization_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCClientDisplayNotification::set_has_notification_title_localization_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCClientDisplayNotification::clear_has_notification_title_localization_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCClientDisplayNotification::clear_notification_title_localization_key() {
  notification_title_localization_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notification_title_localization_key();
}
const ::std::string& CMsgGCClientDisplayNotification::notification_title_localization_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key)
  return notification_title_localization_key_.GetNoArena();
}
void CMsgGCClientDisplayNotification::set_notification_title_localization_key(const ::std::string& value) {
  set_has_notification_title_localization_key();
  notification_title_localization_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key)
}
#if LANG_CXX11
void CMsgGCClientDisplayNotification::set_notification_title_localization_key(::std::string&& value) {
  set_has_notification_title_localization_key();
  notification_title_localization_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key)
}
#endif
void CMsgGCClientDisplayNotification::set_notification_title_localization_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_notification_title_localization_key();
  notification_title_localization_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key)
}
void CMsgGCClientDisplayNotification::set_notification_title_localization_key(const char* value, size_t size) {
  set_has_notification_title_localization_key();
  notification_title_localization_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key)
}
::std::string* CMsgGCClientDisplayNotification::mutable_notification_title_localization_key() {
  set_has_notification_title_localization_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key)
  return notification_title_localization_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCClientDisplayNotification::release_notification_title_localization_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key)
  clear_has_notification_title_localization_key();
  return notification_title_localization_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCClientDisplayNotification::set_allocated_notification_title_localization_key(::std::string* notification_title_localization_key) {
  if (notification_title_localization_key != NULL) {
    set_has_notification_title_localization_key();
  } else {
    clear_has_notification_title_localization_key();
  }
  notification_title_localization_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notification_title_localization_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key)
}

// optional string notification_body_localization_key = 2;
bool CMsgGCClientDisplayNotification::has_notification_body_localization_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCClientDisplayNotification::set_has_notification_body_localization_key() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCClientDisplayNotification::clear_has_notification_body_localization_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCClientDisplayNotification::clear_notification_body_localization_key() {
  notification_body_localization_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notification_body_localization_key();
}
const ::std::string& CMsgGCClientDisplayNotification::notification_body_localization_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key)
  return notification_body_localization_key_.GetNoArena();
}
void CMsgGCClientDisplayNotification::set_notification_body_localization_key(const ::std::string& value) {
  set_has_notification_body_localization_key();
  notification_body_localization_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key)
}
#if LANG_CXX11
void CMsgGCClientDisplayNotification::set_notification_body_localization_key(::std::string&& value) {
  set_has_notification_body_localization_key();
  notification_body_localization_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key)
}
#endif
void CMsgGCClientDisplayNotification::set_notification_body_localization_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_notification_body_localization_key();
  notification_body_localization_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key)
}
void CMsgGCClientDisplayNotification::set_notification_body_localization_key(const char* value, size_t size) {
  set_has_notification_body_localization_key();
  notification_body_localization_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key)
}
::std::string* CMsgGCClientDisplayNotification::mutable_notification_body_localization_key() {
  set_has_notification_body_localization_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key)
  return notification_body_localization_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCClientDisplayNotification::release_notification_body_localization_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key)
  clear_has_notification_body_localization_key();
  return notification_body_localization_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCClientDisplayNotification::set_allocated_notification_body_localization_key(::std::string* notification_body_localization_key) {
  if (notification_body_localization_key != NULL) {
    set_has_notification_body_localization_key();
  } else {
    clear_has_notification_body_localization_key();
  }
  notification_body_localization_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notification_body_localization_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key)
}

// repeated string body_substring_keys = 3;
int CMsgGCClientDisplayNotification::body_substring_keys_size() const {
  return body_substring_keys_.size();
}
void CMsgGCClientDisplayNotification::clear_body_substring_keys() {
  body_substring_keys_.Clear();
}
const ::std::string& CMsgGCClientDisplayNotification::body_substring_keys(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
  return body_substring_keys_.Get(index);
}
::std::string* CMsgGCClientDisplayNotification::mutable_body_substring_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
  return body_substring_keys_.Mutable(index);
}
void CMsgGCClientDisplayNotification::set_body_substring_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
  body_substring_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgGCClientDisplayNotification::set_body_substring_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
  body_substring_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgGCClientDisplayNotification::set_body_substring_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  body_substring_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
}
void CMsgGCClientDisplayNotification::set_body_substring_keys(int index, const char* value, size_t size) {
  body_substring_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
}
::std::string* CMsgGCClientDisplayNotification::add_body_substring_keys() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
  return body_substring_keys_.Add();
}
void CMsgGCClientDisplayNotification::add_body_substring_keys(const ::std::string& value) {
  body_substring_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
}
#if LANG_CXX11
void CMsgGCClientDisplayNotification::add_body_substring_keys(::std::string&& value) {
  body_substring_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
}
#endif
void CMsgGCClientDisplayNotification::add_body_substring_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  body_substring_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
}
void CMsgGCClientDisplayNotification::add_body_substring_keys(const char* value, size_t size) {
  body_substring_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgGCClientDisplayNotification::body_substring_keys() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
  return body_substring_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgGCClientDisplayNotification::mutable_body_substring_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCClientDisplayNotification.body_substring_keys)
  return &body_substring_keys_;
}

// repeated string body_substring_values = 4;
int CMsgGCClientDisplayNotification::body_substring_values_size() const {
  return body_substring_values_.size();
}
void CMsgGCClientDisplayNotification::clear_body_substring_values() {
  body_substring_values_.Clear();
}
const ::std::string& CMsgGCClientDisplayNotification::body_substring_values(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
  return body_substring_values_.Get(index);
}
::std::string* CMsgGCClientDisplayNotification::mutable_body_substring_values(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
  return body_substring_values_.Mutable(index);
}
void CMsgGCClientDisplayNotification::set_body_substring_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
  body_substring_values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgGCClientDisplayNotification::set_body_substring_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
  body_substring_values_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgGCClientDisplayNotification::set_body_substring_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  body_substring_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
}
void CMsgGCClientDisplayNotification::set_body_substring_values(int index, const char* value, size_t size) {
  body_substring_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
}
::std::string* CMsgGCClientDisplayNotification::add_body_substring_values() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
  return body_substring_values_.Add();
}
void CMsgGCClientDisplayNotification::add_body_substring_values(const ::std::string& value) {
  body_substring_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
}
#if LANG_CXX11
void CMsgGCClientDisplayNotification::add_body_substring_values(::std::string&& value) {
  body_substring_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
}
#endif
void CMsgGCClientDisplayNotification::add_body_substring_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  body_substring_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
}
void CMsgGCClientDisplayNotification::add_body_substring_values(const char* value, size_t size) {
  body_substring_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgGCClientDisplayNotification::body_substring_values() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
  return body_substring_values_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgGCClientDisplayNotification::mutable_body_substring_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCClientDisplayNotification.body_substring_values)
  return &body_substring_values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCShowItemsPickedUp::kPlayerSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCShowItemsPickedUp)
}
CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp(const CMsgGCShowItemsPickedUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_steamid_ = from.player_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCShowItemsPickedUp)
}

void CMsgGCShowItemsPickedUp::SharedCtor() {
  _cached_size_ = 0;
  player_steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgGCShowItemsPickedUp::~CMsgGCShowItemsPickedUp() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCShowItemsPickedUp)
  SharedDtor();
}

void CMsgGCShowItemsPickedUp::SharedDtor() {
}

void CMsgGCShowItemsPickedUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCShowItemsPickedUp::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCShowItemsPickedUp& CMsgGCShowItemsPickedUp::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCShowItemsPickedUp* CMsgGCShowItemsPickedUp::New(::google::protobuf::Arena* arena) const {
  CMsgGCShowItemsPickedUp* n = new CMsgGCShowItemsPickedUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCShowItemsPickedUp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCShowItemsPickedUp)
  player_steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCShowItemsPickedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCShowItemsPickedUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 player_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_player_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCShowItemsPickedUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCShowItemsPickedUp)
  return false;
#undef DO_
}

void CMsgGCShowItemsPickedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCShowItemsPickedUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCShowItemsPickedUp)
}

::google::protobuf::uint8* CMsgGCShowItemsPickedUp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCShowItemsPickedUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCShowItemsPickedUp)
  return target;
}

size_t CMsgGCShowItemsPickedUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCShowItemsPickedUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 player_steamid = 1;
  if (has_player_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCShowItemsPickedUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCShowItemsPickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCShowItemsPickedUp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCShowItemsPickedUp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCShowItemsPickedUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCShowItemsPickedUp)
    MergeFrom(*source);
  }
}

void CMsgGCShowItemsPickedUp::MergeFrom(const CMsgGCShowItemsPickedUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCShowItemsPickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_steamid()) {
    set_player_steamid(from.player_steamid());
  }
}

void CMsgGCShowItemsPickedUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCShowItemsPickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCShowItemsPickedUp::CopyFrom(const CMsgGCShowItemsPickedUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCShowItemsPickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCShowItemsPickedUp::IsInitialized() const {
  return true;
}

void CMsgGCShowItemsPickedUp::Swap(CMsgGCShowItemsPickedUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCShowItemsPickedUp::InternalSwap(CMsgGCShowItemsPickedUp* other) {
  std::swap(player_steamid_, other->player_steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCShowItemsPickedUp::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCShowItemsPickedUp

// optional fixed64 player_steamid = 1;
bool CMsgGCShowItemsPickedUp::has_player_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCShowItemsPickedUp::set_has_player_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCShowItemsPickedUp::clear_has_player_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCShowItemsPickedUp::clear_player_steamid() {
  player_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_steamid();
}
::google::protobuf::uint64 CMsgGCShowItemsPickedUp::player_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCShowItemsPickedUp.player_steamid)
  return player_steamid_;
}
void CMsgGCShowItemsPickedUp::set_player_steamid(::google::protobuf::uint64 value) {
  set_has_player_steamid();
  player_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCShowItemsPickedUp.player_steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCIncrementKillCountResponse::kKillerAccountIdFieldNumber;
const int CMsgGCIncrementKillCountResponse::kNumKillsFieldNumber;
const int CMsgGCIncrementKillCountResponse::kItemDefFieldNumber;
const int CMsgGCIncrementKillCountResponse::kLevelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCIncrementKillCountResponse)
}
CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse(const CMsgGCIncrementKillCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&killer_account_id_, &from.killer_account_id_,
    reinterpret_cast<char*>(&level_type_) -
    reinterpret_cast<char*>(&killer_account_id_) + sizeof(level_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCIncrementKillCountResponse)
}

void CMsgGCIncrementKillCountResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&killer_account_id_, 0, reinterpret_cast<char*>(&level_type_) -
    reinterpret_cast<char*>(&killer_account_id_) + sizeof(level_type_));
}

CMsgGCIncrementKillCountResponse::~CMsgGCIncrementKillCountResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCIncrementKillCountResponse)
  SharedDtor();
}

void CMsgGCIncrementKillCountResponse::SharedDtor() {
}

void CMsgGCIncrementKillCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCIncrementKillCountResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCIncrementKillCountResponse& CMsgGCIncrementKillCountResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCIncrementKillCountResponse* CMsgGCIncrementKillCountResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCIncrementKillCountResponse* n = new CMsgGCIncrementKillCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCIncrementKillCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCIncrementKillCountResponse)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&killer_account_id_, 0, reinterpret_cast<char*>(&level_type_) -
      reinterpret_cast<char*>(&killer_account_id_) + sizeof(level_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCIncrementKillCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCIncrementKillCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_killer_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_kills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_def = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_item_def();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_level_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCIncrementKillCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCIncrementKillCountResponse)
  return false;
#undef DO_
}

void CMsgGCIncrementKillCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCIncrementKillCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killer_account_id(), output);
  }

  // optional uint32 num_kills = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_kills(), output);
  }

  // optional uint32 item_def = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_def(), output);
  }

  // optional uint32 level_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCIncrementKillCountResponse)
}

::google::protobuf::uint8* CMsgGCIncrementKillCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCIncrementKillCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killer_account_id(), target);
  }

  // optional uint32 num_kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_kills(), target);
  }

  // optional uint32 item_def = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_def(), target);
  }

  // optional uint32 level_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCIncrementKillCountResponse)
  return target;
}

size_t CMsgGCIncrementKillCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCIncrementKillCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
    if (has_killer_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_account_id());
    }

    // optional uint32 num_kills = 2;
    if (has_num_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_kills());
    }

    // optional uint32 item_def = 3;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 level_type = 4;
    if (has_level_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCIncrementKillCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCIncrementKillCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCIncrementKillCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCIncrementKillCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCIncrementKillCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCIncrementKillCountResponse)
    MergeFrom(*source);
  }
}

void CMsgGCIncrementKillCountResponse::MergeFrom(const CMsgGCIncrementKillCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCIncrementKillCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      killer_account_id_ = from.killer_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_kills_ = from.num_kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_type_ = from.level_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCIncrementKillCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCIncrementKillCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIncrementKillCountResponse::CopyFrom(const CMsgGCIncrementKillCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCIncrementKillCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIncrementKillCountResponse::IsInitialized() const {
  return true;
}

void CMsgGCIncrementKillCountResponse::Swap(CMsgGCIncrementKillCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCIncrementKillCountResponse::InternalSwap(CMsgGCIncrementKillCountResponse* other) {
  std::swap(killer_account_id_, other->killer_account_id_);
  std::swap(num_kills_, other->num_kills_);
  std::swap(item_def_, other->item_def_);
  std::swap(level_type_, other->level_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCIncrementKillCountResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCIncrementKillCountResponse

// optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
bool CMsgGCIncrementKillCountResponse::has_killer_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCIncrementKillCountResponse::set_has_killer_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCIncrementKillCountResponse::clear_has_killer_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCIncrementKillCountResponse::clear_killer_account_id() {
  killer_account_id_ = 0u;
  clear_has_killer_account_id();
}
::google::protobuf::uint32 CMsgGCIncrementKillCountResponse::killer_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCIncrementKillCountResponse.killer_account_id)
  return killer_account_id_;
}
void CMsgGCIncrementKillCountResponse::set_killer_account_id(::google::protobuf::uint32 value) {
  set_has_killer_account_id();
  killer_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCIncrementKillCountResponse.killer_account_id)
}

// optional uint32 num_kills = 2;
bool CMsgGCIncrementKillCountResponse::has_num_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCIncrementKillCountResponse::set_has_num_kills() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCIncrementKillCountResponse::clear_has_num_kills() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCIncrementKillCountResponse::clear_num_kills() {
  num_kills_ = 0u;
  clear_has_num_kills();
}
::google::protobuf::uint32 CMsgGCIncrementKillCountResponse::num_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCIncrementKillCountResponse.num_kills)
  return num_kills_;
}
void CMsgGCIncrementKillCountResponse::set_num_kills(::google::protobuf::uint32 value) {
  set_has_num_kills();
  num_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCIncrementKillCountResponse.num_kills)
}

// optional uint32 item_def = 3;
bool CMsgGCIncrementKillCountResponse::has_item_def() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCIncrementKillCountResponse::set_has_item_def() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCIncrementKillCountResponse::clear_has_item_def() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCIncrementKillCountResponse::clear_item_def() {
  item_def_ = 0u;
  clear_has_item_def();
}
::google::protobuf::uint32 CMsgGCIncrementKillCountResponse::item_def() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCIncrementKillCountResponse.item_def)
  return item_def_;
}
void CMsgGCIncrementKillCountResponse::set_item_def(::google::protobuf::uint32 value) {
  set_has_item_def();
  item_def_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCIncrementKillCountResponse.item_def)
}

// optional uint32 level_type = 4;
bool CMsgGCIncrementKillCountResponse::has_level_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCIncrementKillCountResponse::set_has_level_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCIncrementKillCountResponse::clear_has_level_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCIncrementKillCountResponse::clear_level_type() {
  level_type_ = 0u;
  clear_has_level_type();
}
::google::protobuf::uint32 CMsgGCIncrementKillCountResponse::level_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCIncrementKillCountResponse.level_type)
  return level_type_;
}
void CMsgGCIncrementKillCountResponse::set_level_type(::google::protobuf::uint32 value) {
  set_has_level_type();
  level_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCIncrementKillCountResponse.level_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemDropRateBonus::kAccountIdFieldNumber;
const int CSOEconItemDropRateBonus::kExpirationDateFieldNumber;
const int CSOEconItemDropRateBonus::kBonusFieldNumber;
const int CSOEconItemDropRateBonus::kBonusCountFieldNumber;
const int CSOEconItemDropRateBonus::kItemIdFieldNumber;
const int CSOEconItemDropRateBonus::kDefIndexFieldNumber;
const int CSOEconItemDropRateBonus::kSecondsLeftFieldNumber;
const int CSOEconItemDropRateBonus::kBoosterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemDropRateBonus::CSOEconItemDropRateBonus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemDropRateBonus)
}
CSOEconItemDropRateBonus::CSOEconItemDropRateBonus(const CSOEconItemDropRateBonus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&booster_type_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(booster_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemDropRateBonus)
}

void CSOEconItemDropRateBonus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&booster_type_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(booster_type_));
}

CSOEconItemDropRateBonus::~CSOEconItemDropRateBonus() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemDropRateBonus)
  SharedDtor();
}

void CSOEconItemDropRateBonus::SharedDtor() {
}

void CSOEconItemDropRateBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemDropRateBonus::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconItemDropRateBonus& CSOEconItemDropRateBonus::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOEconItemDropRateBonus* CSOEconItemDropRateBonus::New(::google::protobuf::Arena* arena) const {
  CSOEconItemDropRateBonus* n = new CSOEconItemDropRateBonus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOEconItemDropRateBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemDropRateBonus)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&booster_type_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(booster_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconItemDropRateBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemDropRateBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 expiration_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_expiration_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &expiration_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bonus = 3 [(.proto.dota.key_field) = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_bonus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bonus_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bonus_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_left = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_seconds_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_booster_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &booster_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemDropRateBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemDropRateBonus)
  return false;
#undef DO_
}

void CSOEconItemDropRateBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemDropRateBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional fixed32 expiration_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->expiration_date(), output);
  }

  // optional float bonus = 3 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bonus(), output);
  }

  // optional uint32 bonus_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bonus_count(), output);
  }

  // optional uint64 item_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->item_id(), output);
  }

  // optional uint32 def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->def_index(), output);
  }

  // optional uint32 seconds_left = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seconds_left(), output);
  }

  // optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->booster_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemDropRateBonus)
}

::google::protobuf::uint8* CSOEconItemDropRateBonus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemDropRateBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional fixed32 expiration_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->expiration_date(), target);
  }

  // optional float bonus = 3 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bonus(), target);
  }

  // optional uint32 bonus_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bonus_count(), target);
  }

  // optional uint64 item_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->item_id(), target);
  }

  // optional uint32 def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->def_index(), target);
  }

  // optional uint32 seconds_left = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seconds_left(), target);
  }

  // optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->booster_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemDropRateBonus)
  return target;
}

size_t CSOEconItemDropRateBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemDropRateBonus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional fixed32 expiration_date = 2;
    if (has_expiration_date()) {
      total_size += 1 + 4;
    }

    // optional float bonus = 3 [(.proto.dota.key_field) = true];
    if (has_bonus()) {
      total_size += 1 + 4;
    }

    // optional uint32 bonus_count = 4;
    if (has_bonus_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_count());
    }

    // optional uint64 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 def_index = 6;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 seconds_left = 7;
    if (has_seconds_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_left());
    }

    // optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
    if (has_booster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->booster_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemDropRateBonus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemDropRateBonus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconItemDropRateBonus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemDropRateBonus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemDropRateBonus)
    MergeFrom(*source);
  }
}

void CSOEconItemDropRateBonus::MergeFrom(const CSOEconItemDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_date_ = from.expiration_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_ = from.bonus_;
    }
    if (cached_has_bits & 0x00000008u) {
      bonus_count_ = from.bonus_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      seconds_left_ = from.seconds_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      booster_type_ = from.booster_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemDropRateBonus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemDropRateBonus::CopyFrom(const CSOEconItemDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemDropRateBonus::IsInitialized() const {
  return true;
}

void CSOEconItemDropRateBonus::Swap(CSOEconItemDropRateBonus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemDropRateBonus::InternalSwap(CSOEconItemDropRateBonus* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(expiration_date_, other->expiration_date_);
  std::swap(bonus_, other->bonus_);
  std::swap(bonus_count_, other->bonus_count_);
  std::swap(item_id_, other->item_id_);
  std::swap(def_index_, other->def_index_);
  std::swap(seconds_left_, other->seconds_left_);
  std::swap(booster_type_, other->booster_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOEconItemDropRateBonus::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOEconItemDropRateBonus

// optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
bool CSOEconItemDropRateBonus::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOEconItemDropRateBonus::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOEconItemDropRateBonus::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOEconItemDropRateBonus::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSOEconItemDropRateBonus::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemDropRateBonus.account_id)
  return account_id_;
}
void CSOEconItemDropRateBonus::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemDropRateBonus.account_id)
}

// optional fixed32 expiration_date = 2;
bool CSOEconItemDropRateBonus::has_expiration_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOEconItemDropRateBonus::set_has_expiration_date() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOEconItemDropRateBonus::clear_has_expiration_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOEconItemDropRateBonus::clear_expiration_date() {
  expiration_date_ = 0u;
  clear_has_expiration_date();
}
::google::protobuf::uint32 CSOEconItemDropRateBonus::expiration_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemDropRateBonus.expiration_date)
  return expiration_date_;
}
void CSOEconItemDropRateBonus::set_expiration_date(::google::protobuf::uint32 value) {
  set_has_expiration_date();
  expiration_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemDropRateBonus.expiration_date)
}

// optional float bonus = 3 [(.proto.dota.key_field) = true];
bool CSOEconItemDropRateBonus::has_bonus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOEconItemDropRateBonus::set_has_bonus() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOEconItemDropRateBonus::clear_has_bonus() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOEconItemDropRateBonus::clear_bonus() {
  bonus_ = 0;
  clear_has_bonus();
}
float CSOEconItemDropRateBonus::bonus() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemDropRateBonus.bonus)
  return bonus_;
}
void CSOEconItemDropRateBonus::set_bonus(float value) {
  set_has_bonus();
  bonus_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemDropRateBonus.bonus)
}

// optional uint32 bonus_count = 4;
bool CSOEconItemDropRateBonus::has_bonus_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSOEconItemDropRateBonus::set_has_bonus_count() {
  _has_bits_[0] |= 0x00000008u;
}
void CSOEconItemDropRateBonus::clear_has_bonus_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSOEconItemDropRateBonus::clear_bonus_count() {
  bonus_count_ = 0u;
  clear_has_bonus_count();
}
::google::protobuf::uint32 CSOEconItemDropRateBonus::bonus_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemDropRateBonus.bonus_count)
  return bonus_count_;
}
void CSOEconItemDropRateBonus::set_bonus_count(::google::protobuf::uint32 value) {
  set_has_bonus_count();
  bonus_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemDropRateBonus.bonus_count)
}

// optional uint64 item_id = 5;
bool CSOEconItemDropRateBonus::has_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSOEconItemDropRateBonus::set_has_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CSOEconItemDropRateBonus::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSOEconItemDropRateBonus::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CSOEconItemDropRateBonus::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemDropRateBonus.item_id)
  return item_id_;
}
void CSOEconItemDropRateBonus::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemDropRateBonus.item_id)
}

// optional uint32 def_index = 6;
bool CSOEconItemDropRateBonus::has_def_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSOEconItemDropRateBonus::set_has_def_index() {
  _has_bits_[0] |= 0x00000020u;
}
void CSOEconItemDropRateBonus::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSOEconItemDropRateBonus::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
::google::protobuf::uint32 CSOEconItemDropRateBonus::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemDropRateBonus.def_index)
  return def_index_;
}
void CSOEconItemDropRateBonus::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemDropRateBonus.def_index)
}

// optional uint32 seconds_left = 7;
bool CSOEconItemDropRateBonus::has_seconds_left() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSOEconItemDropRateBonus::set_has_seconds_left() {
  _has_bits_[0] |= 0x00000040u;
}
void CSOEconItemDropRateBonus::clear_has_seconds_left() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSOEconItemDropRateBonus::clear_seconds_left() {
  seconds_left_ = 0u;
  clear_has_seconds_left();
}
::google::protobuf::uint32 CSOEconItemDropRateBonus::seconds_left() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemDropRateBonus.seconds_left)
  return seconds_left_;
}
void CSOEconItemDropRateBonus::set_seconds_left(::google::protobuf::uint32 value) {
  set_has_seconds_left();
  seconds_left_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemDropRateBonus.seconds_left)
}

// optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
bool CSOEconItemDropRateBonus::has_booster_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSOEconItemDropRateBonus::set_has_booster_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CSOEconItemDropRateBonus::clear_has_booster_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSOEconItemDropRateBonus::clear_booster_type() {
  booster_type_ = 0u;
  clear_has_booster_type();
}
::google::protobuf::uint32 CSOEconItemDropRateBonus::booster_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemDropRateBonus.booster_type)
  return booster_type_;
}
void CSOEconItemDropRateBonus::set_booster_type(::google::protobuf::uint32 value) {
  set_has_booster_type();
  booster_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemDropRateBonus.booster_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemLeagueViewPass::kAccountIdFieldNumber;
const int CSOEconItemLeagueViewPass::kLeagueIdFieldNumber;
const int CSOEconItemLeagueViewPass::kItemindexFieldNumber;
const int CSOEconItemLeagueViewPass::kGrantReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemLeagueViewPass)
}
CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass(const CSOEconItemLeagueViewPass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&grant_reason_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(grant_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemLeagueViewPass)
}

void CSOEconItemLeagueViewPass::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&grant_reason_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(grant_reason_));
}

CSOEconItemLeagueViewPass::~CSOEconItemLeagueViewPass() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemLeagueViewPass)
  SharedDtor();
}

void CSOEconItemLeagueViewPass::SharedDtor() {
}

void CSOEconItemLeagueViewPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemLeagueViewPass::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconItemLeagueViewPass& CSOEconItemLeagueViewPass::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOEconItemLeagueViewPass* CSOEconItemLeagueViewPass::New(::google::protobuf::Arena* arena) const {
  CSOEconItemLeagueViewPass* n = new CSOEconItemLeagueViewPass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOEconItemLeagueViewPass::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemLeagueViewPass)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&grant_reason_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(grant_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconItemLeagueViewPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemLeagueViewPass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 itemindex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_itemindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 grant_reason = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_grant_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grant_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemLeagueViewPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemLeagueViewPass)
  return false;
#undef DO_
}

void CSOEconItemLeagueViewPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemLeagueViewPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 itemindex = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemindex(), output);
  }

  // optional uint32 grant_reason = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->grant_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemLeagueViewPass)
}

::google::protobuf::uint8* CSOEconItemLeagueViewPass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemLeagueViewPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 itemindex = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemindex(), target);
  }

  // optional uint32 grant_reason = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->grant_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemLeagueViewPass)
  return target;
}

size_t CSOEconItemLeagueViewPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemLeagueViewPass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 itemindex = 4;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemindex());
    }

    // optional uint32 grant_reason = 5;
    if (has_grant_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grant_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemLeagueViewPass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemLeagueViewPass)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemLeagueViewPass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconItemLeagueViewPass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemLeagueViewPass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemLeagueViewPass)
    MergeFrom(*source);
  }
}

void CSOEconItemLeagueViewPass::MergeFrom(const CSOEconItemLeagueViewPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemLeagueViewPass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemindex_ = from.itemindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      grant_reason_ = from.grant_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemLeagueViewPass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemLeagueViewPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemLeagueViewPass::CopyFrom(const CSOEconItemLeagueViewPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemLeagueViewPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemLeagueViewPass::IsInitialized() const {
  return true;
}

void CSOEconItemLeagueViewPass::Swap(CSOEconItemLeagueViewPass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemLeagueViewPass::InternalSwap(CSOEconItemLeagueViewPass* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(itemindex_, other->itemindex_);
  std::swap(grant_reason_, other->grant_reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOEconItemLeagueViewPass::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOEconItemLeagueViewPass

// optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
bool CSOEconItemLeagueViewPass::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOEconItemLeagueViewPass::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOEconItemLeagueViewPass::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOEconItemLeagueViewPass::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSOEconItemLeagueViewPass::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemLeagueViewPass.account_id)
  return account_id_;
}
void CSOEconItemLeagueViewPass::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemLeagueViewPass.account_id)
}

// optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
bool CSOEconItemLeagueViewPass::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOEconItemLeagueViewPass::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOEconItemLeagueViewPass::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOEconItemLeagueViewPass::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CSOEconItemLeagueViewPass::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemLeagueViewPass.league_id)
  return league_id_;
}
void CSOEconItemLeagueViewPass::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemLeagueViewPass.league_id)
}

// optional uint32 itemindex = 4;
bool CSOEconItemLeagueViewPass::has_itemindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOEconItemLeagueViewPass::set_has_itemindex() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOEconItemLeagueViewPass::clear_has_itemindex() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOEconItemLeagueViewPass::clear_itemindex() {
  itemindex_ = 0u;
  clear_has_itemindex();
}
::google::protobuf::uint32 CSOEconItemLeagueViewPass::itemindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemLeagueViewPass.itemindex)
  return itemindex_;
}
void CSOEconItemLeagueViewPass::set_itemindex(::google::protobuf::uint32 value) {
  set_has_itemindex();
  itemindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemLeagueViewPass.itemindex)
}

// optional uint32 grant_reason = 5;
bool CSOEconItemLeagueViewPass::has_grant_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSOEconItemLeagueViewPass::set_has_grant_reason() {
  _has_bits_[0] |= 0x00000008u;
}
void CSOEconItemLeagueViewPass::clear_has_grant_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSOEconItemLeagueViewPass::clear_grant_reason() {
  grant_reason_ = 0u;
  clear_has_grant_reason();
}
::google::protobuf::uint32 CSOEconItemLeagueViewPass::grant_reason() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemLeagueViewPass.grant_reason)
  return grant_reason_;
}
void CSOEconItemLeagueViewPass::set_grant_reason(::google::protobuf::uint32 value) {
  set_has_grant_reason();
  grant_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemLeagueViewPass.grant_reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemEventTicket::kAccountIdFieldNumber;
const int CSOEconItemEventTicket::kEventIdFieldNumber;
const int CSOEconItemEventTicket::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemEventTicket::CSOEconItemEventTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemEventTicket)
}
CSOEconItemEventTicket::CSOEconItemEventTicket(const CSOEconItemEventTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemEventTicket)
}

void CSOEconItemEventTicket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(item_id_));
}

CSOEconItemEventTicket::~CSOEconItemEventTicket() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemEventTicket)
  SharedDtor();
}

void CSOEconItemEventTicket::SharedDtor() {
}

void CSOEconItemEventTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemEventTicket::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconItemEventTicket& CSOEconItemEventTicket::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOEconItemEventTicket* CSOEconItemEventTicket::New(::google::protobuf::Arena* arena) const {
  CSOEconItemEventTicket* n = new CSOEconItemEventTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOEconItemEventTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemEventTicket)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconItemEventTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemEventTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemEventTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemEventTicket)
  return false;
#undef DO_
}

void CSOEconItemEventTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemEventTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemEventTicket)
}

::google::protobuf::uint8* CSOEconItemEventTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemEventTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemEventTicket)
  return target;
}

size_t CSOEconItemEventTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemEventTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemEventTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemEventTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemEventTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconItemEventTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemEventTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemEventTicket)
    MergeFrom(*source);
  }
}

void CSOEconItemEventTicket::MergeFrom(const CSOEconItemEventTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemEventTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemEventTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemEventTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemEventTicket::CopyFrom(const CSOEconItemEventTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemEventTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEventTicket::IsInitialized() const {
  return true;
}

void CSOEconItemEventTicket::Swap(CSOEconItemEventTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemEventTicket::InternalSwap(CSOEconItemEventTicket* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(event_id_, other->event_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOEconItemEventTicket::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOEconItemEventTicket

// optional uint32 account_id = 1;
bool CSOEconItemEventTicket::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOEconItemEventTicket::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOEconItemEventTicket::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOEconItemEventTicket::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSOEconItemEventTicket::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemEventTicket.account_id)
  return account_id_;
}
void CSOEconItemEventTicket::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemEventTicket.account_id)
}

// optional uint32 event_id = 2;
bool CSOEconItemEventTicket::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOEconItemEventTicket::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOEconItemEventTicket::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOEconItemEventTicket::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CSOEconItemEventTicket::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemEventTicket.event_id)
  return event_id_;
}
void CSOEconItemEventTicket::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemEventTicket.event_id)
}

// optional uint64 item_id = 3;
bool CSOEconItemEventTicket::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOEconItemEventTicket::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOEconItemEventTicket::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOEconItemEventTicket::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CSOEconItemEventTicket::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemEventTicket.item_id)
  return item_id_;
}
void CSOEconItemEventTicket::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemEventTicket.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemTournamentPassport::kAccountIdFieldNumber;
const int CSOEconItemTournamentPassport::kLeagueIdFieldNumber;
const int CSOEconItemTournamentPassport::kItemIdFieldNumber;
const int CSOEconItemTournamentPassport::kOriginalPurchaserIdFieldNumber;
const int CSOEconItemTournamentPassport::kPassportsBoughtFieldNumber;
const int CSOEconItemTournamentPassport::kVersionFieldNumber;
const int CSOEconItemTournamentPassport::kDefIndexFieldNumber;
const int CSOEconItemTournamentPassport::kRewardFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemTournamentPassport::CSOEconItemTournamentPassport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemTournamentPassport)
}
CSOEconItemTournamentPassport::CSOEconItemTournamentPassport(const CSOEconItemTournamentPassport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&reward_flags_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(reward_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemTournamentPassport)
}

void CSOEconItemTournamentPassport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&reward_flags_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(reward_flags_));
}

CSOEconItemTournamentPassport::~CSOEconItemTournamentPassport() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemTournamentPassport)
  SharedDtor();
}

void CSOEconItemTournamentPassport::SharedDtor() {
}

void CSOEconItemTournamentPassport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemTournamentPassport::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSOEconItemTournamentPassport& CSOEconItemTournamentPassport::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSOEconItemTournamentPassport* CSOEconItemTournamentPassport::New(::google::protobuf::Arena* arena) const {
  CSOEconItemTournamentPassport* n = new CSOEconItemTournamentPassport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSOEconItemTournamentPassport::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemTournamentPassport)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&reward_flags_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(reward_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSOEconItemTournamentPassport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemTournamentPassport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 original_purchaser_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_original_purchaser_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_purchaser_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 passports_bought = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_passports_bought();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passports_bought_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_flags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_reward_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemTournamentPassport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemTournamentPassport)
  return false;
#undef DO_
}

void CSOEconItemTournamentPassport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemTournamentPassport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }

  // optional uint32 original_purchaser_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->original_purchaser_id(), output);
  }

  // optional uint32 passports_bought = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->passports_bought(), output);
  }

  // optional uint32 version = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->version(), output);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->def_index(), output);
  }

  // optional uint32 reward_flags = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->reward_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemTournamentPassport)
}

::google::protobuf::uint8* CSOEconItemTournamentPassport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemTournamentPassport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }

  // optional uint32 original_purchaser_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->original_purchaser_id(), target);
  }

  // optional uint32 passports_bought = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->passports_bought(), target);
  }

  // optional uint32 version = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->version(), target);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->def_index(), target);
  }

  // optional uint32 reward_flags = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->reward_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemTournamentPassport)
  return target;
}

size_t CSOEconItemTournamentPassport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemTournamentPassport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 original_purchaser_id = 4;
    if (has_original_purchaser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_purchaser_id());
    }

    // optional uint32 passports_bought = 5;
    if (has_passports_bought()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passports_bought());
    }

    // optional uint32 version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 def_index = 7;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 reward_flags = 8;
    if (has_reward_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemTournamentPassport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemTournamentPassport)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemTournamentPassport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSOEconItemTournamentPassport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemTournamentPassport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemTournamentPassport)
    MergeFrom(*source);
  }
}

void CSOEconItemTournamentPassport::MergeFrom(const CSOEconItemTournamentPassport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemTournamentPassport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      original_purchaser_id_ = from.original_purchaser_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      passports_bought_ = from.passports_bought_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      reward_flags_ = from.reward_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemTournamentPassport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemTournamentPassport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemTournamentPassport::CopyFrom(const CSOEconItemTournamentPassport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemTournamentPassport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemTournamentPassport::IsInitialized() const {
  return true;
}

void CSOEconItemTournamentPassport::Swap(CSOEconItemTournamentPassport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemTournamentPassport::InternalSwap(CSOEconItemTournamentPassport* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(original_purchaser_id_, other->original_purchaser_id_);
  std::swap(passports_bought_, other->passports_bought_);
  std::swap(version_, other->version_);
  std::swap(def_index_, other->def_index_);
  std::swap(reward_flags_, other->reward_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSOEconItemTournamentPassport::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSOEconItemTournamentPassport

// optional uint32 account_id = 1;
bool CSOEconItemTournamentPassport::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSOEconItemTournamentPassport::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSOEconItemTournamentPassport::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSOEconItemTournamentPassport::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSOEconItemTournamentPassport::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemTournamentPassport.account_id)
  return account_id_;
}
void CSOEconItemTournamentPassport::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemTournamentPassport.account_id)
}

// optional uint32 league_id = 2;
bool CSOEconItemTournamentPassport::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSOEconItemTournamentPassport::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSOEconItemTournamentPassport::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSOEconItemTournamentPassport::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CSOEconItemTournamentPassport::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemTournamentPassport.league_id)
  return league_id_;
}
void CSOEconItemTournamentPassport::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemTournamentPassport.league_id)
}

// optional uint64 item_id = 3;
bool CSOEconItemTournamentPassport::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSOEconItemTournamentPassport::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSOEconItemTournamentPassport::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSOEconItemTournamentPassport::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CSOEconItemTournamentPassport::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemTournamentPassport.item_id)
  return item_id_;
}
void CSOEconItemTournamentPassport::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemTournamentPassport.item_id)
}

// optional uint32 original_purchaser_id = 4;
bool CSOEconItemTournamentPassport::has_original_purchaser_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSOEconItemTournamentPassport::set_has_original_purchaser_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CSOEconItemTournamentPassport::clear_has_original_purchaser_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSOEconItemTournamentPassport::clear_original_purchaser_id() {
  original_purchaser_id_ = 0u;
  clear_has_original_purchaser_id();
}
::google::protobuf::uint32 CSOEconItemTournamentPassport::original_purchaser_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemTournamentPassport.original_purchaser_id)
  return original_purchaser_id_;
}
void CSOEconItemTournamentPassport::set_original_purchaser_id(::google::protobuf::uint32 value) {
  set_has_original_purchaser_id();
  original_purchaser_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemTournamentPassport.original_purchaser_id)
}

// optional uint32 passports_bought = 5;
bool CSOEconItemTournamentPassport::has_passports_bought() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSOEconItemTournamentPassport::set_has_passports_bought() {
  _has_bits_[0] |= 0x00000010u;
}
void CSOEconItemTournamentPassport::clear_has_passports_bought() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSOEconItemTournamentPassport::clear_passports_bought() {
  passports_bought_ = 0u;
  clear_has_passports_bought();
}
::google::protobuf::uint32 CSOEconItemTournamentPassport::passports_bought() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemTournamentPassport.passports_bought)
  return passports_bought_;
}
void CSOEconItemTournamentPassport::set_passports_bought(::google::protobuf::uint32 value) {
  set_has_passports_bought();
  passports_bought_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemTournamentPassport.passports_bought)
}

// optional uint32 version = 6;
bool CSOEconItemTournamentPassport::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSOEconItemTournamentPassport::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
void CSOEconItemTournamentPassport::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSOEconItemTournamentPassport::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 CSOEconItemTournamentPassport::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemTournamentPassport.version)
  return version_;
}
void CSOEconItemTournamentPassport::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemTournamentPassport.version)
}

// optional uint32 def_index = 7;
bool CSOEconItemTournamentPassport::has_def_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSOEconItemTournamentPassport::set_has_def_index() {
  _has_bits_[0] |= 0x00000040u;
}
void CSOEconItemTournamentPassport::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSOEconItemTournamentPassport::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
::google::protobuf::uint32 CSOEconItemTournamentPassport::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemTournamentPassport.def_index)
  return def_index_;
}
void CSOEconItemTournamentPassport::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemTournamentPassport.def_index)
}

// optional uint32 reward_flags = 8;
bool CSOEconItemTournamentPassport::has_reward_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSOEconItemTournamentPassport::set_has_reward_flags() {
  _has_bits_[0] |= 0x00000080u;
}
void CSOEconItemTournamentPassport::clear_has_reward_flags() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSOEconItemTournamentPassport::clear_reward_flags() {
  reward_flags_ = 0u;
  clear_has_reward_flags();
}
::google::protobuf::uint32 CSOEconItemTournamentPassport::reward_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSOEconItemTournamentPassport.reward_flags)
  return reward_flags_;
}
void CSOEconItemTournamentPassport::set_reward_flags(::google::protobuf::uint32 value) {
  set_has_reward_flags();
  reward_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSOEconItemTournamentPassport.reward_flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseCancel::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseCancel)
}
CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(const CMsgGCStorePurchaseCancel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_ = from.txn_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseCancel)
}

void CMsgGCStorePurchaseCancel::SharedCtor() {
  _cached_size_ = 0;
  txn_id_ = GOOGLE_ULONGLONG(0);
}

CMsgGCStorePurchaseCancel::~CMsgGCStorePurchaseCancel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseCancel)
  SharedDtor();
}

void CMsgGCStorePurchaseCancel::SharedDtor() {
}

void CMsgGCStorePurchaseCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseCancel::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCStorePurchaseCancel& CMsgGCStorePurchaseCancel::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCStorePurchaseCancel* CMsgGCStorePurchaseCancel::New(::google::protobuf::Arena* arena) const {
  CMsgGCStorePurchaseCancel* n = new CMsgGCStorePurchaseCancel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCStorePurchaseCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseCancel)
  txn_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCStorePurchaseCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseCancel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_txn_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseCancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseCancel)
  return false;
#undef DO_
}

void CMsgGCStorePurchaseCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseCancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseCancel)
}

::google::protobuf::uint8* CMsgGCStorePurchaseCancel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseCancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->txn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseCancel)
  return target;
}

size_t CMsgGCStorePurchaseCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseCancel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 txn_id = 1;
  if (has_txn_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseCancel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseCancel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCStorePurchaseCancel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseCancel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseCancel)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseCancel::MergeFrom(const CMsgGCStorePurchaseCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_txn_id()) {
    set_txn_id(from.txn_id());
  }
}

void CMsgGCStorePurchaseCancel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancel::CopyFrom(const CMsgGCStorePurchaseCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancel::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancel::Swap(CMsgGCStorePurchaseCancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseCancel::InternalSwap(CMsgGCStorePurchaseCancel* other) {
  std::swap(txn_id_, other->txn_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseCancel::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCStorePurchaseCancel

// optional uint64 txn_id = 1;
bool CMsgGCStorePurchaseCancel::has_txn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCStorePurchaseCancel::set_has_txn_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCStorePurchaseCancel::clear_has_txn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCStorePurchaseCancel::clear_txn_id() {
  txn_id_ = GOOGLE_ULONGLONG(0);
  clear_has_txn_id();
}
::google::protobuf::uint64 CMsgGCStorePurchaseCancel::txn_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseCancel.txn_id)
  return txn_id_;
}
void CMsgGCStorePurchaseCancel::set_txn_id(::google::protobuf::uint64 value) {
  set_has_txn_id();
  txn_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseCancel.txn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseCancelResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseCancelResponse)
}
CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(const CMsgGCStorePurchaseCancelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseCancelResponse)
}

void CMsgGCStorePurchaseCancelResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

CMsgGCStorePurchaseCancelResponse::~CMsgGCStorePurchaseCancelResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseCancelResponse)
  SharedDtor();
}

void CMsgGCStorePurchaseCancelResponse::SharedDtor() {
}

void CMsgGCStorePurchaseCancelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseCancelResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCStorePurchaseCancelResponse& CMsgGCStorePurchaseCancelResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCStorePurchaseCancelResponse* CMsgGCStorePurchaseCancelResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCStorePurchaseCancelResponse* n = new CMsgGCStorePurchaseCancelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCStorePurchaseCancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCStorePurchaseCancelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseCancelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseCancelResponse)
  return false;
#undef DO_
}

void CMsgGCStorePurchaseCancelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseCancelResponse)
}

::google::protobuf::uint8* CMsgGCStorePurchaseCancelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseCancelResponse)
  return target;
}

size_t CMsgGCStorePurchaseCancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseCancelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseCancelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCStorePurchaseCancelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseCancelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseCancelResponse)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseCancelResponse::MergeFrom(const CMsgGCStorePurchaseCancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const CMsgGCStorePurchaseCancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancelResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancelResponse::Swap(CMsgGCStorePurchaseCancelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseCancelResponse::InternalSwap(CMsgGCStorePurchaseCancelResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseCancelResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCStorePurchaseCancelResponse

// optional uint32 result = 1;
bool CMsgGCStorePurchaseCancelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCStorePurchaseCancelResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCStorePurchaseCancelResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCStorePurchaseCancelResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgGCStorePurchaseCancelResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseCancelResponse.result)
  return result_;
}
void CMsgGCStorePurchaseCancelResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseCancelResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseFinalize::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseFinalize)
}
CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(const CMsgGCStorePurchaseFinalize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_ = from.txn_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseFinalize)
}

void CMsgGCStorePurchaseFinalize::SharedCtor() {
  _cached_size_ = 0;
  txn_id_ = GOOGLE_ULONGLONG(0);
}

CMsgGCStorePurchaseFinalize::~CMsgGCStorePurchaseFinalize() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseFinalize)
  SharedDtor();
}

void CMsgGCStorePurchaseFinalize::SharedDtor() {
}

void CMsgGCStorePurchaseFinalize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseFinalize::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCStorePurchaseFinalize& CMsgGCStorePurchaseFinalize::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCStorePurchaseFinalize* CMsgGCStorePurchaseFinalize::New(::google::protobuf::Arena* arena) const {
  CMsgGCStorePurchaseFinalize* n = new CMsgGCStorePurchaseFinalize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCStorePurchaseFinalize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseFinalize)
  txn_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCStorePurchaseFinalize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseFinalize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_txn_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseFinalize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseFinalize)
  return false;
#undef DO_
}

void CMsgGCStorePurchaseFinalize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseFinalize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseFinalize)
}

::google::protobuf::uint8* CMsgGCStorePurchaseFinalize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseFinalize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->txn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseFinalize)
  return target;
}

size_t CMsgGCStorePurchaseFinalize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseFinalize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 txn_id = 1;
  if (has_txn_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseFinalize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseFinalize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCStorePurchaseFinalize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseFinalize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseFinalize)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseFinalize::MergeFrom(const CMsgGCStorePurchaseFinalize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_txn_id()) {
    set_txn_id(from.txn_id());
  }
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const CMsgGCStorePurchaseFinalize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalize::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalize::Swap(CMsgGCStorePurchaseFinalize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseFinalize::InternalSwap(CMsgGCStorePurchaseFinalize* other) {
  std::swap(txn_id_, other->txn_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseFinalize::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCStorePurchaseFinalize

// optional uint64 txn_id = 1;
bool CMsgGCStorePurchaseFinalize::has_txn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCStorePurchaseFinalize::set_has_txn_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCStorePurchaseFinalize::clear_has_txn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCStorePurchaseFinalize::clear_txn_id() {
  txn_id_ = GOOGLE_ULONGLONG(0);
  clear_has_txn_id();
}
::google::protobuf::uint64 CMsgGCStorePurchaseFinalize::txn_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseFinalize.txn_id)
  return txn_id_;
}
void CMsgGCStorePurchaseFinalize::set_txn_id(::google::protobuf::uint64 value) {
  set_has_txn_id();
  txn_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseFinalize.txn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseFinalizeResponse::kResultFieldNumber;
const int CMsgGCStorePurchaseFinalizeResponse::kItemIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
}
CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(const CMsgGCStorePurchaseFinalizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
}

void CMsgGCStorePurchaseFinalizeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

CMsgGCStorePurchaseFinalizeResponse::~CMsgGCStorePurchaseFinalizeResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  SharedDtor();
}

void CMsgGCStorePurchaseFinalizeResponse::SharedDtor() {
}

void CMsgGCStorePurchaseFinalizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseFinalizeResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCStorePurchaseFinalizeResponse& CMsgGCStorePurchaseFinalizeResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCStorePurchaseFinalizeResponse* CMsgGCStorePurchaseFinalizeResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCStorePurchaseFinalizeResponse* n = new CMsgGCStorePurchaseFinalizeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCStorePurchaseFinalizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  item_ids_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCStorePurchaseFinalizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 item_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_item_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  return false;
#undef DO_
}

void CMsgGCStorePurchaseFinalizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->item_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->item_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
}

::google::protobuf::uint8* CMsgGCStorePurchaseFinalizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated uint64 item_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->item_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  return target;
}

size_t CMsgGCStorePurchaseFinalizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_ids_size());
    total_size += data_size;
  }

  // optional uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseFinalizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseFinalizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCStorePurchaseFinalizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseFinalizeResponse::MergeFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalizeResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalizeResponse::Swap(CMsgGCStorePurchaseFinalizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseFinalizeResponse::InternalSwap(CMsgGCStorePurchaseFinalizeResponse* other) {
  item_ids_.InternalSwap(&other->item_ids_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseFinalizeResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCStorePurchaseFinalizeResponse

// optional uint32 result = 1;
bool CMsgGCStorePurchaseFinalizeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCStorePurchaseFinalizeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCStorePurchaseFinalizeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCStorePurchaseFinalizeResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgGCStorePurchaseFinalizeResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseFinalizeResponse.result)
  return result_;
}
void CMsgGCStorePurchaseFinalizeResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseFinalizeResponse.result)
}

// repeated uint64 item_ids = 2;
int CMsgGCStorePurchaseFinalizeResponse::item_ids_size() const {
  return item_ids_.size();
}
void CMsgGCStorePurchaseFinalizeResponse::clear_item_ids() {
  item_ids_.Clear();
}
::google::protobuf::uint64 CMsgGCStorePurchaseFinalizeResponse::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCStorePurchaseFinalizeResponse.item_ids)
  return item_ids_.Get(index);
}
void CMsgGCStorePurchaseFinalizeResponse::set_item_ids(int index, ::google::protobuf::uint64 value) {
  item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCStorePurchaseFinalizeResponse.item_ids)
}
void CMsgGCStorePurchaseFinalizeResponse::add_item_ids(::google::protobuf::uint64 value) {
  item_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCStorePurchaseFinalizeResponse.item_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCStorePurchaseFinalizeResponse::item_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCStorePurchaseFinalizeResponse.item_ids)
  return item_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCStorePurchaseFinalizeResponse::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCStorePurchaseFinalizeResponse.item_ids)
  return &item_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCBannedWordListRequest::kBanListGroupIdFieldNumber;
const int CMsgGCBannedWordListRequest::kWordIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCBannedWordListRequest::CMsgGCBannedWordListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCBannedWordListRequest)
}
CMsgGCBannedWordListRequest::CMsgGCBannedWordListRequest(const CMsgGCBannedWordListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ban_list_group_id_, &from.ban_list_group_id_,
    reinterpret_cast<char*>(&word_id_) -
    reinterpret_cast<char*>(&ban_list_group_id_) + sizeof(word_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCBannedWordListRequest)
}

void CMsgGCBannedWordListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ban_list_group_id_, 0, reinterpret_cast<char*>(&word_id_) -
    reinterpret_cast<char*>(&ban_list_group_id_) + sizeof(word_id_));
}

CMsgGCBannedWordListRequest::~CMsgGCBannedWordListRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCBannedWordListRequest)
  SharedDtor();
}

void CMsgGCBannedWordListRequest::SharedDtor() {
}

void CMsgGCBannedWordListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBannedWordListRequest::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCBannedWordListRequest& CMsgGCBannedWordListRequest::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCBannedWordListRequest* CMsgGCBannedWordListRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGCBannedWordListRequest* n = new CMsgGCBannedWordListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCBannedWordListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCBannedWordListRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ban_list_group_id_, 0, reinterpret_cast<char*>(&word_id_) -
      reinterpret_cast<char*>(&ban_list_group_id_) + sizeof(word_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCBannedWordListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCBannedWordListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ban_list_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ban_list_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ban_list_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 word_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_word_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &word_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCBannedWordListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCBannedWordListRequest)
  return false;
#undef DO_
}

void CMsgGCBannedWordListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCBannedWordListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ban_list_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ban_list_group_id(), output);
  }

  // optional uint32 word_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->word_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCBannedWordListRequest)
}

::google::protobuf::uint8* CMsgGCBannedWordListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCBannedWordListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ban_list_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ban_list_group_id(), target);
  }

  // optional uint32 word_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->word_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCBannedWordListRequest)
  return target;
}

size_t CMsgGCBannedWordListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCBannedWordListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ban_list_group_id = 1;
    if (has_ban_list_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ban_list_group_id());
    }

    // optional uint32 word_id = 2;
    if (has_word_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->word_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBannedWordListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCBannedWordListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCBannedWordListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCBannedWordListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCBannedWordListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCBannedWordListRequest)
    MergeFrom(*source);
  }
}

void CMsgGCBannedWordListRequest::MergeFrom(const CMsgGCBannedWordListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCBannedWordListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ban_list_group_id_ = from.ban_list_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCBannedWordListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCBannedWordListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBannedWordListRequest::CopyFrom(const CMsgGCBannedWordListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCBannedWordListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBannedWordListRequest::IsInitialized() const {
  return true;
}

void CMsgGCBannedWordListRequest::Swap(CMsgGCBannedWordListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCBannedWordListRequest::InternalSwap(CMsgGCBannedWordListRequest* other) {
  std::swap(ban_list_group_id_, other->ban_list_group_id_);
  std::swap(word_id_, other->word_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCBannedWordListRequest::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCBannedWordListRequest

// optional uint32 ban_list_group_id = 1;
bool CMsgGCBannedWordListRequest::has_ban_list_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCBannedWordListRequest::set_has_ban_list_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCBannedWordListRequest::clear_has_ban_list_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCBannedWordListRequest::clear_ban_list_group_id() {
  ban_list_group_id_ = 0u;
  clear_has_ban_list_group_id();
}
::google::protobuf::uint32 CMsgGCBannedWordListRequest::ban_list_group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBannedWordListRequest.ban_list_group_id)
  return ban_list_group_id_;
}
void CMsgGCBannedWordListRequest::set_ban_list_group_id(::google::protobuf::uint32 value) {
  set_has_ban_list_group_id();
  ban_list_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBannedWordListRequest.ban_list_group_id)
}

// optional uint32 word_id = 2;
bool CMsgGCBannedWordListRequest::has_word_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCBannedWordListRequest::set_has_word_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCBannedWordListRequest::clear_has_word_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCBannedWordListRequest::clear_word_id() {
  word_id_ = 0u;
  clear_has_word_id();
}
::google::protobuf::uint32 CMsgGCBannedWordListRequest::word_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBannedWordListRequest.word_id)
  return word_id_;
}
void CMsgGCBannedWordListRequest::set_word_id(::google::protobuf::uint32 value) {
  set_has_word_id();
  word_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBannedWordListRequest.word_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCBannedWord::kWordIdFieldNumber;
const int CMsgGCBannedWord::kWordTypeFieldNumber;
const int CMsgGCBannedWord::kWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCBannedWord::CMsgGCBannedWord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCBannedWord)
}
CMsgGCBannedWord::CMsgGCBannedWord(const CMsgGCBannedWord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_word()) {
    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  ::memcpy(&word_id_, &from.word_id_,
    reinterpret_cast<char*>(&word_type_) -
    reinterpret_cast<char*>(&word_id_) + sizeof(word_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCBannedWord)
}

void CMsgGCBannedWord::SharedCtor() {
  _cached_size_ = 0;
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&word_id_, 0, reinterpret_cast<char*>(&word_type_) -
    reinterpret_cast<char*>(&word_id_) + sizeof(word_type_));
}

CMsgGCBannedWord::~CMsgGCBannedWord() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCBannedWord)
  SharedDtor();
}

void CMsgGCBannedWord::SharedDtor() {
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCBannedWord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBannedWord::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCBannedWord& CMsgGCBannedWord::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCBannedWord* CMsgGCBannedWord::New(::google::protobuf::Arena* arena) const {
  CMsgGCBannedWord* n = new CMsgGCBannedWord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCBannedWord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCBannedWord)
  if (has_word()) {
    GOOGLE_DCHECK(!word_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*word_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&word_id_, 0, reinterpret_cast<char*>(&word_type_) -
      reinterpret_cast<char*>(&word_id_) + sizeof(word_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCBannedWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCBannedWord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 word_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_word_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &word_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.GC_BannedWordType word_type = 2 [default = GC_BANNED_WORD_DISABLE_WORD];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::GC_BannedWordType_IsValid(value)) {
            set_word_type(static_cast< ::proto::dota::GC_BannedWordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string word = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCBannedWord.word");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCBannedWord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCBannedWord)
  return false;
#undef DO_
}

void CMsgGCBannedWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCBannedWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 word_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->word_id(), output);
  }

  // optional .proto.dota.GC_BannedWordType word_type = 2 [default = GC_BANNED_WORD_DISABLE_WORD];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->word_type(), output);
  }

  // optional string word = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCBannedWord.word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->word(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCBannedWord)
}

::google::protobuf::uint8* CMsgGCBannedWord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCBannedWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 word_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->word_id(), target);
  }

  // optional .proto.dota.GC_BannedWordType word_type = 2 [default = GC_BANNED_WORD_DISABLE_WORD];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->word_type(), target);
  }

  // optional string word = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCBannedWord.word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->word(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCBannedWord)
  return target;
}

size_t CMsgGCBannedWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCBannedWord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string word = 3;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

    // optional uint32 word_id = 1;
    if (has_word_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->word_id());
    }

    // optional .proto.dota.GC_BannedWordType word_type = 2 [default = GC_BANNED_WORD_DISABLE_WORD];
    if (has_word_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->word_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBannedWord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCBannedWord)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCBannedWord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCBannedWord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCBannedWord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCBannedWord)
    MergeFrom(*source);
  }
}

void CMsgGCBannedWord::MergeFrom(const CMsgGCBannedWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCBannedWord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_word();
      word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      word_type_ = from.word_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCBannedWord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCBannedWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBannedWord::CopyFrom(const CMsgGCBannedWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCBannedWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBannedWord::IsInitialized() const {
  return true;
}

void CMsgGCBannedWord::Swap(CMsgGCBannedWord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCBannedWord::InternalSwap(CMsgGCBannedWord* other) {
  word_.Swap(&other->word_);
  std::swap(word_id_, other->word_id_);
  std::swap(word_type_, other->word_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCBannedWord::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCBannedWord

// optional uint32 word_id = 1;
bool CMsgGCBannedWord::has_word_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCBannedWord::set_has_word_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCBannedWord::clear_has_word_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCBannedWord::clear_word_id() {
  word_id_ = 0u;
  clear_has_word_id();
}
::google::protobuf::uint32 CMsgGCBannedWord::word_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBannedWord.word_id)
  return word_id_;
}
void CMsgGCBannedWord::set_word_id(::google::protobuf::uint32 value) {
  set_has_word_id();
  word_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBannedWord.word_id)
}

// optional .proto.dota.GC_BannedWordType word_type = 2 [default = GC_BANNED_WORD_DISABLE_WORD];
bool CMsgGCBannedWord::has_word_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCBannedWord::set_has_word_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCBannedWord::clear_has_word_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCBannedWord::clear_word_type() {
  word_type_ = 0;
  clear_has_word_type();
}
::proto::dota::GC_BannedWordType CMsgGCBannedWord::word_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBannedWord.word_type)
  return static_cast< ::proto::dota::GC_BannedWordType >(word_type_);
}
void CMsgGCBannedWord::set_word_type(::proto::dota::GC_BannedWordType value) {
  assert(::proto::dota::GC_BannedWordType_IsValid(value));
  set_has_word_type();
  word_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBannedWord.word_type)
}

// optional string word = 3;
bool CMsgGCBannedWord::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCBannedWord::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCBannedWord::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCBannedWord::clear_word() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_word();
}
const ::std::string& CMsgGCBannedWord::word() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBannedWord.word)
  return word_.GetNoArena();
}
void CMsgGCBannedWord::set_word(const ::std::string& value) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBannedWord.word)
}
#if LANG_CXX11
void CMsgGCBannedWord::set_word(::std::string&& value) {
  set_has_word();
  word_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCBannedWord.word)
}
#endif
void CMsgGCBannedWord::set_word(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCBannedWord.word)
}
void CMsgGCBannedWord::set_word(const char* value, size_t size) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCBannedWord.word)
}
::std::string* CMsgGCBannedWord::mutable_word() {
  set_has_word();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCBannedWord.word)
  return word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCBannedWord::release_word() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCBannedWord.word)
  clear_has_word();
  return word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCBannedWord::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    set_has_word();
  } else {
    clear_has_word();
  }
  word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCBannedWord.word)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCBannedWordListResponse::kBanListGroupIdFieldNumber;
const int CMsgGCBannedWordListResponse::kWordListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCBannedWordListResponse::CMsgGCBannedWordListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCBannedWordListResponse)
}
CMsgGCBannedWordListResponse::CMsgGCBannedWordListResponse(const CMsgGCBannedWordListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      word_list_(from.word_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ban_list_group_id_ = from.ban_list_group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCBannedWordListResponse)
}

void CMsgGCBannedWordListResponse::SharedCtor() {
  _cached_size_ = 0;
  ban_list_group_id_ = 0u;
}

CMsgGCBannedWordListResponse::~CMsgGCBannedWordListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCBannedWordListResponse)
  SharedDtor();
}

void CMsgGCBannedWordListResponse::SharedDtor() {
}

void CMsgGCBannedWordListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBannedWordListResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCBannedWordListResponse& CMsgGCBannedWordListResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCBannedWordListResponse* CMsgGCBannedWordListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCBannedWordListResponse* n = new CMsgGCBannedWordListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCBannedWordListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCBannedWordListResponse)
  word_list_.Clear();
  ban_list_group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCBannedWordListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCBannedWordListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ban_list_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ban_list_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ban_list_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCBannedWord word_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_word_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCBannedWordListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCBannedWordListResponse)
  return false;
#undef DO_
}

void CMsgGCBannedWordListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCBannedWordListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ban_list_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ban_list_group_id(), output);
  }

  // repeated .proto.dota.CMsgGCBannedWord word_list = 2;
  for (unsigned int i = 0, n = this->word_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->word_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCBannedWordListResponse)
}

::google::protobuf::uint8* CMsgGCBannedWordListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCBannedWordListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ban_list_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ban_list_group_id(), target);
  }

  // repeated .proto.dota.CMsgGCBannedWord word_list = 2;
  for (unsigned int i = 0, n = this->word_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->word_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCBannedWordListResponse)
  return target;
}

size_t CMsgGCBannedWordListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCBannedWordListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCBannedWord word_list = 2;
  {
    unsigned int count = this->word_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->word_list(i));
    }
  }

  // optional uint32 ban_list_group_id = 1;
  if (has_ban_list_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ban_list_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBannedWordListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCBannedWordListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCBannedWordListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCBannedWordListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCBannedWordListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCBannedWordListResponse)
    MergeFrom(*source);
  }
}

void CMsgGCBannedWordListResponse::MergeFrom(const CMsgGCBannedWordListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCBannedWordListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_list_.MergeFrom(from.word_list_);
  if (from.has_ban_list_group_id()) {
    set_ban_list_group_id(from.ban_list_group_id());
  }
}

void CMsgGCBannedWordListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCBannedWordListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBannedWordListResponse::CopyFrom(const CMsgGCBannedWordListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCBannedWordListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBannedWordListResponse::IsInitialized() const {
  return true;
}

void CMsgGCBannedWordListResponse::Swap(CMsgGCBannedWordListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCBannedWordListResponse::InternalSwap(CMsgGCBannedWordListResponse* other) {
  word_list_.InternalSwap(&other->word_list_);
  std::swap(ban_list_group_id_, other->ban_list_group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCBannedWordListResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCBannedWordListResponse

// optional uint32 ban_list_group_id = 1;
bool CMsgGCBannedWordListResponse::has_ban_list_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCBannedWordListResponse::set_has_ban_list_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCBannedWordListResponse::clear_has_ban_list_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCBannedWordListResponse::clear_ban_list_group_id() {
  ban_list_group_id_ = 0u;
  clear_has_ban_list_group_id();
}
::google::protobuf::uint32 CMsgGCBannedWordListResponse::ban_list_group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBannedWordListResponse.ban_list_group_id)
  return ban_list_group_id_;
}
void CMsgGCBannedWordListResponse::set_ban_list_group_id(::google::protobuf::uint32 value) {
  set_has_ban_list_group_id();
  ban_list_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBannedWordListResponse.ban_list_group_id)
}

// repeated .proto.dota.CMsgGCBannedWord word_list = 2;
int CMsgGCBannedWordListResponse::word_list_size() const {
  return word_list_.size();
}
void CMsgGCBannedWordListResponse::clear_word_list() {
  word_list_.Clear();
}
const ::proto::dota::CMsgGCBannedWord& CMsgGCBannedWordListResponse::word_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBannedWordListResponse.word_list)
  return word_list_.Get(index);
}
::proto::dota::CMsgGCBannedWord* CMsgGCBannedWordListResponse::mutable_word_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCBannedWordListResponse.word_list)
  return word_list_.Mutable(index);
}
::proto::dota::CMsgGCBannedWord* CMsgGCBannedWordListResponse::add_word_list() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCBannedWordListResponse.word_list)
  return word_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCBannedWord >*
CMsgGCBannedWordListResponse::mutable_word_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCBannedWordListResponse.word_list)
  return &word_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCBannedWord >&
CMsgGCBannedWordListResponse::word_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCBannedWordListResponse.word_list)
  return word_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCBannedWordListBroadcast::kBroadcastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCBannedWordListBroadcast::CMsgGCToGCBannedWordListBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCBannedWordListBroadcast)
}
CMsgGCToGCBannedWordListBroadcast::CMsgGCToGCBannedWordListBroadcast(const CMsgGCToGCBannedWordListBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_broadcast()) {
    broadcast_ = new ::proto::dota::CMsgGCBannedWordListResponse(*from.broadcast_);
  } else {
    broadcast_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCBannedWordListBroadcast)
}

void CMsgGCToGCBannedWordListBroadcast::SharedCtor() {
  _cached_size_ = 0;
  broadcast_ = NULL;
}

CMsgGCToGCBannedWordListBroadcast::~CMsgGCToGCBannedWordListBroadcast() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  SharedDtor();
}

void CMsgGCToGCBannedWordListBroadcast::SharedDtor() {
  if (this != internal_default_instance()) {
    delete broadcast_;
  }
}

void CMsgGCToGCBannedWordListBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCBannedWordListBroadcast::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCBannedWordListBroadcast& CMsgGCToGCBannedWordListBroadcast::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCBannedWordListBroadcast* CMsgGCToGCBannedWordListBroadcast::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCBannedWordListBroadcast* n = new CMsgGCToGCBannedWordListBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCBannedWordListBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  if (has_broadcast()) {
    GOOGLE_DCHECK(broadcast_ != NULL);
    broadcast_->::proto::dota::CMsgGCBannedWordListResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCBannedWordListBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgGCBannedWordListResponse broadcast = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  return false;
#undef DO_
}

void CMsgGCToGCBannedWordListBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCBannedWordListResponse broadcast = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->broadcast_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCBannedWordListBroadcast)
}

::google::protobuf::uint8* CMsgGCToGCBannedWordListBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCBannedWordListResponse broadcast = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->broadcast_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  return target;
}

size_t CMsgGCToGCBannedWordListBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgGCBannedWordListResponse broadcast = 1;
  if (has_broadcast()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->broadcast_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCBannedWordListBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCBannedWordListBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCBannedWordListBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCBannedWordListBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCBannedWordListBroadcast)
    MergeFrom(*source);
  }
}

void CMsgGCToGCBannedWordListBroadcast::MergeFrom(const CMsgGCToGCBannedWordListBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast()) {
    mutable_broadcast()->::proto::dota::CMsgGCBannedWordListResponse::MergeFrom(from.broadcast());
  }
}

void CMsgGCToGCBannedWordListBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCBannedWordListBroadcast::CopyFrom(const CMsgGCToGCBannedWordListBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCBannedWordListBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBannedWordListBroadcast::IsInitialized() const {
  return true;
}

void CMsgGCToGCBannedWordListBroadcast::Swap(CMsgGCToGCBannedWordListBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCBannedWordListBroadcast::InternalSwap(CMsgGCToGCBannedWordListBroadcast* other) {
  std::swap(broadcast_, other->broadcast_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCBannedWordListBroadcast::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCBannedWordListBroadcast

// optional .proto.dota.CMsgGCBannedWordListResponse broadcast = 1;
bool CMsgGCToGCBannedWordListBroadcast::has_broadcast() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCBannedWordListBroadcast::set_has_broadcast() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCBannedWordListBroadcast::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCBannedWordListBroadcast::clear_broadcast() {
  if (broadcast_ != NULL) broadcast_->::proto::dota::CMsgGCBannedWordListResponse::Clear();
  clear_has_broadcast();
}
const ::proto::dota::CMsgGCBannedWordListResponse& CMsgGCToGCBannedWordListBroadcast::broadcast() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCBannedWordListBroadcast.broadcast)
  return broadcast_ != NULL ? *broadcast_
                         : *::proto::dota::CMsgGCBannedWordListResponse::internal_default_instance();
}
::proto::dota::CMsgGCBannedWordListResponse* CMsgGCToGCBannedWordListBroadcast::mutable_broadcast() {
  set_has_broadcast();
  if (broadcast_ == NULL) {
    broadcast_ = new ::proto::dota::CMsgGCBannedWordListResponse;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToGCBannedWordListBroadcast.broadcast)
  return broadcast_;
}
::proto::dota::CMsgGCBannedWordListResponse* CMsgGCToGCBannedWordListBroadcast::release_broadcast() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToGCBannedWordListBroadcast.broadcast)
  clear_has_broadcast();
  ::proto::dota::CMsgGCBannedWordListResponse* temp = broadcast_;
  broadcast_ = NULL;
  return temp;
}
void CMsgGCToGCBannedWordListBroadcast::set_allocated_broadcast(::proto::dota::CMsgGCBannedWordListResponse* broadcast) {
  delete broadcast_;
  broadcast_ = broadcast;
  if (broadcast) {
    set_has_broadcast();
  } else {
    clear_has_broadcast();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToGCBannedWordListBroadcast.broadcast)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCBannedWordListUpdated::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCBannedWordListUpdated)
}
CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(const CMsgGCToGCBannedWordListUpdated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCBannedWordListUpdated)
}

void CMsgGCToGCBannedWordListUpdated::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
}

CMsgGCToGCBannedWordListUpdated::~CMsgGCToGCBannedWordListUpdated() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCBannedWordListUpdated)
  SharedDtor();
}

void CMsgGCToGCBannedWordListUpdated::SharedDtor() {
}

void CMsgGCToGCBannedWordListUpdated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCBannedWordListUpdated::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCBannedWordListUpdated& CMsgGCToGCBannedWordListUpdated::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCBannedWordListUpdated* CMsgGCToGCBannedWordListUpdated::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCBannedWordListUpdated* n = new CMsgGCToGCBannedWordListUpdated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCBannedWordListUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCBannedWordListUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCBannedWordListUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCBannedWordListUpdated)
  return false;
#undef DO_
}

void CMsgGCToGCBannedWordListUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCBannedWordListUpdated)
}

::google::protobuf::uint8* CMsgGCToGCBannedWordListUpdated::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCBannedWordListUpdated)
  return target;
}

size_t CMsgGCToGCBannedWordListUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCBannedWordListUpdated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCBannedWordListUpdated* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCBannedWordListUpdated>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCBannedWordListUpdated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCBannedWordListUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCToGCBannedWordListUpdated::MergeFrom(const CMsgGCToGCBannedWordListUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group_id()) {
    set_group_id(from.group_id());
  }
}

void CMsgGCToGCBannedWordListUpdated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCBannedWordListUpdated::CopyFrom(const CMsgGCToGCBannedWordListUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBannedWordListUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToGCBannedWordListUpdated::Swap(CMsgGCToGCBannedWordListUpdated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCBannedWordListUpdated::InternalSwap(CMsgGCToGCBannedWordListUpdated* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCBannedWordListUpdated::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCBannedWordListUpdated

// optional uint32 group_id = 1;
bool CMsgGCToGCBannedWordListUpdated::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCBannedWordListUpdated::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCBannedWordListUpdated::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCBannedWordListUpdated::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
::google::protobuf::uint32 CMsgGCToGCBannedWordListUpdated::group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCBannedWordListUpdated.group_id)
  return group_id_;
}
void CMsgGCToGCBannedWordListUpdated::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCBannedWordListUpdated.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCDirtySDOCache::kSdoTypeFieldNumber;
const int CMsgGCToGCDirtySDOCache::kKeyUint64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCDirtySDOCache)
}
CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(const CMsgGCToGCDirtySDOCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_uint64_, &from.key_uint64_,
    reinterpret_cast<char*>(&sdo_type_) -
    reinterpret_cast<char*>(&key_uint64_) + sizeof(sdo_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCDirtySDOCache)
}

void CMsgGCToGCDirtySDOCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&key_uint64_, 0, reinterpret_cast<char*>(&sdo_type_) -
    reinterpret_cast<char*>(&key_uint64_) + sizeof(sdo_type_));
}

CMsgGCToGCDirtySDOCache::~CMsgGCToGCDirtySDOCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCDirtySDOCache)
  SharedDtor();
}

void CMsgGCToGCDirtySDOCache::SharedDtor() {
}

void CMsgGCToGCDirtySDOCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCDirtySDOCache::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCDirtySDOCache& CMsgGCToGCDirtySDOCache::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCDirtySDOCache* CMsgGCToGCDirtySDOCache::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCDirtySDOCache* n = new CMsgGCToGCDirtySDOCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCDirtySDOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCDirtySDOCache)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&key_uint64_, 0, reinterpret_cast<char*>(&sdo_type_) -
      reinterpret_cast<char*>(&key_uint64_) + sizeof(sdo_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCDirtySDOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCDirtySDOCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sdo_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sdo_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdo_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 key_uint64 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_key_uint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCDirtySDOCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCDirtySDOCache)
  return false;
#undef DO_
}

void CMsgGCToGCDirtySDOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCDirtySDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sdo_type(), output);
  }

  // optional uint64 key_uint64 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key_uint64(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCDirtySDOCache)
}

::google::protobuf::uint8* CMsgGCToGCDirtySDOCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCDirtySDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sdo_type(), target);
  }

  // optional uint64 key_uint64 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key_uint64(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCDirtySDOCache)
  return target;
}

size_t CMsgGCToGCDirtySDOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCDirtySDOCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 key_uint64 = 2;
    if (has_key_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_uint64());
    }

    // optional uint32 sdo_type = 1;
    if (has_sdo_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sdo_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCDirtySDOCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCDirtySDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCDirtySDOCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCDirtySDOCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCDirtySDOCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCDirtySDOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCDirtySDOCache::MergeFrom(const CMsgGCToGCDirtySDOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCDirtySDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_uint64_ = from.key_uint64_;
    }
    if (cached_has_bits & 0x00000002u) {
      sdo_type_ = from.sdo_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCDirtySDOCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCDirtySDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCDirtySDOCache::CopyFrom(const CMsgGCToGCDirtySDOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCDirtySDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCDirtySDOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCDirtySDOCache::Swap(CMsgGCToGCDirtySDOCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCDirtySDOCache::InternalSwap(CMsgGCToGCDirtySDOCache* other) {
  std::swap(key_uint64_, other->key_uint64_);
  std::swap(sdo_type_, other->sdo_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCDirtySDOCache::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCDirtySDOCache

// optional uint32 sdo_type = 1;
bool CMsgGCToGCDirtySDOCache::has_sdo_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCDirtySDOCache::set_has_sdo_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCDirtySDOCache::clear_has_sdo_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCDirtySDOCache::clear_sdo_type() {
  sdo_type_ = 0u;
  clear_has_sdo_type();
}
::google::protobuf::uint32 CMsgGCToGCDirtySDOCache::sdo_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCDirtySDOCache.sdo_type)
  return sdo_type_;
}
void CMsgGCToGCDirtySDOCache::set_sdo_type(::google::protobuf::uint32 value) {
  set_has_sdo_type();
  sdo_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCDirtySDOCache.sdo_type)
}

// optional uint64 key_uint64 = 2;
bool CMsgGCToGCDirtySDOCache::has_key_uint64() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCDirtySDOCache::set_has_key_uint64() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCDirtySDOCache::clear_has_key_uint64() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCDirtySDOCache::clear_key_uint64() {
  key_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_key_uint64();
}
::google::protobuf::uint64 CMsgGCToGCDirtySDOCache::key_uint64() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCDirtySDOCache.key_uint64)
  return key_uint64_;
}
void CMsgGCToGCDirtySDOCache::set_key_uint64(::google::protobuf::uint64 value) {
  set_has_key_uint64();
  key_uint64_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCDirtySDOCache.key_uint64)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCDirtyMultipleSDOCache::kSdoTypeFieldNumber;
const int CMsgGCToGCDirtyMultipleSDOCache::kKeyUint64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
}
CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache(const CMsgGCToGCDirtyMultipleSDOCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      key_uint64_(from.key_uint64_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sdo_type_ = from.sdo_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
}

void CMsgGCToGCDirtyMultipleSDOCache::SharedCtor() {
  _cached_size_ = 0;
  sdo_type_ = 0u;
}

CMsgGCToGCDirtyMultipleSDOCache::~CMsgGCToGCDirtyMultipleSDOCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  SharedDtor();
}

void CMsgGCToGCDirtyMultipleSDOCache::SharedDtor() {
}

void CMsgGCToGCDirtyMultipleSDOCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCDirtyMultipleSDOCache::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCDirtyMultipleSDOCache& CMsgGCToGCDirtyMultipleSDOCache::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCDirtyMultipleSDOCache* CMsgGCToGCDirtyMultipleSDOCache::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCDirtyMultipleSDOCache* n = new CMsgGCToGCDirtyMultipleSDOCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCDirtyMultipleSDOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  key_uint64_.Clear();
  sdo_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCDirtyMultipleSDOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sdo_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sdo_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdo_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 key_uint64 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_key_uint64())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_key_uint64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  return false;
#undef DO_
}

void CMsgGCToGCDirtyMultipleSDOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sdo_type(), output);
  }

  // repeated uint64 key_uint64 = 2;
  for (int i = 0, n = this->key_uint64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->key_uint64(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
}

::google::protobuf::uint8* CMsgGCToGCDirtyMultipleSDOCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sdo_type(), target);
  }

  // repeated uint64 key_uint64 = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->key_uint64_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  return target;
}

size_t CMsgGCToGCDirtyMultipleSDOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 key_uint64 = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->key_uint64_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->key_uint64_size());
    total_size += data_size;
  }

  // optional uint32 sdo_type = 1;
  if (has_sdo_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sdo_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCDirtyMultipleSDOCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCDirtyMultipleSDOCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCDirtyMultipleSDOCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCDirtyMultipleSDOCache::MergeFrom(const CMsgGCToGCDirtyMultipleSDOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_uint64_.MergeFrom(from.key_uint64_);
  if (from.has_sdo_type()) {
    set_sdo_type(from.sdo_type());
  }
}

void CMsgGCToGCDirtyMultipleSDOCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCDirtyMultipleSDOCache::CopyFrom(const CMsgGCToGCDirtyMultipleSDOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCDirtyMultipleSDOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCDirtyMultipleSDOCache::Swap(CMsgGCToGCDirtyMultipleSDOCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCDirtyMultipleSDOCache::InternalSwap(CMsgGCToGCDirtyMultipleSDOCache* other) {
  key_uint64_.InternalSwap(&other->key_uint64_);
  std::swap(sdo_type_, other->sdo_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCDirtyMultipleSDOCache::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCDirtyMultipleSDOCache

// optional uint32 sdo_type = 1;
bool CMsgGCToGCDirtyMultipleSDOCache::has_sdo_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCDirtyMultipleSDOCache::set_has_sdo_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCDirtyMultipleSDOCache::clear_has_sdo_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCDirtyMultipleSDOCache::clear_sdo_type() {
  sdo_type_ = 0u;
  clear_has_sdo_type();
}
::google::protobuf::uint32 CMsgGCToGCDirtyMultipleSDOCache::sdo_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCDirtyMultipleSDOCache.sdo_type)
  return sdo_type_;
}
void CMsgGCToGCDirtyMultipleSDOCache::set_sdo_type(::google::protobuf::uint32 value) {
  set_has_sdo_type();
  sdo_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCDirtyMultipleSDOCache.sdo_type)
}

// repeated uint64 key_uint64 = 2;
int CMsgGCToGCDirtyMultipleSDOCache::key_uint64_size() const {
  return key_uint64_.size();
}
void CMsgGCToGCDirtyMultipleSDOCache::clear_key_uint64() {
  key_uint64_.Clear();
}
::google::protobuf::uint64 CMsgGCToGCDirtyMultipleSDOCache::key_uint64(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCDirtyMultipleSDOCache.key_uint64)
  return key_uint64_.Get(index);
}
void CMsgGCToGCDirtyMultipleSDOCache::set_key_uint64(int index, ::google::protobuf::uint64 value) {
  key_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCDirtyMultipleSDOCache.key_uint64)
}
void CMsgGCToGCDirtyMultipleSDOCache::add_key_uint64(::google::protobuf::uint64 value) {
  key_uint64_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToGCDirtyMultipleSDOCache.key_uint64)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCToGCDirtyMultipleSDOCache::key_uint64() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToGCDirtyMultipleSDOCache.key_uint64)
  return key_uint64_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCToGCDirtyMultipleSDOCache::mutable_key_uint64() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToGCDirtyMultipleSDOCache.key_uint64)
  return &key_uint64_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCApplyLocalizationDiff::kLanguageFieldNumber;
const int CMsgGCToGCApplyLocalizationDiff::kPackedDiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCApplyLocalizationDiff::CMsgGCToGCApplyLocalizationDiff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCApplyLocalizationDiff)
}
CMsgGCToGCApplyLocalizationDiff::CMsgGCToGCApplyLocalizationDiff(const CMsgGCToGCApplyLocalizationDiff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packed_diff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packed_diff()) {
    packed_diff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_diff_);
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCApplyLocalizationDiff)
}

void CMsgGCToGCApplyLocalizationDiff::SharedCtor() {
  _cached_size_ = 0;
  packed_diff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = 0u;
}

CMsgGCToGCApplyLocalizationDiff::~CMsgGCToGCApplyLocalizationDiff() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  SharedDtor();
}

void CMsgGCToGCApplyLocalizationDiff::SharedDtor() {
  packed_diff_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCApplyLocalizationDiff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCApplyLocalizationDiff::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCApplyLocalizationDiff& CMsgGCToGCApplyLocalizationDiff::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCApplyLocalizationDiff* CMsgGCToGCApplyLocalizationDiff::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCApplyLocalizationDiff* n = new CMsgGCToGCApplyLocalizationDiff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCApplyLocalizationDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  if (has_packed_diff()) {
    GOOGLE_DCHECK(!packed_diff_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*packed_diff_.UnsafeRawStringPointer())->clear();
  }
  language_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCApplyLocalizationDiff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string packed_diff = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packed_diff()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packed_diff().data(), this->packed_diff().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  return false;
#undef DO_
}

void CMsgGCToGCApplyLocalizationDiff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional string packed_diff = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packed_diff().data(), this->packed_diff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->packed_diff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCApplyLocalizationDiff)
}

::google::protobuf::uint8* CMsgGCToGCApplyLocalizationDiff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional string packed_diff = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packed_diff().data(), this->packed_diff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->packed_diff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  return target;
}

size_t CMsgGCToGCApplyLocalizationDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string packed_diff = 2;
    if (has_packed_diff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packed_diff());
    }

    // optional uint32 language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCApplyLocalizationDiff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCApplyLocalizationDiff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCApplyLocalizationDiff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCApplyLocalizationDiff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCApplyLocalizationDiff)
    MergeFrom(*source);
  }
}

void CMsgGCToGCApplyLocalizationDiff::MergeFrom(const CMsgGCToGCApplyLocalizationDiff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_packed_diff();
      packed_diff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_diff_);
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCApplyLocalizationDiff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCApplyLocalizationDiff::CopyFrom(const CMsgGCToGCApplyLocalizationDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCApplyLocalizationDiff::IsInitialized() const {
  return true;
}

void CMsgGCToGCApplyLocalizationDiff::Swap(CMsgGCToGCApplyLocalizationDiff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCApplyLocalizationDiff::InternalSwap(CMsgGCToGCApplyLocalizationDiff* other) {
  packed_diff_.Swap(&other->packed_diff_);
  std::swap(language_, other->language_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCApplyLocalizationDiff::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCApplyLocalizationDiff

// optional uint32 language = 1;
bool CMsgGCToGCApplyLocalizationDiff::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCApplyLocalizationDiff::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCApplyLocalizationDiff::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCApplyLocalizationDiff::clear_language() {
  language_ = 0u;
  clear_has_language();
}
::google::protobuf::uint32 CMsgGCToGCApplyLocalizationDiff::language() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCApplyLocalizationDiff.language)
  return language_;
}
void CMsgGCToGCApplyLocalizationDiff::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCApplyLocalizationDiff.language)
}

// optional string packed_diff = 2;
bool CMsgGCToGCApplyLocalizationDiff::has_packed_diff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCApplyLocalizationDiff::set_has_packed_diff() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCApplyLocalizationDiff::clear_has_packed_diff() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCApplyLocalizationDiff::clear_packed_diff() {
  packed_diff_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packed_diff();
}
const ::std::string& CMsgGCToGCApplyLocalizationDiff::packed_diff() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff)
  return packed_diff_.GetNoArena();
}
void CMsgGCToGCApplyLocalizationDiff::set_packed_diff(const ::std::string& value) {
  set_has_packed_diff();
  packed_diff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff)
}
#if LANG_CXX11
void CMsgGCToGCApplyLocalizationDiff::set_packed_diff(::std::string&& value) {
  set_has_packed_diff();
  packed_diff_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff)
}
#endif
void CMsgGCToGCApplyLocalizationDiff::set_packed_diff(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packed_diff();
  packed_diff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff)
}
void CMsgGCToGCApplyLocalizationDiff::set_packed_diff(const char* value, size_t size) {
  set_has_packed_diff();
  packed_diff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff)
}
::std::string* CMsgGCToGCApplyLocalizationDiff::mutable_packed_diff() {
  set_has_packed_diff();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff)
  return packed_diff_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToGCApplyLocalizationDiff::release_packed_diff() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff)
  clear_has_packed_diff();
  return packed_diff_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToGCApplyLocalizationDiff::set_allocated_packed_diff(::std::string* packed_diff) {
  if (packed_diff != NULL) {
    set_has_packed_diff();
  } else {
    clear_has_packed_diff();
  }
  packed_diff_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packed_diff);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCApplyLocalizationDiffResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCApplyLocalizationDiffResponse::CMsgGCToGCApplyLocalizationDiffResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
}
CMsgGCToGCApplyLocalizationDiffResponse::CMsgGCToGCApplyLocalizationDiffResponse(const CMsgGCToGCApplyLocalizationDiffResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
}

void CMsgGCToGCApplyLocalizationDiffResponse::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

CMsgGCToGCApplyLocalizationDiffResponse::~CMsgGCToGCApplyLocalizationDiffResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  SharedDtor();
}

void CMsgGCToGCApplyLocalizationDiffResponse::SharedDtor() {
}

void CMsgGCToGCApplyLocalizationDiffResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCApplyLocalizationDiffResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCApplyLocalizationDiffResponse& CMsgGCToGCApplyLocalizationDiffResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCApplyLocalizationDiffResponse* CMsgGCToGCApplyLocalizationDiffResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCApplyLocalizationDiffResponse* n = new CMsgGCToGCApplyLocalizationDiffResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCApplyLocalizationDiffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCApplyLocalizationDiffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  return false;
#undef DO_
}

void CMsgGCToGCApplyLocalizationDiffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
}

::google::protobuf::uint8* CMsgGCToGCApplyLocalizationDiffResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  return target;
}

size_t CMsgGCToGCApplyLocalizationDiffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCApplyLocalizationDiffResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCApplyLocalizationDiffResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCApplyLocalizationDiffResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCApplyLocalizationDiffResponse::MergeFrom(const CMsgGCToGCApplyLocalizationDiffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CMsgGCToGCApplyLocalizationDiffResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCApplyLocalizationDiffResponse::CopyFrom(const CMsgGCToGCApplyLocalizationDiffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCApplyLocalizationDiffResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCApplyLocalizationDiffResponse::Swap(CMsgGCToGCApplyLocalizationDiffResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCApplyLocalizationDiffResponse::InternalSwap(CMsgGCToGCApplyLocalizationDiffResponse* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCApplyLocalizationDiffResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCApplyLocalizationDiffResponse

// optional bool success = 1;
bool CMsgGCToGCApplyLocalizationDiffResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCApplyLocalizationDiffResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCApplyLocalizationDiffResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCApplyLocalizationDiffResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CMsgGCToGCApplyLocalizationDiffResponse::success() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse.success)
  return success_;
}
void CMsgGCToGCApplyLocalizationDiffResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCollectItem::kCollectionItemIdFieldNumber;
const int CMsgGCCollectItem::kSubjectItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCollectItem::CMsgGCCollectItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCCollectItem)
}
CMsgGCCollectItem::CMsgGCCollectItem(const CMsgGCCollectItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&collection_item_id_, &from.collection_item_id_,
    reinterpret_cast<char*>(&subject_item_id_) -
    reinterpret_cast<char*>(&collection_item_id_) + sizeof(subject_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCCollectItem)
}

void CMsgGCCollectItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&collection_item_id_, 0, reinterpret_cast<char*>(&subject_item_id_) -
    reinterpret_cast<char*>(&collection_item_id_) + sizeof(subject_item_id_));
}

CMsgGCCollectItem::~CMsgGCCollectItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCCollectItem)
  SharedDtor();
}

void CMsgGCCollectItem::SharedDtor() {
}

void CMsgGCCollectItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCollectItem::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCollectItem& CMsgGCCollectItem::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCCollectItem* CMsgGCCollectItem::New(::google::protobuf::Arena* arena) const {
  CMsgGCCollectItem* n = new CMsgGCCollectItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCCollectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCCollectItem)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&collection_item_id_, 0, reinterpret_cast<char*>(&subject_item_id_) -
      reinterpret_cast<char*>(&collection_item_id_) + sizeof(subject_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCollectItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCCollectItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 collection_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_collection_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 subject_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_subject_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subject_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCCollectItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCCollectItem)
  return false;
#undef DO_
}

void CMsgGCCollectItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCCollectItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 collection_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->collection_item_id(), output);
  }

  // optional uint64 subject_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->subject_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCCollectItem)
}

::google::protobuf::uint8* CMsgGCCollectItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCCollectItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 collection_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->collection_item_id(), target);
  }

  // optional uint64 subject_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->subject_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCCollectItem)
  return target;
}

size_t CMsgGCCollectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCCollectItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 collection_item_id = 1;
    if (has_collection_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collection_item_id());
    }

    // optional uint64 subject_item_id = 2;
    if (has_subject_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subject_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCollectItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCCollectItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCollectItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCollectItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCCollectItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCCollectItem)
    MergeFrom(*source);
  }
}

void CMsgGCCollectItem::MergeFrom(const CMsgGCCollectItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCCollectItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      collection_item_id_ = from.collection_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      subject_item_id_ = from.subject_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCollectItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCCollectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCollectItem::CopyFrom(const CMsgGCCollectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCCollectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCollectItem::IsInitialized() const {
  return true;
}

void CMsgGCCollectItem::Swap(CMsgGCCollectItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCollectItem::InternalSwap(CMsgGCCollectItem* other) {
  std::swap(collection_item_id_, other->collection_item_id_);
  std::swap(subject_item_id_, other->subject_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCCollectItem::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCCollectItem

// optional uint64 collection_item_id = 1;
bool CMsgGCCollectItem::has_collection_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCCollectItem::set_has_collection_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCCollectItem::clear_has_collection_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCCollectItem::clear_collection_item_id() {
  collection_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_collection_item_id();
}
::google::protobuf::uint64 CMsgGCCollectItem::collection_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCCollectItem.collection_item_id)
  return collection_item_id_;
}
void CMsgGCCollectItem::set_collection_item_id(::google::protobuf::uint64 value) {
  set_has_collection_item_id();
  collection_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCCollectItem.collection_item_id)
}

// optional uint64 subject_item_id = 2;
bool CMsgGCCollectItem::has_subject_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCCollectItem::set_has_subject_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCCollectItem::clear_has_subject_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCCollectItem::clear_subject_item_id() {
  subject_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_subject_item_id();
}
::google::protobuf::uint64 CMsgGCCollectItem::subject_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCCollectItem.subject_item_id)
  return subject_item_id_;
}
void CMsgGCCollectItem::set_subject_item_id(::google::protobuf::uint64 value) {
  set_has_subject_item_id();
  subject_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCCollectItem.subject_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSDONoMemcached::CMsgSDONoMemcached()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSDONoMemcached)
}
CMsgSDONoMemcached::CMsgSDONoMemcached(const CMsgSDONoMemcached& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSDONoMemcached)
}

void CMsgSDONoMemcached::SharedCtor() {
  _cached_size_ = 0;
}

CMsgSDONoMemcached::~CMsgSDONoMemcached() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSDONoMemcached)
  SharedDtor();
}

void CMsgSDONoMemcached::SharedDtor() {
}

void CMsgSDONoMemcached::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSDONoMemcached::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSDONoMemcached& CMsgSDONoMemcached::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSDONoMemcached* CMsgSDONoMemcached::New(::google::protobuf::Arena* arena) const {
  CMsgSDONoMemcached* n = new CMsgSDONoMemcached;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSDONoMemcached::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSDONoMemcached)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSDONoMemcached::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSDONoMemcached)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSDONoMemcached)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSDONoMemcached)
  return false;
#undef DO_
}

void CMsgSDONoMemcached::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSDONoMemcached)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSDONoMemcached)
}

::google::protobuf::uint8* CMsgSDONoMemcached::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSDONoMemcached)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSDONoMemcached)
  return target;
}

size_t CMsgSDONoMemcached::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSDONoMemcached)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSDONoMemcached::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSDONoMemcached)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSDONoMemcached* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSDONoMemcached>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSDONoMemcached)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSDONoMemcached)
    MergeFrom(*source);
  }
}

void CMsgSDONoMemcached::MergeFrom(const CMsgSDONoMemcached& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSDONoMemcached)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgSDONoMemcached::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSDONoMemcached)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSDONoMemcached::CopyFrom(const CMsgSDONoMemcached& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSDONoMemcached)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSDONoMemcached::IsInitialized() const {
  return true;
}

void CMsgSDONoMemcached::Swap(CMsgSDONoMemcached* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSDONoMemcached::InternalSwap(CMsgSDONoMemcached* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSDONoMemcached::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSDONoMemcached

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCUpdateSQLKeyValue::kKeyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
}
CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(const CMsgGCToGCUpdateSQLKeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_name()) {
    key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
}

void CMsgGCToGCUpdateSQLKeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCToGCUpdateSQLKeyValue::~CMsgGCToGCUpdateSQLKeyValue() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  SharedDtor();
}

void CMsgGCToGCUpdateSQLKeyValue::SharedDtor() {
  key_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCUpdateSQLKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCUpdateSQLKeyValue::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCUpdateSQLKeyValue& CMsgGCToGCUpdateSQLKeyValue::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCUpdateSQLKeyValue* CMsgGCToGCUpdateSQLKeyValue::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCUpdateSQLKeyValue* n = new CMsgGCToGCUpdateSQLKeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCUpdateSQLKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  if (has_key_name()) {
    GOOGLE_DCHECK(!key_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCUpdateSQLKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_name().data(), this->key_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  return false;
#undef DO_
}

void CMsgGCToGCUpdateSQLKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_name().data(), this->key_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
}

::google::protobuf::uint8* CMsgGCToGCUpdateSQLKeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_name().data(), this->key_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  return target;
}

size_t CMsgGCToGCUpdateSQLKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string key_name = 1;
  if (has_key_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCUpdateSQLKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUpdateSQLKeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCUpdateSQLKeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUpdateSQLKeyValue::MergeFrom(const CMsgGCToGCUpdateSQLKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key_name()) {
    set_has_key_name();
    key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_name_);
  }
}

void CMsgGCToGCUpdateSQLKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUpdateSQLKeyValue::CopyFrom(const CMsgGCToGCUpdateSQLKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSQLKeyValue::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSQLKeyValue::Swap(CMsgGCToGCUpdateSQLKeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCUpdateSQLKeyValue::InternalSwap(CMsgGCToGCUpdateSQLKeyValue* other) {
  key_name_.Swap(&other->key_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCUpdateSQLKeyValue::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCUpdateSQLKeyValue

// optional string key_name = 1;
bool CMsgGCToGCUpdateSQLKeyValue::has_key_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCUpdateSQLKeyValue::set_has_key_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCUpdateSQLKeyValue::clear_has_key_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCUpdateSQLKeyValue::clear_key_name() {
  key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key_name();
}
const ::std::string& CMsgGCToGCUpdateSQLKeyValue::key_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name)
  return key_name_.GetNoArena();
}
void CMsgGCToGCUpdateSQLKeyValue::set_key_name(const ::std::string& value) {
  set_has_key_name();
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name)
}
#if LANG_CXX11
void CMsgGCToGCUpdateSQLKeyValue::set_key_name(::std::string&& value) {
  set_has_key_name();
  key_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name)
}
#endif
void CMsgGCToGCUpdateSQLKeyValue::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key_name();
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name)
}
void CMsgGCToGCUpdateSQLKeyValue::set_key_name(const char* value, size_t size) {
  set_has_key_name();
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name)
}
::std::string* CMsgGCToGCUpdateSQLKeyValue::mutable_key_name() {
  set_has_key_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name)
  return key_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToGCUpdateSQLKeyValue::release_key_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name)
  clear_has_key_name();
  return key_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToGCUpdateSQLKeyValue::set_allocated_key_name(::std::string* key_name) {
  if (key_name != NULL) {
    set_has_key_name();
  } else {
    clear_has_key_name();
  }
  key_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCServerVersionUpdated::kServerVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCServerVersionUpdated)
}
CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(const CMsgGCServerVersionUpdated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_version_ = from.server_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCServerVersionUpdated)
}

void CMsgGCServerVersionUpdated::SharedCtor() {
  _cached_size_ = 0;
  server_version_ = 0u;
}

CMsgGCServerVersionUpdated::~CMsgGCServerVersionUpdated() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCServerVersionUpdated)
  SharedDtor();
}

void CMsgGCServerVersionUpdated::SharedDtor() {
}

void CMsgGCServerVersionUpdated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCServerVersionUpdated::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCServerVersionUpdated& CMsgGCServerVersionUpdated::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCServerVersionUpdated* CMsgGCServerVersionUpdated::New(::google::protobuf::Arena* arena) const {
  CMsgGCServerVersionUpdated* n = new CMsgGCServerVersionUpdated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCServerVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCServerVersionUpdated)
  server_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCServerVersionUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCServerVersionUpdated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCServerVersionUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCServerVersionUpdated)
  return false;
#undef DO_
}

void CMsgGCServerVersionUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCServerVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCServerVersionUpdated)
}

::google::protobuf::uint8* CMsgGCServerVersionUpdated::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCServerVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCServerVersionUpdated)
  return target;
}

size_t CMsgGCServerVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCServerVersionUpdated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 server_version = 1;
  if (has_server_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCServerVersionUpdated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCServerVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCServerVersionUpdated* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCServerVersionUpdated>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCServerVersionUpdated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCServerVersionUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCServerVersionUpdated::MergeFrom(const CMsgGCServerVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCServerVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_version()) {
    set_server_version(from.server_version());
  }
}

void CMsgGCServerVersionUpdated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCServerVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCServerVersionUpdated::CopyFrom(const CMsgGCServerVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCServerVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCServerVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCServerVersionUpdated::Swap(CMsgGCServerVersionUpdated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCServerVersionUpdated::InternalSwap(CMsgGCServerVersionUpdated* other) {
  std::swap(server_version_, other->server_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCServerVersionUpdated::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCServerVersionUpdated

// optional uint32 server_version = 1;
bool CMsgGCServerVersionUpdated::has_server_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCServerVersionUpdated::set_has_server_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCServerVersionUpdated::clear_has_server_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCServerVersionUpdated::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
::google::protobuf::uint32 CMsgGCServerVersionUpdated::server_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCServerVersionUpdated.server_version)
  return server_version_;
}
void CMsgGCServerVersionUpdated::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCServerVersionUpdated.server_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientVersionUpdated::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientVersionUpdated)
}
CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(const CMsgGCClientVersionUpdated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientVersionUpdated)
}

void CMsgGCClientVersionUpdated::SharedCtor() {
  _cached_size_ = 0;
  client_version_ = 0u;
}

CMsgGCClientVersionUpdated::~CMsgGCClientVersionUpdated() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientVersionUpdated)
  SharedDtor();
}

void CMsgGCClientVersionUpdated::SharedDtor() {
}

void CMsgGCClientVersionUpdated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientVersionUpdated::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCClientVersionUpdated& CMsgGCClientVersionUpdated::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCClientVersionUpdated* CMsgGCClientVersionUpdated::New(::google::protobuf::Arena* arena) const {
  CMsgGCClientVersionUpdated* n = new CMsgGCClientVersionUpdated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCClientVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientVersionUpdated)
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCClientVersionUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientVersionUpdated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientVersionUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientVersionUpdated)
  return false;
#undef DO_
}

void CMsgGCClientVersionUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientVersionUpdated)
}

::google::protobuf::uint8* CMsgGCClientVersionUpdated::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientVersionUpdated)
  return target;
}

size_t CMsgGCClientVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientVersionUpdated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 client_version = 1;
  if (has_client_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientVersionUpdated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientVersionUpdated* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCClientVersionUpdated>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientVersionUpdated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientVersionUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCClientVersionUpdated::MergeFrom(const CMsgGCClientVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_version()) {
    set_client_version(from.client_version());
  }
}

void CMsgGCClientVersionUpdated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientVersionUpdated::CopyFrom(const CMsgGCClientVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCClientVersionUpdated::Swap(CMsgGCClientVersionUpdated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientVersionUpdated::InternalSwap(CMsgGCClientVersionUpdated* other) {
  std::swap(client_version_, other->client_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCClientVersionUpdated::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCClientVersionUpdated

// optional uint32 client_version = 1;
bool CMsgGCClientVersionUpdated::has_client_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCClientVersionUpdated::set_has_client_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCClientVersionUpdated::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCClientVersionUpdated::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgGCClientVersionUpdated::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientVersionUpdated.client_version)
  return client_version_;
}
void CMsgGCClientVersionUpdated::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientVersionUpdated.client_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCWebAPIAccountChanged)
}
CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(const CMsgGCToGCWebAPIAccountChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCWebAPIAccountChanged)
}

void CMsgGCToGCWebAPIAccountChanged::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCToGCWebAPIAccountChanged::~CMsgGCToGCWebAPIAccountChanged() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  SharedDtor();
}

void CMsgGCToGCWebAPIAccountChanged::SharedDtor() {
}

void CMsgGCToGCWebAPIAccountChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCWebAPIAccountChanged::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCWebAPIAccountChanged& CMsgGCToGCWebAPIAccountChanged::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCWebAPIAccountChanged* CMsgGCToGCWebAPIAccountChanged::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCWebAPIAccountChanged* n = new CMsgGCToGCWebAPIAccountChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCWebAPIAccountChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCWebAPIAccountChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  return false;
#undef DO_
}

void CMsgGCToGCWebAPIAccountChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCWebAPIAccountChanged)
}

::google::protobuf::uint8* CMsgGCToGCWebAPIAccountChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  return target;
}

size_t CMsgGCToGCWebAPIAccountChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCWebAPIAccountChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCWebAPIAccountChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCWebAPIAccountChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCWebAPIAccountChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCWebAPIAccountChanged)
    MergeFrom(*source);
  }
}

void CMsgGCToGCWebAPIAccountChanged::MergeFrom(const CMsgGCToGCWebAPIAccountChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCWebAPIAccountChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCWebAPIAccountChanged::CopyFrom(const CMsgGCToGCWebAPIAccountChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCWebAPIAccountChanged::IsInitialized() const {
  return true;
}

void CMsgGCToGCWebAPIAccountChanged::Swap(CMsgGCToGCWebAPIAccountChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCWebAPIAccountChanged::InternalSwap(CMsgGCToGCWebAPIAccountChanged* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCWebAPIAccountChanged::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCWebAPIAccountChanged

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRecipeComponent::kSubjectItemIdFieldNumber;
const int CMsgRecipeComponent::kAttributeIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRecipeComponent::CMsgRecipeComponent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgRecipeComponent)
}
CMsgRecipeComponent::CMsgRecipeComponent(const CMsgRecipeComponent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subject_item_id_, &from.subject_item_id_,
    reinterpret_cast<char*>(&attribute_index_) -
    reinterpret_cast<char*>(&subject_item_id_) + sizeof(attribute_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgRecipeComponent)
}

void CMsgRecipeComponent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&subject_item_id_, 0, reinterpret_cast<char*>(&attribute_index_) -
    reinterpret_cast<char*>(&subject_item_id_) + sizeof(attribute_index_));
}

CMsgRecipeComponent::~CMsgRecipeComponent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgRecipeComponent)
  SharedDtor();
}

void CMsgRecipeComponent::SharedDtor() {
}

void CMsgRecipeComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRecipeComponent::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRecipeComponent& CMsgRecipeComponent::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRecipeComponent* CMsgRecipeComponent::New(::google::protobuf::Arena* arena) const {
  CMsgRecipeComponent* n = new CMsgRecipeComponent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgRecipeComponent)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&subject_item_id_, 0, reinterpret_cast<char*>(&attribute_index_) -
      reinterpret_cast<char*>(&subject_item_id_) + sizeof(attribute_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgRecipeComponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 subject_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_subject_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subject_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 attribute_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_attribute_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attribute_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgRecipeComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgRecipeComponent)
  return false;
#undef DO_
}

void CMsgRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 subject_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->subject_item_id(), output);
  }

  // optional uint64 attribute_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->attribute_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgRecipeComponent)
}

::google::protobuf::uint8* CMsgRecipeComponent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 subject_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->subject_item_id(), target);
  }

  // optional uint64 attribute_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->attribute_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgRecipeComponent)
  return target;
}

size_t CMsgRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgRecipeComponent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 subject_item_id = 1;
    if (has_subject_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subject_item_id());
    }

    // optional uint64 attribute_index = 2;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attribute_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRecipeComponent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRecipeComponent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgRecipeComponent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgRecipeComponent)
    MergeFrom(*source);
  }
}

void CMsgRecipeComponent::MergeFrom(const CMsgRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      subject_item_id_ = from.subject_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_index_ = from.attribute_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRecipeComponent::CopyFrom(const CMsgRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRecipeComponent::IsInitialized() const {
  return true;
}

void CMsgRecipeComponent::Swap(CMsgRecipeComponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRecipeComponent::InternalSwap(CMsgRecipeComponent* other) {
  std::swap(subject_item_id_, other->subject_item_id_);
  std::swap(attribute_index_, other->attribute_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRecipeComponent::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRecipeComponent

// optional uint64 subject_item_id = 1;
bool CMsgRecipeComponent::has_subject_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRecipeComponent::set_has_subject_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRecipeComponent::clear_has_subject_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRecipeComponent::clear_subject_item_id() {
  subject_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_subject_item_id();
}
::google::protobuf::uint64 CMsgRecipeComponent::subject_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecipeComponent.subject_item_id)
  return subject_item_id_;
}
void CMsgRecipeComponent::set_subject_item_id(::google::protobuf::uint64 value) {
  set_has_subject_item_id();
  subject_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecipeComponent.subject_item_id)
}

// optional uint64 attribute_index = 2;
bool CMsgRecipeComponent::has_attribute_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRecipeComponent::set_has_attribute_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRecipeComponent::clear_has_attribute_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRecipeComponent::clear_attribute_index() {
  attribute_index_ = GOOGLE_ULONGLONG(0);
  clear_has_attribute_index();
}
::google::protobuf::uint64 CMsgRecipeComponent::attribute_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgRecipeComponent.attribute_index)
  return attribute_index_;
}
void CMsgRecipeComponent::set_attribute_index(::google::protobuf::uint64 value) {
  set_has_attribute_index();
  attribute_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgRecipeComponent.attribute_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFulfillDynamicRecipeComponent::kToolItemIdFieldNumber;
const int CMsgFulfillDynamicRecipeComponent::kConsumptionComponentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFulfillDynamicRecipeComponent::CMsgFulfillDynamicRecipeComponent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgFulfillDynamicRecipeComponent)
}
CMsgFulfillDynamicRecipeComponent::CMsgFulfillDynamicRecipeComponent(const CMsgFulfillDynamicRecipeComponent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      consumption_components_(from.consumption_components_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tool_item_id_ = from.tool_item_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgFulfillDynamicRecipeComponent)
}

void CMsgFulfillDynamicRecipeComponent::SharedCtor() {
  _cached_size_ = 0;
  tool_item_id_ = GOOGLE_ULONGLONG(0);
}

CMsgFulfillDynamicRecipeComponent::~CMsgFulfillDynamicRecipeComponent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgFulfillDynamicRecipeComponent)
  SharedDtor();
}

void CMsgFulfillDynamicRecipeComponent::SharedDtor() {
}

void CMsgFulfillDynamicRecipeComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFulfillDynamicRecipeComponent::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFulfillDynamicRecipeComponent& CMsgFulfillDynamicRecipeComponent::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFulfillDynamicRecipeComponent* CMsgFulfillDynamicRecipeComponent::New(::google::protobuf::Arena* arena) const {
  CMsgFulfillDynamicRecipeComponent* n = new CMsgFulfillDynamicRecipeComponent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFulfillDynamicRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  consumption_components_.Clear();
  tool_item_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFulfillDynamicRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tool_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumption_components()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgFulfillDynamicRecipeComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgFulfillDynamicRecipeComponent)
  return false;
#undef DO_
}

void CMsgFulfillDynamicRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }

  // repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
  for (unsigned int i = 0, n = this->consumption_components_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consumption_components(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgFulfillDynamicRecipeComponent)
}

::google::protobuf::uint8* CMsgFulfillDynamicRecipeComponent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }

  // repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
  for (unsigned int i = 0, n = this->consumption_components_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->consumption_components(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgFulfillDynamicRecipeComponent)
  return target;
}

size_t CMsgFulfillDynamicRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
  {
    unsigned int count = this->consumption_components_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consumption_components(i));
    }
  }

  // optional uint64 tool_item_id = 1;
  if (has_tool_item_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tool_item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFulfillDynamicRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFulfillDynamicRecipeComponent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFulfillDynamicRecipeComponent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgFulfillDynamicRecipeComponent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgFulfillDynamicRecipeComponent)
    MergeFrom(*source);
  }
}

void CMsgFulfillDynamicRecipeComponent::MergeFrom(const CMsgFulfillDynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  consumption_components_.MergeFrom(from.consumption_components_);
  if (from.has_tool_item_id()) {
    set_tool_item_id(from.tool_item_id());
  }
}

void CMsgFulfillDynamicRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFulfillDynamicRecipeComponent::CopyFrom(const CMsgFulfillDynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFulfillDynamicRecipeComponent::IsInitialized() const {
  return true;
}

void CMsgFulfillDynamicRecipeComponent::Swap(CMsgFulfillDynamicRecipeComponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFulfillDynamicRecipeComponent::InternalSwap(CMsgFulfillDynamicRecipeComponent* other) {
  consumption_components_.InternalSwap(&other->consumption_components_);
  std::swap(tool_item_id_, other->tool_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFulfillDynamicRecipeComponent::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFulfillDynamicRecipeComponent

// optional uint64 tool_item_id = 1;
bool CMsgFulfillDynamicRecipeComponent::has_tool_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFulfillDynamicRecipeComponent::set_has_tool_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFulfillDynamicRecipeComponent::clear_has_tool_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFulfillDynamicRecipeComponent::clear_tool_item_id() {
  tool_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tool_item_id();
}
::google::protobuf::uint64 CMsgFulfillDynamicRecipeComponent::tool_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFulfillDynamicRecipeComponent.tool_item_id)
  return tool_item_id_;
}
void CMsgFulfillDynamicRecipeComponent::set_tool_item_id(::google::protobuf::uint64 value) {
  set_has_tool_item_id();
  tool_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFulfillDynamicRecipeComponent.tool_item_id)
}

// repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
int CMsgFulfillDynamicRecipeComponent::consumption_components_size() const {
  return consumption_components_.size();
}
void CMsgFulfillDynamicRecipeComponent::clear_consumption_components() {
  consumption_components_.Clear();
}
const ::proto::dota::CMsgRecipeComponent& CMsgFulfillDynamicRecipeComponent::consumption_components(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFulfillDynamicRecipeComponent.consumption_components)
  return consumption_components_.Get(index);
}
::proto::dota::CMsgRecipeComponent* CMsgFulfillDynamicRecipeComponent::mutable_consumption_components(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgFulfillDynamicRecipeComponent.consumption_components)
  return consumption_components_.Mutable(index);
}
::proto::dota::CMsgRecipeComponent* CMsgFulfillDynamicRecipeComponent::add_consumption_components() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgFulfillDynamicRecipeComponent.consumption_components)
  return consumption_components_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgRecipeComponent >*
CMsgFulfillDynamicRecipeComponent::mutable_consumption_components() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgFulfillDynamicRecipeComponent.consumption_components)
  return &consumption_components_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgRecipeComponent >&
CMsgFulfillDynamicRecipeComponent::consumption_components() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgFulfillDynamicRecipeComponent.consumption_components)
  return consumption_components_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientMarketDataRequest::kUserCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientMarketDataRequest::CMsgGCClientMarketDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientMarketDataRequest)
}
CMsgGCClientMarketDataRequest::CMsgGCClientMarketDataRequest(const CMsgGCClientMarketDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_currency_ = from.user_currency_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientMarketDataRequest)
}

void CMsgGCClientMarketDataRequest::SharedCtor() {
  _cached_size_ = 0;
  user_currency_ = 0u;
}

CMsgGCClientMarketDataRequest::~CMsgGCClientMarketDataRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientMarketDataRequest)
  SharedDtor();
}

void CMsgGCClientMarketDataRequest::SharedDtor() {
}

void CMsgGCClientMarketDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientMarketDataRequest::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCClientMarketDataRequest& CMsgGCClientMarketDataRequest::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCClientMarketDataRequest* CMsgGCClientMarketDataRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGCClientMarketDataRequest* n = new CMsgGCClientMarketDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCClientMarketDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientMarketDataRequest)
  user_currency_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCClientMarketDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientMarketDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_currency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientMarketDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientMarketDataRequest)
  return false;
#undef DO_
}

void CMsgGCClientMarketDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientMarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_currency = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_currency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientMarketDataRequest)
}

::google::protobuf::uint8* CMsgGCClientMarketDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientMarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_currency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_currency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientMarketDataRequest)
  return target;
}

size_t CMsgGCClientMarketDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientMarketDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 user_currency = 1;
  if (has_user_currency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_currency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientMarketDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientMarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientMarketDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCClientMarketDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientMarketDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientMarketDataRequest)
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketDataRequest::MergeFrom(const CMsgGCClientMarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientMarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_currency()) {
    set_user_currency(from.user_currency());
  }
}

void CMsgGCClientMarketDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientMarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketDataRequest::CopyFrom(const CMsgGCClientMarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientMarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketDataRequest::IsInitialized() const {
  return true;
}

void CMsgGCClientMarketDataRequest::Swap(CMsgGCClientMarketDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientMarketDataRequest::InternalSwap(CMsgGCClientMarketDataRequest* other) {
  std::swap(user_currency_, other->user_currency_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCClientMarketDataRequest::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCClientMarketDataRequest

// optional uint32 user_currency = 1;
bool CMsgGCClientMarketDataRequest::has_user_currency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCClientMarketDataRequest::set_has_user_currency() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCClientMarketDataRequest::clear_has_user_currency() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCClientMarketDataRequest::clear_user_currency() {
  user_currency_ = 0u;
  clear_has_user_currency();
}
::google::protobuf::uint32 CMsgGCClientMarketDataRequest::user_currency() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientMarketDataRequest.user_currency)
  return user_currency_;
}
void CMsgGCClientMarketDataRequest::set_user_currency(::google::protobuf::uint32 value) {
  set_has_user_currency();
  user_currency_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientMarketDataRequest.user_currency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientMarketDataEntry::kItemDefIndexFieldNumber;
const int CMsgGCClientMarketDataEntry::kItemQualityFieldNumber;
const int CMsgGCClientMarketDataEntry::kItemSellListingsFieldNumber;
const int CMsgGCClientMarketDataEntry::kPriceInLocalCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientMarketDataEntry::CMsgGCClientMarketDataEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientMarketDataEntry)
}
CMsgGCClientMarketDataEntry::CMsgGCClientMarketDataEntry(const CMsgGCClientMarketDataEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_index_, &from.item_def_index_,
    reinterpret_cast<char*>(&price_in_local_currency_) -
    reinterpret_cast<char*>(&item_def_index_) + sizeof(price_in_local_currency_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientMarketDataEntry)
}

void CMsgGCClientMarketDataEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_def_index_, 0, reinterpret_cast<char*>(&price_in_local_currency_) -
    reinterpret_cast<char*>(&item_def_index_) + sizeof(price_in_local_currency_));
}

CMsgGCClientMarketDataEntry::~CMsgGCClientMarketDataEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientMarketDataEntry)
  SharedDtor();
}

void CMsgGCClientMarketDataEntry::SharedDtor() {
}

void CMsgGCClientMarketDataEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientMarketDataEntry::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCClientMarketDataEntry& CMsgGCClientMarketDataEntry::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCClientMarketDataEntry* CMsgGCClientMarketDataEntry::New(::google::protobuf::Arena* arena) const {
  CMsgGCClientMarketDataEntry* n = new CMsgGCClientMarketDataEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCClientMarketDataEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientMarketDataEntry)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&item_def_index_, 0, reinterpret_cast<char*>(&price_in_local_currency_) -
      reinterpret_cast<char*>(&item_def_index_) + sizeof(price_in_local_currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCClientMarketDataEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientMarketDataEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_sell_listings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_item_sell_listings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_sell_listings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 price_in_local_currency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_price_in_local_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_in_local_currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientMarketDataEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientMarketDataEntry)
  return false;
#undef DO_
}

void CMsgGCClientMarketDataEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientMarketDataEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_index(), output);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_quality(), output);
  }

  // optional uint32 item_sell_listings = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_sell_listings(), output);
  }

  // optional uint32 price_in_local_currency = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price_in_local_currency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientMarketDataEntry)
}

::google::protobuf::uint8* CMsgGCClientMarketDataEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientMarketDataEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_index(), target);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_quality(), target);
  }

  // optional uint32 item_sell_listings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_sell_listings(), target);
  }

  // optional uint32 price_in_local_currency = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price_in_local_currency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientMarketDataEntry)
  return target;
}

size_t CMsgGCClientMarketDataEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientMarketDataEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 item_def_index = 1;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

    // optional uint32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_quality());
    }

    // optional uint32 item_sell_listings = 3;
    if (has_item_sell_listings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_sell_listings());
    }

    // optional uint32 price_in_local_currency = 4;
    if (has_price_in_local_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_in_local_currency());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientMarketDataEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientMarketDataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientMarketDataEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCClientMarketDataEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientMarketDataEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientMarketDataEntry)
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketDataEntry::MergeFrom(const CMsgGCClientMarketDataEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientMarketDataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_sell_listings_ = from.item_sell_listings_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_in_local_currency_ = from.price_in_local_currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCClientMarketDataEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientMarketDataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketDataEntry::CopyFrom(const CMsgGCClientMarketDataEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientMarketDataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketDataEntry::IsInitialized() const {
  return true;
}

void CMsgGCClientMarketDataEntry::Swap(CMsgGCClientMarketDataEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientMarketDataEntry::InternalSwap(CMsgGCClientMarketDataEntry* other) {
  std::swap(item_def_index_, other->item_def_index_);
  std::swap(item_quality_, other->item_quality_);
  std::swap(item_sell_listings_, other->item_sell_listings_);
  std::swap(price_in_local_currency_, other->price_in_local_currency_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCClientMarketDataEntry::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCClientMarketDataEntry

// optional uint32 item_def_index = 1;
bool CMsgGCClientMarketDataEntry::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCClientMarketDataEntry::set_has_item_def_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCClientMarketDataEntry::clear_has_item_def_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCClientMarketDataEntry::clear_item_def_index() {
  item_def_index_ = 0u;
  clear_has_item_def_index();
}
::google::protobuf::uint32 CMsgGCClientMarketDataEntry::item_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientMarketDataEntry.item_def_index)
  return item_def_index_;
}
void CMsgGCClientMarketDataEntry::set_item_def_index(::google::protobuf::uint32 value) {
  set_has_item_def_index();
  item_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientMarketDataEntry.item_def_index)
}

// optional uint32 item_quality = 2;
bool CMsgGCClientMarketDataEntry::has_item_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCClientMarketDataEntry::set_has_item_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCClientMarketDataEntry::clear_has_item_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCClientMarketDataEntry::clear_item_quality() {
  item_quality_ = 0u;
  clear_has_item_quality();
}
::google::protobuf::uint32 CMsgGCClientMarketDataEntry::item_quality() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientMarketDataEntry.item_quality)
  return item_quality_;
}
void CMsgGCClientMarketDataEntry::set_item_quality(::google::protobuf::uint32 value) {
  set_has_item_quality();
  item_quality_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientMarketDataEntry.item_quality)
}

// optional uint32 item_sell_listings = 3;
bool CMsgGCClientMarketDataEntry::has_item_sell_listings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCClientMarketDataEntry::set_has_item_sell_listings() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCClientMarketDataEntry::clear_has_item_sell_listings() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCClientMarketDataEntry::clear_item_sell_listings() {
  item_sell_listings_ = 0u;
  clear_has_item_sell_listings();
}
::google::protobuf::uint32 CMsgGCClientMarketDataEntry::item_sell_listings() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientMarketDataEntry.item_sell_listings)
  return item_sell_listings_;
}
void CMsgGCClientMarketDataEntry::set_item_sell_listings(::google::protobuf::uint32 value) {
  set_has_item_sell_listings();
  item_sell_listings_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientMarketDataEntry.item_sell_listings)
}

// optional uint32 price_in_local_currency = 4;
bool CMsgGCClientMarketDataEntry::has_price_in_local_currency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCClientMarketDataEntry::set_has_price_in_local_currency() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCClientMarketDataEntry::clear_has_price_in_local_currency() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCClientMarketDataEntry::clear_price_in_local_currency() {
  price_in_local_currency_ = 0u;
  clear_has_price_in_local_currency();
}
::google::protobuf::uint32 CMsgGCClientMarketDataEntry::price_in_local_currency() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientMarketDataEntry.price_in_local_currency)
  return price_in_local_currency_;
}
void CMsgGCClientMarketDataEntry::set_price_in_local_currency(::google::protobuf::uint32 value) {
  set_has_price_in_local_currency();
  price_in_local_currency_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCClientMarketDataEntry.price_in_local_currency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientMarketData::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientMarketData::CMsgGCClientMarketData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientMarketData)
}
CMsgGCClientMarketData::CMsgGCClientMarketData(const CMsgGCClientMarketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientMarketData)
}

void CMsgGCClientMarketData::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCClientMarketData::~CMsgGCClientMarketData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientMarketData)
  SharedDtor();
}

void CMsgGCClientMarketData::SharedDtor() {
}

void CMsgGCClientMarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientMarketData::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCClientMarketData& CMsgGCClientMarketData::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCClientMarketData* CMsgGCClientMarketData::New(::google::protobuf::Arena* arena) const {
  CMsgGCClientMarketData* n = new CMsgGCClientMarketData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCClientMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientMarketData)
  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCClientMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientMarketData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientMarketData)
  return false;
#undef DO_
}

void CMsgGCClientMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientMarketData)
}

::google::protobuf::uint8* CMsgGCClientMarketData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientMarketData)
  return target;
}

size_t CMsgGCClientMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientMarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientMarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientMarketData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCClientMarketData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientMarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientMarketData)
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketData::MergeFrom(const CMsgGCClientMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCClientMarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketData::CopyFrom(const CMsgGCClientMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketData::IsInitialized() const {
  return true;
}

void CMsgGCClientMarketData::Swap(CMsgGCClientMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientMarketData::InternalSwap(CMsgGCClientMarketData* other) {
  entries_.InternalSwap(&other->entries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCClientMarketData::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCClientMarketData

// repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
int CMsgGCClientMarketData::entries_size() const {
  return entries_.size();
}
void CMsgGCClientMarketData::clear_entries() {
  entries_.Clear();
}
const ::proto::dota::CMsgGCClientMarketDataEntry& CMsgGCClientMarketData::entries(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCClientMarketData.entries)
  return entries_.Get(index);
}
::proto::dota::CMsgGCClientMarketDataEntry* CMsgGCClientMarketData::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCClientMarketData.entries)
  return entries_.Mutable(index);
}
::proto::dota::CMsgGCClientMarketDataEntry* CMsgGCClientMarketData::add_entries() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCClientMarketData.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCClientMarketDataEntry >*
CMsgGCClientMarketData::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCClientMarketData.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCClientMarketDataEntry >&
CMsgGCClientMarketData::entries() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCClientMarketData.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExtractGems::kToolItemIdFieldNumber;
const int CMsgExtractGems::kItemItemIdFieldNumber;
const int CMsgExtractGems::kItemSocketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExtractGems::CMsgExtractGems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgExtractGems)
}
CMsgExtractGems::CMsgExtractGems(const CMsgExtractGems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tool_item_id_, &from.tool_item_id_,
    reinterpret_cast<char*>(&item_socket_id_) -
    reinterpret_cast<char*>(&tool_item_id_) + sizeof(item_socket_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgExtractGems)
}

void CMsgExtractGems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tool_item_id_, 0, reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&tool_item_id_) + sizeof(item_item_id_));
  item_socket_id_ = 65535u;
}

CMsgExtractGems::~CMsgExtractGems() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgExtractGems)
  SharedDtor();
}

void CMsgExtractGems::SharedDtor() {
}

void CMsgExtractGems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExtractGems::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgExtractGems& CMsgExtractGems::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgExtractGems* CMsgExtractGems::New(::google::protobuf::Arena* arena) const {
  CMsgExtractGems* n = new CMsgExtractGems;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgExtractGems::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgExtractGems)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&tool_item_id_, 0, reinterpret_cast<char*>(&item_item_id_) -
      reinterpret_cast<char*>(&tool_item_id_) + sizeof(item_item_id_));
    item_socket_id_ = 65535u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgExtractGems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgExtractGems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tool_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_socket_id = 3 [default = 65535];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_item_socket_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_socket_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgExtractGems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgExtractGems)
  return false;
#undef DO_
}

void CMsgExtractGems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgExtractGems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }

  // optional uint32 item_socket_id = 3 [default = 65535];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_socket_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgExtractGems)
}

::google::protobuf::uint8* CMsgExtractGems::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgExtractGems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }

  // optional uint32 item_socket_id = 3 [default = 65535];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_socket_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgExtractGems)
  return target;
}

size_t CMsgExtractGems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgExtractGems)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 tool_item_id = 1;
    if (has_tool_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

    // optional uint32 item_socket_id = 3 [default = 65535];
    if (has_item_socket_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_socket_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExtractGems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgExtractGems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExtractGems* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgExtractGems>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgExtractGems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgExtractGems)
    MergeFrom(*source);
  }
}

void CMsgExtractGems::MergeFrom(const CMsgExtractGems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgExtractGems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      tool_item_id_ = from.tool_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_socket_id_ = from.item_socket_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExtractGems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgExtractGems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExtractGems::CopyFrom(const CMsgExtractGems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgExtractGems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExtractGems::IsInitialized() const {
  return true;
}

void CMsgExtractGems::Swap(CMsgExtractGems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExtractGems::InternalSwap(CMsgExtractGems* other) {
  std::swap(tool_item_id_, other->tool_item_id_);
  std::swap(item_item_id_, other->item_item_id_);
  std::swap(item_socket_id_, other->item_socket_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgExtractGems::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgExtractGems

// optional uint64 tool_item_id = 1;
bool CMsgExtractGems::has_tool_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgExtractGems::set_has_tool_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgExtractGems::clear_has_tool_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgExtractGems::clear_tool_item_id() {
  tool_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tool_item_id();
}
::google::protobuf::uint64 CMsgExtractGems::tool_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgExtractGems.tool_item_id)
  return tool_item_id_;
}
void CMsgExtractGems::set_tool_item_id(::google::protobuf::uint64 value) {
  set_has_tool_item_id();
  tool_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgExtractGems.tool_item_id)
}

// optional uint64 item_item_id = 2;
bool CMsgExtractGems::has_item_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgExtractGems::set_has_item_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgExtractGems::clear_has_item_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgExtractGems::clear_item_item_id() {
  item_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_item_id();
}
::google::protobuf::uint64 CMsgExtractGems::item_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgExtractGems.item_item_id)
  return item_item_id_;
}
void CMsgExtractGems::set_item_item_id(::google::protobuf::uint64 value) {
  set_has_item_item_id();
  item_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgExtractGems.item_item_id)
}

// optional uint32 item_socket_id = 3 [default = 65535];
bool CMsgExtractGems::has_item_socket_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgExtractGems::set_has_item_socket_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgExtractGems::clear_has_item_socket_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgExtractGems::clear_item_socket_id() {
  item_socket_id_ = 65535u;
  clear_has_item_socket_id();
}
::google::protobuf::uint32 CMsgExtractGems::item_socket_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgExtractGems.item_socket_id)
  return item_socket_id_;
}
void CMsgExtractGems::set_item_socket_id(::google::protobuf::uint32 value) {
  set_has_item_socket_id();
  item_socket_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgExtractGems.item_socket_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExtractGemsResponse::kItemIdFieldNumber;
const int CMsgExtractGemsResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExtractGemsResponse::CMsgExtractGemsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgExtractGemsResponse)
}
CMsgExtractGemsResponse::CMsgExtractGemsResponse(const CMsgExtractGemsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgExtractGemsResponse)
}

void CMsgExtractGemsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_id_, 0, reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(response_));
}

CMsgExtractGemsResponse::~CMsgExtractGemsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgExtractGemsResponse)
  SharedDtor();
}

void CMsgExtractGemsResponse::SharedDtor() {
}

void CMsgExtractGemsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExtractGemsResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgExtractGemsResponse& CMsgExtractGemsResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgExtractGemsResponse* CMsgExtractGemsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgExtractGemsResponse* n = new CMsgExtractGemsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgExtractGemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgExtractGemsResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_id_, 0, reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&item_id_) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgExtractGemsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgExtractGemsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgExtractGemsResponse_EExtractGems_IsValid(value)) {
            set_response(static_cast< ::proto::dota::CMsgExtractGemsResponse_EExtractGems >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgExtractGemsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgExtractGemsResponse)
  return false;
#undef DO_
}

void CMsgExtractGemsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgExtractGemsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgExtractGemsResponse)
}

::google::protobuf::uint8* CMsgExtractGemsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgExtractGemsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgExtractGemsResponse)
  return target;
}

size_t CMsgExtractGemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgExtractGemsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExtractGemsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgExtractGemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExtractGemsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgExtractGemsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgExtractGemsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgExtractGemsResponse)
    MergeFrom(*source);
  }
}

void CMsgExtractGemsResponse::MergeFrom(const CMsgExtractGemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgExtractGemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExtractGemsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgExtractGemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExtractGemsResponse::CopyFrom(const CMsgExtractGemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgExtractGemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExtractGemsResponse::IsInitialized() const {
  return true;
}

void CMsgExtractGemsResponse::Swap(CMsgExtractGemsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExtractGemsResponse::InternalSwap(CMsgExtractGemsResponse* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgExtractGemsResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgExtractGemsResponse

// optional uint64 item_id = 1;
bool CMsgExtractGemsResponse::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgExtractGemsResponse::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgExtractGemsResponse::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgExtractGemsResponse::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CMsgExtractGemsResponse::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgExtractGemsResponse.item_id)
  return item_id_;
}
void CMsgExtractGemsResponse::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgExtractGemsResponse.item_id)
}

// optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
bool CMsgExtractGemsResponse::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgExtractGemsResponse::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgExtractGemsResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgExtractGemsResponse::clear_response() {
  response_ = 0;
  clear_has_response();
}
::proto::dota::CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::response() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgExtractGemsResponse.response)
  return static_cast< ::proto::dota::CMsgExtractGemsResponse_EExtractGems >(response_);
}
void CMsgExtractGemsResponse::set_response(::proto::dota::CMsgExtractGemsResponse_EExtractGems value) {
  assert(::proto::dota::CMsgExtractGemsResponse_EExtractGems_IsValid(value));
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgExtractGemsResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddSocket::kToolItemIdFieldNumber;
const int CMsgAddSocket::kItemItemIdFieldNumber;
const int CMsgAddSocket::kUnusualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddSocket::CMsgAddSocket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddSocket)
}
CMsgAddSocket::CMsgAddSocket(const CMsgAddSocket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tool_item_id_, &from.tool_item_id_,
    reinterpret_cast<char*>(&unusual_) -
    reinterpret_cast<char*>(&tool_item_id_) + sizeof(unusual_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddSocket)
}

void CMsgAddSocket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tool_item_id_, 0, reinterpret_cast<char*>(&unusual_) -
    reinterpret_cast<char*>(&tool_item_id_) + sizeof(unusual_));
}

CMsgAddSocket::~CMsgAddSocket() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddSocket)
  SharedDtor();
}

void CMsgAddSocket::SharedDtor() {
}

void CMsgAddSocket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAddSocket::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAddSocket& CMsgAddSocket::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAddSocket* CMsgAddSocket::New(::google::protobuf::Arena* arena) const {
  CMsgAddSocket* n = new CMsgAddSocket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAddSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddSocket)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&tool_item_id_, 0, reinterpret_cast<char*>(&unusual_) -
      reinterpret_cast<char*>(&tool_item_id_) + sizeof(unusual_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAddSocket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddSocket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tool_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unusual = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_unusual();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unusual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddSocket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddSocket)
  return false;
#undef DO_
}

void CMsgAddSocket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }

  // optional bool unusual = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unusual(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddSocket)
}

::google::protobuf::uint8* CMsgAddSocket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }

  // optional bool unusual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unusual(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddSocket)
  return target;
}

size_t CMsgAddSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddSocket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 tool_item_id = 1;
    if (has_tool_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

    // optional bool unusual = 3;
    if (has_unusual()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAddSocket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddSocket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddSocket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAddSocket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddSocket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddSocket)
    MergeFrom(*source);
  }
}

void CMsgAddSocket::MergeFrom(const CMsgAddSocket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddSocket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      tool_item_id_ = from.tool_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unusual_ = from.unusual_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddSocket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddSocket::CopyFrom(const CMsgAddSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddSocket::IsInitialized() const {
  return true;
}

void CMsgAddSocket::Swap(CMsgAddSocket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddSocket::InternalSwap(CMsgAddSocket* other) {
  std::swap(tool_item_id_, other->tool_item_id_);
  std::swap(item_item_id_, other->item_item_id_);
  std::swap(unusual_, other->unusual_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAddSocket::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAddSocket

// optional uint64 tool_item_id = 1;
bool CMsgAddSocket::has_tool_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAddSocket::set_has_tool_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAddSocket::clear_has_tool_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAddSocket::clear_tool_item_id() {
  tool_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tool_item_id();
}
::google::protobuf::uint64 CMsgAddSocket::tool_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddSocket.tool_item_id)
  return tool_item_id_;
}
void CMsgAddSocket::set_tool_item_id(::google::protobuf::uint64 value) {
  set_has_tool_item_id();
  tool_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddSocket.tool_item_id)
}

// optional uint64 item_item_id = 2;
bool CMsgAddSocket::has_item_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAddSocket::set_has_item_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAddSocket::clear_has_item_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAddSocket::clear_item_item_id() {
  item_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_item_id();
}
::google::protobuf::uint64 CMsgAddSocket::item_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddSocket.item_item_id)
  return item_item_id_;
}
void CMsgAddSocket::set_item_item_id(::google::protobuf::uint64 value) {
  set_has_item_item_id();
  item_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddSocket.item_item_id)
}

// optional bool unusual = 3;
bool CMsgAddSocket::has_unusual() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAddSocket::set_has_unusual() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAddSocket::clear_has_unusual() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAddSocket::clear_unusual() {
  unusual_ = false;
  clear_has_unusual();
}
bool CMsgAddSocket::unusual() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddSocket.unusual)
  return unusual_;
}
void CMsgAddSocket::set_unusual(bool value) {
  set_has_unusual();
  unusual_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddSocket.unusual)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddSocketResponse::kItemIdFieldNumber;
const int CMsgAddSocketResponse::kUpdatedSocketIndexFieldNumber;
const int CMsgAddSocketResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddSocketResponse::CMsgAddSocketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddSocketResponse)
}
CMsgAddSocketResponse::CMsgAddSocketResponse(const CMsgAddSocketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      updated_socket_index_(from.updated_socket_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddSocketResponse)
}

void CMsgAddSocketResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_id_, 0, reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(response_));
}

CMsgAddSocketResponse::~CMsgAddSocketResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddSocketResponse)
  SharedDtor();
}

void CMsgAddSocketResponse::SharedDtor() {
}

void CMsgAddSocketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAddSocketResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAddSocketResponse& CMsgAddSocketResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAddSocketResponse* CMsgAddSocketResponse::New(::google::protobuf::Arena* arena) const {
  CMsgAddSocketResponse* n = new CMsgAddSocketResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAddSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddSocketResponse)
  updated_socket_index_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_id_, 0, reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&item_id_) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAddSocketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddSocketResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 updated_socket_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_updated_socket_index())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_updated_socket_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgAddSocketResponse_EAddSocket_IsValid(value)) {
            set_response(static_cast< ::proto::dota::CMsgAddSocketResponse_EAddSocket >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddSocketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddSocketResponse)
  return false;
#undef DO_
}

void CMsgAddSocketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // repeated uint32 updated_socket_index = 2;
  for (int i = 0, n = this->updated_socket_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->updated_socket_index(i), output);
  }

  // optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddSocketResponse)
}

::google::protobuf::uint8* CMsgAddSocketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // repeated uint32 updated_socket_index = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->updated_socket_index_, target);

  // optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddSocketResponse)
  return target;
}

size_t CMsgAddSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddSocketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 updated_socket_index = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->updated_socket_index_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->updated_socket_index_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAddSocketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddSocketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAddSocketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddSocketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddSocketResponse)
    MergeFrom(*source);
  }
}

void CMsgAddSocketResponse::MergeFrom(const CMsgAddSocketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_socket_index_.MergeFrom(from.updated_socket_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddSocketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddSocketResponse::CopyFrom(const CMsgAddSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddSocketResponse::IsInitialized() const {
  return true;
}

void CMsgAddSocketResponse::Swap(CMsgAddSocketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddSocketResponse::InternalSwap(CMsgAddSocketResponse* other) {
  updated_socket_index_.InternalSwap(&other->updated_socket_index_);
  std::swap(item_id_, other->item_id_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAddSocketResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAddSocketResponse

// optional uint64 item_id = 1;
bool CMsgAddSocketResponse::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAddSocketResponse::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAddSocketResponse::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAddSocketResponse::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CMsgAddSocketResponse::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddSocketResponse.item_id)
  return item_id_;
}
void CMsgAddSocketResponse::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddSocketResponse.item_id)
}

// repeated uint32 updated_socket_index = 2;
int CMsgAddSocketResponse::updated_socket_index_size() const {
  return updated_socket_index_.size();
}
void CMsgAddSocketResponse::clear_updated_socket_index() {
  updated_socket_index_.Clear();
}
::google::protobuf::uint32 CMsgAddSocketResponse::updated_socket_index(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddSocketResponse.updated_socket_index)
  return updated_socket_index_.Get(index);
}
void CMsgAddSocketResponse::set_updated_socket_index(int index, ::google::protobuf::uint32 value) {
  updated_socket_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddSocketResponse.updated_socket_index)
}
void CMsgAddSocketResponse::add_updated_socket_index(::google::protobuf::uint32 value) {
  updated_socket_index_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAddSocketResponse.updated_socket_index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgAddSocketResponse::updated_socket_index() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAddSocketResponse.updated_socket_index)
  return updated_socket_index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgAddSocketResponse::mutable_updated_socket_index() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAddSocketResponse.updated_socket_index)
  return &updated_socket_index_;
}

// optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
bool CMsgAddSocketResponse::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAddSocketResponse::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAddSocketResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAddSocketResponse::clear_response() {
  response_ = 0;
  clear_has_response();
}
::proto::dota::CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::response() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddSocketResponse.response)
  return static_cast< ::proto::dota::CMsgAddSocketResponse_EAddSocket >(response_);
}
void CMsgAddSocketResponse::set_response(::proto::dota::CMsgAddSocketResponse_EAddSocket value) {
  assert(::proto::dota::CMsgAddSocketResponse_EAddSocket_IsValid(value));
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddSocketResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddItemToSocketData::kGemItemIdFieldNumber;
const int CMsgAddItemToSocketData::kSocketIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddItemToSocketData::CMsgAddItemToSocketData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddItemToSocketData)
}
CMsgAddItemToSocketData::CMsgAddItemToSocketData(const CMsgAddItemToSocketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gem_item_id_, &from.gem_item_id_,
    reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&gem_item_id_) + sizeof(socket_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddItemToSocketData)
}

void CMsgAddItemToSocketData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gem_item_id_, 0, reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&gem_item_id_) + sizeof(socket_index_));
}

CMsgAddItemToSocketData::~CMsgAddItemToSocketData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddItemToSocketData)
  SharedDtor();
}

void CMsgAddItemToSocketData::SharedDtor() {
}

void CMsgAddItemToSocketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAddItemToSocketData::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAddItemToSocketData& CMsgAddItemToSocketData::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAddItemToSocketData* CMsgAddItemToSocketData::New(::google::protobuf::Arena* arena) const {
  CMsgAddItemToSocketData* n = new CMsgAddItemToSocketData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAddItemToSocketData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddItemToSocketData)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&gem_item_id_, 0, reinterpret_cast<char*>(&socket_index_) -
      reinterpret_cast<char*>(&gem_item_id_) + sizeof(socket_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAddItemToSocketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddItemToSocketData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gem_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_gem_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gem_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_socket_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddItemToSocketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddItemToSocketData)
  return false;
#undef DO_
}

void CMsgAddItemToSocketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddItemToSocketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gem_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gem_item_id(), output);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->socket_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddItemToSocketData)
}

::google::protobuf::uint8* CMsgAddItemToSocketData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddItemToSocketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gem_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gem_item_id(), target);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->socket_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddItemToSocketData)
  return target;
}

size_t CMsgAddItemToSocketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddItemToSocketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 gem_item_id = 1;
    if (has_gem_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gem_item_id());
    }

    // optional uint32 socket_index = 2;
    if (has_socket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAddItemToSocketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddItemToSocketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddItemToSocketData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAddItemToSocketData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddItemToSocketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddItemToSocketData)
    MergeFrom(*source);
  }
}

void CMsgAddItemToSocketData::MergeFrom(const CMsgAddItemToSocketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddItemToSocketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      gem_item_id_ = from.gem_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      socket_index_ = from.socket_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddItemToSocketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddItemToSocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddItemToSocketData::CopyFrom(const CMsgAddItemToSocketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddItemToSocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocketData::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocketData::Swap(CMsgAddItemToSocketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddItemToSocketData::InternalSwap(CMsgAddItemToSocketData* other) {
  std::swap(gem_item_id_, other->gem_item_id_);
  std::swap(socket_index_, other->socket_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAddItemToSocketData::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAddItemToSocketData

// optional uint64 gem_item_id = 1;
bool CMsgAddItemToSocketData::has_gem_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAddItemToSocketData::set_has_gem_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAddItemToSocketData::clear_has_gem_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAddItemToSocketData::clear_gem_item_id() {
  gem_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gem_item_id();
}
::google::protobuf::uint64 CMsgAddItemToSocketData::gem_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddItemToSocketData.gem_item_id)
  return gem_item_id_;
}
void CMsgAddItemToSocketData::set_gem_item_id(::google::protobuf::uint64 value) {
  set_has_gem_item_id();
  gem_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddItemToSocketData.gem_item_id)
}

// optional uint32 socket_index = 2;
bool CMsgAddItemToSocketData::has_socket_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAddItemToSocketData::set_has_socket_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAddItemToSocketData::clear_has_socket_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAddItemToSocketData::clear_socket_index() {
  socket_index_ = 0u;
  clear_has_socket_index();
}
::google::protobuf::uint32 CMsgAddItemToSocketData::socket_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddItemToSocketData.socket_index)
  return socket_index_;
}
void CMsgAddItemToSocketData::set_socket_index(::google::protobuf::uint32 value) {
  set_has_socket_index();
  socket_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddItemToSocketData.socket_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddItemToSocket::kItemItemIdFieldNumber;
const int CMsgAddItemToSocket::kGemsToSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddItemToSocket::CMsgAddItemToSocket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddItemToSocket)
}
CMsgAddItemToSocket::CMsgAddItemToSocket(const CMsgAddItemToSocket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gems_to_socket_(from.gems_to_socket_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_item_id_ = from.item_item_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddItemToSocket)
}

void CMsgAddItemToSocket::SharedCtor() {
  _cached_size_ = 0;
  item_item_id_ = GOOGLE_ULONGLONG(0);
}

CMsgAddItemToSocket::~CMsgAddItemToSocket() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddItemToSocket)
  SharedDtor();
}

void CMsgAddItemToSocket::SharedDtor() {
}

void CMsgAddItemToSocket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAddItemToSocket::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAddItemToSocket& CMsgAddItemToSocket::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAddItemToSocket* CMsgAddItemToSocket::New(::google::protobuf::Arena* arena) const {
  CMsgAddItemToSocket* n = new CMsgAddItemToSocket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAddItemToSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddItemToSocket)
  gems_to_socket_.Clear();
  item_item_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAddItemToSocket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddItemToSocket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gems_to_socket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddItemToSocket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddItemToSocket)
  return false;
#undef DO_
}

void CMsgAddItemToSocket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddItemToSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_item_id(), output);
  }

  // repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
  for (unsigned int i = 0, n = this->gems_to_socket_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gems_to_socket(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddItemToSocket)
}

::google::protobuf::uint8* CMsgAddItemToSocket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddItemToSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_item_id(), target);
  }

  // repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
  for (unsigned int i = 0, n = this->gems_to_socket_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->gems_to_socket(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddItemToSocket)
  return target;
}

size_t CMsgAddItemToSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddItemToSocket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
  {
    unsigned int count = this->gems_to_socket_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gems_to_socket(i));
    }
  }

  // optional uint64 item_item_id = 1;
  if (has_item_item_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAddItemToSocket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddItemToSocket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddItemToSocket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAddItemToSocket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddItemToSocket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddItemToSocket)
    MergeFrom(*source);
  }
}

void CMsgAddItemToSocket::MergeFrom(const CMsgAddItemToSocket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddItemToSocket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gems_to_socket_.MergeFrom(from.gems_to_socket_);
  if (from.has_item_item_id()) {
    set_item_item_id(from.item_item_id());
  }
}

void CMsgAddItemToSocket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddItemToSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddItemToSocket::CopyFrom(const CMsgAddItemToSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddItemToSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocket::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocket::Swap(CMsgAddItemToSocket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddItemToSocket::InternalSwap(CMsgAddItemToSocket* other) {
  gems_to_socket_.InternalSwap(&other->gems_to_socket_);
  std::swap(item_item_id_, other->item_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAddItemToSocket::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAddItemToSocket

// optional uint64 item_item_id = 1;
bool CMsgAddItemToSocket::has_item_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAddItemToSocket::set_has_item_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAddItemToSocket::clear_has_item_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAddItemToSocket::clear_item_item_id() {
  item_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_item_id();
}
::google::protobuf::uint64 CMsgAddItemToSocket::item_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddItemToSocket.item_item_id)
  return item_item_id_;
}
void CMsgAddItemToSocket::set_item_item_id(::google::protobuf::uint64 value) {
  set_has_item_item_id();
  item_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddItemToSocket.item_item_id)
}

// repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
int CMsgAddItemToSocket::gems_to_socket_size() const {
  return gems_to_socket_.size();
}
void CMsgAddItemToSocket::clear_gems_to_socket() {
  gems_to_socket_.Clear();
}
const ::proto::dota::CMsgAddItemToSocketData& CMsgAddItemToSocket::gems_to_socket(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddItemToSocket.gems_to_socket)
  return gems_to_socket_.Get(index);
}
::proto::dota::CMsgAddItemToSocketData* CMsgAddItemToSocket::mutable_gems_to_socket(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAddItemToSocket.gems_to_socket)
  return gems_to_socket_.Mutable(index);
}
::proto::dota::CMsgAddItemToSocketData* CMsgAddItemToSocket::add_gems_to_socket() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAddItemToSocket.gems_to_socket)
  return gems_to_socket_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAddItemToSocketData >*
CMsgAddItemToSocket::mutable_gems_to_socket() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAddItemToSocket.gems_to_socket)
  return &gems_to_socket_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAddItemToSocketData >&
CMsgAddItemToSocket::gems_to_socket() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAddItemToSocket.gems_to_socket)
  return gems_to_socket_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddItemToSocketResponse::kItemItemIdFieldNumber;
const int CMsgAddItemToSocketResponse::kUpdatedSocketIndexFieldNumber;
const int CMsgAddItemToSocketResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddItemToSocketResponse)
}
CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse(const CMsgAddItemToSocketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      updated_socket_index_(from.updated_socket_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_item_id_, &from.item_item_id_,
    reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_item_id_) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddItemToSocketResponse)
}

void CMsgAddItemToSocketResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_item_id_, 0, reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_item_id_) + sizeof(response_));
}

CMsgAddItemToSocketResponse::~CMsgAddItemToSocketResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddItemToSocketResponse)
  SharedDtor();
}

void CMsgAddItemToSocketResponse::SharedDtor() {
}

void CMsgAddItemToSocketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAddItemToSocketResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAddItemToSocketResponse& CMsgAddItemToSocketResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAddItemToSocketResponse* CMsgAddItemToSocketResponse::New(::google::protobuf::Arena* arena) const {
  CMsgAddItemToSocketResponse* n = new CMsgAddItemToSocketResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAddItemToSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddItemToSocketResponse)
  updated_socket_index_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_item_id_, 0, reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&item_item_id_) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAddItemToSocketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddItemToSocketResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 updated_socket_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_updated_socket_index())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_updated_socket_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgAddItemToSocketResponse_EAddGem_IsValid(value)) {
            set_response(static_cast< ::proto::dota::CMsgAddItemToSocketResponse_EAddGem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddItemToSocketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddItemToSocketResponse)
  return false;
#undef DO_
}

void CMsgAddItemToSocketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddItemToSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_item_id(), output);
  }

  // repeated uint32 updated_socket_index = 2;
  for (int i = 0, n = this->updated_socket_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->updated_socket_index(i), output);
  }

  // optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddItemToSocketResponse)
}

::google::protobuf::uint8* CMsgAddItemToSocketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddItemToSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_item_id(), target);
  }

  // repeated uint32 updated_socket_index = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->updated_socket_index_, target);

  // optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddItemToSocketResponse)
  return target;
}

size_t CMsgAddItemToSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddItemToSocketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 updated_socket_index = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->updated_socket_index_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->updated_socket_index_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 item_item_id = 1;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

    // optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAddItemToSocketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddItemToSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddItemToSocketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAddItemToSocketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddItemToSocketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddItemToSocketResponse)
    MergeFrom(*source);
  }
}

void CMsgAddItemToSocketResponse::MergeFrom(const CMsgAddItemToSocketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddItemToSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_socket_index_.MergeFrom(from.updated_socket_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddItemToSocketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddItemToSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddItemToSocketResponse::CopyFrom(const CMsgAddItemToSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddItemToSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocketResponse::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocketResponse::Swap(CMsgAddItemToSocketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddItemToSocketResponse::InternalSwap(CMsgAddItemToSocketResponse* other) {
  updated_socket_index_.InternalSwap(&other->updated_socket_index_);
  std::swap(item_item_id_, other->item_item_id_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAddItemToSocketResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAddItemToSocketResponse

// optional uint64 item_item_id = 1;
bool CMsgAddItemToSocketResponse::has_item_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAddItemToSocketResponse::set_has_item_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAddItemToSocketResponse::clear_has_item_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAddItemToSocketResponse::clear_item_item_id() {
  item_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_item_id();
}
::google::protobuf::uint64 CMsgAddItemToSocketResponse::item_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddItemToSocketResponse.item_item_id)
  return item_item_id_;
}
void CMsgAddItemToSocketResponse::set_item_item_id(::google::protobuf::uint64 value) {
  set_has_item_item_id();
  item_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddItemToSocketResponse.item_item_id)
}

// repeated uint32 updated_socket_index = 2;
int CMsgAddItemToSocketResponse::updated_socket_index_size() const {
  return updated_socket_index_.size();
}
void CMsgAddItemToSocketResponse::clear_updated_socket_index() {
  updated_socket_index_.Clear();
}
::google::protobuf::uint32 CMsgAddItemToSocketResponse::updated_socket_index(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddItemToSocketResponse.updated_socket_index)
  return updated_socket_index_.Get(index);
}
void CMsgAddItemToSocketResponse::set_updated_socket_index(int index, ::google::protobuf::uint32 value) {
  updated_socket_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddItemToSocketResponse.updated_socket_index)
}
void CMsgAddItemToSocketResponse::add_updated_socket_index(::google::protobuf::uint32 value) {
  updated_socket_index_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAddItemToSocketResponse.updated_socket_index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgAddItemToSocketResponse::updated_socket_index() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAddItemToSocketResponse.updated_socket_index)
  return updated_socket_index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgAddItemToSocketResponse::mutable_updated_socket_index() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAddItemToSocketResponse.updated_socket_index)
  return &updated_socket_index_;
}

// optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
bool CMsgAddItemToSocketResponse::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAddItemToSocketResponse::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAddItemToSocketResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAddItemToSocketResponse::clear_response() {
  response_ = 0;
  clear_has_response();
}
::proto::dota::CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::response() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAddItemToSocketResponse.response)
  return static_cast< ::proto::dota::CMsgAddItemToSocketResponse_EAddGem >(response_);
}
void CMsgAddItemToSocketResponse::set_response(::proto::dota::CMsgAddItemToSocketResponse_EAddGem value) {
  assert(::proto::dota::CMsgAddItemToSocketResponse_EAddGem_IsValid(value));
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAddItemToSocketResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgResetStrangeGemCount::kItemItemIdFieldNumber;
const int CMsgResetStrangeGemCount::kSocketIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgResetStrangeGemCount::CMsgResetStrangeGemCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgResetStrangeGemCount)
}
CMsgResetStrangeGemCount::CMsgResetStrangeGemCount(const CMsgResetStrangeGemCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_item_id_, &from.item_item_id_,
    reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&item_item_id_) + sizeof(socket_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgResetStrangeGemCount)
}

void CMsgResetStrangeGemCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_item_id_, 0, reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&item_item_id_) + sizeof(socket_index_));
}

CMsgResetStrangeGemCount::~CMsgResetStrangeGemCount() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgResetStrangeGemCount)
  SharedDtor();
}

void CMsgResetStrangeGemCount::SharedDtor() {
}

void CMsgResetStrangeGemCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgResetStrangeGemCount::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgResetStrangeGemCount& CMsgResetStrangeGemCount::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgResetStrangeGemCount* CMsgResetStrangeGemCount::New(::google::protobuf::Arena* arena) const {
  CMsgResetStrangeGemCount* n = new CMsgResetStrangeGemCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgResetStrangeGemCount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgResetStrangeGemCount)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_item_id_, 0, reinterpret_cast<char*>(&socket_index_) -
      reinterpret_cast<char*>(&item_item_id_) + sizeof(socket_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgResetStrangeGemCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgResetStrangeGemCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_socket_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgResetStrangeGemCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgResetStrangeGemCount)
  return false;
#undef DO_
}

void CMsgResetStrangeGemCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgResetStrangeGemCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_item_id(), output);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->socket_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgResetStrangeGemCount)
}

::google::protobuf::uint8* CMsgResetStrangeGemCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgResetStrangeGemCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_item_id(), target);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->socket_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgResetStrangeGemCount)
  return target;
}

size_t CMsgResetStrangeGemCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgResetStrangeGemCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 item_item_id = 1;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

    // optional uint32 socket_index = 2;
    if (has_socket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgResetStrangeGemCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgResetStrangeGemCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResetStrangeGemCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgResetStrangeGemCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgResetStrangeGemCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgResetStrangeGemCount)
    MergeFrom(*source);
  }
}

void CMsgResetStrangeGemCount::MergeFrom(const CMsgResetStrangeGemCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgResetStrangeGemCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      socket_index_ = from.socket_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgResetStrangeGemCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgResetStrangeGemCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResetStrangeGemCount::CopyFrom(const CMsgResetStrangeGemCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgResetStrangeGemCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResetStrangeGemCount::IsInitialized() const {
  return true;
}

void CMsgResetStrangeGemCount::Swap(CMsgResetStrangeGemCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgResetStrangeGemCount::InternalSwap(CMsgResetStrangeGemCount* other) {
  std::swap(item_item_id_, other->item_item_id_);
  std::swap(socket_index_, other->socket_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgResetStrangeGemCount::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgResetStrangeGemCount

// optional uint64 item_item_id = 1;
bool CMsgResetStrangeGemCount::has_item_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgResetStrangeGemCount::set_has_item_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgResetStrangeGemCount::clear_has_item_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgResetStrangeGemCount::clear_item_item_id() {
  item_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_item_id();
}
::google::protobuf::uint64 CMsgResetStrangeGemCount::item_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgResetStrangeGemCount.item_item_id)
  return item_item_id_;
}
void CMsgResetStrangeGemCount::set_item_item_id(::google::protobuf::uint64 value) {
  set_has_item_item_id();
  item_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgResetStrangeGemCount.item_item_id)
}

// optional uint32 socket_index = 2;
bool CMsgResetStrangeGemCount::has_socket_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgResetStrangeGemCount::set_has_socket_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgResetStrangeGemCount::clear_has_socket_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgResetStrangeGemCount::clear_socket_index() {
  socket_index_ = 0u;
  clear_has_socket_index();
}
::google::protobuf::uint32 CMsgResetStrangeGemCount::socket_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgResetStrangeGemCount.socket_index)
  return socket_index_;
}
void CMsgResetStrangeGemCount::set_socket_index(::google::protobuf::uint32 value) {
  set_has_socket_index();
  socket_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgResetStrangeGemCount.socket_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgResetStrangeGemCountResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgResetStrangeGemCountResponse)
}
CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse(const CMsgResetStrangeGemCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgResetStrangeGemCountResponse)
}

void CMsgResetStrangeGemCountResponse::SharedCtor() {
  _cached_size_ = 0;
  response_ = 0;
}

CMsgResetStrangeGemCountResponse::~CMsgResetStrangeGemCountResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgResetStrangeGemCountResponse)
  SharedDtor();
}

void CMsgResetStrangeGemCountResponse::SharedDtor() {
}

void CMsgResetStrangeGemCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgResetStrangeGemCountResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgResetStrangeGemCountResponse& CMsgResetStrangeGemCountResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgResetStrangeGemCountResponse* CMsgResetStrangeGemCountResponse::New(::google::protobuf::Arena* arena) const {
  CMsgResetStrangeGemCountResponse* n = new CMsgResetStrangeGemCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgResetStrangeGemCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgResetStrangeGemCountResponse)
  response_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgResetStrangeGemCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgResetStrangeGemCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem_IsValid(value)) {
            set_response(static_cast< ::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgResetStrangeGemCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgResetStrangeGemCountResponse)
  return false;
#undef DO_
}

void CMsgResetStrangeGemCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgResetStrangeGemCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgResetStrangeGemCountResponse)
}

::google::protobuf::uint8* CMsgResetStrangeGemCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgResetStrangeGemCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgResetStrangeGemCountResponse)
  return target;
}

size_t CMsgResetStrangeGemCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgResetStrangeGemCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  if (has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgResetStrangeGemCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgResetStrangeGemCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResetStrangeGemCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgResetStrangeGemCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgResetStrangeGemCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgResetStrangeGemCountResponse)
    MergeFrom(*source);
  }
}

void CMsgResetStrangeGemCountResponse::MergeFrom(const CMsgResetStrangeGemCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgResetStrangeGemCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    set_response(from.response());
  }
}

void CMsgResetStrangeGemCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgResetStrangeGemCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResetStrangeGemCountResponse::CopyFrom(const CMsgResetStrangeGemCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgResetStrangeGemCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResetStrangeGemCountResponse::IsInitialized() const {
  return true;
}

void CMsgResetStrangeGemCountResponse::Swap(CMsgResetStrangeGemCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgResetStrangeGemCountResponse::InternalSwap(CMsgResetStrangeGemCountResponse* other) {
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgResetStrangeGemCountResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgResetStrangeGemCountResponse

// optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
bool CMsgResetStrangeGemCountResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgResetStrangeGemCountResponse::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgResetStrangeGemCountResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgResetStrangeGemCountResponse::clear_response() {
  response_ = 0;
  clear_has_response();
}
::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::response() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgResetStrangeGemCountResponse.response)
  return static_cast< ::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem >(response_);
}
void CMsgResetStrangeGemCountResponse::set_response(::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem value) {
  assert(::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem_IsValid(value));
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgResetStrangeGemCountResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPollFileRequest::kFileNameFieldNumber;
const int CMsgGCToClientPollFileRequest::kClientVersionFieldNumber;
const int CMsgGCToClientPollFileRequest::kPollIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPollFileRequest)
}
CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest(const CMsgGCToClientPollFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&client_version_, &from.client_version_,
    reinterpret_cast<char*>(&poll_id_) -
    reinterpret_cast<char*>(&client_version_) + sizeof(poll_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPollFileRequest)
}

void CMsgGCToClientPollFileRequest::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_version_, 0, reinterpret_cast<char*>(&poll_id_) -
    reinterpret_cast<char*>(&client_version_) + sizeof(poll_id_));
}

CMsgGCToClientPollFileRequest::~CMsgGCToClientPollFileRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPollFileRequest)
  SharedDtor();
}

void CMsgGCToClientPollFileRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPollFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPollFileRequest::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientPollFileRequest& CMsgGCToClientPollFileRequest::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientPollFileRequest* CMsgGCToClientPollFileRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientPollFileRequest* n = new CMsgGCToClientPollFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientPollFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPollFileRequest)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&client_version_, 0, reinterpret_cast<char*>(&poll_id_) -
      reinterpret_cast<char*>(&client_version_) + sizeof(poll_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientPollFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPollFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPollFileRequest.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 poll_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_poll_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPollFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPollFileRequest)
  return false;
#undef DO_
}

void CMsgGCToClientPollFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPollFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollFileRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 poll_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->poll_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPollFileRequest)
}

::google::protobuf::uint8* CMsgGCToClientPollFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPollFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollFileRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 poll_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->poll_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPollFileRequest)
  return target;
}

size_t CMsgGCToClientPollFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPollFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 poll_id = 3;
    if (has_poll_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPollFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPollFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientPollFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPollFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPollFileRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollFileRequest::MergeFrom(const CMsgGCToClientPollFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPollFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      poll_id_ = from.poll_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPollFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollFileRequest::CopyFrom(const CMsgGCToClientPollFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPollFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollFileRequest::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollFileRequest::Swap(CMsgGCToClientPollFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPollFileRequest::InternalSwap(CMsgGCToClientPollFileRequest* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(client_version_, other->client_version_);
  std::swap(poll_id_, other->poll_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientPollFileRequest::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientPollFileRequest

// optional string file_name = 1;
bool CMsgGCToClientPollFileRequest::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientPollFileRequest::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientPollFileRequest::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientPollFileRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CMsgGCToClientPollFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPollFileRequest.file_name)
  return file_name_.GetNoArena();
}
void CMsgGCToClientPollFileRequest::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPollFileRequest.file_name)
}
#if LANG_CXX11
void CMsgGCToClientPollFileRequest::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPollFileRequest.file_name)
}
#endif
void CMsgGCToClientPollFileRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPollFileRequest.file_name)
}
void CMsgGCToClientPollFileRequest::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPollFileRequest.file_name)
}
::std::string* CMsgGCToClientPollFileRequest::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPollFileRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientPollFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPollFileRequest.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientPollFileRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPollFileRequest.file_name)
}

// optional uint32 client_version = 2;
bool CMsgGCToClientPollFileRequest::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientPollFileRequest::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientPollFileRequest::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientPollFileRequest::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgGCToClientPollFileRequest::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPollFileRequest.client_version)
  return client_version_;
}
void CMsgGCToClientPollFileRequest::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPollFileRequest.client_version)
}

// optional uint32 poll_id = 3;
bool CMsgGCToClientPollFileRequest::has_poll_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToClientPollFileRequest::set_has_poll_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToClientPollFileRequest::clear_has_poll_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToClientPollFileRequest::clear_poll_id() {
  poll_id_ = 0u;
  clear_has_poll_id();
}
::google::protobuf::uint32 CMsgGCToClientPollFileRequest::poll_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPollFileRequest.poll_id)
  return poll_id_;
}
void CMsgGCToClientPollFileRequest::set_poll_id(::google::protobuf::uint32 value) {
  set_has_poll_id();
  poll_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPollFileRequest.poll_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPollFileResponse::kPollIdFieldNumber;
const int CMsgGCToClientPollFileResponse::kFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_base_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPollFileResponse)
}
CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse(const CMsgGCToClientPollFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&poll_id_, &from.poll_id_,
    reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&poll_id_) + sizeof(file_size_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPollFileResponse)
}

void CMsgGCToClientPollFileResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&poll_id_, 0, reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&poll_id_) + sizeof(file_size_));
}

CMsgGCToClientPollFileResponse::~CMsgGCToClientPollFileResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPollFileResponse)
  SharedDtor();
}

void CMsgGCToClientPollFileResponse::SharedDtor() {
}

void CMsgGCToClientPollFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPollFileResponse::descriptor() {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientPollFileResponse& CMsgGCToClientPollFileResponse::default_instance() {
  protobuf_base_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientPollFileResponse* CMsgGCToClientPollFileResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientPollFileResponse* n = new CMsgGCToClientPollFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientPollFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPollFileResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&poll_id_, 0, reinterpret_cast<char*>(&file_size_) -
      reinterpret_cast<char*>(&poll_id_) + sizeof(file_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientPollFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPollFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 poll_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_poll_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPollFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPollFileResponse)
  return false;
#undef DO_
}

void CMsgGCToClientPollFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPollFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->poll_id(), output);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPollFileResponse)
}

::google::protobuf::uint8* CMsgGCToClientPollFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPollFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->poll_id(), target);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPollFileResponse)
  return target;
}

size_t CMsgGCToClientPollFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPollFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 poll_id = 1;
    if (has_poll_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_id());
    }

    // optional uint32 file_size = 2;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPollFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPollFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientPollFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPollFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPollFileResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollFileResponse::MergeFrom(const CMsgGCToClientPollFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPollFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      poll_id_ = from.poll_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_size_ = from.file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPollFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollFileResponse::CopyFrom(const CMsgGCToClientPollFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPollFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollFileResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollFileResponse::Swap(CMsgGCToClientPollFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPollFileResponse::InternalSwap(CMsgGCToClientPollFileResponse* other) {
  std::swap(poll_id_, other->poll_id_);
  std::swap(file_size_, other->file_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientPollFileResponse::GetMetadata() const {
  protobuf_base_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientPollFileResponse

// optional uint32 poll_id = 1;
bool CMsgGCToClientPollFileResponse::has_poll_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientPollFileResponse::set_has_poll_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientPollFileResponse::clear_has_poll_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientPollFileResponse::clear_poll_id() {
  poll_id_ = 0u;
  clear_has_poll_id();
}
::google::protobuf::uint32 CMsgGCToClientPollFileResponse::poll_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPollFileResponse.poll_id)
  return poll_id_;
}
void CMsgGCToClientPollFileResponse::set_poll_id(::google::protobuf::uint32 value) {
  set_has_poll_id();
  poll_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPollFileResponse.poll_id)
}

// optional uint32 file_size = 2;
bool CMsgGCToClientPollFileResponse::has_file_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientPollFileResponse::set_has_file_size() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientPollFileResponse::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientPollFileResponse::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
::google::protobuf::uint32 CMsgGCToClientPollFileResponse::file_size() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPollFileResponse.file_size)
  return file_size_;
}
void CMsgGCToClientPollFileResponse::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPollFileResponse.file_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
