// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CDemoFileHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoFileHeader> {
} _CDemoFileHeader_default_instance_;
class CGameInfo_CDotaGameInfo_CPlayerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameInfo_CDotaGameInfo_CPlayerInfo> {
} _CGameInfo_CDotaGameInfo_CPlayerInfo_default_instance_;
class CGameInfo_CDotaGameInfo_CHeroSelectEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameInfo_CDotaGameInfo_CHeroSelectEvent> {
} _CGameInfo_CDotaGameInfo_CHeroSelectEvent_default_instance_;
class CGameInfo_CDotaGameInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameInfo_CDotaGameInfo> {
} _CGameInfo_CDotaGameInfo_default_instance_;
class CGameInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameInfo> {
} _CGameInfo_default_instance_;
class CDemoFileInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoFileInfo> {
} _CDemoFileInfo_default_instance_;
class CDemoPacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoPacket> {
} _CDemoPacket_default_instance_;
class CDemoFullPacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoFullPacket> {
} _CDemoFullPacket_default_instance_;
class CDemoSaveGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoSaveGame> {
} _CDemoSaveGame_default_instance_;
class CDemoSyncTickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoSyncTick> {
} _CDemoSyncTick_default_instance_;
class CDemoConsoleCmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoConsoleCmd> {
} _CDemoConsoleCmd_default_instance_;
class CDemoSendTablesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoSendTables> {
} _CDemoSendTables_default_instance_;
class CDemoClassInfo_class_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoClassInfo_class_t> {
} _CDemoClassInfo_class_t_default_instance_;
class CDemoClassInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoClassInfo> {
} _CDemoClassInfo_default_instance_;
class CDemoCustomDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoCustomData> {
} _CDemoCustomData_default_instance_;
class CDemoCustomDataCallbacksDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoCustomDataCallbacks> {
} _CDemoCustomDataCallbacks_default_instance_;
class CDemoStringTables_items_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoStringTables_items_t> {
} _CDemoStringTables_items_t_default_instance_;
class CDemoStringTables_table_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoStringTables_table_t> {
} _CDemoStringTables_table_t_default_instance_;
class CDemoStringTablesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoStringTables> {
} _CDemoStringTables_default_instance_;
class CDemoStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoStop> {
} _CDemoStop_default_instance_;
class CDemoUserCmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoUserCmd> {
} _CDemoUserCmd_default_instance_;
class CDemoSpawnGroupsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDemoSpawnGroups> {
} _CDemoSpawnGroups_default_instance_;

namespace protobuf_demo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, demo_file_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, network_protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, server_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, client_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, game_directory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, fullpackets_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, allow_clientside_entities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, allow_clientside_particles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, addons_),
  0,
  6,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, hero_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, is_fake_client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, game_team_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, is_pick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, hero_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, game_winner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, player_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, leagueid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, picks_bans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, radiant_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, dire_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, radiant_team_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, dire_team_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, end_time_),
  2,
  3,
  4,
  ~0u,
  5,
  ~0u,
  6,
  7,
  0,
  1,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo, dota_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, playback_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, playback_ticks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, playback_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, game_info_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, string_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, packet_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, version_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSyncTick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSyncTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoConsoleCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoConsoleCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoConsoleCmd, cmdstring_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSendTables, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSendTables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSendTables, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, network_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, table_name_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo, classes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, callback_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomDataCallbacks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomDataCallbacks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomDataCallbacks, save_id_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, items_clientside_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, table_flags_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables, tables_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, cmd_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSpawnGroups, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSpawnGroups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSpawnGroups, msgs_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 15, sizeof(CDemoFileHeader)},
  { 25, 35, sizeof(CGameInfo_CDotaGameInfo_CPlayerInfo)},
  { 40, 48, sizeof(CGameInfo_CDotaGameInfo_CHeroSelectEvent)},
  { 51, 67, sizeof(CGameInfo_CDotaGameInfo)},
  { 78, 84, sizeof(CGameInfo)},
  { 85, 94, sizeof(CDemoFileInfo)},
  { 98, 104, sizeof(CDemoPacket)},
  { 105, 112, sizeof(CDemoFullPacket)},
  { 114, 123, sizeof(CDemoSaveGame)},
  { 127, 132, sizeof(CDemoSyncTick)},
  { 132, 138, sizeof(CDemoConsoleCmd)},
  { 139, 145, sizeof(CDemoSendTables)},
  { 146, 154, sizeof(CDemoClassInfo_class_t)},
  { 157, 163, sizeof(CDemoClassInfo)},
  { 164, 171, sizeof(CDemoCustomData)},
  { 173, 179, sizeof(CDemoCustomDataCallbacks)},
  { 180, 187, sizeof(CDemoStringTables_items_t)},
  { 189, 198, sizeof(CDemoStringTables_table_t)},
  { 202, 208, sizeof(CDemoStringTables)},
  { 209, 214, sizeof(CDemoStop)},
  { 214, 221, sizeof(CDemoUserCmd)},
  { 223, 229, sizeof(CDemoSpawnGroups)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoFileHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameInfo_CDotaGameInfo_CPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameInfo_CDotaGameInfo_CHeroSelectEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameInfo_CDotaGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoFileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoFullPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoSaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoSyncTick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoConsoleCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoSendTables_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoClassInfo_class_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoClassInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoCustomData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoCustomDataCallbacks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoStringTables_items_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoStringTables_table_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoStringTables_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoUserCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDemoSpawnGroups_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "demo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace

void TableStruct::Shutdown() {
  _CDemoFileHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CGameInfo_CDotaGameInfo_CPlayerInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CGameInfo_CDotaGameInfo_CHeroSelectEvent_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CGameInfo_CDotaGameInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CGameInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CDemoFileInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CDemoPacket_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CDemoFullPacket_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CDemoSaveGame_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CDemoSyncTick_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CDemoConsoleCmd_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CDemoSendTables_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CDemoClassInfo_class_t_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CDemoClassInfo_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CDemoCustomData_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CDemoCustomDataCallbacks_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CDemoStringTables_items_t_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CDemoStringTables_table_t_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CDemoStringTables_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CDemoStop_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CDemoUserCmd_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CDemoSpawnGroups_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CDemoFileHeader_default_instance_.DefaultConstruct();
  _CGameInfo_CDotaGameInfo_CPlayerInfo_default_instance_.DefaultConstruct();
  _CGameInfo_CDotaGameInfo_CHeroSelectEvent_default_instance_.DefaultConstruct();
  _CGameInfo_CDotaGameInfo_default_instance_.DefaultConstruct();
  _CGameInfo_default_instance_.DefaultConstruct();
  _CDemoFileInfo_default_instance_.DefaultConstruct();
  _CDemoPacket_default_instance_.DefaultConstruct();
  _CDemoFullPacket_default_instance_.DefaultConstruct();
  _CDemoSaveGame_default_instance_.DefaultConstruct();
  _CDemoSyncTick_default_instance_.DefaultConstruct();
  _CDemoConsoleCmd_default_instance_.DefaultConstruct();
  _CDemoSendTables_default_instance_.DefaultConstruct();
  _CDemoClassInfo_class_t_default_instance_.DefaultConstruct();
  _CDemoClassInfo_default_instance_.DefaultConstruct();
  _CDemoCustomData_default_instance_.DefaultConstruct();
  _CDemoCustomDataCallbacks_default_instance_.DefaultConstruct();
  _CDemoStringTables_items_t_default_instance_.DefaultConstruct();
  _CDemoStringTables_table_t_default_instance_.DefaultConstruct();
  _CDemoStringTables_default_instance_.DefaultConstruct();
  _CDemoStop_default_instance_.DefaultConstruct();
  _CDemoUserCmd_default_instance_.DefaultConstruct();
  _CDemoSpawnGroups_default_instance_.DefaultConstruct();
  _CGameInfo_default_instance_.get_mutable()->dota_ = const_cast< ::proto::dota::CGameInfo_CDotaGameInfo*>(
      ::proto::dota::CGameInfo_CDotaGameInfo::internal_default_instance());
  _CDemoFileInfo_default_instance_.get_mutable()->game_info_ = const_cast< ::proto::dota::CGameInfo*>(
      ::proto::dota::CGameInfo::internal_default_instance());
  _CDemoFullPacket_default_instance_.get_mutable()->string_table_ = const_cast< ::proto::dota::CDemoStringTables*>(
      ::proto::dota::CDemoStringTables::internal_default_instance());
  _CDemoFullPacket_default_instance_.get_mutable()->packet_ = const_cast< ::proto::dota::CDemoPacket*>(
      ::proto::dota::CDemoPacket::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ndemo.proto\022\nproto.dota\"\214\002\n\017CDemoFileHe"
      "ader\022\027\n\017demo_file_stamp\030\001 \002(\t\022\030\n\020network"
      "_protocol\030\002 \001(\005\022\023\n\013server_name\030\003 \001(\t\022\023\n\013"
      "client_name\030\004 \001(\t\022\020\n\010map_name\030\005 \001(\t\022\026\n\016g"
      "ame_directory\030\006 \001(\t\022\033\n\023fullpackets_versi"
      "on\030\007 \001(\005\022!\n\031allow_clientside_entities\030\010 "
      "\001(\010\022\"\n\032allow_clientside_particles\030\t \001(\010\022"
      "\016\n\006addons\030\n \001(\t\"\325\004\n\tCGameInfo\0221\n\004dota\030\004 "
      "\001(\0132#.proto.dota.CGameInfo.CDotaGameInfo"
      "\032\224\004\n\rCDotaGameInfo\022\020\n\010match_id\030\001 \001(\004\022\021\n\t"
      "game_mode\030\002 \001(\005\022\023\n\013game_winner\030\003 \001(\005\022D\n\013"
      "player_info\030\004 \003(\0132/.proto.dota.CGameInfo"
      ".CDotaGameInfo.CPlayerInfo\022\020\n\010leagueid\030\005"
      " \001(\r\022H\n\npicks_bans\030\006 \003(\01324.proto.dota.CG"
      "ameInfo.CDotaGameInfo.CHeroSelectEvent\022\027"
      "\n\017radiant_team_id\030\007 \001(\r\022\024\n\014dire_team_id\030"
      "\010 \001(\r\022\030\n\020radiant_team_tag\030\t \001(\t\022\025\n\rdire_"
      "team_tag\030\n \001(\t\022\020\n\010end_time\030\013 \001(\r\032q\n\013CPla"
      "yerInfo\022\021\n\thero_name\030\001 \001(\t\022\023\n\013player_nam"
      "e\030\002 \001(\t\022\026\n\016is_fake_client\030\003 \001(\010\022\017\n\007steam"
      "id\030\004 \001(\004\022\021\n\tgame_team\030\005 \001(\005\032B\n\020CHeroSele"
      "ctEvent\022\017\n\007is_pick\030\001 \001(\010\022\014\n\004team\030\002 \001(\r\022\017"
      "\n\007hero_id\030\003 \001(\r\"\201\001\n\rCDemoFileInfo\022\025\n\rpla"
      "yback_time\030\001 \001(\002\022\026\n\016playback_ticks\030\002 \001(\005"
      "\022\027\n\017playback_frames\030\003 \001(\005\022(\n\tgame_info\030\004"
      " \001(\0132\025.proto.dota.CGameInfo\"\033\n\013CDemoPack"
      "et\022\014\n\004data\030\003 \001(\014\"o\n\017CDemoFullPacket\0223\n\014s"
      "tring_table\030\001 \001(\0132\035.proto.dota.CDemoStri"
      "ngTables\022\'\n\006packet\030\002 \001(\0132\027.proto.dota.CD"
      "emoPacket\"S\n\rCDemoSaveGame\022\014\n\004data\030\001 \001(\014"
      "\022\020\n\010steam_id\030\002 \001(\006\022\021\n\tsignature\030\003 \001(\006\022\017\n"
      "\007version\030\004 \001(\005\"\017\n\rCDemoSyncTick\"$\n\017CDemo"
      "ConsoleCmd\022\021\n\tcmdstring\030\001 \001(\t\"\037\n\017CDemoSe"
      "ndTables\022\014\n\004data\030\001 \001(\014\"\214\001\n\016CDemoClassInf"
      "o\0223\n\007classes\030\001 \003(\0132\".proto.dota.CDemoCla"
      "ssInfo.class_t\032E\n\007class_t\022\020\n\010class_id\030\001 "
      "\001(\005\022\024\n\014network_name\030\002 \001(\t\022\022\n\ntable_name\030"
      "\003 \001(\t\"7\n\017CDemoCustomData\022\026\n\016callback_ind"
      "ex\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"+\n\030CDemoCustomDat"
      "aCallbacks\022\017\n\007save_id\030\001 \003(\t\"\234\002\n\021CDemoStr"
      "ingTables\0225\n\006tables\030\001 \003(\0132%.proto.dota.C"
      "DemoStringTables.table_t\032$\n\007items_t\022\013\n\003s"
      "tr\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\032\251\001\n\007table_t\022\022\n\nta"
      "ble_name\030\001 \001(\t\0224\n\005items\030\002 \003(\0132%.proto.do"
      "ta.CDemoStringTables.items_t\022\?\n\020items_cl"
      "ientside\030\003 \003(\0132%.proto.dota.CDemoStringT"
      "ables.items_t\022\023\n\013table_flags\030\004 \001(\005\"\013\n\tCD"
      "emoStop\"0\n\014CDemoUserCmd\022\022\n\ncmd_number\030\001 "
      "\001(\005\022\014\n\004data\030\002 \001(\014\" \n\020CDemoSpawnGroups\022\014\n"
      "\004msgs\030\003 \003(\014*\204\003\n\rEDemoCommands\022\026\n\tDEM_Err"
      "or\020\377\377\377\377\377\377\377\377\377\001\022\014\n\010DEM_Stop\020\000\022\022\n\016DEM_FileH"
      "eader\020\001\022\020\n\014DEM_FileInfo\020\002\022\020\n\014DEM_SyncTic"
      "k\020\003\022\022\n\016DEM_SendTables\020\004\022\021\n\rDEM_ClassInfo"
      "\020\005\022\024\n\020DEM_StringTables\020\006\022\016\n\nDEM_Packet\020\007"
      "\022\024\n\020DEM_SignonPacket\020\010\022\022\n\016DEM_ConsoleCmd"
      "\020\t\022\022\n\016DEM_CustomData\020\n\022\033\n\027DEM_CustomData"
      "Callbacks\020\013\022\017\n\013DEM_UserCmd\020\014\022\022\n\016DEM_Full"
      "Packet\020\r\022\020\n\014DEM_SaveGame\020\016\022\023\n\017DEM_SpawnG"
      "roups\020\017\022\013\n\007DEM_Max\020\020\022\024\n\020DEM_IsCompressed"
      "\020@B\003\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "demo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_demo_2eproto

const ::google::protobuf::EnumDescriptor* EDemoCommands_descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_enum_descriptors[0];
}
bool EDemoCommands_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 64:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoFileHeader::kDemoFileStampFieldNumber;
const int CDemoFileHeader::kNetworkProtocolFieldNumber;
const int CDemoFileHeader::kServerNameFieldNumber;
const int CDemoFileHeader::kClientNameFieldNumber;
const int CDemoFileHeader::kMapNameFieldNumber;
const int CDemoFileHeader::kGameDirectoryFieldNumber;
const int CDemoFileHeader::kFullpacketsVersionFieldNumber;
const int CDemoFileHeader::kAllowClientsideEntitiesFieldNumber;
const int CDemoFileHeader::kAllowClientsideParticlesFieldNumber;
const int CDemoFileHeader::kAddonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoFileHeader::CDemoFileHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoFileHeader)
}
CDemoFileHeader::CDemoFileHeader(const CDemoFileHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  demo_file_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_demo_file_stamp()) {
    demo_file_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.demo_file_stamp_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_name()) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_name()) {
    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  game_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_directory()) {
    game_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_directory_);
  }
  addons_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addons()) {
    addons_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addons_);
  }
  ::memcpy(&network_protocol_, &from.network_protocol_,
    reinterpret_cast<char*>(&allow_clientside_particles_) -
    reinterpret_cast<char*>(&network_protocol_) + sizeof(allow_clientside_particles_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoFileHeader)
}

void CDemoFileHeader::SharedCtor() {
  _cached_size_ = 0;
  demo_file_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addons_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_protocol_, 0, reinterpret_cast<char*>(&allow_clientside_particles_) -
    reinterpret_cast<char*>(&network_protocol_) + sizeof(allow_clientside_particles_));
}

CDemoFileHeader::~CDemoFileHeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoFileHeader)
  SharedDtor();
}

void CDemoFileHeader::SharedDtor() {
  demo_file_stamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addons_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoFileHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoFileHeader::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoFileHeader& CDemoFileHeader::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoFileHeader* CDemoFileHeader::New(::google::protobuf::Arena* arena) const {
  CDemoFileHeader* n = new CDemoFileHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoFileHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoFileHeader)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_demo_file_stamp()) {
      GOOGLE_DCHECK(!demo_file_stamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*demo_file_stamp_.UnsafeRawStringPointer())->clear();
    }
    if (has_server_name()) {
      GOOGLE_DCHECK(!server_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_client_name()) {
      GOOGLE_DCHECK(!client_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_map_name()) {
      GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_directory()) {
      GOOGLE_DCHECK(!game_directory_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_directory_.UnsafeRawStringPointer())->clear();
    }
    if (has_addons()) {
      GOOGLE_DCHECK(!addons_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*addons_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&network_protocol_, 0, reinterpret_cast<char*>(&fullpackets_version_) -
      reinterpret_cast<char*>(&network_protocol_) + sizeof(fullpackets_version_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&allow_clientside_entities_, 0, reinterpret_cast<char*>(&allow_clientside_particles_) -
      reinterpret_cast<char*>(&allow_clientside_entities_) + sizeof(allow_clientside_particles_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoFileHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoFileHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string demo_file_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_demo_file_stamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->demo_file_stamp().data(), this->demo_file_stamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.demo_file_stamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 network_protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_network_protocol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.server_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.client_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_directory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_directory().data(), this->game_directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.game_directory");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fullpackets_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_fullpackets_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fullpackets_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_clientside_entities = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_allow_clientside_entities();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_clientside_entities_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_clientside_particles = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_allow_clientside_particles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_clientside_particles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string addons = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addons().data(), this->addons().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoFileHeader.addons");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoFileHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoFileHeader)
  return false;
#undef DO_
}

void CDemoFileHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string demo_file_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demo_file_stamp().data(), this->demo_file_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.demo_file_stamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->demo_file_stamp(), output);
  }

  // optional int32 network_protocol = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->network_protocol(), output);
  }

  // optional string server_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_name(), output);
  }

  // optional string client_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_name(), output);
  }

  // optional string map_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map_name(), output);
  }

  // optional string game_directory = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_directory().data(), this->game_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.game_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->game_directory(), output);
  }

  // optional int32 fullpackets_version = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fullpackets_version(), output);
  }

  // optional bool allow_clientside_entities = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_clientside_entities(), output);
  }

  // optional bool allow_clientside_particles = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->allow_clientside_particles(), output);
  }

  // optional string addons = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addons().data(), this->addons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.addons");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->addons(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoFileHeader)
}

::google::protobuf::uint8* CDemoFileHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string demo_file_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demo_file_stamp().data(), this->demo_file_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.demo_file_stamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->demo_file_stamp(), target);
  }

  // optional int32 network_protocol = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->network_protocol(), target);
  }

  // optional string server_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_name(), target);
  }

  // optional string client_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_name(), target);
  }

  // optional string map_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map_name(), target);
  }

  // optional string game_directory = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_directory().data(), this->game_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.game_directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->game_directory(), target);
  }

  // optional int32 fullpackets_version = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fullpackets_version(), target);
  }

  // optional bool allow_clientside_entities = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_clientside_entities(), target);
  }

  // optional bool allow_clientside_particles = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->allow_clientside_particles(), target);
  }

  // optional string addons = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addons().data(), this->addons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoFileHeader.addons");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->addons(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoFileHeader)
  return target;
}

size_t CDemoFileHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoFileHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string demo_file_stamp = 1;
  if (has_demo_file_stamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->demo_file_stamp());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional string server_name = 3;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string client_name = 4;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional string map_name = 5;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string game_directory = 6;
    if (has_game_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_directory());
    }

    // optional string addons = 10;
    if (has_addons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addons());
    }

    // optional int32 network_protocol = 2;
    if (has_network_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_protocol());
    }

    // optional int32 fullpackets_version = 7;
    if (has_fullpackets_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fullpackets_version());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool allow_clientside_entities = 8;
    if (has_allow_clientside_entities()) {
      total_size += 1 + 1;
    }

    // optional bool allow_clientside_particles = 9;
    if (has_allow_clientside_particles()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoFileHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoFileHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoFileHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoFileHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoFileHeader)
    MergeFrom(*source);
  }
}

void CDemoFileHeader::MergeFrom(const CDemoFileHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_demo_file_stamp();
      demo_file_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.demo_file_stamp_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_server_name();
      server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_client_name();
      client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_game_directory();
      game_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_directory_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_addons();
      addons_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addons_);
    }
    if (cached_has_bits & 0x00000040u) {
      network_protocol_ = from.network_protocol_;
    }
    if (cached_has_bits & 0x00000080u) {
      fullpackets_version_ = from.fullpackets_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      allow_clientside_entities_ = from.allow_clientside_entities_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_clientside_particles_ = from.allow_clientside_particles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoFileHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFileHeader::CopyFrom(const CDemoFileHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFileHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CDemoFileHeader::Swap(CDemoFileHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoFileHeader::InternalSwap(CDemoFileHeader* other) {
  demo_file_stamp_.Swap(&other->demo_file_stamp_);
  server_name_.Swap(&other->server_name_);
  client_name_.Swap(&other->client_name_);
  map_name_.Swap(&other->map_name_);
  game_directory_.Swap(&other->game_directory_);
  addons_.Swap(&other->addons_);
  std::swap(network_protocol_, other->network_protocol_);
  std::swap(fullpackets_version_, other->fullpackets_version_);
  std::swap(allow_clientside_entities_, other->allow_clientside_entities_);
  std::swap(allow_clientside_particles_, other->allow_clientside_particles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoFileHeader::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoFileHeader

// required string demo_file_stamp = 1;
bool CDemoFileHeader::has_demo_file_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoFileHeader::set_has_demo_file_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoFileHeader::clear_has_demo_file_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoFileHeader::clear_demo_file_stamp() {
  demo_file_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_demo_file_stamp();
}
const ::std::string& CDemoFileHeader::demo_file_stamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.demo_file_stamp)
  return demo_file_stamp_.GetNoArena();
}
void CDemoFileHeader::set_demo_file_stamp(const ::std::string& value) {
  set_has_demo_file_stamp();
  demo_file_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.demo_file_stamp)
}
#if LANG_CXX11
void CDemoFileHeader::set_demo_file_stamp(::std::string&& value) {
  set_has_demo_file_stamp();
  demo_file_stamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.demo_file_stamp)
}
#endif
void CDemoFileHeader::set_demo_file_stamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_demo_file_stamp();
  demo_file_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.demo_file_stamp)
}
void CDemoFileHeader::set_demo_file_stamp(const char* value, size_t size) {
  set_has_demo_file_stamp();
  demo_file_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.demo_file_stamp)
}
::std::string* CDemoFileHeader::mutable_demo_file_stamp() {
  set_has_demo_file_stamp();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.demo_file_stamp)
  return demo_file_stamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoFileHeader::release_demo_file_stamp() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.demo_file_stamp)
  clear_has_demo_file_stamp();
  return demo_file_stamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoFileHeader::set_allocated_demo_file_stamp(::std::string* demo_file_stamp) {
  if (demo_file_stamp != NULL) {
    set_has_demo_file_stamp();
  } else {
    clear_has_demo_file_stamp();
  }
  demo_file_stamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), demo_file_stamp);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.demo_file_stamp)
}

// optional int32 network_protocol = 2;
bool CDemoFileHeader::has_network_protocol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDemoFileHeader::set_has_network_protocol() {
  _has_bits_[0] |= 0x00000040u;
}
void CDemoFileHeader::clear_has_network_protocol() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDemoFileHeader::clear_network_protocol() {
  network_protocol_ = 0;
  clear_has_network_protocol();
}
::google::protobuf::int32 CDemoFileHeader::network_protocol() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.network_protocol)
  return network_protocol_;
}
void CDemoFileHeader::set_network_protocol(::google::protobuf::int32 value) {
  set_has_network_protocol();
  network_protocol_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.network_protocol)
}

// optional string server_name = 3;
bool CDemoFileHeader::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoFileHeader::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoFileHeader::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoFileHeader::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_name();
}
const ::std::string& CDemoFileHeader::server_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.server_name)
  return server_name_.GetNoArena();
}
void CDemoFileHeader::set_server_name(const ::std::string& value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.server_name)
}
#if LANG_CXX11
void CDemoFileHeader::set_server_name(::std::string&& value) {
  set_has_server_name();
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.server_name)
}
#endif
void CDemoFileHeader::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.server_name)
}
void CDemoFileHeader::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.server_name)
}
::std::string* CDemoFileHeader::mutable_server_name() {
  set_has_server_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoFileHeader::release_server_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.server_name)
  clear_has_server_name();
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoFileHeader::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    set_has_server_name();
  } else {
    clear_has_server_name();
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.server_name)
}

// optional string client_name = 4;
bool CDemoFileHeader::has_client_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDemoFileHeader::set_has_client_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CDemoFileHeader::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDemoFileHeader::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_name();
}
const ::std::string& CDemoFileHeader::client_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.client_name)
  return client_name_.GetNoArena();
}
void CDemoFileHeader::set_client_name(const ::std::string& value) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.client_name)
}
#if LANG_CXX11
void CDemoFileHeader::set_client_name(::std::string&& value) {
  set_has_client_name();
  client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.client_name)
}
#endif
void CDemoFileHeader::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.client_name)
}
void CDemoFileHeader::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.client_name)
}
::std::string* CDemoFileHeader::mutable_client_name() {
  set_has_client_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoFileHeader::release_client_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.client_name)
  clear_has_client_name();
  return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoFileHeader::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    set_has_client_name();
  } else {
    clear_has_client_name();
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.client_name)
}

// optional string map_name = 5;
bool CDemoFileHeader::has_map_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDemoFileHeader::set_has_map_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CDemoFileHeader::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDemoFileHeader::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
const ::std::string& CDemoFileHeader::map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.map_name)
  return map_name_.GetNoArena();
}
void CDemoFileHeader::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.map_name)
}
#if LANG_CXX11
void CDemoFileHeader::set_map_name(::std::string&& value) {
  set_has_map_name();
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.map_name)
}
#endif
void CDemoFileHeader::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.map_name)
}
void CDemoFileHeader::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.map_name)
}
::std::string* CDemoFileHeader::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoFileHeader::release_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoFileHeader::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.map_name)
}

// optional string game_directory = 6;
bool CDemoFileHeader::has_game_directory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDemoFileHeader::set_has_game_directory() {
  _has_bits_[0] |= 0x00000010u;
}
void CDemoFileHeader::clear_has_game_directory() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDemoFileHeader::clear_game_directory() {
  game_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_directory();
}
const ::std::string& CDemoFileHeader::game_directory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.game_directory)
  return game_directory_.GetNoArena();
}
void CDemoFileHeader::set_game_directory(const ::std::string& value) {
  set_has_game_directory();
  game_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.game_directory)
}
#if LANG_CXX11
void CDemoFileHeader::set_game_directory(::std::string&& value) {
  set_has_game_directory();
  game_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.game_directory)
}
#endif
void CDemoFileHeader::set_game_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_directory();
  game_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.game_directory)
}
void CDemoFileHeader::set_game_directory(const char* value, size_t size) {
  set_has_game_directory();
  game_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.game_directory)
}
::std::string* CDemoFileHeader::mutable_game_directory() {
  set_has_game_directory();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.game_directory)
  return game_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoFileHeader::release_game_directory() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.game_directory)
  clear_has_game_directory();
  return game_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoFileHeader::set_allocated_game_directory(::std::string* game_directory) {
  if (game_directory != NULL) {
    set_has_game_directory();
  } else {
    clear_has_game_directory();
  }
  game_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_directory);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.game_directory)
}

// optional int32 fullpackets_version = 7;
bool CDemoFileHeader::has_fullpackets_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDemoFileHeader::set_has_fullpackets_version() {
  _has_bits_[0] |= 0x00000080u;
}
void CDemoFileHeader::clear_has_fullpackets_version() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDemoFileHeader::clear_fullpackets_version() {
  fullpackets_version_ = 0;
  clear_has_fullpackets_version();
}
::google::protobuf::int32 CDemoFileHeader::fullpackets_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.fullpackets_version)
  return fullpackets_version_;
}
void CDemoFileHeader::set_fullpackets_version(::google::protobuf::int32 value) {
  set_has_fullpackets_version();
  fullpackets_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.fullpackets_version)
}

// optional bool allow_clientside_entities = 8;
bool CDemoFileHeader::has_allow_clientside_entities() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDemoFileHeader::set_has_allow_clientside_entities() {
  _has_bits_[0] |= 0x00000100u;
}
void CDemoFileHeader::clear_has_allow_clientside_entities() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDemoFileHeader::clear_allow_clientside_entities() {
  allow_clientside_entities_ = false;
  clear_has_allow_clientside_entities();
}
bool CDemoFileHeader::allow_clientside_entities() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.allow_clientside_entities)
  return allow_clientside_entities_;
}
void CDemoFileHeader::set_allow_clientside_entities(bool value) {
  set_has_allow_clientside_entities();
  allow_clientside_entities_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.allow_clientside_entities)
}

// optional bool allow_clientside_particles = 9;
bool CDemoFileHeader::has_allow_clientside_particles() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDemoFileHeader::set_has_allow_clientside_particles() {
  _has_bits_[0] |= 0x00000200u;
}
void CDemoFileHeader::clear_has_allow_clientside_particles() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDemoFileHeader::clear_allow_clientside_particles() {
  allow_clientside_particles_ = false;
  clear_has_allow_clientside_particles();
}
bool CDemoFileHeader::allow_clientside_particles() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.allow_clientside_particles)
  return allow_clientside_particles_;
}
void CDemoFileHeader::set_allow_clientside_particles(bool value) {
  set_has_allow_clientside_particles();
  allow_clientside_particles_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.allow_clientside_particles)
}

// optional string addons = 10;
bool CDemoFileHeader::has_addons() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDemoFileHeader::set_has_addons() {
  _has_bits_[0] |= 0x00000020u;
}
void CDemoFileHeader::clear_has_addons() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDemoFileHeader::clear_addons() {
  addons_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addons();
}
const ::std::string& CDemoFileHeader::addons() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.addons)
  return addons_.GetNoArena();
}
void CDemoFileHeader::set_addons(const ::std::string& value) {
  set_has_addons();
  addons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.addons)
}
#if LANG_CXX11
void CDemoFileHeader::set_addons(::std::string&& value) {
  set_has_addons();
  addons_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.addons)
}
#endif
void CDemoFileHeader::set_addons(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_addons();
  addons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.addons)
}
void CDemoFileHeader::set_addons(const char* value, size_t size) {
  set_has_addons();
  addons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.addons)
}
::std::string* CDemoFileHeader::mutable_addons() {
  set_has_addons();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.addons)
  return addons_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoFileHeader::release_addons() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.addons)
  clear_has_addons();
  return addons_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoFileHeader::set_allocated_addons(::std::string* addons) {
  if (addons != NULL) {
    set_has_addons();
  } else {
    clear_has_addons();
  }
  addons_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addons);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.addons)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kHeroNameFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kPlayerNameFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kIsFakeClientFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kSteamidFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kGameTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameInfo_CDotaGameInfo_CPlayerInfo::CGameInfo_CDotaGameInfo_CPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
}
CGameInfo_CDotaGameInfo_CPlayerInfo::CGameInfo_CDotaGameInfo_CPlayerInfo(const CGameInfo_CDotaGameInfo_CPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_name()) {
    hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
  }
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&game_team_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(game_team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&game_team_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(game_team_));
}

CGameInfo_CDotaGameInfo_CPlayerInfo::~CGameInfo_CDotaGameInfo_CPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  SharedDtor();
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SharedDtor() {
  hero_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_CPlayerInfo::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameInfo_CDotaGameInfo_CPlayerInfo& CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo_CPlayerInfo::New(::google::protobuf::Arena* arena) const {
  CGameInfo_CDotaGameInfo_CPlayerInfo* n = new CGameInfo_CDotaGameInfo_CPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hero_name()) {
      GOOGLE_DCHECK(!hero_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hero_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_player_name()) {
      GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*player_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&game_team_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(game_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameInfo_CDotaGameInfo_CPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hero_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_fake_client = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_fake_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fake_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_team = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_game_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  return false;
#undef DO_
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hero_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hero_name(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional bool is_fake_client = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_fake_client(), output);
  }

  // optional uint64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steamid(), output);
  }

  // optional int32 game_team = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->game_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo_CPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hero_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hero_name(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional bool is_fake_client = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_fake_client(), target);
  }

  // optional uint64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steamid(), target);
  }

  // optional int32 game_team = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->game_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  return target;
}

size_t CGameInfo_CDotaGameInfo_CPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string hero_name = 1;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint64 steamid = 4;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional bool is_fake_client = 3;
    if (has_is_fake_client()) {
      total_size += 1 + 1;
    }

    // optional int32 game_team = 5;
    if (has_game_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameInfo_CDotaGameInfo_CPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameInfo_CDotaGameInfo_CPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::MergeFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hero_name();
      hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_fake_client_ = from.is_fake_client_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_team_ = from.game_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::CopyFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo_CPlayerInfo::IsInitialized() const {
  return true;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::Swap(CGameInfo_CDotaGameInfo_CPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::InternalSwap(CGameInfo_CDotaGameInfo_CPlayerInfo* other) {
  hero_name_.Swap(&other->hero_name_);
  player_name_.Swap(&other->player_name_);
  std::swap(steamid_, other->steamid_);
  std::swap(is_fake_client_, other->is_fake_client_);
  std::swap(game_team_, other->game_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo_CPlayerInfo::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameInfo_CDotaGameInfo_CPlayerInfo

// optional string hero_name = 1;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_hero_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_hero_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_hero_name() {
  hero_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero_name();
}
const ::std::string& CGameInfo_CDotaGameInfo_CPlayerInfo::hero_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
  return hero_name_.GetNoArena();
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
#if LANG_CXX11
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(::std::string&& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
#endif
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const char* value, size_t size) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::mutable_hero_name() {
  set_has_hero_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
  return hero_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::release_hero_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
  clear_has_hero_name();
  return hero_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_allocated_hero_name(::std::string* hero_name) {
  if (hero_name != NULL) {
    set_has_hero_name();
  } else {
    clear_has_hero_name();
  }
  hero_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}

// optional string player_name = 2;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CGameInfo_CDotaGameInfo_CPlayerInfo::player_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
  return player_name_.GetNoArena();
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
#if LANG_CXX11
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
#endif
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}

// optional bool is_fake_client = 3;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_is_fake_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_is_fake_client() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_is_fake_client() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_is_fake_client() {
  is_fake_client_ = false;
  clear_has_is_fake_client();
}
bool CGameInfo_CDotaGameInfo_CPlayerInfo::is_fake_client() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.is_fake_client)
  return is_fake_client_;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_is_fake_client(bool value) {
  set_has_is_fake_client();
  is_fake_client_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.is_fake_client)
}

// optional uint64 steamid = 4;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGameInfo_CDotaGameInfo_CPlayerInfo::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.steamid)
  return steamid_;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.steamid)
}

// optional int32 game_team = 5;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_game_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_game_team() {
  _has_bits_[0] |= 0x00000010u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_game_team() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_game_team() {
  game_team_ = 0;
  clear_has_game_team();
}
::google::protobuf::int32 CGameInfo_CDotaGameInfo_CPlayerInfo::game_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.game_team)
  return game_team_;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_game_team(::google::protobuf::int32 value) {
  set_has_game_team();
  game_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.game_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameInfo_CDotaGameInfo_CHeroSelectEvent::kIsPickFieldNumber;
const int CGameInfo_CDotaGameInfo_CHeroSelectEvent::kTeamFieldNumber;
const int CGameInfo_CDotaGameInfo_CHeroSelectEvent::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameInfo_CDotaGameInfo_CHeroSelectEvent::CGameInfo_CDotaGameInfo_CHeroSelectEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
}
CGameInfo_CDotaGameInfo_CHeroSelectEvent::CGameInfo_CDotaGameInfo_CHeroSelectEvent(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_pick_, &from.is_pick_,
    reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&is_pick_) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_pick_, 0, reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&is_pick_) + sizeof(hero_id_));
}

CGameInfo_CDotaGameInfo_CHeroSelectEvent::~CGameInfo_CDotaGameInfo_CHeroSelectEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  SharedDtor();
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SharedDtor() {
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_CHeroSelectEvent::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameInfo_CDotaGameInfo_CHeroSelectEvent& CGameInfo_CDotaGameInfo_CHeroSelectEvent::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameInfo_CDotaGameInfo_CHeroSelectEvent* CGameInfo_CDotaGameInfo_CHeroSelectEvent::New(::google::protobuf::Arena* arena) const {
  CGameInfo_CDotaGameInfo_CHeroSelectEvent* n = new CGameInfo_CDotaGameInfo_CHeroSelectEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&is_pick_, 0, reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&is_pick_) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_pick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  return false;
#undef DO_
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pick = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pick(), output);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo_CHeroSelectEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pick(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  return target;
}

size_t CGameInfo_CDotaGameInfo_CHeroSelectEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool is_pick = 1;
    if (has_is_pick()) {
      total_size += 1 + 1;
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameInfo_CDotaGameInfo_CHeroSelectEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameInfo_CDotaGameInfo_CHeroSelectEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::MergeFrom(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      is_pick_ = from.is_pick_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::CopyFrom(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::IsInitialized() const {
  return true;
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::Swap(CGameInfo_CDotaGameInfo_CHeroSelectEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::InternalSwap(CGameInfo_CDotaGameInfo_CHeroSelectEvent* other) {
  std::swap(is_pick_, other->is_pick_);
  std::swap(team_, other->team_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo_CHeroSelectEvent::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameInfo_CDotaGameInfo_CHeroSelectEvent

// optional bool is_pick = 1;
bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_has_is_pick() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_has_is_pick() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  clear_has_is_pick();
}
bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.is_pick)
  return is_pick_;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_is_pick(bool value) {
  set_has_is_pick();
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CGameInfo_CDotaGameInfo_CHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.team)
  return team_;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CGameInfo_CDotaGameInfo_CHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.hero_id)
  return hero_id_;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.hero_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameInfo_CDotaGameInfo::kMatchIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kGameModeFieldNumber;
const int CGameInfo_CDotaGameInfo::kGameWinnerFieldNumber;
const int CGameInfo_CDotaGameInfo::kPlayerInfoFieldNumber;
const int CGameInfo_CDotaGameInfo::kLeagueidFieldNumber;
const int CGameInfo_CDotaGameInfo::kPicksBansFieldNumber;
const int CGameInfo_CDotaGameInfo::kRadiantTeamIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kDireTeamIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kRadiantTeamTagFieldNumber;
const int CGameInfo_CDotaGameInfo::kDireTeamTagFieldNumber;
const int CGameInfo_CDotaGameInfo::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameInfo_CDotaGameInfo::CGameInfo_CDotaGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGameInfo.CDotaGameInfo)
}
CGameInfo_CDotaGameInfo::CGameInfo_CDotaGameInfo(const CGameInfo_CDotaGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_info_(from.player_info_),
      picks_bans_(from.picks_bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radiant_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_tag()) {
    radiant_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_tag_);
  }
  dire_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_tag()) {
    dire_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_tag_);
  }
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGameInfo.CDotaGameInfo)
}

void CGameInfo_CDotaGameInfo::SharedCtor() {
  _cached_size_ = 0;
  radiant_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(end_time_));
}

CGameInfo_CDotaGameInfo::~CGameInfo_CDotaGameInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CGameInfo.CDotaGameInfo)
  SharedDtor();
}

void CGameInfo_CDotaGameInfo::SharedDtor() {
  radiant_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameInfo_CDotaGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameInfo_CDotaGameInfo& CGameInfo_CDotaGameInfo::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameInfo_CDotaGameInfo* CGameInfo_CDotaGameInfo::New(::google::protobuf::Arena* arena) const {
  CGameInfo_CDotaGameInfo* n = new CGameInfo_CDotaGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameInfo_CDotaGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGameInfo.CDotaGameInfo)
  player_info_.Clear();
  picks_bans_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_radiant_team_tag()) {
      GOOGLE_DCHECK(!radiant_team_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*radiant_team_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_dire_team_tag()) {
      GOOGLE_DCHECK(!dire_team_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dire_team_tag_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&dire_team_id_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(dire_team_id_));
  }
  end_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameInfo_CDotaGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGameInfo.CDotaGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_winner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_game_winner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_winner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_leagueid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_radiant_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_dire_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_tag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_tag().data(), this->radiant_team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_tag().data(), this->dire_team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGameInfo.CDotaGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGameInfo.CDotaGameInfo)
  return false;
#undef DO_
}

void CGameInfo_CDotaGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGameInfo.CDotaGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional int32 game_mode = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_mode(), output);
  }

  // optional int32 game_winner = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_winner(), output);
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  for (unsigned int i = 0, n = this->player_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_info(i), output);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leagueid(), output);
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->picks_bans(i), output);
  }

  // optional uint32 radiant_team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->radiant_team_id(), output);
  }

  // optional uint32 dire_team_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dire_team_id(), output);
  }

  // optional string radiant_team_tag = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), this->radiant_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->radiant_team_tag(), output);
  }

  // optional string dire_team_tag = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), this->dire_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->dire_team_tag(), output);
  }

  // optional uint32 end_time = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGameInfo.CDotaGameInfo)
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGameInfo.CDotaGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional int32 game_mode = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_mode(), target);
  }

  // optional int32 game_winner = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_winner(), target);
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  for (unsigned int i = 0, n = this->player_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->player_info(i), deterministic, target);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leagueid(), target);
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->picks_bans(i), deterministic, target);
  }

  // optional uint32 radiant_team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->radiant_team_id(), target);
  }

  // optional uint32 dire_team_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dire_team_id(), target);
  }

  // optional string radiant_team_tag = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), this->radiant_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->radiant_team_tag(), target);
  }

  // optional string dire_team_tag = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), this->dire_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dire_team_tag(), target);
  }

  // optional uint32 end_time = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGameInfo.CDotaGameInfo)
  return target;
}

size_t CGameInfo_CDotaGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGameInfo.CDotaGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  {
    unsigned int count = this->player_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info(i));
    }
  }

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  {
    unsigned int count = this->picks_bans_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picks_bans(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string radiant_team_tag = 9;
    if (has_radiant_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_tag());
    }

    // optional string dire_team_tag = 10;
    if (has_dire_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_tag());
    }

    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional int32 game_mode = 2;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_mode());
    }

    // optional int32 game_winner = 3;
    if (has_game_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_winner());
    }

    // optional uint32 leagueid = 5;
    if (has_leagueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint32 radiant_team_id = 7;
    if (has_radiant_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

    // optional uint32 dire_team_id = 8;
    if (has_dire_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

  }
  // optional uint32 end_time = 11;
  if (has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo_CDotaGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameInfo_CDotaGameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameInfo_CDotaGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGameInfo.CDotaGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGameInfo.CDotaGameInfo)
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo::MergeFrom(const CGameInfo_CDotaGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGameInfo.CDotaGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_info_.MergeFrom(from.player_info_);
  picks_bans_.MergeFrom(from.picks_bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_radiant_team_tag();
      radiant_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dire_team_tag();
      dire_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_winner_ = from.game_winner_;
    }
    if (cached_has_bits & 0x00000020u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00000040u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_team_id_ = from.dire_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_end_time(from.end_time());
  }
}

void CGameInfo_CDotaGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo::CopyFrom(const CGameInfo_CDotaGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGameInfo.CDotaGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo::IsInitialized() const {
  return true;
}

void CGameInfo_CDotaGameInfo::Swap(CGameInfo_CDotaGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo_CDotaGameInfo::InternalSwap(CGameInfo_CDotaGameInfo* other) {
  player_info_.InternalSwap(&other->player_info_);
  picks_bans_.InternalSwap(&other->picks_bans_);
  radiant_team_tag_.Swap(&other->radiant_team_tag_);
  dire_team_tag_.Swap(&other->dire_team_tag_);
  std::swap(match_id_, other->match_id_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(game_winner_, other->game_winner_);
  std::swap(leagueid_, other->leagueid_);
  std::swap(radiant_team_id_, other->radiant_team_id_);
  std::swap(dire_team_id_, other->dire_team_id_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameInfo_CDotaGameInfo

// optional uint64 match_id = 1;
bool CGameInfo_CDotaGameInfo::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameInfo_CDotaGameInfo::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameInfo_CDotaGameInfo::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CGameInfo_CDotaGameInfo::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.match_id)
  return match_id_;
}
void CGameInfo_CDotaGameInfo::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.match_id)
}

// optional int32 game_mode = 2;
bool CGameInfo_CDotaGameInfo::has_game_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_game_mode() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameInfo_CDotaGameInfo::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameInfo_CDotaGameInfo::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
::google::protobuf::int32 CGameInfo_CDotaGameInfo::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.game_mode)
  return game_mode_;
}
void CGameInfo_CDotaGameInfo::set_game_mode(::google::protobuf::int32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.game_mode)
}

// optional int32 game_winner = 3;
bool CGameInfo_CDotaGameInfo::has_game_winner() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_game_winner() {
  _has_bits_[0] |= 0x00000010u;
}
void CGameInfo_CDotaGameInfo::clear_has_game_winner() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGameInfo_CDotaGameInfo::clear_game_winner() {
  game_winner_ = 0;
  clear_has_game_winner();
}
::google::protobuf::int32 CGameInfo_CDotaGameInfo::game_winner() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.game_winner)
  return game_winner_;
}
void CGameInfo_CDotaGameInfo::set_game_winner(::google::protobuf::int32 value) {
  set_has_game_winner();
  game_winner_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.game_winner)
}

// repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
int CGameInfo_CDotaGameInfo::player_info_size() const {
  return player_info_.size();
}
void CGameInfo_CDotaGameInfo::clear_player_info() {
  player_info_.Clear();
}
const ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo& CGameInfo_CDotaGameInfo::player_info(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return player_info_.Get(index);
}
::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo::mutable_player_info(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return player_info_.Mutable(index);
}
::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo::add_player_info() {
  // @@protoc_insertion_point(field_add:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return player_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo >*
CGameInfo_CDotaGameInfo::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return &player_info_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo >&
CGameInfo_CDotaGameInfo::player_info() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return player_info_;
}

// optional uint32 leagueid = 5;
bool CGameInfo_CDotaGameInfo::has_leagueid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_leagueid() {
  _has_bits_[0] |= 0x00000020u;
}
void CGameInfo_CDotaGameInfo::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CGameInfo_CDotaGameInfo::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
::google::protobuf::uint32 CGameInfo_CDotaGameInfo::leagueid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.leagueid)
  return leagueid_;
}
void CGameInfo_CDotaGameInfo::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.leagueid)
}

// repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
int CGameInfo_CDotaGameInfo::picks_bans_size() const {
  return picks_bans_.size();
}
void CGameInfo_CDotaGameInfo::clear_picks_bans() {
  picks_bans_.Clear();
}
const ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent& CGameInfo_CDotaGameInfo::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_.Get(index);
}
::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent* CGameInfo_CDotaGameInfo::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_.Mutable(index);
}
::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent* CGameInfo_CDotaGameInfo::add_picks_bans() {
  // @@protoc_insertion_point(field_add:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent >*
CGameInfo_CDotaGameInfo::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return &picks_bans_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent >&
CGameInfo_CDotaGameInfo::picks_bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_;
}

// optional uint32 radiant_team_id = 7;
bool CGameInfo_CDotaGameInfo::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_radiant_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CGameInfo_CDotaGameInfo::clear_has_radiant_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CGameInfo_CDotaGameInfo::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  clear_has_radiant_team_id();
}
::google::protobuf::uint32 CGameInfo_CDotaGameInfo::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_id)
  return radiant_team_id_;
}
void CGameInfo_CDotaGameInfo::set_radiant_team_id(::google::protobuf::uint32 value) {
  set_has_radiant_team_id();
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_id)
}

// optional uint32 dire_team_id = 8;
bool CGameInfo_CDotaGameInfo::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_dire_team_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CGameInfo_CDotaGameInfo::clear_has_dire_team_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CGameInfo_CDotaGameInfo::clear_dire_team_id() {
  dire_team_id_ = 0u;
  clear_has_dire_team_id();
}
::google::protobuf::uint32 CGameInfo_CDotaGameInfo::dire_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.dire_team_id)
  return dire_team_id_;
}
void CGameInfo_CDotaGameInfo::set_dire_team_id(::google::protobuf::uint32 value) {
  set_has_dire_team_id();
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.dire_team_id)
}

// optional string radiant_team_tag = 9;
bool CGameInfo_CDotaGameInfo::has_radiant_team_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_radiant_team_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameInfo_CDotaGameInfo::clear_has_radiant_team_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameInfo_CDotaGameInfo::clear_radiant_team_tag() {
  radiant_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radiant_team_tag();
}
const ::std::string& CGameInfo_CDotaGameInfo::radiant_team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
  return radiant_team_tag_.GetNoArena();
}
void CGameInfo_CDotaGameInfo::set_radiant_team_tag(const ::std::string& value) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}
#if LANG_CXX11
void CGameInfo_CDotaGameInfo::set_radiant_team_tag(::std::string&& value) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}
#endif
void CGameInfo_CDotaGameInfo::set_radiant_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}
void CGameInfo_CDotaGameInfo::set_radiant_team_tag(const char* value, size_t size) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}
::std::string* CGameInfo_CDotaGameInfo::mutable_radiant_team_tag() {
  set_has_radiant_team_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
  return radiant_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameInfo_CDotaGameInfo::release_radiant_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
  clear_has_radiant_team_tag();
  return radiant_team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameInfo_CDotaGameInfo::set_allocated_radiant_team_tag(::std::string* radiant_team_tag) {
  if (radiant_team_tag != NULL) {
    set_has_radiant_team_tag();
  } else {
    clear_has_radiant_team_tag();
  }
  radiant_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}

// optional string dire_team_tag = 10;
bool CGameInfo_CDotaGameInfo::has_dire_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_dire_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameInfo_CDotaGameInfo::clear_has_dire_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameInfo_CDotaGameInfo::clear_dire_team_tag() {
  dire_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dire_team_tag();
}
const ::std::string& CGameInfo_CDotaGameInfo::dire_team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
  return dire_team_tag_.GetNoArena();
}
void CGameInfo_CDotaGameInfo::set_dire_team_tag(const ::std::string& value) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}
#if LANG_CXX11
void CGameInfo_CDotaGameInfo::set_dire_team_tag(::std::string&& value) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}
#endif
void CGameInfo_CDotaGameInfo::set_dire_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}
void CGameInfo_CDotaGameInfo::set_dire_team_tag(const char* value, size_t size) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}
::std::string* CGameInfo_CDotaGameInfo::mutable_dire_team_tag() {
  set_has_dire_team_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
  return dire_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameInfo_CDotaGameInfo::release_dire_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
  clear_has_dire_team_tag();
  return dire_team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameInfo_CDotaGameInfo::set_allocated_dire_team_tag(::std::string* dire_team_tag) {
  if (dire_team_tag != NULL) {
    set_has_dire_team_tag();
  } else {
    clear_has_dire_team_tag();
  }
  dire_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}

// optional uint32 end_time = 11;
bool CGameInfo_CDotaGameInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_end_time() {
  _has_bits_[0] |= 0x00000100u;
}
void CGameInfo_CDotaGameInfo::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void CGameInfo_CDotaGameInfo::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
::google::protobuf::uint32 CGameInfo_CDotaGameInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.end_time)
  return end_time_;
}
void CGameInfo_CDotaGameInfo::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameInfo::kDotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameInfo::CGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGameInfo)
}
CGameInfo::CGameInfo(const CGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dota()) {
    dota_ = new ::proto::dota::CGameInfo_CDotaGameInfo(*from.dota_);
  } else {
    dota_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGameInfo)
}

void CGameInfo::SharedCtor() {
  _cached_size_ = 0;
  dota_ = NULL;
}

CGameInfo::~CGameInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CGameInfo)
  SharedDtor();
}

void CGameInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dota_;
  }
}

void CGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameInfo& CGameInfo::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameInfo* CGameInfo::New(::google::protobuf::Arena* arena) const {
  CGameInfo* n = new CGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGameInfo)
  if (has_dota()) {
    GOOGLE_DCHECK(dota_ != NULL);
    dota_->::proto::dota::CGameInfo_CDotaGameInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGameInfo)
  return false;
#undef DO_
}

void CGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dota_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGameInfo)
}

::google::protobuf::uint8* CGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->dota_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGameInfo)
  return target;
}

size_t CGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
  if (has_dota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dota_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGameInfo)
    MergeFrom(*source);
  }
}

void CGameInfo::MergeFrom(const CGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dota()) {
    mutable_dota()->::proto::dota::CGameInfo_CDotaGameInfo::MergeFrom(from.dota());
  }
}

void CGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo::CopyFrom(const CGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo::IsInitialized() const {
  return true;
}

void CGameInfo::Swap(CGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo::InternalSwap(CGameInfo* other) {
  std::swap(dota_, other->dota_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameInfo::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameInfo

// optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
bool CGameInfo::has_dota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameInfo::set_has_dota() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameInfo::clear_has_dota() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameInfo::clear_dota() {
  if (dota_ != NULL) dota_->::proto::dota::CGameInfo_CDotaGameInfo::Clear();
  clear_has_dota();
}
const ::proto::dota::CGameInfo_CDotaGameInfo& CGameInfo::dota() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.dota)
  return dota_ != NULL ? *dota_
                         : *::proto::dota::CGameInfo_CDotaGameInfo::internal_default_instance();
}
::proto::dota::CGameInfo_CDotaGameInfo* CGameInfo::mutable_dota() {
  set_has_dota();
  if (dota_ == NULL) {
    dota_ = new ::proto::dota::CGameInfo_CDotaGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.dota)
  return dota_;
}
::proto::dota::CGameInfo_CDotaGameInfo* CGameInfo::release_dota() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.dota)
  clear_has_dota();
  ::proto::dota::CGameInfo_CDotaGameInfo* temp = dota_;
  dota_ = NULL;
  return temp;
}
void CGameInfo::set_allocated_dota(::proto::dota::CGameInfo_CDotaGameInfo* dota) {
  delete dota_;
  dota_ = dota;
  if (dota) {
    set_has_dota();
  } else {
    clear_has_dota();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.dota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoFileInfo::kPlaybackTimeFieldNumber;
const int CDemoFileInfo::kPlaybackTicksFieldNumber;
const int CDemoFileInfo::kPlaybackFramesFieldNumber;
const int CDemoFileInfo::kGameInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoFileInfo::CDemoFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoFileInfo)
}
CDemoFileInfo::CDemoFileInfo(const CDemoFileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_info()) {
    game_info_ = new ::proto::dota::CGameInfo(*from.game_info_);
  } else {
    game_info_ = NULL;
  }
  ::memcpy(&playback_time_, &from.playback_time_,
    reinterpret_cast<char*>(&playback_frames_) -
    reinterpret_cast<char*>(&playback_time_) + sizeof(playback_frames_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoFileInfo)
}

void CDemoFileInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&game_info_, 0, reinterpret_cast<char*>(&playback_frames_) -
    reinterpret_cast<char*>(&game_info_) + sizeof(playback_frames_));
}

CDemoFileInfo::~CDemoFileInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoFileInfo)
  SharedDtor();
}

void CDemoFileInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete game_info_;
  }
}

void CDemoFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoFileInfo::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoFileInfo& CDemoFileInfo::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoFileInfo* CDemoFileInfo::New(::google::protobuf::Arena* arena) const {
  CDemoFileInfo* n = new CDemoFileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoFileInfo)
  if (has_game_info()) {
    GOOGLE_DCHECK(game_info_ != NULL);
    game_info_->::proto::dota::CGameInfo::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&playback_time_, 0, reinterpret_cast<char*>(&playback_frames_) -
      reinterpret_cast<char*>(&playback_time_) + sizeof(playback_frames_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoFileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float playback_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_playback_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playback_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playback_ticks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_playback_ticks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_ticks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playback_frames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_playback_frames();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CGameInfo game_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoFileInfo)
  return false;
#undef DO_
}

void CDemoFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float playback_time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->playback_time(), output);
  }

  // optional int32 playback_ticks = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playback_ticks(), output);
  }

  // optional int32 playback_frames = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playback_frames(), output);
  }

  // optional .proto.dota.CGameInfo game_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->game_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoFileInfo)
}

::google::protobuf::uint8* CDemoFileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float playback_time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->playback_time(), target);
  }

  // optional int32 playback_ticks = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playback_ticks(), target);
  }

  // optional int32 playback_frames = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playback_frames(), target);
  }

  // optional .proto.dota.CGameInfo game_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->game_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoFileInfo)
  return target;
}

size_t CDemoFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoFileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CGameInfo game_info = 4;
    if (has_game_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->game_info_);
    }

    // optional float playback_time = 1;
    if (has_playback_time()) {
      total_size += 1 + 4;
    }

    // optional int32 playback_ticks = 2;
    if (has_playback_ticks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playback_ticks());
    }

    // optional int32 playback_frames = 3;
    if (has_playback_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playback_frames());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoFileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoFileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoFileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoFileInfo)
    MergeFrom(*source);
  }
}

void CDemoFileInfo::MergeFrom(const CDemoFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_game_info()->::proto::dota::CGameInfo::MergeFrom(from.game_info());
    }
    if (cached_has_bits & 0x00000002u) {
      playback_time_ = from.playback_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      playback_ticks_ = from.playback_ticks_;
    }
    if (cached_has_bits & 0x00000008u) {
      playback_frames_ = from.playback_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFileInfo::CopyFrom(const CDemoFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFileInfo::IsInitialized() const {
  return true;
}

void CDemoFileInfo::Swap(CDemoFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoFileInfo::InternalSwap(CDemoFileInfo* other) {
  std::swap(game_info_, other->game_info_);
  std::swap(playback_time_, other->playback_time_);
  std::swap(playback_ticks_, other->playback_ticks_);
  std::swap(playback_frames_, other->playback_frames_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoFileInfo::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoFileInfo

// optional float playback_time = 1;
bool CDemoFileInfo::has_playback_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoFileInfo::set_has_playback_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoFileInfo::clear_has_playback_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoFileInfo::clear_playback_time() {
  playback_time_ = 0;
  clear_has_playback_time();
}
float CDemoFileInfo::playback_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileInfo.playback_time)
  return playback_time_;
}
void CDemoFileInfo::set_playback_time(float value) {
  set_has_playback_time();
  playback_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileInfo.playback_time)
}

// optional int32 playback_ticks = 2;
bool CDemoFileInfo::has_playback_ticks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDemoFileInfo::set_has_playback_ticks() {
  _has_bits_[0] |= 0x00000004u;
}
void CDemoFileInfo::clear_has_playback_ticks() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDemoFileInfo::clear_playback_ticks() {
  playback_ticks_ = 0;
  clear_has_playback_ticks();
}
::google::protobuf::int32 CDemoFileInfo::playback_ticks() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileInfo.playback_ticks)
  return playback_ticks_;
}
void CDemoFileInfo::set_playback_ticks(::google::protobuf::int32 value) {
  set_has_playback_ticks();
  playback_ticks_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileInfo.playback_ticks)
}

// optional int32 playback_frames = 3;
bool CDemoFileInfo::has_playback_frames() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDemoFileInfo::set_has_playback_frames() {
  _has_bits_[0] |= 0x00000008u;
}
void CDemoFileInfo::clear_has_playback_frames() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDemoFileInfo::clear_playback_frames() {
  playback_frames_ = 0;
  clear_has_playback_frames();
}
::google::protobuf::int32 CDemoFileInfo::playback_frames() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileInfo.playback_frames)
  return playback_frames_;
}
void CDemoFileInfo::set_playback_frames(::google::protobuf::int32 value) {
  set_has_playback_frames();
  playback_frames_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileInfo.playback_frames)
}

// optional .proto.dota.CGameInfo game_info = 4;
bool CDemoFileInfo::has_game_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoFileInfo::set_has_game_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoFileInfo::clear_has_game_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoFileInfo::clear_game_info() {
  if (game_info_ != NULL) game_info_->::proto::dota::CGameInfo::Clear();
  clear_has_game_info();
}
const ::proto::dota::CGameInfo& CDemoFileInfo::game_info() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileInfo.game_info)
  return game_info_ != NULL ? *game_info_
                         : *::proto::dota::CGameInfo::internal_default_instance();
}
::proto::dota::CGameInfo* CDemoFileInfo::mutable_game_info() {
  set_has_game_info();
  if (game_info_ == NULL) {
    game_info_ = new ::proto::dota::CGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileInfo.game_info)
  return game_info_;
}
::proto::dota::CGameInfo* CDemoFileInfo::release_game_info() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileInfo.game_info)
  clear_has_game_info();
  ::proto::dota::CGameInfo* temp = game_info_;
  game_info_ = NULL;
  return temp;
}
void CDemoFileInfo::set_allocated_game_info(::proto::dota::CGameInfo* game_info) {
  delete game_info_;
  game_info_ = game_info;
  if (game_info) {
    set_has_game_info();
  } else {
    clear_has_game_info();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileInfo.game_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoPacket::CDemoPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoPacket)
}
CDemoPacket::CDemoPacket(const CDemoPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoPacket)
}

void CDemoPacket::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDemoPacket::~CDemoPacket() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoPacket)
  SharedDtor();
}

void CDemoPacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoPacket::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoPacket& CDemoPacket::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoPacket* CDemoPacket::New(::google::protobuf::Arena* arena) const {
  CDemoPacket* n = new CDemoPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoPacket)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoPacket)
  return false;
#undef DO_
}

void CDemoPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoPacket)
}

::google::protobuf::uint8* CDemoPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoPacket)
  return target;
}

size_t CDemoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes data = 3;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoPacket)
    MergeFrom(*source);
  }
}

void CDemoPacket::MergeFrom(const CDemoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CDemoPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoPacket::CopyFrom(const CDemoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoPacket::IsInitialized() const {
  return true;
}

void CDemoPacket::Swap(CDemoPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoPacket::InternalSwap(CDemoPacket* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoPacket::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoPacket

// optional bytes data = 3;
bool CDemoPacket::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoPacket::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoPacket::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CDemoPacket::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoPacket.data)
  return data_.GetNoArena();
}
void CDemoPacket::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoPacket.data)
}
#if LANG_CXX11
void CDemoPacket::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoPacket.data)
}
#endif
void CDemoPacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoPacket.data)
}
void CDemoPacket::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoPacket.data)
}
::std::string* CDemoPacket::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoPacket::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoPacket.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoPacket.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoFullPacket::kStringTableFieldNumber;
const int CDemoFullPacket::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoFullPacket::CDemoFullPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoFullPacket)
}
CDemoFullPacket::CDemoFullPacket(const CDemoFullPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_string_table()) {
    string_table_ = new ::proto::dota::CDemoStringTables(*from.string_table_);
  } else {
    string_table_ = NULL;
  }
  if (from.has_packet()) {
    packet_ = new ::proto::dota::CDemoPacket(*from.packet_);
  } else {
    packet_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoFullPacket)
}

void CDemoFullPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&string_table_, 0, reinterpret_cast<char*>(&packet_) -
    reinterpret_cast<char*>(&string_table_) + sizeof(packet_));
}

CDemoFullPacket::~CDemoFullPacket() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoFullPacket)
  SharedDtor();
}

void CDemoFullPacket::SharedDtor() {
  if (this != internal_default_instance()) {
    delete string_table_;
  }
  if (this != internal_default_instance()) {
    delete packet_;
  }
}

void CDemoFullPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoFullPacket::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoFullPacket& CDemoFullPacket::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoFullPacket* CDemoFullPacket::New(::google::protobuf::Arena* arena) const {
  CDemoFullPacket* n = new CDemoFullPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoFullPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoFullPacket)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_string_table()) {
      GOOGLE_DCHECK(string_table_ != NULL);
      string_table_->::proto::dota::CDemoStringTables::Clear();
    }
    if (has_packet()) {
      GOOGLE_DCHECK(packet_ != NULL);
      packet_->::proto::dota::CDemoPacket::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoFullPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoFullPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDemoStringTables string_table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDemoPacket packet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoFullPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoFullPacket)
  return false;
#undef DO_
}

void CDemoFullPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoFullPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDemoStringTables string_table = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->string_table_, output);
  }

  // optional .proto.dota.CDemoPacket packet = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->packet_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoFullPacket)
}

::google::protobuf::uint8* CDemoFullPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoFullPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDemoStringTables string_table = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->string_table_, deterministic, target);
  }

  // optional .proto.dota.CDemoPacket packet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->packet_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoFullPacket)
  return target;
}

size_t CDemoFullPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoFullPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CDemoStringTables string_table = 1;
    if (has_string_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->string_table_);
    }

    // optional .proto.dota.CDemoPacket packet = 2;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->packet_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoFullPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoFullPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoFullPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoFullPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoFullPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoFullPacket)
    MergeFrom(*source);
  }
}

void CDemoFullPacket::MergeFrom(const CDemoFullPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoFullPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_string_table()->::proto::dota::CDemoStringTables::MergeFrom(from.string_table());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_packet()->::proto::dota::CDemoPacket::MergeFrom(from.packet());
    }
  }
}

void CDemoFullPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoFullPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFullPacket::CopyFrom(const CDemoFullPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoFullPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFullPacket::IsInitialized() const {
  return true;
}

void CDemoFullPacket::Swap(CDemoFullPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoFullPacket::InternalSwap(CDemoFullPacket* other) {
  std::swap(string_table_, other->string_table_);
  std::swap(packet_, other->packet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoFullPacket::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoFullPacket

// optional .proto.dota.CDemoStringTables string_table = 1;
bool CDemoFullPacket::has_string_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoFullPacket::set_has_string_table() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoFullPacket::clear_has_string_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoFullPacket::clear_string_table() {
  if (string_table_ != NULL) string_table_->::proto::dota::CDemoStringTables::Clear();
  clear_has_string_table();
}
const ::proto::dota::CDemoStringTables& CDemoFullPacket::string_table() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFullPacket.string_table)
  return string_table_ != NULL ? *string_table_
                         : *::proto::dota::CDemoStringTables::internal_default_instance();
}
::proto::dota::CDemoStringTables* CDemoFullPacket::mutable_string_table() {
  set_has_string_table();
  if (string_table_ == NULL) {
    string_table_ = new ::proto::dota::CDemoStringTables;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFullPacket.string_table)
  return string_table_;
}
::proto::dota::CDemoStringTables* CDemoFullPacket::release_string_table() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFullPacket.string_table)
  clear_has_string_table();
  ::proto::dota::CDemoStringTables* temp = string_table_;
  string_table_ = NULL;
  return temp;
}
void CDemoFullPacket::set_allocated_string_table(::proto::dota::CDemoStringTables* string_table) {
  delete string_table_;
  string_table_ = string_table;
  if (string_table) {
    set_has_string_table();
  } else {
    clear_has_string_table();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFullPacket.string_table)
}

// optional .proto.dota.CDemoPacket packet = 2;
bool CDemoFullPacket::has_packet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoFullPacket::set_has_packet() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoFullPacket::clear_has_packet() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoFullPacket::clear_packet() {
  if (packet_ != NULL) packet_->::proto::dota::CDemoPacket::Clear();
  clear_has_packet();
}
const ::proto::dota::CDemoPacket& CDemoFullPacket::packet() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFullPacket.packet)
  return packet_ != NULL ? *packet_
                         : *::proto::dota::CDemoPacket::internal_default_instance();
}
::proto::dota::CDemoPacket* CDemoFullPacket::mutable_packet() {
  set_has_packet();
  if (packet_ == NULL) {
    packet_ = new ::proto::dota::CDemoPacket;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFullPacket.packet)
  return packet_;
}
::proto::dota::CDemoPacket* CDemoFullPacket::release_packet() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFullPacket.packet)
  clear_has_packet();
  ::proto::dota::CDemoPacket* temp = packet_;
  packet_ = NULL;
  return temp;
}
void CDemoFullPacket::set_allocated_packet(::proto::dota::CDemoPacket* packet) {
  delete packet_;
  packet_ = packet;
  if (packet) {
    set_has_packet();
  } else {
    clear_has_packet();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFullPacket.packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoSaveGame::kDataFieldNumber;
const int CDemoSaveGame::kSteamIdFieldNumber;
const int CDemoSaveGame::kSignatureFieldNumber;
const int CDemoSaveGame::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoSaveGame::CDemoSaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoSaveGame)
}
CDemoSaveGame::CDemoSaveGame(const CDemoSaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoSaveGame)
}

void CDemoSaveGame::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(version_));
}

CDemoSaveGame::~CDemoSaveGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoSaveGame)
  SharedDtor();
}

void CDemoSaveGame::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoSaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSaveGame::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoSaveGame& CDemoSaveGame::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoSaveGame* CDemoSaveGame::New(::google::protobuf::Arena* arena) const {
  CDemoSaveGame* n = new CDemoSaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoSaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoSaveGame)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoSaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoSaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 signature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoSaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoSaveGame)
  return false;
#undef DO_
}

void CDemoSaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional fixed64 signature = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->signature(), output);
  }

  // optional int32 version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoSaveGame)
}

::google::protobuf::uint8* CDemoSaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional fixed64 signature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->signature(), target);
  }

  // optional int32 version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoSaveGame)
  return target;
}

size_t CDemoSaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoSaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 signature = 3;
    if (has_signature()) {
      total_size += 1 + 8;
    }

    // optional int32 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoSaveGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoSaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoSaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoSaveGame)
    MergeFrom(*source);
  }
}

void CDemoSaveGame::MergeFrom(const CDemoSaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      signature_ = from.signature_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoSaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSaveGame::CopyFrom(const CDemoSaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSaveGame::IsInitialized() const {
  return true;
}

void CDemoSaveGame::Swap(CDemoSaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSaveGame::InternalSwap(CDemoSaveGame* other) {
  data_.Swap(&other->data_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(signature_, other->signature_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoSaveGame::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoSaveGame

// optional bytes data = 1;
bool CDemoSaveGame::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoSaveGame::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoSaveGame::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoSaveGame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CDemoSaveGame::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSaveGame.data)
  return data_.GetNoArena();
}
void CDemoSaveGame::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSaveGame.data)
}
#if LANG_CXX11
void CDemoSaveGame::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoSaveGame.data)
}
#endif
void CDemoSaveGame::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoSaveGame.data)
}
void CDemoSaveGame::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoSaveGame.data)
}
::std::string* CDemoSaveGame::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoSaveGame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoSaveGame::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoSaveGame.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoSaveGame::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoSaveGame.data)
}

// optional fixed64 steam_id = 2;
bool CDemoSaveGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoSaveGame::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoSaveGame::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoSaveGame::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CDemoSaveGame::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSaveGame.steam_id)
  return steam_id_;
}
void CDemoSaveGame::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSaveGame.steam_id)
}

// optional fixed64 signature = 3;
bool CDemoSaveGame::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDemoSaveGame::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void CDemoSaveGame::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDemoSaveGame::clear_signature() {
  signature_ = GOOGLE_ULONGLONG(0);
  clear_has_signature();
}
::google::protobuf::uint64 CDemoSaveGame::signature() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSaveGame.signature)
  return signature_;
}
void CDemoSaveGame::set_signature(::google::protobuf::uint64 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSaveGame.signature)
}

// optional int32 version = 4;
bool CDemoSaveGame::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDemoSaveGame::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CDemoSaveGame::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDemoSaveGame::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 CDemoSaveGame::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSaveGame.version)
  return version_;
}
void CDemoSaveGame::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSaveGame.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoSyncTick::CDemoSyncTick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoSyncTick)
}
CDemoSyncTick::CDemoSyncTick(const CDemoSyncTick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoSyncTick)
}

void CDemoSyncTick::SharedCtor() {
  _cached_size_ = 0;
}

CDemoSyncTick::~CDemoSyncTick() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoSyncTick)
  SharedDtor();
}

void CDemoSyncTick::SharedDtor() {
}

void CDemoSyncTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSyncTick::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoSyncTick& CDemoSyncTick::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoSyncTick* CDemoSyncTick::New(::google::protobuf::Arena* arena) const {
  CDemoSyncTick* n = new CDemoSyncTick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoSyncTick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoSyncTick)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoSyncTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoSyncTick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoSyncTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoSyncTick)
  return false;
#undef DO_
}

void CDemoSyncTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoSyncTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoSyncTick)
}

::google::protobuf::uint8* CDemoSyncTick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoSyncTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoSyncTick)
  return target;
}

size_t CDemoSyncTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoSyncTick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSyncTick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoSyncTick)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoSyncTick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoSyncTick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoSyncTick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoSyncTick)
    MergeFrom(*source);
  }
}

void CDemoSyncTick::MergeFrom(const CDemoSyncTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoSyncTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDemoSyncTick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoSyncTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSyncTick::CopyFrom(const CDemoSyncTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoSyncTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSyncTick::IsInitialized() const {
  return true;
}

void CDemoSyncTick::Swap(CDemoSyncTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSyncTick::InternalSwap(CDemoSyncTick* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoSyncTick::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoSyncTick

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoConsoleCmd::kCmdstringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoConsoleCmd::CDemoConsoleCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoConsoleCmd)
}
CDemoConsoleCmd::CDemoConsoleCmd(const CDemoConsoleCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmdstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cmdstring()) {
    cmdstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdstring_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoConsoleCmd)
}

void CDemoConsoleCmd::SharedCtor() {
  _cached_size_ = 0;
  cmdstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDemoConsoleCmd::~CDemoConsoleCmd() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoConsoleCmd)
  SharedDtor();
}

void CDemoConsoleCmd::SharedDtor() {
  cmdstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoConsoleCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoConsoleCmd::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoConsoleCmd& CDemoConsoleCmd::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoConsoleCmd* CDemoConsoleCmd::New(::google::protobuf::Arena* arena) const {
  CDemoConsoleCmd* n = new CDemoConsoleCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoConsoleCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoConsoleCmd)
  if (has_cmdstring()) {
    GOOGLE_DCHECK(!cmdstring_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cmdstring_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoConsoleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoConsoleCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmdstring = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdstring().data(), this->cmdstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoConsoleCmd.cmdstring");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoConsoleCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoConsoleCmd)
  return false;
#undef DO_
}

void CDemoConsoleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoConsoleCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cmdstring = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdstring().data(), this->cmdstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoConsoleCmd.cmdstring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmdstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoConsoleCmd)
}

::google::protobuf::uint8* CDemoConsoleCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoConsoleCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cmdstring = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdstring().data(), this->cmdstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoConsoleCmd.cmdstring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmdstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoConsoleCmd)
  return target;
}

size_t CDemoConsoleCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoConsoleCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string cmdstring = 1;
  if (has_cmdstring()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmdstring());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoConsoleCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoConsoleCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoConsoleCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoConsoleCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoConsoleCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoConsoleCmd)
    MergeFrom(*source);
  }
}

void CDemoConsoleCmd::MergeFrom(const CDemoConsoleCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoConsoleCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmdstring()) {
    set_has_cmdstring();
    cmdstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdstring_);
  }
}

void CDemoConsoleCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoConsoleCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoConsoleCmd::CopyFrom(const CDemoConsoleCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoConsoleCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoConsoleCmd::IsInitialized() const {
  return true;
}

void CDemoConsoleCmd::Swap(CDemoConsoleCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoConsoleCmd::InternalSwap(CDemoConsoleCmd* other) {
  cmdstring_.Swap(&other->cmdstring_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoConsoleCmd::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoConsoleCmd

// optional string cmdstring = 1;
bool CDemoConsoleCmd::has_cmdstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoConsoleCmd::set_has_cmdstring() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoConsoleCmd::clear_has_cmdstring() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoConsoleCmd::clear_cmdstring() {
  cmdstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmdstring();
}
const ::std::string& CDemoConsoleCmd::cmdstring() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoConsoleCmd.cmdstring)
  return cmdstring_.GetNoArena();
}
void CDemoConsoleCmd::set_cmdstring(const ::std::string& value) {
  set_has_cmdstring();
  cmdstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoConsoleCmd.cmdstring)
}
#if LANG_CXX11
void CDemoConsoleCmd::set_cmdstring(::std::string&& value) {
  set_has_cmdstring();
  cmdstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoConsoleCmd.cmdstring)
}
#endif
void CDemoConsoleCmd::set_cmdstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmdstring();
  cmdstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoConsoleCmd.cmdstring)
}
void CDemoConsoleCmd::set_cmdstring(const char* value, size_t size) {
  set_has_cmdstring();
  cmdstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoConsoleCmd.cmdstring)
}
::std::string* CDemoConsoleCmd::mutable_cmdstring() {
  set_has_cmdstring();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoConsoleCmd.cmdstring)
  return cmdstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoConsoleCmd::release_cmdstring() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoConsoleCmd.cmdstring)
  clear_has_cmdstring();
  return cmdstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoConsoleCmd::set_allocated_cmdstring(::std::string* cmdstring) {
  if (cmdstring != NULL) {
    set_has_cmdstring();
  } else {
    clear_has_cmdstring();
  }
  cmdstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdstring);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoConsoleCmd.cmdstring)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoSendTables::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoSendTables::CDemoSendTables()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoSendTables)
}
CDemoSendTables::CDemoSendTables(const CDemoSendTables& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoSendTables)
}

void CDemoSendTables::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDemoSendTables::~CDemoSendTables() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoSendTables)
  SharedDtor();
}

void CDemoSendTables::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoSendTables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSendTables::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoSendTables& CDemoSendTables::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoSendTables* CDemoSendTables::New(::google::protobuf::Arena* arena) const {
  CDemoSendTables* n = new CDemoSendTables;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoSendTables::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoSendTables)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoSendTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoSendTables)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoSendTables)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoSendTables)
  return false;
#undef DO_
}

void CDemoSendTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoSendTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoSendTables)
}

::google::protobuf::uint8* CDemoSendTables::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoSendTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoSendTables)
  return target;
}

size_t CDemoSendTables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoSendTables)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSendTables::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoSendTables)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoSendTables* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoSendTables>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoSendTables)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoSendTables)
    MergeFrom(*source);
  }
}

void CDemoSendTables::MergeFrom(const CDemoSendTables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoSendTables)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CDemoSendTables::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoSendTables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSendTables::CopyFrom(const CDemoSendTables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoSendTables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSendTables::IsInitialized() const {
  return true;
}

void CDemoSendTables::Swap(CDemoSendTables* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSendTables::InternalSwap(CDemoSendTables* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoSendTables::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoSendTables

// optional bytes data = 1;
bool CDemoSendTables::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoSendTables::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoSendTables::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoSendTables::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CDemoSendTables::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSendTables.data)
  return data_.GetNoArena();
}
void CDemoSendTables::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSendTables.data)
}
#if LANG_CXX11
void CDemoSendTables::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoSendTables.data)
}
#endif
void CDemoSendTables::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoSendTables.data)
}
void CDemoSendTables::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoSendTables.data)
}
::std::string* CDemoSendTables::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoSendTables.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoSendTables::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoSendTables.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoSendTables::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoSendTables.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoClassInfo_class_t::kClassIdFieldNumber;
const int CDemoClassInfo_class_t::kNetworkNameFieldNumber;
const int CDemoClassInfo_class_t::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoClassInfo_class_t::CDemoClassInfo_class_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoClassInfo.class_t)
}
CDemoClassInfo_class_t::CDemoClassInfo_class_t(const CDemoClassInfo_class_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_name()) {
    network_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  class_id_ = from.class_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoClassInfo.class_t)
}

void CDemoClassInfo_class_t::SharedCtor() {
  _cached_size_ = 0;
  network_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_ = 0;
}

CDemoClassInfo_class_t::~CDemoClassInfo_class_t() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoClassInfo.class_t)
  SharedDtor();
}

void CDemoClassInfo_class_t::SharedDtor() {
  network_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoClassInfo_class_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoClassInfo_class_t::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoClassInfo_class_t& CDemoClassInfo_class_t::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoClassInfo_class_t* CDemoClassInfo_class_t::New(::google::protobuf::Arena* arena) const {
  CDemoClassInfo_class_t* n = new CDemoClassInfo_class_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoClassInfo_class_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoClassInfo.class_t)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_network_name()) {
      GOOGLE_DCHECK(!network_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*network_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_table_name()) {
      GOOGLE_DCHECK(!table_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*table_name_.UnsafeRawStringPointer())->clear();
    }
  }
  class_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoClassInfo_class_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoClassInfo.class_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 class_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_class_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string network_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoClassInfo.class_t.network_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoClassInfo.class_t.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoClassInfo.class_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoClassInfo.class_t)
  return false;
#undef DO_
}

void CDemoClassInfo_class_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoClassInfo.class_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 class_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  // optional string network_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoClassInfo.class_t.network_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->network_name(), output);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoClassInfo.class_t.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoClassInfo.class_t)
}

::google::protobuf::uint8* CDemoClassInfo_class_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoClassInfo.class_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 class_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  // optional string network_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoClassInfo.class_t.network_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network_name(), target);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoClassInfo.class_t.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoClassInfo.class_t)
  return target;
}

size_t CDemoClassInfo_class_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoClassInfo.class_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string network_name = 2;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

    // optional string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoClassInfo_class_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoClassInfo.class_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoClassInfo_class_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoClassInfo_class_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoClassInfo.class_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoClassInfo.class_t)
    MergeFrom(*source);
  }
}

void CDemoClassInfo_class_t::MergeFrom(const CDemoClassInfo_class_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoClassInfo.class_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_network_name();
      network_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      class_id_ = from.class_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoClassInfo_class_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoClassInfo.class_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoClassInfo_class_t::CopyFrom(const CDemoClassInfo_class_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoClassInfo.class_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoClassInfo_class_t::IsInitialized() const {
  return true;
}

void CDemoClassInfo_class_t::Swap(CDemoClassInfo_class_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoClassInfo_class_t::InternalSwap(CDemoClassInfo_class_t* other) {
  network_name_.Swap(&other->network_name_);
  table_name_.Swap(&other->table_name_);
  std::swap(class_id_, other->class_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoClassInfo_class_t::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoClassInfo_class_t

// optional int32 class_id = 1;
bool CDemoClassInfo_class_t::has_class_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDemoClassInfo_class_t::set_has_class_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDemoClassInfo_class_t::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDemoClassInfo_class_t::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
::google::protobuf::int32 CDemoClassInfo_class_t::class_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoClassInfo.class_t.class_id)
  return class_id_;
}
void CDemoClassInfo_class_t::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoClassInfo.class_t.class_id)
}

// optional string network_name = 2;
bool CDemoClassInfo_class_t::has_network_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoClassInfo_class_t::set_has_network_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoClassInfo_class_t::clear_has_network_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoClassInfo_class_t::clear_network_name() {
  network_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network_name();
}
const ::std::string& CDemoClassInfo_class_t::network_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoClassInfo.class_t.network_name)
  return network_name_.GetNoArena();
}
void CDemoClassInfo_class_t::set_network_name(const ::std::string& value) {
  set_has_network_name();
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoClassInfo.class_t.network_name)
}
#if LANG_CXX11
void CDemoClassInfo_class_t::set_network_name(::std::string&& value) {
  set_has_network_name();
  network_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoClassInfo.class_t.network_name)
}
#endif
void CDemoClassInfo_class_t::set_network_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_network_name();
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoClassInfo.class_t.network_name)
}
void CDemoClassInfo_class_t::set_network_name(const char* value, size_t size) {
  set_has_network_name();
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoClassInfo.class_t.network_name)
}
::std::string* CDemoClassInfo_class_t::mutable_network_name() {
  set_has_network_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoClassInfo.class_t.network_name)
  return network_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoClassInfo_class_t::release_network_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoClassInfo.class_t.network_name)
  clear_has_network_name();
  return network_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoClassInfo_class_t::set_allocated_network_name(::std::string* network_name) {
  if (network_name != NULL) {
    set_has_network_name();
  } else {
    clear_has_network_name();
  }
  network_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoClassInfo.class_t.network_name)
}

// optional string table_name = 3;
bool CDemoClassInfo_class_t::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoClassInfo_class_t::set_has_table_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoClassInfo_class_t::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoClassInfo_class_t::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
const ::std::string& CDemoClassInfo_class_t::table_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoClassInfo.class_t.table_name)
  return table_name_.GetNoArena();
}
void CDemoClassInfo_class_t::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoClassInfo.class_t.table_name)
}
#if LANG_CXX11
void CDemoClassInfo_class_t::set_table_name(::std::string&& value) {
  set_has_table_name();
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoClassInfo.class_t.table_name)
}
#endif
void CDemoClassInfo_class_t::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoClassInfo.class_t.table_name)
}
void CDemoClassInfo_class_t::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoClassInfo.class_t.table_name)
}
::std::string* CDemoClassInfo_class_t::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoClassInfo.class_t.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoClassInfo_class_t::release_table_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoClassInfo.class_t.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoClassInfo_class_t::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoClassInfo.class_t.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoClassInfo::kClassesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoClassInfo::CDemoClassInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoClassInfo)
}
CDemoClassInfo::CDemoClassInfo(const CDemoClassInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      classes_(from.classes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoClassInfo)
}

void CDemoClassInfo::SharedCtor() {
  _cached_size_ = 0;
}

CDemoClassInfo::~CDemoClassInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoClassInfo)
  SharedDtor();
}

void CDemoClassInfo::SharedDtor() {
}

void CDemoClassInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoClassInfo::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoClassInfo& CDemoClassInfo::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoClassInfo* CDemoClassInfo::New(::google::protobuf::Arena* arena) const {
  CDemoClassInfo* n = new CDemoClassInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoClassInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoClassInfo)
  classes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoClassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoClassInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoClassInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoClassInfo)
  return false;
#undef DO_
}

void CDemoClassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoClassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->classes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoClassInfo)
}

::google::protobuf::uint8* CDemoClassInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoClassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->classes(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoClassInfo)
  return target;
}

size_t CDemoClassInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoClassInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
  {
    unsigned int count = this->classes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->classes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoClassInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoClassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoClassInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoClassInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoClassInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoClassInfo)
    MergeFrom(*source);
  }
}

void CDemoClassInfo::MergeFrom(const CDemoClassInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoClassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
}

void CDemoClassInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoClassInfo::CopyFrom(const CDemoClassInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoClassInfo::IsInitialized() const {
  return true;
}

void CDemoClassInfo::Swap(CDemoClassInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoClassInfo::InternalSwap(CDemoClassInfo* other) {
  classes_.InternalSwap(&other->classes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoClassInfo::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoClassInfo

// repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
int CDemoClassInfo::classes_size() const {
  return classes_.size();
}
void CDemoClassInfo::clear_classes() {
  classes_.Clear();
}
const ::proto::dota::CDemoClassInfo_class_t& CDemoClassInfo::classes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoClassInfo.classes)
  return classes_.Get(index);
}
::proto::dota::CDemoClassInfo_class_t* CDemoClassInfo::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoClassInfo.classes)
  return classes_.Mutable(index);
}
::proto::dota::CDemoClassInfo_class_t* CDemoClassInfo::add_classes() {
  // @@protoc_insertion_point(field_add:proto.dota.CDemoClassInfo.classes)
  return classes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoClassInfo_class_t >*
CDemoClassInfo::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoClassInfo.classes)
  return &classes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoClassInfo_class_t >&
CDemoClassInfo::classes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoClassInfo.classes)
  return classes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoCustomData::kCallbackIndexFieldNumber;
const int CDemoCustomData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoCustomData::CDemoCustomData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoCustomData)
}
CDemoCustomData::CDemoCustomData(const CDemoCustomData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  callback_index_ = from.callback_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoCustomData)
}

void CDemoCustomData::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_index_ = 0;
}

CDemoCustomData::~CDemoCustomData() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoCustomData)
  SharedDtor();
}

void CDemoCustomData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoCustomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoCustomData::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoCustomData& CDemoCustomData::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoCustomData* CDemoCustomData::New(::google::protobuf::Arena* arena) const {
  CDemoCustomData* n = new CDemoCustomData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoCustomData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoCustomData)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  callback_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoCustomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoCustomData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_callback_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoCustomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoCustomData)
  return false;
#undef DO_
}

void CDemoCustomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoCustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 callback_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_index(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoCustomData)
}

::google::protobuf::uint8* CDemoCustomData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoCustomData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 callback_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_index(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoCustomData)
  return target;
}

size_t CDemoCustomData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoCustomData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 callback_index = 1;
    if (has_callback_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoCustomData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoCustomData)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoCustomData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoCustomData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoCustomData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoCustomData)
    MergeFrom(*source);
  }
}

void CDemoCustomData::MergeFrom(const CDemoCustomData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoCustomData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      callback_index_ = from.callback_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoCustomData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoCustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoCustomData::CopyFrom(const CDemoCustomData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoCustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoCustomData::IsInitialized() const {
  return true;
}

void CDemoCustomData::Swap(CDemoCustomData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoCustomData::InternalSwap(CDemoCustomData* other) {
  data_.Swap(&other->data_);
  std::swap(callback_index_, other->callback_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoCustomData::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoCustomData

// optional int32 callback_index = 1;
bool CDemoCustomData::has_callback_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoCustomData::set_has_callback_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoCustomData::clear_has_callback_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoCustomData::clear_callback_index() {
  callback_index_ = 0;
  clear_has_callback_index();
}
::google::protobuf::int32 CDemoCustomData::callback_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoCustomData.callback_index)
  return callback_index_;
}
void CDemoCustomData::set_callback_index(::google::protobuf::int32 value) {
  set_has_callback_index();
  callback_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoCustomData.callback_index)
}

// optional bytes data = 2;
bool CDemoCustomData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoCustomData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoCustomData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoCustomData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CDemoCustomData::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoCustomData.data)
  return data_.GetNoArena();
}
void CDemoCustomData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoCustomData.data)
}
#if LANG_CXX11
void CDemoCustomData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoCustomData.data)
}
#endif
void CDemoCustomData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoCustomData.data)
}
void CDemoCustomData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoCustomData.data)
}
::std::string* CDemoCustomData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoCustomData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoCustomData::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoCustomData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoCustomData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoCustomData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoCustomDataCallbacks::kSaveIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoCustomDataCallbacks::CDemoCustomDataCallbacks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoCustomDataCallbacks)
}
CDemoCustomDataCallbacks::CDemoCustomDataCallbacks(const CDemoCustomDataCallbacks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      save_id_(from.save_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoCustomDataCallbacks)
}

void CDemoCustomDataCallbacks::SharedCtor() {
  _cached_size_ = 0;
}

CDemoCustomDataCallbacks::~CDemoCustomDataCallbacks() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoCustomDataCallbacks)
  SharedDtor();
}

void CDemoCustomDataCallbacks::SharedDtor() {
}

void CDemoCustomDataCallbacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoCustomDataCallbacks::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoCustomDataCallbacks& CDemoCustomDataCallbacks::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoCustomDataCallbacks* CDemoCustomDataCallbacks::New(::google::protobuf::Arena* arena) const {
  CDemoCustomDataCallbacks* n = new CDemoCustomDataCallbacks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoCustomDataCallbacks::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoCustomDataCallbacks)
  save_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoCustomDataCallbacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoCustomDataCallbacks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string save_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_save_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_id(this->save_id_size() - 1).data(),
            this->save_id(this->save_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoCustomDataCallbacks.save_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoCustomDataCallbacks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoCustomDataCallbacks)
  return false;
#undef DO_
}

void CDemoCustomDataCallbacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoCustomDataCallbacks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string save_id = 1;
  for (int i = 0, n = this->save_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_id(i).data(), this->save_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoCustomDataCallbacks.save_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->save_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoCustomDataCallbacks)
}

::google::protobuf::uint8* CDemoCustomDataCallbacks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoCustomDataCallbacks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string save_id = 1;
  for (int i = 0, n = this->save_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_id(i).data(), this->save_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoCustomDataCallbacks.save_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->save_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoCustomDataCallbacks)
  return target;
}

size_t CDemoCustomDataCallbacks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoCustomDataCallbacks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string save_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->save_id_size());
  for (int i = 0, n = this->save_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->save_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoCustomDataCallbacks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoCustomDataCallbacks)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoCustomDataCallbacks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoCustomDataCallbacks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoCustomDataCallbacks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoCustomDataCallbacks)
    MergeFrom(*source);
  }
}

void CDemoCustomDataCallbacks::MergeFrom(const CDemoCustomDataCallbacks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoCustomDataCallbacks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  save_id_.MergeFrom(from.save_id_);
}

void CDemoCustomDataCallbacks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoCustomDataCallbacks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoCustomDataCallbacks::CopyFrom(const CDemoCustomDataCallbacks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoCustomDataCallbacks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoCustomDataCallbacks::IsInitialized() const {
  return true;
}

void CDemoCustomDataCallbacks::Swap(CDemoCustomDataCallbacks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoCustomDataCallbacks::InternalSwap(CDemoCustomDataCallbacks* other) {
  save_id_.InternalSwap(&other->save_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoCustomDataCallbacks::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoCustomDataCallbacks

// repeated string save_id = 1;
int CDemoCustomDataCallbacks::save_id_size() const {
  return save_id_.size();
}
void CDemoCustomDataCallbacks::clear_save_id() {
  save_id_.Clear();
}
const ::std::string& CDemoCustomDataCallbacks::save_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoCustomDataCallbacks.save_id)
  return save_id_.Get(index);
}
::std::string* CDemoCustomDataCallbacks::mutable_save_id(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoCustomDataCallbacks.save_id)
  return save_id_.Mutable(index);
}
void CDemoCustomDataCallbacks::set_save_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDemoCustomDataCallbacks.save_id)
  save_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CDemoCustomDataCallbacks::set_save_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDemoCustomDataCallbacks.save_id)
  save_id_.Mutable(index)->assign(std::move(value));
}
#endif
void CDemoCustomDataCallbacks::set_save_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  save_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoCustomDataCallbacks.save_id)
}
void CDemoCustomDataCallbacks::set_save_id(int index, const char* value, size_t size) {
  save_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoCustomDataCallbacks.save_id)
}
::std::string* CDemoCustomDataCallbacks::add_save_id() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDemoCustomDataCallbacks.save_id)
  return save_id_.Add();
}
void CDemoCustomDataCallbacks::add_save_id(const ::std::string& value) {
  save_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDemoCustomDataCallbacks.save_id)
}
#if LANG_CXX11
void CDemoCustomDataCallbacks::add_save_id(::std::string&& value) {
  save_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDemoCustomDataCallbacks.save_id)
}
#endif
void CDemoCustomDataCallbacks::add_save_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  save_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDemoCustomDataCallbacks.save_id)
}
void CDemoCustomDataCallbacks::add_save_id(const char* value, size_t size) {
  save_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDemoCustomDataCallbacks.save_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDemoCustomDataCallbacks::save_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoCustomDataCallbacks.save_id)
  return save_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CDemoCustomDataCallbacks::mutable_save_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoCustomDataCallbacks.save_id)
  return &save_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoStringTables_items_t::kStrFieldNumber;
const int CDemoStringTables_items_t::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoStringTables_items_t::CDemoStringTables_items_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoStringTables.items_t)
}
CDemoStringTables_items_t::CDemoStringTables_items_t(const CDemoStringTables_items_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str()) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoStringTables.items_t)
}

void CDemoStringTables_items_t::SharedCtor() {
  _cached_size_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDemoStringTables_items_t::~CDemoStringTables_items_t() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoStringTables.items_t)
  SharedDtor();
}

void CDemoStringTables_items_t::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoStringTables_items_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStringTables_items_t::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoStringTables_items_t& CDemoStringTables_items_t::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoStringTables_items_t* CDemoStringTables_items_t::New(::google::protobuf::Arena* arena) const {
  CDemoStringTables_items_t* n = new CDemoStringTables_items_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoStringTables_items_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoStringTables.items_t)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_str()) {
      GOOGLE_DCHECK(!str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoStringTables_items_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoStringTables.items_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoStringTables.items_t.str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoStringTables.items_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoStringTables.items_t)
  return false;
#undef DO_
}

void CDemoStringTables_items_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoStringTables.items_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoStringTables.items_t.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoStringTables.items_t)
}

::google::protobuf::uint8* CDemoStringTables_items_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoStringTables.items_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoStringTables.items_t.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoStringTables.items_t)
  return target;
}

size_t CDemoStringTables_items_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoStringTables.items_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStringTables_items_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoStringTables.items_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoStringTables_items_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoStringTables_items_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoStringTables.items_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoStringTables.items_t)
    MergeFrom(*source);
  }
}

void CDemoStringTables_items_t::MergeFrom(const CDemoStringTables_items_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoStringTables.items_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void CDemoStringTables_items_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoStringTables.items_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables_items_t::CopyFrom(const CDemoStringTables_items_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoStringTables.items_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables_items_t::IsInitialized() const {
  return true;
}

void CDemoStringTables_items_t::Swap(CDemoStringTables_items_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStringTables_items_t::InternalSwap(CDemoStringTables_items_t* other) {
  str_.Swap(&other->str_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoStringTables_items_t::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoStringTables_items_t

// optional string str = 1;
bool CDemoStringTables_items_t::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoStringTables_items_t::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoStringTables_items_t::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoStringTables_items_t::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
const ::std::string& CDemoStringTables_items_t::str() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.items_t.str)
  return str_.GetNoArena();
}
void CDemoStringTables_items_t::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoStringTables.items_t.str)
}
#if LANG_CXX11
void CDemoStringTables_items_t::set_str(::std::string&& value) {
  set_has_str();
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoStringTables.items_t.str)
}
#endif
void CDemoStringTables_items_t::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoStringTables.items_t.str)
}
void CDemoStringTables_items_t::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoStringTables.items_t.str)
}
::std::string* CDemoStringTables_items_t::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.items_t.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoStringTables_items_t::release_str() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoStringTables.items_t.str)
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoStringTables_items_t::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoStringTables.items_t.str)
}

// optional bytes data = 2;
bool CDemoStringTables_items_t::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoStringTables_items_t::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoStringTables_items_t::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoStringTables_items_t::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CDemoStringTables_items_t::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.items_t.data)
  return data_.GetNoArena();
}
void CDemoStringTables_items_t::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoStringTables.items_t.data)
}
#if LANG_CXX11
void CDemoStringTables_items_t::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoStringTables.items_t.data)
}
#endif
void CDemoStringTables_items_t::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoStringTables.items_t.data)
}
void CDemoStringTables_items_t::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoStringTables.items_t.data)
}
::std::string* CDemoStringTables_items_t::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.items_t.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoStringTables_items_t::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoStringTables.items_t.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoStringTables_items_t::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoStringTables.items_t.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoStringTables_table_t::kTableNameFieldNumber;
const int CDemoStringTables_table_t::kItemsFieldNumber;
const int CDemoStringTables_table_t::kItemsClientsideFieldNumber;
const int CDemoStringTables_table_t::kTableFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoStringTables_table_t::CDemoStringTables_table_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoStringTables.table_t)
}
CDemoStringTables_table_t::CDemoStringTables_table_t(const CDemoStringTables_table_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_),
      items_clientside_(from.items_clientside_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  table_flags_ = from.table_flags_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoStringTables.table_t)
}

void CDemoStringTables_table_t::SharedCtor() {
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_flags_ = 0;
}

CDemoStringTables_table_t::~CDemoStringTables_table_t() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoStringTables.table_t)
  SharedDtor();
}

void CDemoStringTables_table_t::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoStringTables_table_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStringTables_table_t::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoStringTables_table_t& CDemoStringTables_table_t::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoStringTables_table_t* CDemoStringTables_table_t::New(::google::protobuf::Arena* arena) const {
  CDemoStringTables_table_t* n = new CDemoStringTables_table_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoStringTables_table_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoStringTables.table_t)
  items_.Clear();
  items_clientside_.Clear();
  if (has_table_name()) {
    GOOGLE_DCHECK(!table_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*table_name_.UnsafeRawStringPointer())->clear();
  }
  table_flags_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoStringTables_table_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoStringTables.table_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDemoStringTables.table_t.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDemoStringTables.items_t items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items_clientside()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 table_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_table_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoStringTables.table_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoStringTables.table_t)
  return false;
#undef DO_
}

void CDemoStringTables_table_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoStringTables.table_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoStringTables.table_t.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .proto.dota.CDemoStringTables.items_t items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
  for (unsigned int i = 0, n = this->items_clientside_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items_clientside(i), output);
  }

  // optional int32 table_flags = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoStringTables.table_t)
}

::google::protobuf::uint8* CDemoStringTables_table_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoStringTables.table_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDemoStringTables.table_t.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .proto.dota.CDemoStringTables.items_t items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), deterministic, target);
  }

  // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
  for (unsigned int i = 0, n = this->items_clientside_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->items_clientside(i), deterministic, target);
  }

  // optional int32 table_flags = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoStringTables.table_t)
  return target;
}

size_t CDemoStringTables_table_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoStringTables.table_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDemoStringTables.items_t items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
  {
    unsigned int count = this->items_clientside_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items_clientside(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional int32 table_flags = 4;
    if (has_table_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStringTables_table_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoStringTables.table_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoStringTables_table_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoStringTables_table_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoStringTables.table_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoStringTables.table_t)
    MergeFrom(*source);
  }
}

void CDemoStringTables_table_t::MergeFrom(const CDemoStringTables_table_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoStringTables.table_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  items_clientside_.MergeFrom(from.items_clientside_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      table_flags_ = from.table_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoStringTables_table_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoStringTables.table_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables_table_t::CopyFrom(const CDemoStringTables_table_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoStringTables.table_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables_table_t::IsInitialized() const {
  return true;
}

void CDemoStringTables_table_t::Swap(CDemoStringTables_table_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStringTables_table_t::InternalSwap(CDemoStringTables_table_t* other) {
  items_.InternalSwap(&other->items_);
  items_clientside_.InternalSwap(&other->items_clientside_);
  table_name_.Swap(&other->table_name_);
  std::swap(table_flags_, other->table_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoStringTables_table_t::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoStringTables_table_t

// optional string table_name = 1;
bool CDemoStringTables_table_t::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoStringTables_table_t::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoStringTables_table_t::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoStringTables_table_t::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
const ::std::string& CDemoStringTables_table_t::table_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.table_t.table_name)
  return table_name_.GetNoArena();
}
void CDemoStringTables_table_t::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoStringTables.table_t.table_name)
}
#if LANG_CXX11
void CDemoStringTables_table_t::set_table_name(::std::string&& value) {
  set_has_table_name();
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoStringTables.table_t.table_name)
}
#endif
void CDemoStringTables_table_t::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoStringTables.table_t.table_name)
}
void CDemoStringTables_table_t::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoStringTables.table_t.table_name)
}
::std::string* CDemoStringTables_table_t::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.table_t.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoStringTables_table_t::release_table_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoStringTables.table_t.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoStringTables_table_t::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoStringTables.table_t.table_name)
}

// repeated .proto.dota.CDemoStringTables.items_t items = 2;
int CDemoStringTables_table_t::items_size() const {
  return items_.size();
}
void CDemoStringTables_table_t::clear_items() {
  items_.Clear();
}
const ::proto::dota::CDemoStringTables_items_t& CDemoStringTables_table_t::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.table_t.items)
  return items_.Get(index);
}
::proto::dota::CDemoStringTables_items_t* CDemoStringTables_table_t::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.table_t.items)
  return items_.Mutable(index);
}
::proto::dota::CDemoStringTables_items_t* CDemoStringTables_table_t::add_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CDemoStringTables.table_t.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >*
CDemoStringTables_table_t::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoStringTables.table_t.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >&
CDemoStringTables_table_t::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoStringTables.table_t.items)
  return items_;
}

// repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
int CDemoStringTables_table_t::items_clientside_size() const {
  return items_clientside_.size();
}
void CDemoStringTables_table_t::clear_items_clientside() {
  items_clientside_.Clear();
}
const ::proto::dota::CDemoStringTables_items_t& CDemoStringTables_table_t::items_clientside(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.table_t.items_clientside)
  return items_clientside_.Get(index);
}
::proto::dota::CDemoStringTables_items_t* CDemoStringTables_table_t::mutable_items_clientside(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.table_t.items_clientside)
  return items_clientside_.Mutable(index);
}
::proto::dota::CDemoStringTables_items_t* CDemoStringTables_table_t::add_items_clientside() {
  // @@protoc_insertion_point(field_add:proto.dota.CDemoStringTables.table_t.items_clientside)
  return items_clientside_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >*
CDemoStringTables_table_t::mutable_items_clientside() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoStringTables.table_t.items_clientside)
  return &items_clientside_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >&
CDemoStringTables_table_t::items_clientside() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoStringTables.table_t.items_clientside)
  return items_clientside_;
}

// optional int32 table_flags = 4;
bool CDemoStringTables_table_t::has_table_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoStringTables_table_t::set_has_table_flags() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoStringTables_table_t::clear_has_table_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoStringTables_table_t::clear_table_flags() {
  table_flags_ = 0;
  clear_has_table_flags();
}
::google::protobuf::int32 CDemoStringTables_table_t::table_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.table_t.table_flags)
  return table_flags_;
}
void CDemoStringTables_table_t::set_table_flags(::google::protobuf::int32 value) {
  set_has_table_flags();
  table_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoStringTables.table_t.table_flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoStringTables::kTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoStringTables::CDemoStringTables()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoStringTables)
}
CDemoStringTables::CDemoStringTables(const CDemoStringTables& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoStringTables)
}

void CDemoStringTables::SharedCtor() {
  _cached_size_ = 0;
}

CDemoStringTables::~CDemoStringTables() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoStringTables)
  SharedDtor();
}

void CDemoStringTables::SharedDtor() {
}

void CDemoStringTables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStringTables::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoStringTables& CDemoStringTables::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoStringTables* CDemoStringTables::New(::google::protobuf::Arena* arena) const {
  CDemoStringTables* n = new CDemoStringTables;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoStringTables::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoStringTables)
  tables_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoStringTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoStringTables)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoStringTables)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoStringTables)
  return false;
#undef DO_
}

void CDemoStringTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoStringTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
  for (unsigned int i = 0, n = this->tables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tables(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoStringTables)
}

::google::protobuf::uint8* CDemoStringTables::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoStringTables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
  for (unsigned int i = 0, n = this->tables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tables(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoStringTables)
  return target;
}

size_t CDemoStringTables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoStringTables)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
  {
    unsigned int count = this->tables_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tables(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStringTables::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoStringTables)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoStringTables* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoStringTables>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoStringTables)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoStringTables)
    MergeFrom(*source);
  }
}

void CDemoStringTables::MergeFrom(const CDemoStringTables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoStringTables)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
}

void CDemoStringTables::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoStringTables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables::CopyFrom(const CDemoStringTables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoStringTables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables::IsInitialized() const {
  return true;
}

void CDemoStringTables::Swap(CDemoStringTables* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStringTables::InternalSwap(CDemoStringTables* other) {
  tables_.InternalSwap(&other->tables_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoStringTables::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoStringTables

// repeated .proto.dota.CDemoStringTables.table_t tables = 1;
int CDemoStringTables::tables_size() const {
  return tables_.size();
}
void CDemoStringTables::clear_tables() {
  tables_.Clear();
}
const ::proto::dota::CDemoStringTables_table_t& CDemoStringTables::tables(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.tables)
  return tables_.Get(index);
}
::proto::dota::CDemoStringTables_table_t* CDemoStringTables::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.tables)
  return tables_.Mutable(index);
}
::proto::dota::CDemoStringTables_table_t* CDemoStringTables::add_tables() {
  // @@protoc_insertion_point(field_add:proto.dota.CDemoStringTables.tables)
  return tables_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_table_t >*
CDemoStringTables::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoStringTables.tables)
  return &tables_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_table_t >&
CDemoStringTables::tables() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoStringTables.tables)
  return tables_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoStop::CDemoStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoStop)
}
CDemoStop::CDemoStop(const CDemoStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoStop)
}

void CDemoStop::SharedCtor() {
  _cached_size_ = 0;
}

CDemoStop::~CDemoStop() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoStop)
  SharedDtor();
}

void CDemoStop::SharedDtor() {
}

void CDemoStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStop::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoStop& CDemoStop::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoStop* CDemoStop::New(::google::protobuf::Arena* arena) const {
  CDemoStop* n = new CDemoStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoStop::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoStop)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoStop)
  return false;
#undef DO_
}

void CDemoStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoStop)
}

::google::protobuf::uint8* CDemoStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoStop)
  return target;
}

size_t CDemoStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoStop)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoStop)
    MergeFrom(*source);
  }
}

void CDemoStop::MergeFrom(const CDemoStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDemoStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStop::CopyFrom(const CDemoStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStop::IsInitialized() const {
  return true;
}

void CDemoStop::Swap(CDemoStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStop::InternalSwap(CDemoStop* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoStop::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoStop

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoUserCmd::kCmdNumberFieldNumber;
const int CDemoUserCmd::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoUserCmd::CDemoUserCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoUserCmd)
}
CDemoUserCmd::CDemoUserCmd(const CDemoUserCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  cmd_number_ = from.cmd_number_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoUserCmd)
}

void CDemoUserCmd::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_number_ = 0;
}

CDemoUserCmd::~CDemoUserCmd() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoUserCmd)
  SharedDtor();
}

void CDemoUserCmd::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDemoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoUserCmd::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoUserCmd& CDemoUserCmd::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoUserCmd* CDemoUserCmd::New(::google::protobuf::Arena* arena) const {
  CDemoUserCmd* n = new CDemoUserCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoUserCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoUserCmd)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  cmd_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cmd_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoUserCmd)
  return false;
#undef DO_
}

void CDemoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoUserCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cmd_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd_number(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoUserCmd)
}

::google::protobuf::uint8* CDemoUserCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoUserCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cmd_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd_number(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoUserCmd)
  return target;
}

size_t CDemoUserCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoUserCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 cmd_number = 1;
    if (has_cmd_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoUserCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoUserCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoUserCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoUserCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoUserCmd)
    MergeFrom(*source);
  }
}

void CDemoUserCmd::MergeFrom(const CDemoUserCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoUserCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_number_ = from.cmd_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDemoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoUserCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoUserCmd::CopyFrom(const CDemoUserCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoUserCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoUserCmd::IsInitialized() const {
  return true;
}

void CDemoUserCmd::Swap(CDemoUserCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoUserCmd::InternalSwap(CDemoUserCmd* other) {
  data_.Swap(&other->data_);
  std::swap(cmd_number_, other->cmd_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoUserCmd::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoUserCmd

// optional int32 cmd_number = 1;
bool CDemoUserCmd::has_cmd_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoUserCmd::set_has_cmd_number() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoUserCmd::clear_has_cmd_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoUserCmd::clear_cmd_number() {
  cmd_number_ = 0;
  clear_has_cmd_number();
}
::google::protobuf::int32 CDemoUserCmd::cmd_number() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoUserCmd.cmd_number)
  return cmd_number_;
}
void CDemoUserCmd::set_cmd_number(::google::protobuf::int32 value) {
  set_has_cmd_number();
  cmd_number_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoUserCmd.cmd_number)
}

// optional bytes data = 2;
bool CDemoUserCmd::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoUserCmd::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoUserCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoUserCmd::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CDemoUserCmd::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoUserCmd.data)
  return data_.GetNoArena();
}
void CDemoUserCmd::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoUserCmd.data)
}
#if LANG_CXX11
void CDemoUserCmd::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoUserCmd.data)
}
#endif
void CDemoUserCmd::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoUserCmd.data)
}
void CDemoUserCmd::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoUserCmd.data)
}
::std::string* CDemoUserCmd::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoUserCmd.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDemoUserCmd::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoUserCmd.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDemoUserCmd::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoUserCmd.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDemoSpawnGroups::kMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDemoSpawnGroups::CDemoSpawnGroups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDemoSpawnGroups)
}
CDemoSpawnGroups::CDemoSpawnGroups(const CDemoSpawnGroups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDemoSpawnGroups)
}

void CDemoSpawnGroups::SharedCtor() {
  _cached_size_ = 0;
}

CDemoSpawnGroups::~CDemoSpawnGroups() {
  // @@protoc_insertion_point(destructor:proto.dota.CDemoSpawnGroups)
  SharedDtor();
}

void CDemoSpawnGroups::SharedDtor() {
}

void CDemoSpawnGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSpawnGroups::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDemoSpawnGroups& CDemoSpawnGroups::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDemoSpawnGroups* CDemoSpawnGroups::New(::google::protobuf::Arena* arena) const {
  CDemoSpawnGroups* n = new CDemoSpawnGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoSpawnGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDemoSpawnGroups)
  msgs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDemoSpawnGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDemoSpawnGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes msgs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_msgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDemoSpawnGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDemoSpawnGroups)
  return false;
#undef DO_
}

void CDemoSpawnGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDemoSpawnGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes msgs = 3;
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msgs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDemoSpawnGroups)
}

::google::protobuf::uint8* CDemoSpawnGroups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDemoSpawnGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes msgs = 3;
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->msgs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDemoSpawnGroups)
  return target;
}

size_t CDemoSpawnGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDemoSpawnGroups)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes msgs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->msgs_size());
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->msgs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSpawnGroups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDemoSpawnGroups)
  GOOGLE_DCHECK_NE(&from, this);
  const CDemoSpawnGroups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoSpawnGroups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDemoSpawnGroups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDemoSpawnGroups)
    MergeFrom(*source);
  }
}

void CDemoSpawnGroups::MergeFrom(const CDemoSpawnGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDemoSpawnGroups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
}

void CDemoSpawnGroups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDemoSpawnGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSpawnGroups::CopyFrom(const CDemoSpawnGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDemoSpawnGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSpawnGroups::IsInitialized() const {
  return true;
}

void CDemoSpawnGroups::Swap(CDemoSpawnGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSpawnGroups::InternalSwap(CDemoSpawnGroups* other) {
  msgs_.InternalSwap(&other->msgs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoSpawnGroups::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoSpawnGroups

// repeated bytes msgs = 3;
int CDemoSpawnGroups::msgs_size() const {
  return msgs_.size();
}
void CDemoSpawnGroups::clear_msgs() {
  msgs_.Clear();
}
const ::std::string& CDemoSpawnGroups::msgs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSpawnGroups.msgs)
  return msgs_.Get(index);
}
::std::string* CDemoSpawnGroups::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoSpawnGroups.msgs)
  return msgs_.Mutable(index);
}
void CDemoSpawnGroups::set_msgs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSpawnGroups.msgs)
  msgs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CDemoSpawnGroups::set_msgs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSpawnGroups.msgs)
  msgs_.Mutable(index)->assign(std::move(value));
}
#endif
void CDemoSpawnGroups::set_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoSpawnGroups.msgs)
}
void CDemoSpawnGroups::set_msgs(int index, const void* value, size_t size) {
  msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoSpawnGroups.msgs)
}
::std::string* CDemoSpawnGroups::add_msgs() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDemoSpawnGroups.msgs)
  return msgs_.Add();
}
void CDemoSpawnGroups::add_msgs(const ::std::string& value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDemoSpawnGroups.msgs)
}
#if LANG_CXX11
void CDemoSpawnGroups::add_msgs(::std::string&& value) {
  msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDemoSpawnGroups.msgs)
}
#endif
void CDemoSpawnGroups::add_msgs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDemoSpawnGroups.msgs)
}
void CDemoSpawnGroups::add_msgs(const void* value, size_t size) {
  msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDemoSpawnGroups.msgs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDemoSpawnGroups::msgs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoSpawnGroups.msgs)
  return msgs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CDemoSpawnGroups::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoSpawnGroups.msgs)
  return &msgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
