// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgPoorNetworkConditions_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPoorNetworkConditions_Player> {
} _CMsgPoorNetworkConditions_Player_default_instance_;
class CMsgPoorNetworkConditionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPoorNetworkConditions> {
} _CMsgPoorNetworkConditions_default_instance_;
class CMsgGameserverCrashDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameserverCrash> {
} _CMsgGameserverCrash_default_instance_;
class CMsgConnectedPlayers_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgConnectedPlayers_Player> {
} _CMsgConnectedPlayers_Player_default_instance_;
class CMsgConnectedPlayersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgConnectedPlayers> {
} _CMsgConnectedPlayers_default_instance_;
class CMsgGameServerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerInfo> {
} _CMsgGameServerInfo_default_instance_;
class CMsgLeaverDetectedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeaverDetected> {
} _CMsgLeaverDetected_default_instance_;
class CMsgLeaverDetectedResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeaverDetectedResponse> {
} _CMsgLeaverDetectedResponse_default_instance_;
class CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyFinalPlayerStats> {
} _CMsgDOTAFantasyFinalPlayerStats_default_instance_;
class CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLivePlayerStats> {
} _CMsgDOTAFantasyLivePlayerStats_default_instance_;
class CMsgDOTAFantasyMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMatch> {
} _CMsgDOTAFantasyMatch_default_instance_;
class CMsgDOTAUpdateClippyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAUpdateClippy> {
} _CMsgDOTAUpdateClippy_default_instance_;
class CMsgServerToGCRealtimeStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCRealtimeStats> {
} _CMsgServerToGCRealtimeStats_default_instance_;
class CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerRealtimeStatsStartStop> {
} _CMsgGCToServerRealtimeStatsStartStop_default_instance_;
class CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData> {
} _CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_;
class CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CTeam_CPlayer> {
} _CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_;
class CMsgGameMatchSignOut_CTeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CTeam> {
} _CMsgGameMatchSignOut_CTeam_default_instance_;
class CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CAdditionalSignoutMsg> {
} _CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_;
class CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CSocialFeedMatchEvent> {
} _CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_;
class CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_CCustomGameData> {
} _CMsgGameMatchSignOut_CCustomGameData_default_instance_;
class CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut_EventGameLeaderboardEntry> {
} _CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_;
class CMsgGameMatchSignOutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOut> {
} _CMsgGameMatchSignOut_default_instance_;
class CMsgSignOutDraftInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutDraftInfo> {
} _CMsgSignOutDraftInfo_default_instance_;
class CMsgSignOutBotInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutBotInfo> {
} _CMsgSignOutBotInfo_default_instance_;
class CMsgSignOutPlayerStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutPlayerStats> {
} _CMsgSignOutPlayerStats_default_instance_;
class CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutCommunicationSummary_PlayerCommunication> {
} _CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_;
class CMsgSignOutCommunicationSummaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutCommunicationSummary> {
} _CMsgSignOutCommunicationSummary_default_instance_;
class CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignoutResponse_PlayerMetadata> {
} _CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_;
class CMsgGameMatchSignoutResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignoutResponse> {
} _CMsgGameMatchSignoutResponse_default_instance_;
class CMsgTimedRewardContainerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTimedRewardContainer> {
} _CMsgTimedRewardContainer_default_instance_;
class CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOutPermissionRequest> {
} _CMsgGameMatchSignOutPermissionRequest_default_instance_;
class CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOutPermissionResponse> {
} _CMsgGameMatchSignOutPermissionResponse_default_instance_;
class CMsgGameMatchSignOutEventGameDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameMatchSignOutEventGameData> {
} _CMsgGameMatchSignOutEventGameData_default_instance_;
class CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility> {
} _CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_;
class CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALiveScoreboardUpdate_Team_Player> {
} _CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_;
class CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALiveScoreboardUpdate_Team> {
} _CMsgDOTALiveScoreboardUpdate_Team_default_instance_;
class CMsgDOTALiveScoreboardUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALiveScoreboardUpdate> {
} _CMsgDOTALiveScoreboardUpdate_default_instance_;
class CMsgDOTARequestPlayerResourcesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestPlayerResources> {
} _CMsgDOTARequestPlayerResources_default_instance_;
class CMsgDOTARequestPlayerResourcesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestPlayerResourcesResponse> {
} _CMsgDOTARequestPlayerResourcesResponse_default_instance_;
class CMsgDOTARequestBatchPlayerResourcesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestBatchPlayerResources> {
} _CMsgDOTARequestBatchPlayerResources_default_instance_;
class CMsgDOTARequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestBatchPlayerResourcesResponse_Result> {
} _CMsgDOTARequestBatchPlayerResourcesResponse_Result_default_instance_;
class CMsgDOTARequestBatchPlayerResourcesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestBatchPlayerResourcesResponse> {
} _CMsgDOTARequestBatchPlayerResourcesResponse_default_instance_;
class CMsgDOTAPlayerFailedToConnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPlayerFailedToConnect> {
} _CMsgDOTAPlayerFailedToConnect_default_instance_;
class CMsgGCToRelayConnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToRelayConnect> {
} _CMsgGCToRelayConnect_default_instance_;
class CMsgGCGCToLANServerRelayConnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGCToLANServerRelayConnect> {
} _CMsgGCGCToLANServerRelayConnect_default_instance_;
class CMsgGCToRelayConnectResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToRelayConnectResponse> {
} _CMsgGCToRelayConnectResponse_default_instance_;
class CMsgGCBanStatusRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCBanStatusRequest> {
} _CMsgGCBanStatusRequest_default_instance_;
class CMsgGCBanStatusResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCBanStatusResponse> {
} _CMsgGCBanStatusResponse_default_instance_;
class CMsgTournamentItemEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTournamentItemEvent> {
} _CMsgTournamentItemEvent_default_instance_;
class CMsgTournamentItemEventResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTournamentItemEventResponse> {
} _CMsgTournamentItemEventResponse_default_instance_;
class CMsgTeamFanfareDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTeamFanfare> {
} _CMsgTeamFanfare_default_instance_;
class CMsgResponseTeamFanfareDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgResponseTeamFanfare> {
} _CMsgResponseTeamFanfare_default_instance_;
class CMsgGameServerUploadSaveGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerUploadSaveGame> {
} _CMsgGameServerUploadSaveGame_default_instance_;
class CMsgGameServerSaveGameResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerSaveGameResult> {
} _CMsgGameServerSaveGameResult_default_instance_;
class CMsgGameServerGetLoadGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerGetLoadGame> {
} _CMsgGameServerGetLoadGame_default_instance_;
class CMsgGameServerGetLoadGameResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameServerGetLoadGameResult> {
} _CMsgGameServerGetLoadGameResult_default_instance_;
class CMsgDOTAGenerateDiretidePrizeListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGenerateDiretidePrizeList> {
} _CMsgDOTAGenerateDiretidePrizeList_default_instance_;
class CMsgDOTAGenerateDiretidePrizeListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGenerateDiretidePrizeListResponse> {
} _CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_;
class CMsgDOTARewardDiretidePrizesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARewardDiretidePrizes> {
} _CMsgDOTARewardDiretidePrizes_default_instance_;
class CMsgDOTADiretidePrizesRewardedResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTADiretidePrizesRewardedResponse> {
} _CMsgDOTADiretidePrizesRewardedResponse_default_instance_;
class CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAAwardEventPoints_AwardPoints> {
} _CMsgDOTAAwardEventPoints_AwardPoints_default_instance_;
class CMsgDOTAAwardEventPointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAAwardEventPoints> {
} _CMsgDOTAAwardEventPoints_default_instance_;
class CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDropsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops> {
} _CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_default_instance_;
class CMsgServerToGCSignoutAwardAdditionalDropsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCSignoutAwardAdditionalDrops> {
} _CMsgServerToGCSignoutAwardAdditionalDrops_default_instance_;
class CMsgDOTAFrostivusTimeElapsed_UserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFrostivusTimeElapsed_User> {
} _CMsgDOTAFrostivusTimeElapsed_User_default_instance_;
class CMsgDOTAFrostivusTimeElapsedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFrostivusTimeElapsed> {
} _CMsgDOTAFrostivusTimeElapsed_default_instance_;
class CMsgGCToServerPingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerPingRequest> {
} _CMsgGCToServerPingRequest_default_instance_;
class CMsgGCToServerPingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerPingResponse> {
} _CMsgGCToServerPingResponse_default_instance_;
class CMsgGCToServerConsoleCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerConsoleCommand> {
} _CMsgGCToServerConsoleCommand_default_instance_;
class CMsgServerGetEventPointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGetEventPoints> {
} _CMsgServerGetEventPoints_default_instance_;
class CMsgServerGetEventPointsResponse_PointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGetEventPointsResponse_Points> {
} _CMsgServerGetEventPointsResponse_Points_default_instance_;
class CMsgServerGetEventPointsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGetEventPointsResponse> {
} _CMsgServerGetEventPointsResponse_default_instance_;
class CMsgServerGrantSurveyPermission_SurveyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGrantSurveyPermission_Survey> {
} _CMsgServerGrantSurveyPermission_Survey_default_instance_;
class CMsgServerGrantSurveyPermissionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGrantSurveyPermission> {
} _CMsgServerGrantSurveyPermission_default_instance_;
class CMsgServerGrantSurveyPermissionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGrantSurveyPermissionResponse> {
} _CMsgServerGrantSurveyPermissionResponse_default_instance_;
class CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchConnectionStats_Player> {
} _CMsgServerToGCMatchConnectionStats_Player_default_instance_;
class CMsgServerToGCMatchConnectionStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchConnectionStats> {
} _CMsgServerToGCMatchConnectionStats_default_instance_;
class CMsgServerGCUpdateSpectatorCountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerGCUpdateSpectatorCount> {
} _CMsgServerGCUpdateSpectatorCount_default_instance_;
class CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSerializedCombatLog_Dictionary_DictString> {
} _CSerializedCombatLog_Dictionary_DictString_default_instance_;
class CSerializedCombatLog_DictionaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSerializedCombatLog_Dictionary> {
} _CSerializedCombatLog_Dictionary_default_instance_;
class CSerializedCombatLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSerializedCombatLog> {
} _CSerializedCombatLog_default_instance_;
class CMsgServerToGCGetAdditionalEquipsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetAdditionalEquips> {
} _CMsgServerToGCGetAdditionalEquips_default_instance_;
class CMsgServerToGCGetAdditionalEquipsResponse_CUserEquipsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips> {
} _CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_default_instance_;
class CMsgServerToGCGetAdditionalEquipsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetAdditionalEquipsResponse> {
} _CMsgServerToGCGetAdditionalEquipsResponse_default_instance_;
class CMsgServerToGCGetProfileCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetProfileCard> {
} _CMsgServerToGCGetProfileCard_default_instance_;
class CMsgServerToGCGetProfileCardResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetProfileCardResponse> {
} _CMsgServerToGCGetProfileCardResponse_default_instance_;
class CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCVictoryPredictions_Record> {
} _CMsgServerToGCVictoryPredictions_Record_default_instance_;
class CMsgServerToGCVictoryPredictionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCVictoryPredictions> {
} _CMsgServerToGCVictoryPredictions_default_instance_;
class CMsgSuspiciousActivityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSuspiciousActivity> {
} _CMsgSuspiciousActivity_default_instance_;
class CMsgServerToGCRequestStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCRequestStatus> {
} _CMsgServerToGCRequestStatus_default_instance_;
class CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCRequestStatus_Response> {
} _CMsgServerToGCRequestStatus_Response_default_instance_;
class CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutAssassinMiniGameInfo> {
} _CMsgSignOutAssassinMiniGameInfo_default_instance_;
class CMsgServerToGCGetIngameEventDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCGetIngameEventData> {
} _CMsgServerToGCGetIngameEventData_default_instance_;
class CMsgGCToServerIngameEventDataOraclePADefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerIngameEventDataOraclePA> {
} _CMsgGCToServerIngameEventDataOraclePA_default_instance_;
class CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCKillSummaries_KillSummary> {
} _CMsgServerToGCKillSummaries_KillSummary_default_instance_;
class CMsgServerToGCKillSummariesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCKillSummaries> {
} _CMsgServerToGCKillSummaries_default_instance_;
class CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerPredictionResult_Prediction> {
} _CMsgGCToServerPredictionResult_Prediction_default_instance_;
class CMsgGCToServerPredictionResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerPredictionResult> {
} _CMsgGCToServerPredictionResult_default_instance_;
class CMsgServerToGCLockCharmTradingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCLockCharmTrading> {
} _CMsgServerToGCLockCharmTrading_default_instance_;
class CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutUpdatePlayerChallenge_Challenge> {
} _CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_;
class CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutUpdatePlayerChallenge> {
} _CMsgSignOutUpdatePlayerChallenge_default_instance_;
class CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCRerollPlayerChallenge> {
} _CMsgServerToGCRerollPlayerChallenge_default_instance_;
class CMsgServerToGCHoldEventPoints_HoldRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCHoldEventPoints_HoldRequest> {
} _CMsgServerToGCHoldEventPoints_HoldRequest_default_instance_;
class CMsgServerToGCHoldEventPointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCHoldEventPoints> {
} _CMsgServerToGCHoldEventPoints_default_instance_;
class CMsgSignOutReleaseEventPointHoldsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutReleaseEventPointHolds> {
} _CMsgSignOutReleaseEventPointHolds_default_instance_;
class CMsgGCToServerUpdateBroadcastCheersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToServerUpdateBroadcastCheers> {
} _CMsgGCToServerUpdateBroadcastCheers_default_instance_;
class CMsgSignOutWagerStats_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutWagerStats_Player> {
} _CMsgSignOutWagerStats_Player_default_instance_;
class CMsgSignOutWagerStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutWagerStats> {
} _CMsgSignOutWagerStats_default_instance_;
class CMsgSpendWager_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpendWager_Player> {
} _CMsgSpendWager_Player_default_instance_;
class CMsgSpendWagerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpendWager> {
} _CMsgSpendWager_default_instance_;
class CMsgSignOutXPCoins_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutXPCoins_Player> {
} _CMsgSignOutXPCoins_Player_default_instance_;
class CMsgSignOutXPCoinsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutXPCoins> {
} _CMsgSignOutXPCoins_default_instance_;
class CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutCommunityGoalProgress_EventGoalIncrement> {
} _CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_;
class CMsgSignOutCommunityGoalProgressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSignOutCommunityGoalProgress> {
} _CMsgSignOutCommunityGoalProgress_default_instance_;
class CMsgServerToGCPostMatchTipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCPostMatchTip> {
} _CMsgServerToGCPostMatchTip_default_instance_;
class CMsgServerToGCPostMatchTipResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCPostMatchTipResponse> {
} _CMsgServerToGCPostMatchTipResponse_default_instance_;
class CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCloseCompendiumInGamePredictionVoting> {
} _CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_;
class CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse> {
} _CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_;
class CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult> {
} _CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_;
class CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCompendiumInGamePredictionResults> {
} _CMsgServerToGCCompendiumInGamePredictionResults_default_instance_;
class CMsgServerToGCCompendiumInGamePredictionResultsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCCompendiumInGamePredictionResultsResponse> {
} _CMsgServerToGCCompendiumInGamePredictionResultsResponse_default_instance_;
class CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCCompendiumInGamePredictionResults> {
} _CMsgGCToGCCompendiumInGamePredictionResults_default_instance_;
class CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase> {
} _CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_;
class CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchPlayerItemPurchaseHistory_Player> {
} _CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_;
class CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerToGCMatchPlayerItemPurchaseHistory> {
} _CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_;

namespace protobuf_dota_5fgcmessages_5fserver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[125];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, disconnect_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, num_bad_intervals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, peak_loss_pct_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions, detection_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoorNetworkConditions, players_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, sentinel_save_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, custom_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, server_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, server_public_ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, server_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameserverCrash, engine_),
  0,
  1,
  2,
  3,
  9,
  11,
  4,
  5,
  6,
  7,
  8,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, leaver_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, disconnect_reason_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, connected_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, disconnected_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, first_blood_happened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, legacy_mass_disconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, poor_network_conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, send_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, radiant_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, dire_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, radiant_lead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, building_state_),
  ~0u,
  ~0u,
  1,
  2,
  3,
  0,
  4,
  5,
  7,
  8,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_public_ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_private_ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_tv_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, assigned_server_tv_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_steamdatagram_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_hibernation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_loadavg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_tv_broadcast_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_relay_connected_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relay_slots_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relays_connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relay_clients_connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relayed_game_server_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, parent_relay_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, tv_secret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, allow_custom_games_),
  1,
  2,
  3,
  4,
  21,
  20,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  15,
  14,
  16,
  17,
  18,
  19,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, leaver_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, leaver_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, server_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, disconnect_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, poor_network_conditions_),
  2,
  3,
  0,
  4,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetectedResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetectedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetectedResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyFinalPlayerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyFinalPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyFinalPlayerStats, stats_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLivePlayerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLivePlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLivePlayerStats, stats_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, series_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, series_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, team_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMatch, team_2_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateClippy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateClippy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateClippy, good_team_hero_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAUpdateClippy, bad_team_hero_ids_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRealtimeStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRealtimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRealtimeStats, delayed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRealtimeStats, current_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerRealtimeStatsStartStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerRealtimeStatsStartStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerRealtimeStatsStartStop, delayed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerRealtimeStatsStartStop, current_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, dota_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, winner_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, leaver_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, denies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, gold_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, xp_per_minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, gold_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_hero_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_tower_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_hero_healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, time_last_seen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, support_ability_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, claimed_farm_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, support_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, claimed_denies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, claimed_misses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, misses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, net_worth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, tower_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, ability_upgrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, additional_units_inventory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, permanent_buffs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, custom_game_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, match_player_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, talent_ability_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_pick_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_was_randomed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_was_bonus_),
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  19,
  18,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  30,
  31,
  32,
  ~0u,
  ~0u,
  ~0u,
  0,
  29,
  ~0u,
  33,
  34,
  35,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam, players_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, contents_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, replay_time_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CCustomGameData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CCustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CCustomGameData, publish_timestamp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, name_suffix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, extra_data_5_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, good_guys_win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, num_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, tower_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, barracks_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, server_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, first_blood_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, game_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, event_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, picks_bans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, fantasy_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, player_strange_count_adjustments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, automatic_surrender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, server_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, legacy_mass_disconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, poor_network_conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, additional_msgs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, social_feed_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, average_networth_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, networth_delta_min10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, networth_delta_min20_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, maximum_losing_networth_lead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, average_experience_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, experience_delta_min10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, experience_delta_min20_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_winner_min10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_winner_min20_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_winner_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_loser_min10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_loser_min20_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, bonus_gold_loser_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, custom_game_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, match_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, team_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, pre_game_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, event_game_leaderboard_entries_),
  3,
  4,
  10,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  0,
  7,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  11,
  13,
  12,
  1,
  ~0u,
  ~0u,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  2,
  27,
  ~0u,
  28,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, radiant_captain_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, dire_captain_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutDraftInfo, picks_bans_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, allow_cheats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, bot_difficulty_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, created_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutBotInfo, bot_difficulty_dire_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, rampages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, triple_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, first_blood_claimed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, first_blood_given_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, couriers_killed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, aegises_snatched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, cheeses_eaten_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, creeps_stacked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, fight_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, farm_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, support_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, push_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, denies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, gpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutPlayerStats, xppm_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, pings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, max_pings_per_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, teammate_pings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, max_teammate_pings_per_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, team_chat_messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, all_chat_messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, chat_wheel_messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, pauses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, unpauses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, lines_drawn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, voice_chat_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, chat_mutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, voice_mutes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunicationSummary, players_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, avg_kills_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, avg_deaths_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, avg_assists_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, avg_gpm_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, avg_xpm_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, best_kills_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, best_assists_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, best_gpm_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, best_xpm_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, win_streak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, best_win_streak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, games_played_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, replay_salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, timed_reward_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, xp_reward_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, leagueid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, metadata_private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, match_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, players_metadata_),
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTimedRewardContainer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTimedRewardContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTimedRewardContainer, timed_reward_details_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, server_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, local_attempt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, total_attempt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, seconds_waited_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, permission_granted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, abandon_signout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, retry_delay_seconds_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, game_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, event_game_data_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, ability_level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, player_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, hero_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, denies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, gold_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, xp_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_cooldown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, respawn_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, position_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, net_worth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, abilities_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, tower_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, barracks_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, hero_picks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, hero_bans_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, tournament_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, hltv_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, team_good_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, team_bad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, roshan_respawn_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, match_id_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, player_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, prevent_text_chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, prevent_voice_chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, low_priority_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, rank_types_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, prevent_text_chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, prevent_voice_chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, rank_calibrated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, low_priority_),
  0,
  2,
  3,
  1,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse, results_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, failed_loaders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, abandoned_loaders_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_public_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_private_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, game_server_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, parent_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, tv_unique_secret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_steamid_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGCToLANServerRelayConnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGCToLANServerRelayConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGCToLANServerRelayConnect, relay_steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnectResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusRequest, account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, low_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, text_chat_banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, voice_chat_banned_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, killer_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, victim_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, tv_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, dota_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, replay_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, loot_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, event_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, multi_kill_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, winner_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, loser_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, hero_statues_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  9,
  10,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, viewers_granted_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTeamFanfare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTeamFanfare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTeamFanfare, match_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, fanfare_goodguys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, fanfare_badguys_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, save_game_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, player_steam_ids_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerSaveGameResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerSaveGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerSaveGameResult, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGame, save_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGameResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGameResult, save_game_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, prize_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, highest_roshan_level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, item_defs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, steam_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, prize_list_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, prize_list_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTADiretidePrizesRewardedResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTADiretidePrizesRewardedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTADiretidePrizesRewardedResponse, prize_list_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, premium_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, trade_ban_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, award_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, audit_action_),
  ~0u,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, loot_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, player_account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, no_trade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops, randomize_reward_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops, drops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCSignoutAwardAdditionalDrops, match_id_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, time_elapsed_s_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, match_id_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, request_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, request_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, cluster_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerConsoleCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerConsoleCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerConsoleCommand, console_command_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPoints, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPoints, account_id_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, points_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse_Points, owned_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGetEventPointsResponse, points_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, question_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, expire_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, survey_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, extra_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission_Survey, extra_data_32_),
  0,
  1,
  5,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermission, surveys_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermissionResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGrantSurveyPermissionResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, avg_ping_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, packet_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, ping_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, full_resends_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, cluster_id_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGCUpdateSpectatorCount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGCUpdateSpectatorCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGCUpdateSpectatorCount, spectator_count_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary_DictString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary_DictString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary_DictString, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary_DictString, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog_Dictionary, strings_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, dictionary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSerializedCombatLog, entries_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquips, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquips, account_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips, equips_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetAdditionalEquipsResponse, equips_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCard, account_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCardResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetProfileCardResponse, cards_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, item_ids_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCVictoryPredictions, records_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, intdata1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, intdata2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSuspiciousActivity, time_),
  0,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRequestStatus_Response, response_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, winning_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, losing_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, arcana_owners_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, assassin_won_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, target_hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, contract_completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, contract_complete_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, pa_is_radiant_),
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetIngameEventData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetIngameEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCGetIngameEventData, event_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerIngameEventDataOraclePA, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerIngameEventDataOraclePA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerIngameEventDataOraclePA, target_hero_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, killer_hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, victim_hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, kill_count_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries, ingameevent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCKillSummaries, summaries_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, item_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, num_correct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, num_fails_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, granted_item_defs_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, correct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPredictionResult, predictions_),
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, item_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, sequence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, challenge_rank_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, rerolled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, hero_id_),
  0,
  ~0u,
  ~0u,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, reroll_msg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, points_held_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints_HoldRequest, premium_held_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, holds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, hold_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCHoldEventPoints, hold_until_),
  ~0u,
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutReleaseEventPointHolds, hold_key_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, team_1_cheers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerUpdateBroadcastCheers, team_2_cheers_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, winnings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, max_wager_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats_Player, wager_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutWagerStats, event_id_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager_Player, wager_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager_Player, wager_token_item_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpendWager, server_steam_id_),
  ~0u,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins_Player, xp_gained_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins_Player, coins_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins_Player, wager_token_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins_Player, rank_wager_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutXPCoins, timestamp_),
  ~0u,
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress_EventGoalIncrement, event_goal_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress_EventGoalIncrement, increment_amount_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress, event_increments_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTip, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTip, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTip, tipper_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTip, recipient_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTip, tip_amount_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTipResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTipResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTipResponse, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTipResponse, tipper_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTipResponse, recipient_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCPostMatchTipResponse, result_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVoting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVoting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVoting, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVoting, hltv_delay_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, prediction_value_is_mask_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, series_id_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResultsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResultsResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCompendiumInGamePredictionResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCompendiumInGamePredictionResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCompendiumInGamePredictionResults, results_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, net_worth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, game_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, player_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, allied_hero_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, enemy_hero_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, item_purchases_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory, mmr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory, players_),
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(CMsgPoorNetworkConditions_Player)},
  { 13, 20, sizeof(CMsgPoorNetworkConditions)},
  { 22, 39, sizeof(CMsgGameserverCrash)},
  { 51, 60, sizeof(CMsgConnectedPlayers_Player)},
  { 64, 80, sizeof(CMsgConnectedPlayers)},
  { 91, 119, sizeof(CMsgGameServerInfo)},
  { 142, 153, sizeof(CMsgLeaverDetected)},
  { 159, 165, sizeof(CMsgLeaverDetectedResponse)},
  { 166, 172, sizeof(CMsgDOTAFantasyFinalPlayerStats)},
  { 173, 179, sizeof(CMsgDOTAFantasyLivePlayerStats)},
  { 180, 192, sizeof(CMsgDOTAFantasyMatch)},
  { 199, 206, sizeof(CMsgDOTAUpdateClippy)},
  { 208, 215, sizeof(CMsgServerToGCRealtimeStats)},
  { 217, 224, sizeof(CMsgGCToServerRealtimeStatsStartStop)},
  { 226, 233, sizeof(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData)},
  { 235, 281, sizeof(CMsgGameMatchSignOut_CTeam_CPlayer)},
  { 322, 328, sizeof(CMsgGameMatchSignOut_CTeam)},
  { 329, 336, sizeof(CMsgGameMatchSignOut_CAdditionalSignoutMsg)},
  { 338, 348, sizeof(CMsgGameMatchSignOut_CSocialFeedMatchEvent)},
  { 353, 359, sizeof(CMsgGameMatchSignOut_CCustomGameData)},
  { 360, 372, sizeof(CMsgGameMatchSignOut_EventGameLeaderboardEntry)},
  { 379, 424, sizeof(CMsgGameMatchSignOut)},
  { 464, 472, sizeof(CMsgSignOutDraftInfo)},
  { 475, 484, sizeof(CMsgSignOutBotInfo)},
  { 488, 516, sizeof(CMsgSignOutPlayerStats)},
  { 539, 558, sizeof(CMsgSignOutCommunicationSummary_PlayerCommunication)},
  { 572, 578, sizeof(CMsgSignOutCommunicationSummary)},
  { 579, 597, sizeof(CMsgGameMatchSignoutResponse_PlayerMetadata)},
  { 610, 623, sizeof(CMsgGameMatchSignoutResponse)},
  { 631, 637, sizeof(CMsgTimedRewardContainer)},
  { 638, 647, sizeof(CMsgGameMatchSignOutPermissionRequest)},
  { 651, 659, sizeof(CMsgGameMatchSignOutPermissionResponse)},
  { 662, 671, sizeof(CMsgGameMatchSignOutEventGameData)},
  { 675, 682, sizeof(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility)},
  { 684, 716, sizeof(CMsgDOTALiveScoreboardUpdate_Team_Player)},
  { 743, 754, sizeof(CMsgDOTALiveScoreboardUpdate_Team)},
  { 760, 774, sizeof(CMsgDOTALiveScoreboardUpdate)},
  { 783, 790, sizeof(CMsgDOTARequestPlayerResources)},
  { 792, 803, sizeof(CMsgDOTARequestPlayerResourcesResponse)},
  { 809, 816, sizeof(CMsgDOTARequestBatchPlayerResources)},
  { 818, 829, sizeof(CMsgDOTARequestBatchPlayerResourcesResponse_Result)},
  { 835, 841, sizeof(CMsgDOTARequestBatchPlayerResourcesResponse)},
  { 842, 849, sizeof(CMsgDOTAPlayerFailedToConnect)},
  { 851, 863, sizeof(CMsgGCToRelayConnect)},
  { 870, 876, sizeof(CMsgGCGCToLANServerRelayConnect)},
  { 877, 882, sizeof(CMsgGCToRelayConnectResponse)},
  { 882, 888, sizeof(CMsgGCBanStatusRequest)},
  { 889, 898, sizeof(CMsgGCBanStatusResponse)},
  { 902, 919, sizeof(CMsgTournamentItemEvent)},
  { 931, 938, sizeof(CMsgTournamentItemEventResponse)},
  { 940, 946, sizeof(CMsgTeamFanfare)},
  { 947, 954, sizeof(CMsgResponseTeamFanfare)},
  { 956, 965, sizeof(CMsgGameServerUploadSaveGame)},
  { 969, 975, sizeof(CMsgGameServerSaveGameResult)},
  { 976, 982, sizeof(CMsgGameServerGetLoadGame)},
  { 983, 989, sizeof(CMsgGameServerGetLoadGameResult)},
  { 990, 997, sizeof(CMsgDOTAGenerateDiretidePrizeList)},
  { 999, 1007, sizeof(CMsgDOTAGenerateDiretidePrizeListResponse)},
  { 1010, 1017, sizeof(CMsgDOTARewardDiretidePrizes)},
  { 1019, 1025, sizeof(CMsgDOTADiretidePrizesRewardedResponse)},
  { 1026, 1035, sizeof(CMsgDOTAAwardEventPoints_AwardPoints)},
  { 1039, 1049, sizeof(CMsgDOTAAwardEventPoints)},
  { 1054, 1063, sizeof(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops)},
  { 1067, 1074, sizeof(CMsgServerToGCSignoutAwardAdditionalDrops)},
  { 1076, 1083, sizeof(CMsgDOTAFrostivusTimeElapsed_User)},
  { 1085, 1093, sizeof(CMsgDOTAFrostivusTimeElapsed)},
  { 1096, 1103, sizeof(CMsgGCToServerPingRequest)},
  { 1105, 1113, sizeof(CMsgGCToServerPingResponse)},
  { 1116, 1122, sizeof(CMsgGCToServerConsoleCommand)},
  { 1123, 1130, sizeof(CMsgServerGetEventPoints)},
  { 1132, 1140, sizeof(CMsgServerGetEventPointsResponse_Points)},
  { 1143, 1150, sizeof(CMsgServerGetEventPointsResponse)},
  { 1152, 1163, sizeof(CMsgServerGrantSurveyPermission_Survey)},
  { 1169, 1175, sizeof(CMsgServerGrantSurveyPermission)},
  { 1176, 1182, sizeof(CMsgServerGrantSurveyPermissionResponse)},
  { 1183, 1194, sizeof(CMsgServerToGCMatchConnectionStats_Player)},
  { 1200, 1210, sizeof(CMsgServerToGCMatchConnectionStats)},
  { 1215, 1221, sizeof(CMsgServerGCUpdateSpectatorCount)},
  { 1222, 1229, sizeof(CSerializedCombatLog_Dictionary_DictString)},
  { 1231, 1237, sizeof(CSerializedCombatLog_Dictionary)},
  { 1238, 1246, sizeof(CSerializedCombatLog)},
  { 1249, 1255, sizeof(CMsgServerToGCGetAdditionalEquips)},
  { 1256, 1263, sizeof(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips)},
  { 1265, 1271, sizeof(CMsgServerToGCGetAdditionalEquipsResponse)},
  { 1272, 1278, sizeof(CMsgServerToGCGetProfileCard)},
  { 1279, 1285, sizeof(CMsgServerToGCGetProfileCardResponse)},
  { 1286, 1294, sizeof(CMsgServerToGCVictoryPredictions_Record)},
  { 1297, 1303, sizeof(CMsgServerToGCVictoryPredictions)},
  { 1304, 1314, sizeof(CMsgSuspiciousActivity)},
  { 1319, 1324, sizeof(CMsgServerToGCRequestStatus)},
  { 1324, 1330, sizeof(CMsgServerToGCRequestStatus_Response)},
  { 1331, 1344, sizeof(CMsgSignOutAssassinMiniGameInfo)},
  { 1352, 1358, sizeof(CMsgServerToGCGetIngameEventData)},
  { 1359, 1365, sizeof(CMsgGCToServerIngameEventDataOraclePA)},
  { 1366, 1374, sizeof(CMsgServerToGCKillSummaries_KillSummary)},
  { 1377, 1384, sizeof(CMsgServerToGCKillSummaries)},
  { 1386, 1396, sizeof(CMsgGCToServerPredictionResult_Prediction)},
  { 1401, 1410, sizeof(CMsgGCToServerPredictionResult)},
  { 1414, 1421, sizeof(CMsgServerToGCLockCharmTrading)},
  { 1423, 1432, sizeof(CMsgSignOutUpdatePlayerChallenge_Challenge)},
  { 1436, 1446, sizeof(CMsgSignOutUpdatePlayerChallenge)},
  { 1451, 1458, sizeof(CMsgServerToGCRerollPlayerChallenge)},
  { 1460, 1468, sizeof(CMsgServerToGCHoldEventPoints_HoldRequest)},
  { 1471, 1480, sizeof(CMsgServerToGCHoldEventPoints)},
  { 1484, 1492, sizeof(CMsgSignOutReleaseEventPointHolds)},
  { 1495, 1503, sizeof(CMsgGCToServerUpdateBroadcastCheers)},
  { 1506, 1515, sizeof(CMsgSignOutWagerStats_Player)},
  { 1519, 1526, sizeof(CMsgSignOutWagerStats)},
  { 1528, 1536, sizeof(CMsgSpendWager_Player)},
  { 1539, 1549, sizeof(CMsgSpendWager)},
  { 1554, 1564, sizeof(CMsgSignOutXPCoins_Player)},
  { 1569, 1578, sizeof(CMsgSignOutXPCoins)},
  { 1582, 1589, sizeof(CMsgSignOutCommunityGoalProgress_EventGoalIncrement)},
  { 1591, 1598, sizeof(CMsgSignOutCommunityGoalProgress)},
  { 1600, 1610, sizeof(CMsgServerToGCPostMatchTip)},
  { 1615, 1624, sizeof(CMsgServerToGCPostMatchTipResponse)},
  { 1628, 1635, sizeof(CMsgServerToGCCloseCompendiumInGamePredictionVoting)},
  { 1637, 1643, sizeof(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)},
  { 1644, 1652, sizeof(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult)},
  { 1655, 1664, sizeof(CMsgServerToGCCompendiumInGamePredictionResults)},
  { 1668, 1674, sizeof(CMsgServerToGCCompendiumInGamePredictionResultsResponse)},
  { 1675, 1681, sizeof(CMsgGCToGCCompendiumInGamePredictionResults)},
  { 1682, 1691, sizeof(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase)},
  { 1695, 1706, sizeof(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player)},
  { 1712, 1720, sizeof(CMsgServerToGCMatchPlayerItemPurchaseHistory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPoorNetworkConditions_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPoorNetworkConditions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameserverCrash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgConnectedPlayers_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgConnectedPlayers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLeaverDetected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLeaverDetectedResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyFinalPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLivePlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAUpdateClippy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCRealtimeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToServerRealtimeStatsStartStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOut_CTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOut_CCustomGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOut_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutDraftInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutBotInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutCommunicationSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignoutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTimedRewardContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOutPermissionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOutPermissionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameMatchSignOutEventGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTALiveScoreboardUpdate_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTALiveScoreboardUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARequestPlayerResources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARequestPlayerResourcesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARequestBatchPlayerResources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARequestBatchPlayerResourcesResponse_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARequestBatchPlayerResourcesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAPlayerFailedToConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToRelayConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGCToLANServerRelayConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToRelayConnectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCBanStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCBanStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTournamentItemEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTournamentItemEventResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTeamFanfare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgResponseTeamFanfare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameServerUploadSaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameServerSaveGameResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameServerGetLoadGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGameServerGetLoadGameResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGenerateDiretidePrizeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARewardDiretidePrizes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTADiretidePrizesRewardedResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAAwardEventPoints_AwardPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAAwardEventPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCSignoutAwardAdditionalDrops_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFrostivusTimeElapsed_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFrostivusTimeElapsed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToServerPingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToServerPingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToServerConsoleCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerGetEventPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerGetEventPointsResponse_Points_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerGetEventPointsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerGrantSurveyPermission_Survey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerGrantSurveyPermission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerGrantSurveyPermissionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCMatchConnectionStats_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCMatchConnectionStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerGCUpdateSpectatorCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSerializedCombatLog_Dictionary_DictString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSerializedCombatLog_Dictionary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSerializedCombatLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCGetAdditionalEquips_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCGetAdditionalEquipsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCGetProfileCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCGetProfileCardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCVictoryPredictions_Record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCVictoryPredictions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSuspiciousActivity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCRequestStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCRequestStatus_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutAssassinMiniGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCGetIngameEventData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToServerIngameEventDataOraclePA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCKillSummaries_KillSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCKillSummaries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToServerPredictionResult_Prediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToServerPredictionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCLockCharmTrading_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutUpdatePlayerChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCRerollPlayerChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCHoldEventPoints_HoldRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCHoldEventPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutReleaseEventPointHolds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToServerUpdateBroadcastCheers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutWagerStats_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutWagerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSpendWager_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSpendWager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutXPCoins_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutXPCoins_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSignOutCommunityGoalProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCPostMatchTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCPostMatchTipResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCCompendiumInGamePredictionResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCCompendiumInGamePredictionResultsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCCompendiumInGamePredictionResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_server.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 125);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgPoorNetworkConditions_Player_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgPoorNetworkConditions_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgGameserverCrash_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgConnectedPlayers_Player_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgConnectedPlayers_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgGameServerInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgLeaverDetected_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgLeaverDetectedResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgDOTAFantasyFinalPlayerStats_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgDOTAFantasyLivePlayerStats_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgDOTAFantasyMatch_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgDOTAUpdateClippy_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgServerToGCRealtimeStats_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgGCToServerRealtimeStatsStartStop_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgGameMatchSignOut_CTeam_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgGameMatchSignOut_CCustomGameData_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgGameMatchSignOut_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgSignOutDraftInfo_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgSignOutBotInfo_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgSignOutPlayerStats_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgSignOutCommunicationSummary_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgGameMatchSignoutResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgTimedRewardContainer_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgGameMatchSignOutPermissionRequest_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgGameMatchSignOutPermissionResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgGameMatchSignOutEventGameData_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CMsgDOTALiveScoreboardUpdate_Team_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CMsgDOTALiveScoreboardUpdate_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CMsgDOTARequestPlayerResources_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CMsgDOTARequestPlayerResourcesResponse_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CMsgDOTARequestBatchPlayerResources_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CMsgDOTARequestBatchPlayerResourcesResponse_Result_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CMsgDOTARequestBatchPlayerResourcesResponse_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CMsgDOTAPlayerFailedToConnect_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CMsgGCToRelayConnect_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CMsgGCGCToLANServerRelayConnect_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CMsgGCToRelayConnectResponse_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CMsgGCBanStatusRequest_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CMsgGCBanStatusResponse_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CMsgTournamentItemEvent_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CMsgTournamentItemEventResponse_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CMsgTeamFanfare_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CMsgResponseTeamFanfare_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CMsgGameServerUploadSaveGame_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CMsgGameServerSaveGameResult_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CMsgGameServerGetLoadGame_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CMsgGameServerGetLoadGameResult_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CMsgDOTAGenerateDiretidePrizeList_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CMsgDOTARewardDiretidePrizes_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CMsgDOTADiretidePrizesRewardedResponse_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CMsgDOTAAwardEventPoints_AwardPoints_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CMsgDOTAAwardEventPoints_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _CMsgServerToGCSignoutAwardAdditionalDrops_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _CMsgDOTAFrostivusTimeElapsed_User_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _CMsgDOTAFrostivusTimeElapsed_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _CMsgGCToServerPingRequest_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _CMsgGCToServerPingResponse_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _CMsgGCToServerConsoleCommand_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _CMsgServerGetEventPoints_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _CMsgServerGetEventPointsResponse_Points_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _CMsgServerGetEventPointsResponse_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _CMsgServerGrantSurveyPermission_Survey_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _CMsgServerGrantSurveyPermission_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _CMsgServerGrantSurveyPermissionResponse_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _CMsgServerToGCMatchConnectionStats_Player_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _CMsgServerToGCMatchConnectionStats_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _CMsgServerGCUpdateSpectatorCount_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _CSerializedCombatLog_Dictionary_DictString_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _CSerializedCombatLog_Dictionary_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _CSerializedCombatLog_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _CMsgServerToGCGetAdditionalEquips_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _CMsgServerToGCGetAdditionalEquipsResponse_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _CMsgServerToGCGetProfileCard_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _CMsgServerToGCGetProfileCardResponse_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _CMsgServerToGCVictoryPredictions_Record_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _CMsgServerToGCVictoryPredictions_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _CMsgSuspiciousActivity_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _CMsgServerToGCRequestStatus_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
  _CMsgServerToGCRequestStatus_Response_default_instance_.Shutdown();
  delete file_level_metadata[90].reflection;
  _CMsgSignOutAssassinMiniGameInfo_default_instance_.Shutdown();
  delete file_level_metadata[91].reflection;
  _CMsgServerToGCGetIngameEventData_default_instance_.Shutdown();
  delete file_level_metadata[92].reflection;
  _CMsgGCToServerIngameEventDataOraclePA_default_instance_.Shutdown();
  delete file_level_metadata[93].reflection;
  _CMsgServerToGCKillSummaries_KillSummary_default_instance_.Shutdown();
  delete file_level_metadata[94].reflection;
  _CMsgServerToGCKillSummaries_default_instance_.Shutdown();
  delete file_level_metadata[95].reflection;
  _CMsgGCToServerPredictionResult_Prediction_default_instance_.Shutdown();
  delete file_level_metadata[96].reflection;
  _CMsgGCToServerPredictionResult_default_instance_.Shutdown();
  delete file_level_metadata[97].reflection;
  _CMsgServerToGCLockCharmTrading_default_instance_.Shutdown();
  delete file_level_metadata[98].reflection;
  _CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_.Shutdown();
  delete file_level_metadata[99].reflection;
  _CMsgSignOutUpdatePlayerChallenge_default_instance_.Shutdown();
  delete file_level_metadata[100].reflection;
  _CMsgServerToGCRerollPlayerChallenge_default_instance_.Shutdown();
  delete file_level_metadata[101].reflection;
  _CMsgServerToGCHoldEventPoints_HoldRequest_default_instance_.Shutdown();
  delete file_level_metadata[102].reflection;
  _CMsgServerToGCHoldEventPoints_default_instance_.Shutdown();
  delete file_level_metadata[103].reflection;
  _CMsgSignOutReleaseEventPointHolds_default_instance_.Shutdown();
  delete file_level_metadata[104].reflection;
  _CMsgGCToServerUpdateBroadcastCheers_default_instance_.Shutdown();
  delete file_level_metadata[105].reflection;
  _CMsgSignOutWagerStats_Player_default_instance_.Shutdown();
  delete file_level_metadata[106].reflection;
  _CMsgSignOutWagerStats_default_instance_.Shutdown();
  delete file_level_metadata[107].reflection;
  _CMsgSpendWager_Player_default_instance_.Shutdown();
  delete file_level_metadata[108].reflection;
  _CMsgSpendWager_default_instance_.Shutdown();
  delete file_level_metadata[109].reflection;
  _CMsgSignOutXPCoins_Player_default_instance_.Shutdown();
  delete file_level_metadata[110].reflection;
  _CMsgSignOutXPCoins_default_instance_.Shutdown();
  delete file_level_metadata[111].reflection;
  _CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_.Shutdown();
  delete file_level_metadata[112].reflection;
  _CMsgSignOutCommunityGoalProgress_default_instance_.Shutdown();
  delete file_level_metadata[113].reflection;
  _CMsgServerToGCPostMatchTip_default_instance_.Shutdown();
  delete file_level_metadata[114].reflection;
  _CMsgServerToGCPostMatchTipResponse_default_instance_.Shutdown();
  delete file_level_metadata[115].reflection;
  _CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_.Shutdown();
  delete file_level_metadata[116].reflection;
  _CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_.Shutdown();
  delete file_level_metadata[117].reflection;
  _CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_.Shutdown();
  delete file_level_metadata[118].reflection;
  _CMsgServerToGCCompendiumInGamePredictionResults_default_instance_.Shutdown();
  delete file_level_metadata[119].reflection;
  _CMsgServerToGCCompendiumInGamePredictionResultsResponse_default_instance_.Shutdown();
  delete file_level_metadata[120].reflection;
  _CMsgGCToGCCompendiumInGamePredictionResults_default_instance_.Shutdown();
  delete file_level_metadata[121].reflection;
  _CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_.Shutdown();
  delete file_level_metadata[122].reflection;
  _CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_.Shutdown();
  delete file_level_metadata[123].reflection;
  _CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_.Shutdown();
  delete file_level_metadata[124].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_steammessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  ::proto::dota::protobuf_econ_5fgcmessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_network_5fconnection_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  _CMsgPoorNetworkConditions_Player_default_instance_.DefaultConstruct();
  _CMsgPoorNetworkConditions_default_instance_.DefaultConstruct();
  _CMsgGameserverCrash_default_instance_.DefaultConstruct();
  _CMsgConnectedPlayers_Player_default_instance_.DefaultConstruct();
  _CMsgConnectedPlayers_default_instance_.DefaultConstruct();
  _CMsgGameServerInfo_default_instance_.DefaultConstruct();
  _CMsgLeaverDetected_default_instance_.DefaultConstruct();
  _CMsgLeaverDetectedResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyFinalPlayerStats_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLivePlayerStats_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyMatch_default_instance_.DefaultConstruct();
  _CMsgDOTAUpdateClippy_default_instance_.DefaultConstruct();
  _CMsgServerToGCRealtimeStats_default_instance_.DefaultConstruct();
  _CMsgGCToServerRealtimeStatsStartStop_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOut_CTeam_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOut_CCustomGameData_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOut_default_instance_.DefaultConstruct();
  _CMsgSignOutDraftInfo_default_instance_.DefaultConstruct();
  _CMsgSignOutBotInfo_default_instance_.DefaultConstruct();
  _CMsgSignOutPlayerStats_default_instance_.DefaultConstruct();
  _CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_.DefaultConstruct();
  _CMsgSignOutCommunicationSummary_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignoutResponse_default_instance_.DefaultConstruct();
  _CMsgTimedRewardContainer_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOutPermissionRequest_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOutPermissionResponse_default_instance_.DefaultConstruct();
  _CMsgGameMatchSignOutEventGameData_default_instance_.DefaultConstruct();
  _CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_.DefaultConstruct();
  _CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_.DefaultConstruct();
  _CMsgDOTALiveScoreboardUpdate_Team_default_instance_.DefaultConstruct();
  _CMsgDOTALiveScoreboardUpdate_default_instance_.DefaultConstruct();
  _CMsgDOTARequestPlayerResources_default_instance_.DefaultConstruct();
  _CMsgDOTARequestPlayerResourcesResponse_default_instance_.DefaultConstruct();
  _CMsgDOTARequestBatchPlayerResources_default_instance_.DefaultConstruct();
  _CMsgDOTARequestBatchPlayerResourcesResponse_Result_default_instance_.DefaultConstruct();
  _CMsgDOTARequestBatchPlayerResourcesResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAPlayerFailedToConnect_default_instance_.DefaultConstruct();
  _CMsgGCToRelayConnect_default_instance_.DefaultConstruct();
  _CMsgGCGCToLANServerRelayConnect_default_instance_.DefaultConstruct();
  _CMsgGCToRelayConnectResponse_default_instance_.DefaultConstruct();
  _CMsgGCBanStatusRequest_default_instance_.DefaultConstruct();
  _CMsgGCBanStatusResponse_default_instance_.DefaultConstruct();
  _CMsgTournamentItemEvent_default_instance_.DefaultConstruct();
  _CMsgTournamentItemEventResponse_default_instance_.DefaultConstruct();
  _CMsgTeamFanfare_default_instance_.DefaultConstruct();
  _CMsgResponseTeamFanfare_default_instance_.DefaultConstruct();
  _CMsgGameServerUploadSaveGame_default_instance_.DefaultConstruct();
  _CMsgGameServerSaveGameResult_default_instance_.DefaultConstruct();
  _CMsgGameServerGetLoadGame_default_instance_.DefaultConstruct();
  _CMsgGameServerGetLoadGameResult_default_instance_.DefaultConstruct();
  _CMsgDOTAGenerateDiretidePrizeList_default_instance_.DefaultConstruct();
  _CMsgDOTAGenerateDiretidePrizeListResponse_default_instance_.DefaultConstruct();
  _CMsgDOTARewardDiretidePrizes_default_instance_.DefaultConstruct();
  _CMsgDOTADiretidePrizesRewardedResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAAwardEventPoints_AwardPoints_default_instance_.DefaultConstruct();
  _CMsgDOTAAwardEventPoints_default_instance_.DefaultConstruct();
  _CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops_default_instance_.DefaultConstruct();
  _CMsgServerToGCSignoutAwardAdditionalDrops_default_instance_.DefaultConstruct();
  _CMsgDOTAFrostivusTimeElapsed_User_default_instance_.DefaultConstruct();
  _CMsgDOTAFrostivusTimeElapsed_default_instance_.DefaultConstruct();
  _CMsgGCToServerPingRequest_default_instance_.DefaultConstruct();
  _CMsgGCToServerPingResponse_default_instance_.DefaultConstruct();
  _CMsgGCToServerConsoleCommand_default_instance_.DefaultConstruct();
  _CMsgServerGetEventPoints_default_instance_.DefaultConstruct();
  _CMsgServerGetEventPointsResponse_Points_default_instance_.DefaultConstruct();
  _CMsgServerGetEventPointsResponse_default_instance_.DefaultConstruct();
  _CMsgServerGrantSurveyPermission_Survey_default_instance_.DefaultConstruct();
  _CMsgServerGrantSurveyPermission_default_instance_.DefaultConstruct();
  _CMsgServerGrantSurveyPermissionResponse_default_instance_.DefaultConstruct();
  _CMsgServerToGCMatchConnectionStats_Player_default_instance_.DefaultConstruct();
  _CMsgServerToGCMatchConnectionStats_default_instance_.DefaultConstruct();
  _CMsgServerGCUpdateSpectatorCount_default_instance_.DefaultConstruct();
  _CSerializedCombatLog_Dictionary_DictString_default_instance_.DefaultConstruct();
  _CSerializedCombatLog_Dictionary_default_instance_.DefaultConstruct();
  _CSerializedCombatLog_default_instance_.DefaultConstruct();
  _CMsgServerToGCGetAdditionalEquips_default_instance_.DefaultConstruct();
  _CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips_default_instance_.DefaultConstruct();
  _CMsgServerToGCGetAdditionalEquipsResponse_default_instance_.DefaultConstruct();
  _CMsgServerToGCGetProfileCard_default_instance_.DefaultConstruct();
  _CMsgServerToGCGetProfileCardResponse_default_instance_.DefaultConstruct();
  _CMsgServerToGCVictoryPredictions_Record_default_instance_.DefaultConstruct();
  _CMsgServerToGCVictoryPredictions_default_instance_.DefaultConstruct();
  _CMsgSuspiciousActivity_default_instance_.DefaultConstruct();
  _CMsgServerToGCRequestStatus_default_instance_.DefaultConstruct();
  _CMsgServerToGCRequestStatus_Response_default_instance_.DefaultConstruct();
  _CMsgSignOutAssassinMiniGameInfo_default_instance_.DefaultConstruct();
  _CMsgServerToGCGetIngameEventData_default_instance_.DefaultConstruct();
  _CMsgGCToServerIngameEventDataOraclePA_default_instance_.DefaultConstruct();
  _CMsgServerToGCKillSummaries_KillSummary_default_instance_.DefaultConstruct();
  _CMsgServerToGCKillSummaries_default_instance_.DefaultConstruct();
  _CMsgGCToServerPredictionResult_Prediction_default_instance_.DefaultConstruct();
  _CMsgGCToServerPredictionResult_default_instance_.DefaultConstruct();
  _CMsgServerToGCLockCharmTrading_default_instance_.DefaultConstruct();
  _CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_.DefaultConstruct();
  _CMsgSignOutUpdatePlayerChallenge_default_instance_.DefaultConstruct();
  _CMsgServerToGCRerollPlayerChallenge_default_instance_.DefaultConstruct();
  _CMsgServerToGCHoldEventPoints_HoldRequest_default_instance_.DefaultConstruct();
  _CMsgServerToGCHoldEventPoints_default_instance_.DefaultConstruct();
  _CMsgSignOutReleaseEventPointHolds_default_instance_.DefaultConstruct();
  _CMsgGCToServerUpdateBroadcastCheers_default_instance_.DefaultConstruct();
  _CMsgSignOutWagerStats_Player_default_instance_.DefaultConstruct();
  _CMsgSignOutWagerStats_default_instance_.DefaultConstruct();
  _CMsgSpendWager_Player_default_instance_.DefaultConstruct();
  _CMsgSpendWager_default_instance_.DefaultConstruct();
  _CMsgSignOutXPCoins_Player_default_instance_.DefaultConstruct();
  _CMsgSignOutXPCoins_default_instance_.DefaultConstruct();
  _CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_.DefaultConstruct();
  _CMsgSignOutCommunityGoalProgress_default_instance_.DefaultConstruct();
  _CMsgServerToGCPostMatchTip_default_instance_.DefaultConstruct();
  _CMsgServerToGCPostMatchTipResponse_default_instance_.DefaultConstruct();
  _CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_.DefaultConstruct();
  _CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_.DefaultConstruct();
  _CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_.DefaultConstruct();
  _CMsgServerToGCCompendiumInGamePredictionResults_default_instance_.DefaultConstruct();
  _CMsgServerToGCCompendiumInGamePredictionResultsResponse_default_instance_.DefaultConstruct();
  _CMsgGCToGCCompendiumInGamePredictionResults_default_instance_.DefaultConstruct();
  _CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_.DefaultConstruct();
  _CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_.DefaultConstruct();
  _CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_.DefaultConstruct();
  _CMsgConnectedPlayers_Player_default_instance_.get_mutable()->leaver_state_ = const_cast< ::proto::dota::CMsgLeaverState*>(
      ::proto::dota::CMsgLeaverState::internal_default_instance());
  _CMsgConnectedPlayers_default_instance_.get_mutable()->poor_network_conditions_ = const_cast< ::proto::dota::CMsgPoorNetworkConditions*>(
      ::proto::dota::CMsgPoorNetworkConditions::internal_default_instance());
  _CMsgLeaverDetected_default_instance_.get_mutable()->leaver_state_ = const_cast< ::proto::dota::CMsgLeaverState*>(
      ::proto::dota::CMsgLeaverState::internal_default_instance());
  _CMsgLeaverDetected_default_instance_.get_mutable()->poor_network_conditions_ = const_cast< ::proto::dota::CMsgPoorNetworkConditions*>(
      ::proto::dota::CMsgPoorNetworkConditions::internal_default_instance());
  _CMsgServerToGCRealtimeStats_default_instance_.get_mutable()->delayed_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStatsTerse*>(
      ::proto::dota::CMsgDOTARealtimeGameStatsTerse::internal_default_instance());
  _CMsgServerToGCRealtimeStats_default_instance_.get_mutable()->current_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStats*>(
      ::proto::dota::CMsgDOTARealtimeGameStats::internal_default_instance());
  _CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_.get_mutable()->custom_game_data_ = const_cast< ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData*>(
      ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::internal_default_instance());
  _CMsgGameMatchSignOut_default_instance_.get_mutable()->poor_network_conditions_ = const_cast< ::proto::dota::CMsgPoorNetworkConditions*>(
      ::proto::dota::CMsgPoorNetworkConditions::internal_default_instance());
  _CMsgGameMatchSignOut_default_instance_.get_mutable()->custom_game_data_ = const_cast< ::proto::dota::CMsgGameMatchSignOut_CCustomGameData*>(
      ::proto::dota::CMsgGameMatchSignOut_CCustomGameData::internal_default_instance());
  _CMsgGameMatchSignoutResponse_default_instance_.get_mutable()->match_details_ = const_cast< ::proto::dota::CMsgDOTAMatch*>(
      ::proto::dota::CMsgDOTAMatch::internal_default_instance());
  _CMsgDOTALiveScoreboardUpdate_default_instance_.get_mutable()->team_good_ = const_cast< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team*>(
      ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::internal_default_instance());
  _CMsgDOTALiveScoreboardUpdate_default_instance_.get_mutable()->team_bad_ = const_cast< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team*>(
      ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::internal_default_instance());
  _CSerializedCombatLog_default_instance_.get_mutable()->dictionary_ = const_cast< ::proto::dota::CSerializedCombatLog_Dictionary*>(
      ::proto::dota::CSerializedCombatLog_Dictionary::internal_default_instance());
  _CMsgServerToGCRerollPlayerChallenge_default_instance_.get_mutable()->reroll_msg_ = const_cast< ::proto::dota::CMsgClientToGCRerollPlayerChallenge*>(
      ::proto::dota::CMsgClientToGCRerollPlayerChallenge::internal_default_instance());
  _CMsgGCToGCCompendiumInGamePredictionResults_default_instance_.get_mutable()->results_ = const_cast< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults*>(
      ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\034dota_gcmessages_server.proto\022\nproto.do"
      "ta\032\023steammessages.proto\032\027dota_shared_enu"
      "ms.proto\032\034dota_gcmessages_common.proto\032\025"
      "econ_gcmessages.proto\032\030network_connectio"
      "n.proto\032-dota_gcmessages_common_match_ma"
      "nagement.proto\"\352\002\n\031CMsgPoorNetworkCondit"
      "ions\022]\n\016detection_type\030\001 \001(\0162&.proto.dot"
      "a.EPoorNetworkConditionsType:\035k_EPoorNet"
      "workConditions_None\022=\n\007players\030\002 \003(\0132,.p"
      "roto.dota.CMsgPoorNetworkConditions.Play"
      "er\032\256\001\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022^\n\021dis"
      "connect_reason\030\002 \001(\0162\'.proto.dota.ENetwo"
      "rkDisconnectionReason:\032NETWORK_DISCONNEC"
      "T_INVALID\022\031\n\021num_bad_intervals\030\003 \001(\r\022\025\n\r"
      "peak_loss_pct\030\004 \001(\r\"\321\002\n\023CMsgGameserverCr"
      "ash\022\020\n\010match_id\030\001 \001(\004\022\020\n\010lobby_id\030\002 \001(\006\022"
      "I\n\ngame_state\030\003 \001(\0162\032.proto.dota.DOTA_Ga"
      "meState:\031DOTA_GAMERULES_STATE_INIT\022\032\n\022se"
      "ntinel_save_time\030\004 \001(\007\022\026\n\016custom_game_id"
      "\030\013 \001(\006\022\025\n\rtournament_id\030\014 \001(\r\022\027\n\017server_"
      "steam_id\030\005 \001(\006\022\035\n\025server_public_ip_addr\030"
      "\006 \001(\007\022\023\n\013server_port\030\007 \001(\r\022\026\n\016server_clu"
      "ster\030\010 \001(\r\022\013\n\003pid\030\t \001(\r\022\016\n\006engine\030\n \001(\r\""
      "\343\007\n\024CMsgConnectedPlayers\022B\n\021connected_pl"
      "ayers\030\001 \003(\0132\'.proto.dota.CMsgConnectedPl"
      "ayers.Player\022E\n\024disconnected_players\030\007 \003"
      "(\0132\'.proto.dota.CMsgConnectedPlayers.Pla"
      "yer\022I\n\ngame_state\030\002 \001(\0162\032.proto.dota.DOT"
      "A_GameState:\031DOTA_GAMERULES_STATE_INIT\022\034"
      "\n\024first_blood_happened\030\006 \001(\010\022\036\n\026legacy_m"
      "ass_disconnect\030\t \001(\010\022F\n\027poor_network_con"
      "ditions\030\n \001(\0132%.proto.dota.CMsgPoorNetwo"
      "rkConditions\022I\n\013send_reason\030\010 \001(\0162+.prot"
      "o.dota.CMsgConnectedPlayers.SendReason:\007"
      "INVALID\022\025\n\rradiant_kills\030\013 \001(\r\022\022\n\ndire_k"
      "ills\030\014 \001(\r\022\024\n\014radiant_lead\030\016 \001(\005\022\026\n\016buil"
      "ding_state\030\017 \001(\r\032\276\001\n\006Player\022\020\n\010steam_id\030"
      "\001 \001(\006\022\017\n\007hero_id\030\002 \001(\r\0221\n\014leaver_state\030\003"
      " \001(\0132\033.proto.dota.CMsgLeaverState\022^\n\021dis"
      "connect_reason\030\004 \001(\0162\'.proto.dota.ENetwo"
      "rkDisconnectionReason:\032NETWORK_DISCONNEC"
      "T_INVALID\"\211\002\n\nSendReason\022\013\n\007INVALID\020\000\022\r\n"
      "\tHEARTBEAT\020\001\022\016\n\nGAME_STATE\020\002\022\017\n\013FIRST_BL"
      "OOD\020\003\022\024\n\020PLAYER_CONNECTED\020\004\022\017\n\013PLAYER_HE"
      "RO\020\005\022$\n PLAYER_DISCONNECTED_CONSEQUENCES"
      "\020\006\022&\n\"PLAYER_DISCONNECTED_NOCONSEQUENCES"
      "\020\007\022\025\n\021GAMESTATE_TIMEOUT\020\n\022\023\n\017MASS_DISCON"
      "NECT\020\013\022\t\n\005KILLS\020\r\022\022\n\016BUILDING_STATE\020\016\"\342\006"
      "\n\022CMsgGameServerInfo\022\035\n\025server_public_ip"
      "_addr\030\001 \001(\007\022\036\n\026server_private_ip_addr\030\002 "
      "\001(\007\022\023\n\013server_port\030\003 \001(\r\022\026\n\016server_tv_po"
      "rt\030\004 \001(\r\022\037\n\027assigned_server_tv_port\030\026 \001("
      "\r\022!\n\031server_steamdatagram_port\030\025 \001(\r\022\022\n\n"
      "server_key\030\005 \001(\t\022\032\n\022server_hibernation\030\006"
      " \001(\010\022K\n\013server_type\030\007 \001(\0162).proto.dota.C"
      "MsgGameServerInfo.ServerType:\013UNSPECIFIE"
      "D\022\025\n\rserver_region\030\010 \001(\r\022\026\n\016server_loada"
      "vg\030\t \001(\002\022 \n\030server_tv_broadcast_time\030\n \001"
      "(\002\022\030\n\020server_game_time\030\013 \001(\002\022\'\n\037server_r"
      "elay_connected_steam_id\030\014 \001(\006\022\027\n\017relay_s"
      "lots_max\030\r \001(\r\022\030\n\020relays_connected\030\016 \001(\005"
      "\022\037\n\027relay_clients_connected\030\017 \001(\005\022$\n\034rel"
      "ayed_game_server_steam_id\030\020 \001(\006\022\032\n\022paren"
      "t_relay_count\030\021 \001(\r\022\026\n\016tv_secret_code\030\022 "
      "\001(\006\022\026\n\016server_version\030\023 \001(\r\022\026\n\016server_cl"
      "uster\030\024 \001(\r\022L\n\022allow_custom_games\030\027 \001(\0162"
      "*.proto.dota.CMsgGameServerInfo.CustomGa"
      "mes:\004BOTH\"2\n\nServerType\022\017\n\013UNSPECIFIED\020\000"
      "\022\010\n\004GAME\020\001\022\t\n\005PROXY\020\002\"+\n\013CustomGames\022\010\n\004"
      "BOTH\020\000\022\010\n\004NONE\020\001\022\010\n\004ONLY\020\002\"\342\002\n\022CMsgLeave"
      "rDetected\022\020\n\010steam_id\030\001 \001(\006\022G\n\rleaver_st"
      "atus\030\002 \001(\0162\036.proto.dota.DOTALeaverStatus"
      "_t:\020DOTA_LEAVER_NONE\0221\n\014leaver_state\030\004 \001"
      "(\0132\033.proto.dota.CMsgLeaverState\022\026\n\016serve"
      "r_cluster\030\005 \001(\r\022^\n\021disconnect_reason\030\006 \001"
      "(\0162\'.proto.dota.ENetworkDisconnectionRea"
      "son:\032NETWORK_DISCONNECT_INVALID\022F\n\027poor_"
      "network_conditions\030\007 \001(\0132%.proto.dota.CM"
      "sgPoorNetworkConditions\",\n\032CMsgLeaverDet"
      "ectedResponse\022\016\n\006result\030\001 \001(\r\"X\n\037CMsgDOT"
      "AFantasyFinalPlayerStats\0225\n\005stats\030\002 \003(\0132"
      "&.proto.dota.CMsgDOTAFantasyPlayerStats\""
      "W\n\036CMsgDOTAFantasyLivePlayerStats\0225\n\005sta"
      "ts\030\002 \003(\0132&.proto.dota.CMsgDOTAFantasyPla"
      "yerStats\"\227\001\n\024CMsgDOTAFantasyMatch\022\020\n\010mat"
      "ch_id\030\001 \001(\004\022\021\n\tleague_id\030\002 \001(\r\022\021\n\tseries"
      "_id\030\003 \001(\r\022\022\n\nstart_time\030\004 \001(\r\022\023\n\013series_"
      "type\030\005 \001(\r\022\016\n\006team_1\030\006 \001(\r\022\016\n\006team_2\030\007 \001"
      "(\r\"M\n\024CMsgDOTAUpdateClippy\022\032\n\022good_team_"
      "hero_ids\030\001 \003(\r\022\031\n\021bad_team_hero_ids\030\002 \003("
      "\r\"\222\001\n\033CMsgServerToGCRealtimeStats\022;\n\007del"
      "ayed\030\001 \001(\0132*.proto.dota.CMsgDOTARealtime"
      "GameStatsTerse\0226\n\007current\030\002 \001(\0132%.proto."
      "dota.CMsgDOTARealtimeGameStats\"H\n$CMsgGC"
      "ToServerRealtimeStatsStartStop\022\017\n\007delaye"
      "d\030\001 \001(\010\022\017\n\007current\030\002 \001(\010\"\353\030\n\024CMsgGameMat"
      "chSignOut\022\026\n\010match_id\030\001 \001(\004B\004\200\246\035\001\022\020\n\010dur"
      "ation\030\002 \001(\r\022\025\n\rgood_guys_win\030\003 \001(\010\022\014\n\004da"
      "te\030\004 \001(\007\022\023\n\013num_players\030\005 \003(\r\0225\n\005teams\030\006"
      " \003(\0132&.proto.dota.CMsgGameMatchSignOut.C"
      "Team\022\024\n\014tower_status\030\010 \003(\r\022\027\n\017barracks_s"
      "tatus\030\t \003(\r\022\017\n\007cluster\030\n \001(\r\022\023\n\013server_a"
      "ddr\030\013 \001(\t\022\030\n\020first_blood_time\030\014 \001(\r\022\024\n\014g"
      "ame_balance\030\r \001(\002\022\023\n\013event_score\030\016 \001(\r\0225"
      "\n\npicks_bans\030\017 \003(\0132!.proto.dota.CMatchHe"
      "roSelectEvent\022=\n\rfantasy_stats\030) \003(\0132&.p"
      "roto.dota.CMsgDOTAFantasyPlayerStats\022Z\n "
      "player_strange_count_adjustments\030\021 \003(\01320"
      ".proto.dota.CMsgEconPlayerStrangeCountAd"
      "justment\022\033\n\023automatic_surrender\030\022 \001(\010\022\026\n"
      "\016server_version\030\023 \001(\r\022\036\n\026legacy_mass_dis"
      "connect\030\025 \001(\010\022F\n\027poor_network_conditions"
      "\030# \001(\0132%.proto.dota.CMsgPoorNetworkCondi"
      "tions\022O\n\017additional_msgs\030\024 \003(\01326.proto.d"
      "ota.CMsgGameMatchSignOut.CAdditionalSign"
      "outMsg\022R\n\022social_feed_events\030$ \003(\01326.pro"
      "to.dota.CMsgGameMatchSignOut.CSocialFeed"
      "MatchEvent\022\036\n\026average_networth_delta\030\026 \001"
      "(\021\022\034\n\024networth_delta_min10\030\027 \001(\021\022\034\n\024netw"
      "orth_delta_min20\030\030 \001(\021\022$\n\034maximum_losing"
      "_networth_lead\030\031 \001(\021\022 \n\030average_experien"
      "ce_delta\030\032 \001(\021\022\036\n\026experience_delta_min10"
      "\030\033 \001(\021\022\036\n\026experience_delta_min20\030\034 \001(\021\022\037"
      "\n\027bonus_gold_winner_min10\030\035 \001(\021\022\037\n\027bonus"
      "_gold_winner_min20\030\036 \001(\021\022\037\n\027bonus_gold_w"
      "inner_total\030\037 \001(\r\022\036\n\026bonus_gold_loser_mi"
      "n10\030  \001(\021\022\036\n\026bonus_gold_loser_min20\030! \001("
      "\021\022\036\n\026bonus_gold_loser_total\030\" \001(\r\022J\n\020cus"
      "tom_game_data\030% \001(\01320.proto.dota.CMsgGam"
      "eMatchSignOut.CCustomGameData\022\023\n\013match_f"
      "lags\030& \001(\r\022\023\n\013team_scores\030\' \003(\r\022\031\n\021pre_g"
      "ame_duration\030( \001(\r\022b\n\036event_game_leaderb"
      "oard_entries\030* \003(\0132:.proto.dota.CMsgGame"
      "MatchSignOut.EventGameLeaderboardEntry\032\334"
      "\t\n\005CTeam\022\?\n\007players\030\001 \003(\0132..proto.dota.C"
      "MsgGameMatchSignOut.CTeam.CPlayer\032\221\t\n\007CP"
      "layer\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007hero_id\030\003 \001(\r"
      "\022\r\n\005items\030\004 \003(\r\022\014\n\004gold\030\005 \001(\r\022\r\n\005kills\030\006"
      " \001(\r\022\016\n\006deaths\030\007 \001(\r\022\017\n\007assists\030\010 \001(\r\022\025\n"
      "\rleaver_status\030\t \001(\r\022\021\n\tlast_hits\030\n \001(\r\022"
      "\016\n\006denies\030\013 \001(\r\022\024\n\014gold_per_min\030\014 \001(\r\022\025\n"
      "\rxp_per_minute\030\r \001(\r\022\022\n\ngold_spent\030\016 \001(\r"
      "\022\r\n\005level\030\017 \001(\r\022\032\n\022scaled_hero_damage\030\020 "
      "\001(\r\022\033\n\023scaled_tower_damage\030\021 \001(\r\022\033\n\023scal"
      "ed_hero_healing\030\022 \001(\r\022\026\n\016time_last_seen\030"
      "\023 \001(\r\022\035\n\025support_ability_value\030\024 \001(\r\022\020\n\010"
      "party_id\030\025 \001(\004\022\024\n\014scaled_kills\030\030 \001(\002\022\025\n\r"
      "scaled_deaths\030\031 \001(\002\022\026\n\016scaled_assists\030\032 "
      "\001(\002\022\031\n\021claimed_farm_gold\030\033 \001(\r\022\024\n\014suppor"
      "t_gold\030\034 \001(\r\022\026\n\016claimed_denies\030\035 \001(\r\022\026\n\016"
      "claimed_misses\030\036 \001(\r\022\016\n\006misses\030\037 \001(\r\022\021\n\t"
      "net_worth\030\" \001(\r\022\023\n\013hero_damage\030% \001(\r\022\024\n\014"
      "tower_damage\030& \001(\r\022\024\n\014hero_healing\030\' \001(\r"
      "\022@\n\020ability_upgrades\030  \003(\0132&.proto.dota."
      "CMatchPlayerAbilityUpgrade\022M\n\032additional"
      "_units_inventory\030! \003(\0132).proto.dota.CMat"
      "chAdditionalUnitInventory\022>\n\017permanent_b"
      "uffs\030( \003(\0132%.proto.dota.CMatchPlayerPerm"
      "anentBuff\022X\n\020custom_game_data\030# \001(\0132>.pr"
      "oto.dota.CMsgGameMatchSignOut.CTeam.CPla"
      "yer.CCustomGameData\022\032\n\022match_player_flag"
      "s\030$ \001(\r\022\032\n\022talent_ability_ids\030) \003(\r\022\027\n\017h"
      "ero_pick_order\030* \001(\r\022\031\n\021hero_was_randome"
      "d\030+ \001(\010\022\026\n\016hero_was_bonus\030, \001(\010\0324\n\017CCust"
      "omGameData\022\021\n\tdota_team\030\001 \001(\r\022\016\n\006winner\030"
      "\002 \001(\010\0325\n\025CAdditionalSignoutMsg\022\n\n\002id\030\001 \001"
      "(\r\022\020\n\010contents\030\002 \001(\014\032z\n\025CSocialFeedMatch"
      "Event\022\022\n\naccount_id\030\001 \001(\r\022\021\n\ttimestamp\030\002"
      " \001(\r\022\022\n\nevent_type\030\003 \001(\r\022\021\n\tgame_time\030\004 "
      "\001(\005\022\023\n\013replay_time\030\005 \001(\r\032,\n\017CCustomGameD"
      "ata\022\031\n\021publish_timestamp\030\001 \001(\r\032\255\001\n\031Event"
      "GameLeaderboardEntry\022\023\n\013name_suffix\030\001 \001("
      "\t\022\r\n\005score\030\002 \001(\005\022\024\n\014extra_data_1\030\003 \001(\r\022\024"
      "\n\014extra_data_2\030\004 \001(\r\022\024\n\014extra_data_3\030\005 \001"
      "(\r\022\024\n\014extra_data_4\030\006 \001(\r\022\024\n\014extra_data_5"
      "\030\007 \001(\r\"\222\001\n\024CMsgSignOutDraftInfo\022\"\n\032radia"
      "nt_captain_account_id\030\001 \001(\r\022\037\n\027dire_capt"
      "ain_account_id\030\002 \001(\r\0225\n\npicks_bans\030\003 \003(\013"
      "2!.proto.dota.CMatchHeroSelectEvent\"\354\001\n\022"
      "CMsgSignOutBotInfo\022\024\n\014allow_cheats\030\001 \001(\010"
      "\022U\n\026bot_difficulty_radiant\030\002 \001(\0162\035.proto"
      ".dota.DOTABotDifficulty:\026BOT_DIFFICULTY_"
      "PASSIVE\022\025\n\rcreated_lobby\030\003 \001(\010\022R\n\023bot_di"
      "fficulty_dire\030\005 \001(\0162\035.proto.dota.DOTABot"
      "Difficulty:\026BOT_DIFFICULTY_PASSIVE\"\341\003\n\026C"
      "MsgSignOutPlayerStats\022\022\n\naccount_id\030\001 \001("
      "\005\022\020\n\010match_id\030\002 \001(\004\022\014\n\004rank\030\003 \001(\r\022\017\n\007her"
      "o_id\030\004 \001(\r\022\020\n\010rampages\030\005 \001(\r\022\024\n\014triple_k"
      "ills\030\006 \001(\r\022\033\n\023first_blood_claimed\030\007 \001(\r\022"
      "\031\n\021first_blood_given\030\010 \001(\r\022\027\n\017couriers_k"
      "illed\030\t \001(\r\022\030\n\020aegises_snatched\030\n \001(\r\022\025\n"
      "\rcheeses_eaten\030\013 \001(\r\022\026\n\016creeps_stacked\030\014"
      " \001(\r\022\023\n\013fight_score\030\r \001(\002\022\022\n\nfarm_score\030"
      "\016 \001(\002\022\025\n\rsupport_score\030\017 \001(\002\022\022\n\npush_sco"
      "re\030\020 \001(\002\022\r\n\005kills\030\021 \001(\r\022\016\n\006deaths\030\022 \001(\r\022"
      "\017\n\007assists\030\023 \001(\r\022\021\n\tlast_hits\030\024 \001(\r\022\016\n\006d"
      "enies\030\025 \001(\r\022\013\n\003gpm\030\026 \001(\002\022\014\n\004xppm\030\027 \001(\002\"\337"
      "\003\n\037CMsgSignOutCommunicationSummary\022P\n\007pl"
      "ayers\030\001 \003(\0132\?.proto.dota.CMsgSignOutComm"
      "unicationSummary.PlayerCommunication\032\351\002\n"
      "\023PlayerCommunication\022\022\n\naccount_id\030\001 \001(\r"
      "\022\r\n\005pings\030\002 \001(\r\022\036\n\026max_pings_per_interva"
      "l\030\003 \001(\r\022\026\n\016teammate_pings\030\004 \001(\r\022\'\n\037max_t"
      "eammate_pings_per_interval\030\005 \001(\r\022\032\n\022team"
      "_chat_messages\030\006 \001(\r\022\031\n\021all_chat_message"
      "s\030\007 \001(\r\022\033\n\023chat_wheel_messages\030\010 \001(\r\022\016\n\006"
      "pauses\030\t \001(\r\022\020\n\010unpauses\030\n \001(\r\022\023\n\013lines_"
      "drawn\030\013 \001(\r\022\032\n\022voice_chat_seconds\030\014 \001(\r\022"
      "\022\n\nchat_mutes\030\r \001(\r\022\023\n\013voice_mutes\030\016 \001(\r"
      "\"\256\005\n\034CMsgGameMatchSignoutResponse\022\020\n\010mat"
      "ch_id\030\001 \001(\004\022\023\n\013replay_salt\030\002 \001(\007\022B\n\024time"
      "d_reward_details\030\003 \003(\0132$.proto.dota.CLob"
      "byTimedRewardDetails\0227\n\021xp_reward_detail"
      "s\030\004 \003(\0132\034.proto.dota.CDOTALobbyMember\022\020\n"
      "\010leagueid\030\005 \001(\r\022\034\n\024metadata_private_key\030"
      "\007 \001(\007\0220\n\rmatch_details\030\010 \001(\0132\031.proto.dot"
      "a.CMsgDOTAMatch\022Q\n\020players_metadata\030\t \003("
      "\01327.proto.dota.CMsgGameMatchSignoutRespo"
      "nse.PlayerMetadata\032\264\002\n\016PlayerMetadata\022\017\n"
      "\007hero_id\030\001 \001(\r\022\025\n\ravg_kills_x16\030\002 \001(\r\022\026\n"
      "\016avg_deaths_x16\030\003 \001(\r\022\027\n\017avg_assists_x16"
      "\030\004 \001(\r\022\023\n\013avg_gpm_x16\030\005 \001(\r\022\023\n\013avg_xpm_x"
      "16\030\006 \001(\r\022\026\n\016best_kills_x16\030\007 \001(\r\022\030\n\020best"
      "_assists_x16\030\010 \001(\r\022\024\n\014best_gpm_x16\030\t \001(\r"
      "\022\024\n\014best_xpm_x16\030\n \001(\r\022\022\n\nwin_streak\030\013 \001"
      "(\r\022\027\n\017best_win_streak\030\014 \001(\r\022\024\n\014games_pla"
      "yed\030\r \001(\r\"^\n\030CMsgTimedRewardContainer\022B\n"
      "\024timed_reward_details\030\001 \003(\0132$.proto.dota"
      ".CLobbyTimedRewardDetails\"\205\001\n%CMsgGameMa"
      "tchSignOutPermissionRequest\022\026\n\016server_ve"
      "rsion\030\001 \001(\r\022\025\n\rlocal_attempt\030\002 \001(\r\022\025\n\rto"
      "tal_attempt\030\003 \001(\r\022\026\n\016seconds_waited\030\004 \001("
      "\r\"\213\001\n&CMsgGameMatchSignOutPermissionResp"
      "onse\022!\n\022permission_granted\030\001 \001(\010:\005false\022"
      "\036\n\017abandon_signout\030\002 \001(\010:\005false\022\036\n\023retry"
      "_delay_seconds\030\003 \001(\r:\0010\"\226\001\n!CMsgGameMatc"
      "hSignOutEventGameData\0223\n\010event_id\030\001 \001(\0162"
      "\022.proto.dota.EEvent:\rEVENT_ID_NONE\022\021\n\tga"
      "me_name\030\002 \001(\t\022\020\n\010map_name\030\003 \001(\t\022\027\n\017event"
      "_game_data\030\004 \001(\014\"\353\n\n\034CMsgDOTALiveScorebo"
      "ardUpdate\022\025\n\rtournament_id\030\001 \001(\r\022\032\n\022tour"
      "nament_game_id\030\002 \001(\r\022\020\n\010duration\030\003 \001(\002\022\022"
      "\n\nhltv_delay\030\004 \001(\005\022@\n\tteam_good\030\005 \001(\0132-."
      "proto.dota.CMsgDOTALiveScoreboardUpdate."
      "Team\022\?\n\010team_bad\030\006 \001(\0132-.proto.dota.CMsg"
      "DOTALiveScoreboardUpdate.Team\022\034\n\024roshan_"
      "respawn_timer\030\007 \001(\r\022\021\n\tleague_id\030\010 \001(\r\022\020"
      "\n\010match_id\030\t \001(\004\032\253\010\n\004Team\022E\n\007players\030\001 \003"
      "(\01324.proto.dota.CMsgDOTALiveScoreboardUp"
      "date.Team.Player\022\r\n\005score\030\002 \001(\r\022\023\n\013tower"
      "_state\030\003 \001(\r\022\026\n\016barracks_state\030\004 \001(\r\022\022\n\n"
      "hero_picks\030\005 \003(\r\022\021\n\thero_bans\030\006 \003(\r\032\370\006\n\006"
      "Player\022\023\n\013player_slot\030\001 \001(\r\022\023\n\013player_na"
      "me\030\002 \001(\t\022\021\n\thero_name\030\003 \001(\t\022\017\n\007hero_id\030\004"
      " \001(\r\022\r\n\005kills\030\005 \001(\r\022\016\n\006deaths\030\006 \001(\r\022\017\n\007a"
      "ssists\030\007 \001(\r\022\021\n\tlast_hits\030\010 \001(\r\022\016\n\006denie"
      "s\030\t \001(\r\022\014\n\004gold\030\n \001(\r\022\r\n\005level\030\013 \001(\r\022\024\n\014"
      "gold_per_min\030\014 \001(\002\022\022\n\nxp_per_min\030\r \001(\002\022~"
      "\n\016ultimate_state\030\016 \001(\0162F.proto.dota.CMsg"
      "DOTALiveScoreboardUpdate.Team.Player.DOT"
      "AUltimateState:\036k_EDOTAUltimateStateNotL"
      "earned\022\031\n\021ultimate_cooldown\030\017 \001(\002\022\r\n\005ite"
      "m0\030\020 \001(\r\022\r\n\005item1\030\021 \001(\r\022\r\n\005item2\030\022 \001(\r\022\r"
      "\n\005item3\030\023 \001(\r\022\r\n\005item4\030\024 \001(\r\022\r\n\005item5\030\025 "
      "\001(\r\022\025\n\rrespawn_timer\030\026 \001(\r\022\022\n\naccount_id"
      "\030\027 \001(\r\022\022\n\nposition_x\030\030 \001(\002\022\022\n\nposition_y"
      "\030\031 \001(\002\022\021\n\tnet_worth\030\032 \001(\r\022S\n\tabilities\030\033"
      " \003(\0132@.proto.dota.CMsgDOTALiveScoreboard"
      "Update.Team.Player.HeroAbility\0328\n\013HeroAb"
      "ility\022\022\n\nability_id\030\001 \001(\r\022\025\n\rability_lev"
      "el\030\002 \001(\r\"\233\001\n\021DOTAUltimateState\022\"\n\036k_EDOT"
      "AUltimateStateNotLearned\020\000\022 \n\034k_EDOTAUlt"
      "imateStateCooldown\020\001\022!\n\035k_EDOTAUltimateS"
      "tateNeedsMana\020\002\022\035\n\031k_EDOTAUltimateStateR"
      "eady\020\003\"E\n\036CMsgDOTARequestPlayerResources"
      "\022\020\n\010steam_id\030\001 \001(\006\022\021\n\tplayer_id\030\002 \001(\r\"\250\001"
      "\n&CMsgDOTARequestPlayerResourcesResponse"
      "\022\020\n\010steam_id\030\001 \001(\006\022\014\n\004rank\030\002 \001(\r\022\021\n\tplay"
      "er_id\030\003 \001(\r\022\031\n\021prevent_text_chat\030\004 \001(\010\022\032"
      "\n\022prevent_voice_chat\030\005 \001(\010\022\024\n\014low_priori"
      "ty\030\006 \001(\010\"V\n#CMsgDOTARequestBatchPlayerRe"
      "sources\022\027\n\013account_ids\030\001 \003(\rB\002\020\001\022\026\n\nrank"
      "_types\030\004 \003(\rB\002\020\001\"\221\002\n+CMsgDOTARequestBatc"
      "hPlayerResourcesResponse\022O\n\007results\030\006 \003("
      "\0132>.proto.dota.CMsgDOTARequestBatchPlaye"
      "rResourcesResponse.Result\032\220\001\n\006Result\022\022\n\n"
      "account_id\030\001 \001(\r\022\031\n\021prevent_text_chat\030\002 "
      "\001(\010\022\032\n\022prevent_voice_chat\030\003 \001(\010\022\014\n\004rank\030"
      "\004 \001(\r\022\027\n\017rank_calibrated\030\005 \001(\010\022\024\n\014low_pr"
      "iority\030\006 \001(\010\"R\n\035CMsgDOTAPlayerFailedToCo"
      "nnect\022\026\n\016failed_loaders\030\001 \003(\006\022\031\n\021abandon"
      "ed_loaders\030\002 \003(\006\"\333\001\n\024CMsgGCToRelayConnec"
      "t\022\035\n\025source_tv_public_addr\030\001 \001(\r\022\036\n\026sour"
      "ce_tv_private_addr\030\002 \001(\r\022\026\n\016source_tv_po"
      "rt\030\003 \001(\r\022\034\n\024game_server_steam_id\030\004 \001(\004\022\024"
      "\n\014parent_count\030\005 \001(\r\022\035\n\025tv_unique_secret"
      "_code\030\006 \001(\006\022\031\n\021source_tv_steamid\030\007 \001(\006\"8"
      "\n\037CMsgGCGCToLANServerRelayConnect\022\025\n\rrel"
      "ay_steamid\030\001 \001(\006\"\036\n\034CMsgGCToRelayConnect"
      "Response\",\n\026CMsgGCBanStatusRequest\022\022\n\nac"
      "count_id\030\001 \001(\r\"t\n\027CMsgGCBanStatusRespons"
      "e\022\016\n\006result\030\001 \001(\r\022\024\n\014low_priority\030\002 \001(\010\022"
      "\030\n\020text_chat_banned\030\003 \001(\010\022\031\n\021voice_chat_"
      "banned\030\004 \001(\010\"\364\002\n\027CMsgTournamentItemEvent"
      "\022\031\n\021killer_account_id\030\001 \001(\007\022\031\n\021victim_ac"
      "count_id\030\002 \001(\007\022E\n\nevent_type\030\003 \001(\0162!.pro"
      "to.dota.DOTA_TournamentEvents:\016TE_FIRST_"
      "BLOOD\022\020\n\010tv_delay\030\004 \001(\005\022\021\n\tdota_time\030\005 \001"
      "(\005\022\023\n\013replay_time\030\006 \001(\002\022\021\n\tloot_list\030\007 \001"
      "(\t\022\022\n\nevent_team\030\010 \001(\r\022\030\n\020multi_kill_cou"
      "nt\030\t \001(\r\022\024\n\014winner_score\030\n \001(\r\022\023\n\013loser_"
      "score\030\013 \001(\r\0226\n\014hero_statues\030\014 \003(\0132 .prot"
      "o.dota.CProtoItemHeroStatue\"\201\001\n\037CMsgTour"
      "namentItemEventResponse\022E\n\nevent_type\030\001 "
      "\001(\0162!.proto.dota.DOTA_TournamentEvents:\016"
      "TE_FIRST_BLOOD\022\027\n\017viewers_granted\030\006 \001(\r\""
      "#\n\017CMsgTeamFanfare\022\020\n\010match_id\030\001 \001(\004\"L\n\027"
      "CMsgResponseTeamFanfare\022\030\n\020fanfare_goodg"
      "uys\030\001 \001(\r\022\027\n\017fanfare_badguys\030\002 \001(\r\"u\n\034CM"
      "sgGameServerUploadSaveGame\022\021\n\tgame_time\030"
      "\001 \001(\r\022\026\n\016save_game_data\030\002 \001(\014\022\020\n\010lobby_i"
      "d\030\003 \001(\004\022\030\n\020player_steam_ids\030\004 \003(\004\"\301\001\n\034CM"
      "sgGameServerSaveGameResult\022O\n\006result\030\001 \001"
      "(\0162/.proto.dota.CMsgGameServerSaveGameRe"
      "sult.Result:\016SaveSuccessful\"P\n\006Result\022\022\n"
      "\016SaveSuccessful\020\000\022\023\n\017SessionNotFound\020\001\022\021"
      "\n\rDatabaseError\020\002\022\n\n\006TooBig\020\003\",\n\031CMsgGam"
      "eServerGetLoadGame\022\017\n\007save_id\030\001 \001(\r\"9\n\037C"
      "MsgGameServerGetLoadGameResult\022\026\n\016save_g"
      "ame_data\030\001 \001(\014\"U\n!CMsgDOTAGenerateDireti"
      "dePrizeList\022\022\n\nprize_list\030\001 \001(\r\022\034\n\024highe"
      "st_roshan_level\030\002 \001(\r\"e\n)CMsgDOTAGenerat"
      "eDiretidePrizeListResponse\022\021\n\titem_defs\030"
      "\001 \003(\r\022\021\n\tsteam_ids\030\002 \003(\006\022\022\n\nprize_list\030\003"
      " \001(\r\"@\n\034CMsgDOTARewardDiretidePrizes\022\014\n\004"
      "team\030\001 \001(\r\022\022\n\nprize_list\030\002 \001(\r\"<\n&CMsgDO"
      "TADiretidePrizesRewardedResponse\022\022\n\npriz"
      "e_list\030\001 \001(\r\"\222\002\n\030CMsgDOTAAwardEventPoint"
      "s\022F\n\014award_points\030\001 \003(\01320.proto.dota.CMs"
      "gDOTAAwardEventPoints.AwardPoints\022\020\n\010mat"
      "ch_id\030\002 \001(\004\022\020\n\010event_id\030\004 \001(\r\022\021\n\ttimesta"
      "mp\030\005 \001(\r\022\024\n\014audit_action\030\006 \001(\r\032a\n\013AwardP"
      "oints\022\022\n\naccount_id\030\001 \001(\r\022\016\n\006points\030\002 \001("
      "\005\022\026\n\016premium_points\030\003 \001(\005\022\026\n\016trade_ban_t"
      "ime\030\005 \001(\r\"\201\002\n)CMsgServerToGCSignoutAward"
      "AdditionalDrops\022T\n\005drops\030\001 \003(\0132E.proto.d"
      "ota.CMsgServerToGCSignoutAwardAdditional"
      "Drops.AdditionalDrops\022\020\n\010match_id\030\002 \001(\004\032"
      "l\n\017AdditionalDrops\022\021\n\tloot_list\030\001 \001(\t\022\032\n"
      "\022player_account_ids\030\002 \003(\r\022\020\n\010no_trade\030\003 "
      "\001(\010\022\030\n\020randomize_reward\030\004 \001(\010\"\263\001\n\034CMsgDO"
      "TAFrostivusTimeElapsed\022\017\n\007seconds\030\001 \001(\r\022"
      "<\n\005users\030\002 \003(\0132-.proto.dota.CMsgDOTAFros"
      "tivusTimeElapsed.User\022\020\n\010match_id\030\003 \001(\004\032"
      "2\n\004User\022\022\n\naccount_id\030\001 \001(\r\022\026\n\016time_elap"
      "sed_s\030\002 \001(\r\"E\n\031CMsgGCToServerPingRequest"
      "\022\022\n\nrequest_id\030\001 \001(\006\022\024\n\014request_time\030\002 \001"
      "(\004\"W\n\032CMsgGCToServerPingResponse\022\022\n\nrequ"
      "est_id\030\001 \001(\006\022\024\n\014request_time\030\002 \001(\004\022\017\n\007cl"
      "uster\030\003 \001(\r\"7\n\034CMsgGCToServerConsoleComm"
      "and\022\027\n\017console_command\030\001 \001(\t\"@\n\030CMsgServ"
      "erGetEventPoints\022\020\n\010event_id\030\001 \001(\r\022\022\n\nac"
      "count_id\030\002 \003(\r\"\274\001\n CMsgServerGetEventPoi"
      "ntsResponse\022\020\n\010event_id\030\001 \001(\r\022C\n\006points\030"
      "\002 \003(\01323.proto.dota.CMsgServerGetEventPoi"
      "ntsResponse.Points\032A\n\006Points\022\022\n\naccount_"
      "id\030\001 \001(\r\022\024\n\014points_total\030\002 \001(\r\022\r\n\005owned\030"
      "\004 \001(\010\"\356\001\n\037CMsgServerGrantSurveyPermissio"
      "n\022C\n\007surveys\030\001 \003(\01322.proto.dota.CMsgServ"
      "erGrantSurveyPermission.Survey\032\205\001\n\006Surve"
      "y\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013question_id\030\002 \001"
      "(\r\022\023\n\013expire_time\030\003 \001(\r\022\022\n\nsurvey_key\030\004 "
      "\001(\004\022\022\n\nextra_data\030\005 \001(\004\022\025\n\rextra_data_32"
      "\030\006 \001(\004\"9\n\'CMsgServerGrantSurveyPermissio"
      "nResponse\022\016\n\006result\030\001 \001(\r\"\273\002\n\"CMsgServer"
      "ToGCMatchConnectionStats\022\020\n\010match_id\030\001 \001"
      "(\004\022\021\n\tregion_id\030\002 \001(\r\022\021\n\tleague_id\030\003 \001(\r"
      "\022F\n\007players\030\004 \003(\01325.proto.dota.CMsgServe"
      "rToGCMatchConnectionStats.Player\022\022\n\nclus"
      "ter_id\030\005 \001(\r\032\200\001\n\006Player\022\022\n\naccount_id\030\001 "
      "\001(\r\022\n\n\002ip\030\002 \001(\007\022\023\n\013avg_ping_ms\030\003 \001(\r\022\023\n\013"
      "packet_loss\030\005 \001(\002\022\026\n\016ping_deviation\030\006 \001("
      "\002\022\024\n\014full_resends\030\007 \001(\r\";\n CMsgServerGCU"
      "pdateSpectatorCount\022\027\n\017spectator_count\030\001"
      " \001(\r\"\235\002\n\024CSerializedCombatLog\022\017\n\007version"
      "\030\001 \001(\r\022\?\n\ndictionary\030\002 \001(\0132+.proto.dota."
      "CSerializedCombatLog.Dictionary\0223\n\007entri"
      "es\030\003 \003(\0132\".proto.dota.CMsgDOTACombatLogE"
      "ntry\032~\n\nDictionary\022G\n\007strings\030\001 \003(\01326.pr"
      "oto.dota.CSerializedCombatLog.Dictionary"
      ".DictString\032\'\n\nDictString\022\n\n\002id\030\001 \002(\r\022\r\n"
      "\005value\030\002 \002(\t\"8\n!CMsgServerToGCGetAdditio"
      "nalEquips\022\023\n\013account_ids\030\001 \003(\r\"\323\001\n)CMsgS"
      "erverToGCGetAdditionalEquipsResponse\022Q\n\006"
      "equips\030\001 \003(\0132A.proto.dota.CMsgServerToGC"
      "GetAdditionalEquipsResponse.CUserEquips\032"
      "S\n\013CUserEquips\022\022\n\naccount_id\030\001 \001(\r\0220\n\006eq"
      "uips\030\002 \003(\0132 .proto.dota.CAdditionalEquip"
      "Slot\"3\n\034CMsgServerToGCGetProfileCard\022\023\n\013"
      "account_ids\030\001 \003(\r\"V\n$CMsgServerToGCGetPr"
      "ofileCardResponse\022.\n\005cards\030\001 \003(\0132\037.proto"
      ".dota.CMsgDOTAProfileCard\"\251\001\n CMsgServer"
      "ToGCVictoryPredictions\022D\n\007records\030\001 \003(\0132"
      "3.proto.dota.CMsgServerToGCVictoryPredic"
      "tions.Record\032\?\n\006Record\022\022\n\naccount_id\030\001 \001"
      "(\r\022\017\n\007item_id\030\002 \001(\004\022\020\n\010item_ids\030\005 \003(\004\"\276\001"
      "\n\026CMsgSuspiciousActivity\022\022\n\naccount_id\030\001"
      " \001(\r\022^\n\010activity\030\002 \001(\0162\037.proto.dota.ESus"
      "piciousActivity:+k_ESuspiciousActivity_V"
      "AC_MultipleInstances\022\020\n\010intdata1\030\003 \001(\021\022\020"
      "\n\010intdata2\030\004 \001(\021\022\014\n\004time\030\005 \001(\r\"\035\n\033CMsgSe"
      "rverToGCRequestStatus\"8\n$CMsgServerToGCR"
      "equestStatus_Response\022\020\n\010response\030\001 \001(\r\""
      "\352\001\n\037CMsgSignOutAssassinMiniGameInfo\022\027\n\017w"
      "inning_players\030\001 \003(\006\022\026\n\016losing_players\030\002"
      " \003(\006\022\025\n\rarcana_owners\030\003 \003(\006\022\024\n\014assassin_"
      "won\030\004 \001(\010\022\026\n\016target_hero_id\030\005 \001(\r\022\032\n\022con"
      "tract_completed\030\006 \001(\010\022\036\n\026contract_comple"
      "te_time\030\007 \001(\002\022\025\n\rpa_is_radiant\030\010 \001(\010\"T\n "
      "CMsgServerToGCGetIngameEventData\0220\n\005even"
      "t\030\001 \001(\0162\022.proto.dota.EEvent:\rEVENT_ID_NO"
      "NE\"@\n%CMsgGCToServerIngameEventDataOracl"
      "ePA\022\027\n\017target_hero_ids\030\001 \003(\r\"\320\001\n\033CMsgSer"
      "verToGCKillSummaries\022\026\n\016ingameevent_id\030\001"
      " \001(\r\022F\n\tsummaries\030\002 \003(\01323.proto.dota.CMs"
      "gServerToGCKillSummaries.KillSummary\032Q\n\013"
      "KillSummary\022\026\n\016killer_hero_id\030\001 \001(\r\022\026\n\016v"
      "ictim_hero_id\030\002 \001(\r\022\022\n\nkill_count\030\003 \001(\r\""
      "\254\003\n\036CMsgGCToServerPredictionResult\022\022\n\nac"
      "count_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\017\n\007corr"
      "ect\030\003 \001(\010\022J\n\013predictions\030\004 \003(\01325.proto.d"
      "ota.CMsgGCToServerPredictionResult.Predi"
      "ction\032\206\002\n\nPrediction\022\020\n\010item_def\030\001 \001(\r\022\023"
      "\n\013num_correct\030\002 \001(\r\022\021\n\tnum_fails\030\003 \001(\r\022d"
      "\n\006result\030\004 \001(\0162=.proto.dota.CMsgGCToServ"
      "erPredictionResult.Prediction.EResult:\025k"
      "_eResult_ItemGranted\022\031\n\021granted_item_def"
      "s\030\006 \003(\r\"=\n\007EResult\022\031\n\025k_eResult_ItemGran"
      "ted\020\001\022\027\n\023k_eResult_Destroyed\020\002\"E\n\036CMsgSe"
      "rverToGCLockCharmTrading\022\022\n\naccount_id\030\001"
      " \001(\r\022\017\n\007item_id\030\002 \001(\004\"\314\002\n CMsgSignOutUpd"
      "atePlayerChallenge\022\022\n\naccount_id\030\001 \001(\r\022I"
      "\n\tcompleted\030\002 \003(\01326.proto.dota.CMsgSignO"
      "utUpdatePlayerChallenge.Challenge\022H\n\010rer"
      "olled\030\003 \003(\01326.proto.dota.CMsgSignOutUpda"
      "tePlayerChallenge.Challenge\022\020\n\010match_id\030"
      "\004 \001(\004\022\017\n\007hero_id\030\005 \001(\r\032\\\n\tChallenge\022\020\n\010e"
      "vent_id\030\001 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\022\020\n\010pr"
      "ogress\030\004 \001(\r\022\026\n\016challenge_rank\030\005 \001(\r\"~\n#"
      "CMsgServerToGCRerollPlayerChallenge\022\022\n\na"
      "ccount_id\030\001 \001(\r\022C\n\nreroll_msg\030\002 \001(\0132/.pr"
      "oto.dota.CMsgClientToGCRerollPlayerChall"
      "enge\"\353\001\n\035CMsgServerToGCHoldEventPoints\022D"
      "\n\005holds\030\001 \003(\01325.proto.dota.CMsgServerToG"
      "CHoldEventPoints.HoldRequest\022\020\n\010event_id"
      "\030\002 \001(\r\022\020\n\010hold_key\030\003 \001(\004\022\022\n\nhold_until\030\004"
      " \001(\r\032L\n\013HoldRequest\022\022\n\naccount_id\030\001 \001(\r\022"
      "\023\n\013points_held\030\002 \001(\r\022\024\n\014premium_held\030\003 \001"
      "(\r\"\\\n!CMsgSignOutReleaseEventPointHolds\022"
      "\023\n\013account_ids\030\001 \003(\r\022\020\n\010event_id\030\002 \001(\r\022\020"
      "\n\010hold_key\030\003 \001(\004\"g\n#CMsgGCToServerUpdate"
      "BroadcastCheers\022\022\n\ntime_stamp\030\001 \001(\r\022\025\n\rt"
      "eam_1_cheers\030\002 \001(\r\022\025\n\rteam_2_cheers\030\003 \001("
      "\r\"\266\001\n\025CMsgSignOutWagerStats\0229\n\007players\030\001"
      " \003(\0132(.proto.dota.CMsgSignOutWagerStats."
      "Player\022\020\n\010event_id\030\002 \001(\r\032P\n\006Player\022\022\n\nac"
      "count_id\030\001 \001(\r\022\020\n\010winnings\030\002 \001(\r\022\021\n\tmax_"
      "wager\030\003 \001(\r\022\r\n\005wager\030\004 \001(\r\"\336\001\n\016CMsgSpend"
      "Wager\0222\n\007players\030\001 \003(\0132!.proto.dota.CMsg"
      "SpendWager.Player\022\020\n\010event_id\030\002 \001(\r\022\021\n\tt"
      "imestamp\030\003 \001(\r\022\020\n\010match_id\030\004 \001(\004\022\027\n\017serv"
      "er_steam_id\030\005 \001(\004\032H\n\006Player\022\022\n\naccount_i"
      "d\030\001 \001(\r\022\r\n\005wager\030\002 \001(\r\022\033\n\023wager_token_it"
      "em_id\030\003 \001(\004\"\372\001\n\022CMsgSignOutXPCoins\0226\n\007pl"
      "ayers\030\001 \003(\0132%.proto.dota.CMsgSignOutXPCo"
      "ins.Player\022\020\n\010event_id\030\002 \001(\r\022\020\n\010match_id"
      "\030\003 \001(\004\022\021\n\ttimestamp\030\004 \001(\r\032u\n\006Player\022\022\n\na"
      "ccount_id\030\001 \001(\r\022\021\n\txp_gained\030\002 \001(\r\022\023\n\013co"
      "ins_spent\030\003 \001(\r\022\033\n\023wager_token_item_id\030\004"
      " \001(\004\022\022\n\nrank_wager\030\005 \001(\r\"\326\001\n CMsgSignOut"
      "CommunityGoalProgress\022\020\n\010event_id\030\001 \001(\r\022"
      "Y\n\020event_increments\030\002 \003(\0132\?.proto.dota.C"
      "MsgSignOutCommunityGoalProgress.EventGoa"
      "lIncrement\032E\n\022EventGoalIncrement\022\025\n\reven"
      "t_goal_id\030\001 \001(\r\022\030\n\020increment_amount\030\002 \001("
      "\r\"\215\001\n\032CMsgServerToGCPostMatchTip\022\020\n\010even"
      "t_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\031\n\021tipper_a"
      "ccount_id\030\003 \001(\r\022\034\n\024recipient_account_id\030"
      "\004 \001(\r\022\022\n\ntip_amount\030\005 \001(\r\"\343\001\n\"CMsgServer"
      "ToGCPostMatchTipResponse\022\020\n\010match_id\030\001 \001"
      "(\004\022\031\n\021tipper_account_id\030\002 \001(\r\022\034\n\024recipie"
      "nt_account_id\030\003 \001(\r\022N\n\006result\030\004 \001(\01625.pr"
      "oto.dota.CMsgServerToGCPostMatchTipRespo"
      "nse.Result:\007SUCCESS\"\"\n\006Result\022\013\n\007SUCCESS"
      "\020\000\022\013\n\007FAILURE\020\001\"[\n3CMsgServerToGCCloseCo"
      "mpendiumInGamePredictionVoting\022\020\n\010match_"
      "id\030\001 \001(\004\022\022\n\nhltv_delay\030\002 \001(\r\"M\n;CMsgServ"
      "erToGCCloseCompendiumInGamePredictionVot"
      "ingResponse\022\016\n\006result\030\001 \001(\010\"\257\002\n/CMsgServ"
      "erToGCCompendiumInGamePredictionResults\022"
      "\020\n\010match_id\030\001 \001(\004\022]\n\007results\030\002 \003(\0132L.pro"
      "to.dota.CMsgServerToGCCompendiumInGamePr"
      "edictionResults.PredictionResult\022\021\n\tleag"
      "ue_id\030\003 \001(\r\022\021\n\tseries_id\030\004 \001(\r\032e\n\020Predic"
      "tionResult\022\025\n\rprediction_id\030\001 \001(\r\022\030\n\020pre"
      "diction_value\030\002 \001(\r\022 \n\030prediction_value_"
      "is_mask\030\003 \001(\010\"I\n7CMsgServerToGCCompendiu"
      "mInGamePredictionResultsResponse\022\016\n\006resu"
      "lt\030\001 \001(\010\"{\n+CMsgGCToGCCompendiumInGamePr"
      "edictionResults\022L\n\007results\030\001 \001(\0132;.proto"
      ".dota.CMsgServerToGCCompendiumInGamePred"
      "ictionResults\"\306\003\n,CMsgServerToGCMatchPla"
      "yerItemPurchaseHistory\022\020\n\010match_id\030\001 \001(\004"
      "\022\013\n\003mmr\030\002 \001(\r\022P\n\007players\030\003 \003(\0132\?.proto.d"
      "ota.CMsgServerToGCMatchPlayerItemPurchas"
      "eHistory.Player\032P\n\014ItemPurchase\022\014\n\004item\030"
      "\001 \001(\r\022\014\n\004gold\030\002 \001(\r\022\021\n\tnet_worth\030\003 \001(\r\022\021"
      "\n\tgame_time\030\004 \001(\r\032\322\001\n\006Player\022\023\n\013player_s"
      "lot\030\001 \001(\r\022\022\n\naccount_id\030\002 \001(\r\022\017\n\007hero_id"
      "\030\003 \001(\r\022\027\n\017allied_hero_ids\030\004 \003(\r\022\026\n\016enemy"
      "_hero_ids\030\005 \003(\r\022]\n\016item_purchases\030\006 \003(\0132"
      "E.proto.dota.CMsgServerToGCMatchPlayerIt"
      "emPurchaseHistory.ItemPurchase*\306\001\n\032EPoor"
      "NetworkConditionsType\022!\n\035k_EPoorNetworkC"
      "onditions_None\020\000\022$\n k_EPoorNetworkCondit"
      "ions_Unknown\020\001\022+\n\'k_EPoorNetworkConditio"
      "ns_MassDisconnect\020\002\0222\n.k_EPoorNetworkCon"
      "ditions_ExcessBadQosIntervals\020\003*\300\002\n\021EAbi"
      "lityAbuseType\022\034\n\030k_EAbilityAbuseType_Non"
      "e\020\000\022#\n\037k_EAbilityAbuseType_Io_Relocate\020\001"
      "\022*\n&k_EAbilityAbuseType_Chen_Test_Of_Fai"
      "th\020\002\022&\n\"k_EAbilityAbuseType_Bane_Nightma"
      "re\020\003\022-\n)k_EAbilityAbuseType_Bloodseeker_"
      "Bloodrage\020\004\0224\n0k_EAbilityAbuseType_Outwo"
      "rld_Astral_Imprisonment\020\005\022/\n+k_EAbilityA"
      "buseType_Shadow_Demon_Disruption\020\006*\315\004\n\027E"
      "IntentionalFeedingType\022\"\n\036k_EIntentional"
      "FeedingType_None\020\000\022-\n)k_EIntentionalFeed"
      "ingType_ExcessiveDeaths\020\001\0226\n2k_EIntentio"
      "nalFeedingType_MultipleCourierPurchases\020"
      "\002\0223\n/k_EIntentionalFeedingType_MultipleC"
      "ourierDeaths\020\004\022)\n%k_EIntentionalFeedingT"
      "ype_LowActivity\020\010\022\'\n#k_EIntentionalFeedi"
      "ngType_LowDamage\020\020\022-\n)k_EIntentionalFeed"
      "ingType_HighUnspentGold\020 \0222\n.k_EIntentio"
      "nalFeedingType_SoldTooMuchItemValue\020@\0222\n"
      "-k_EIntentionalFeedingType_TooManyDroppe"
      "dItems\020\200\001\0223\n.k_EIntentionalFeedingType_E"
      "xcessiveTowerDamage\020\200\002\022-\n(k_EIntentional"
      "FeedingType_LastHitsDenies\020\200\004\022#\n\036k_EInte"
      "ntionalFeedingType_XPPM\020\200\010*\243\001\n\023ESuspicio"
      "usActivity\022/\n+k_ESuspiciousActivity_VAC_"
      "MultipleInstances\020\001\022,\n(k_ESuspiciousActi"
      "vity_IntentionalFeeding\020d\022-\n)k_ESuspicio"
      "usActivity_SuspectedBotFarming\020e*\200\003\n\024ESu"
      "spiciousBuildType\022\037\n\033k_ESuspiciousBuildT"
      "ype_None\020\000\022&\n\"k_ESuspiciousBuildType_NoG"
      "oldSpent\020\001\022\"\n\036k_ESuspiciousBuildType_NoI"
      "tems\020\002\022-\n)k_ESuspiciousBuildType_NoSigni"
      "ficantItems\020\003\022\'\n#k_ESuspiciousBuildType_"
      "TooManyBoots\020\004\022\037\n\033k_ESuspiciousBuildType"
      "_Bot1\020e\022\037\n\033k_ESuspiciousBuildType_Bot2\020f"
      "\022\037\n\033k_ESuspiciousBuildType_Bot3\020g\022\037\n\033k_E"
      "SuspiciousBuildType_Bot4\020h\022\037\n\033k_ESuspici"
      "ousBuildType_Bot5\020iB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 22586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_server.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_steammessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_2eproto::AddDescriptors();
  ::proto::dota::protobuf_econ_5fgcmessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_network_5fconnection_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fserver_2eproto

const ::google::protobuf::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[0];
}
bool CMsgConnectedPlayers_SendReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::INVALID;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::HEARTBEAT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAME_STATE;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::FIRST_BLOOD;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_CONNECTED;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_HERO;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_CONSEQUENCES;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_NOCONSEQUENCES;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAMESTATE_TIMEOUT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::MASS_DISCONNECT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::KILLS;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::BUILDING_STATE;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MIN;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MAX;
const int CMsgConnectedPlayers::SendReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[1];
}
bool CMsgGameServerInfo_ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::UNSPECIFIED;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::GAME;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::PROXY;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MIN;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MAX;
const int CMsgGameServerInfo::ServerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_CustomGames_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[2];
}
bool CMsgGameServerInfo_CustomGames_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::BOTH;
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::NONE;
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::ONLY;
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::CustomGames_MIN;
const CMsgGameServerInfo_CustomGames CMsgGameServerInfo::CustomGames_MAX;
const int CMsgGameServerInfo::CustomGames_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[3];
}
bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNotLearned;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateCooldown;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNeedsMana;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateReady;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MIN;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MAX;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[4];
}
bool CMsgGameServerSaveGameResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SaveSuccessful;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SessionNotFound;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::DatabaseError;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::TooBig;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MIN;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MAX;
const int CMsgGameServerSaveGameResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCToServerPredictionResult_Prediction_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[5];
}
bool CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_ItemGranted;
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_Destroyed;
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MIN;
const CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MAX;
const int CMsgGCToServerPredictionResult_Prediction::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgServerToGCPostMatchTipResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[6];
}
bool CMsgServerToGCPostMatchTipResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::SUCCESS;
const CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::FAILURE;
const CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::Result_MIN;
const CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::Result_MAX;
const int CMsgServerToGCPostMatchTipResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EPoorNetworkConditionsType_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[7];
}
bool EPoorNetworkConditionsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAbilityAbuseType_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[8];
}
bool EAbilityAbuseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EIntentionalFeedingType_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[9];
}
bool EIntentionalFeedingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESuspiciousActivity_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[10];
}
bool ESuspiciousActivity_IsValid(int value) {
  switch (value) {
    case 1:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESuspiciousBuildType_descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_enum_descriptors[11];
}
bool ESuspiciousBuildType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPoorNetworkConditions_Player::kAccountIdFieldNumber;
const int CMsgPoorNetworkConditions_Player::kDisconnectReasonFieldNumber;
const int CMsgPoorNetworkConditions_Player::kNumBadIntervalsFieldNumber;
const int CMsgPoorNetworkConditions_Player::kPeakLossPctFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPoorNetworkConditions.Player)
}
CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player(const CMsgPoorNetworkConditions_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&peak_loss_pct_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(peak_loss_pct_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPoorNetworkConditions.Player)
}

void CMsgPoorNetworkConditions_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&peak_loss_pct_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(peak_loss_pct_));
}

CMsgPoorNetworkConditions_Player::~CMsgPoorNetworkConditions_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPoorNetworkConditions.Player)
  SharedDtor();
}

void CMsgPoorNetworkConditions_Player::SharedDtor() {
}

void CMsgPoorNetworkConditions_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPoorNetworkConditions_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPoorNetworkConditions_Player& CMsgPoorNetworkConditions_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPoorNetworkConditions_Player* CMsgPoorNetworkConditions_Player::New(::google::protobuf::Arena* arena) const {
  CMsgPoorNetworkConditions_Player* n = new CMsgPoorNetworkConditions_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPoorNetworkConditions_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPoorNetworkConditions.Player)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&peak_loss_pct_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(peak_loss_pct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPoorNetworkConditions_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPoorNetworkConditions.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ::proto::dota::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_bad_intervals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_bad_intervals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_bad_intervals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 peak_loss_pct = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_peak_loss_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peak_loss_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPoorNetworkConditions.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPoorNetworkConditions.Player)
  return false;
#undef DO_
}

void CMsgPoorNetworkConditions_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPoorNetworkConditions.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->disconnect_reason(), output);
  }

  // optional uint32 num_bad_intervals = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_bad_intervals(), output);
  }

  // optional uint32 peak_loss_pct = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peak_loss_pct(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPoorNetworkConditions.Player)
}

::google::protobuf::uint8* CMsgPoorNetworkConditions_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPoorNetworkConditions.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->disconnect_reason(), target);
  }

  // optional uint32 num_bad_intervals = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_bad_intervals(), target);
  }

  // optional uint32 peak_loss_pct = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peak_loss_pct(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPoorNetworkConditions.Player)
  return target;
}

size_t CMsgPoorNetworkConditions_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPoorNetworkConditions.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
    if (has_disconnect_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }

    // optional uint32 num_bad_intervals = 3;
    if (has_num_bad_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_bad_intervals());
    }

    // optional uint32 peak_loss_pct = 4;
    if (has_peak_loss_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peak_loss_pct());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPoorNetworkConditions_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPoorNetworkConditions.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPoorNetworkConditions_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPoorNetworkConditions_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPoorNetworkConditions.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPoorNetworkConditions.Player)
    MergeFrom(*source);
  }
}

void CMsgPoorNetworkConditions_Player::MergeFrom(const CMsgPoorNetworkConditions_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPoorNetworkConditions.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      disconnect_reason_ = from.disconnect_reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_bad_intervals_ = from.num_bad_intervals_;
    }
    if (cached_has_bits & 0x00000008u) {
      peak_loss_pct_ = from.peak_loss_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPoorNetworkConditions_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPoorNetworkConditions.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPoorNetworkConditions_Player::CopyFrom(const CMsgPoorNetworkConditions_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPoorNetworkConditions.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions_Player::IsInitialized() const {
  return true;
}

void CMsgPoorNetworkConditions_Player::Swap(CMsgPoorNetworkConditions_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPoorNetworkConditions_Player::InternalSwap(CMsgPoorNetworkConditions_Player* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(disconnect_reason_, other->disconnect_reason_);
  std::swap(num_bad_intervals_, other->num_bad_intervals_);
  std::swap(peak_loss_pct_, other->peak_loss_pct_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPoorNetworkConditions_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPoorNetworkConditions_Player

// optional uint32 account_id = 1;
bool CMsgPoorNetworkConditions_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPoorNetworkConditions_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPoorNetworkConditions_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPoorNetworkConditions_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgPoorNetworkConditions_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPoorNetworkConditions.Player.account_id)
  return account_id_;
}
void CMsgPoorNetworkConditions_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPoorNetworkConditions.Player.account_id)
}

// optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
bool CMsgPoorNetworkConditions_Player::has_disconnect_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPoorNetworkConditions_Player::set_has_disconnect_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPoorNetworkConditions_Player::clear_has_disconnect_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPoorNetworkConditions_Player::clear_disconnect_reason() {
  disconnect_reason_ = 0;
  clear_has_disconnect_reason();
}
::proto::dota::ENetworkDisconnectionReason CMsgPoorNetworkConditions_Player::disconnect_reason() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPoorNetworkConditions.Player.disconnect_reason)
  return static_cast< ::proto::dota::ENetworkDisconnectionReason >(disconnect_reason_);
}
void CMsgPoorNetworkConditions_Player::set_disconnect_reason(::proto::dota::ENetworkDisconnectionReason value) {
  assert(::proto::dota::ENetworkDisconnectionReason_IsValid(value));
  set_has_disconnect_reason();
  disconnect_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPoorNetworkConditions.Player.disconnect_reason)
}

// optional uint32 num_bad_intervals = 3;
bool CMsgPoorNetworkConditions_Player::has_num_bad_intervals() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPoorNetworkConditions_Player::set_has_num_bad_intervals() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPoorNetworkConditions_Player::clear_has_num_bad_intervals() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPoorNetworkConditions_Player::clear_num_bad_intervals() {
  num_bad_intervals_ = 0u;
  clear_has_num_bad_intervals();
}
::google::protobuf::uint32 CMsgPoorNetworkConditions_Player::num_bad_intervals() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPoorNetworkConditions.Player.num_bad_intervals)
  return num_bad_intervals_;
}
void CMsgPoorNetworkConditions_Player::set_num_bad_intervals(::google::protobuf::uint32 value) {
  set_has_num_bad_intervals();
  num_bad_intervals_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPoorNetworkConditions.Player.num_bad_intervals)
}

// optional uint32 peak_loss_pct = 4;
bool CMsgPoorNetworkConditions_Player::has_peak_loss_pct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPoorNetworkConditions_Player::set_has_peak_loss_pct() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPoorNetworkConditions_Player::clear_has_peak_loss_pct() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPoorNetworkConditions_Player::clear_peak_loss_pct() {
  peak_loss_pct_ = 0u;
  clear_has_peak_loss_pct();
}
::google::protobuf::uint32 CMsgPoorNetworkConditions_Player::peak_loss_pct() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPoorNetworkConditions.Player.peak_loss_pct)
  return peak_loss_pct_;
}
void CMsgPoorNetworkConditions_Player::set_peak_loss_pct(::google::protobuf::uint32 value) {
  set_has_peak_loss_pct();
  peak_loss_pct_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPoorNetworkConditions.Player.peak_loss_pct)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPoorNetworkConditions::kDetectionTypeFieldNumber;
const int CMsgPoorNetworkConditions::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPoorNetworkConditions::CMsgPoorNetworkConditions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPoorNetworkConditions)
}
CMsgPoorNetworkConditions::CMsgPoorNetworkConditions(const CMsgPoorNetworkConditions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detection_type_ = from.detection_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPoorNetworkConditions)
}

void CMsgPoorNetworkConditions::SharedCtor() {
  _cached_size_ = 0;
  detection_type_ = 0;
}

CMsgPoorNetworkConditions::~CMsgPoorNetworkConditions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPoorNetworkConditions)
  SharedDtor();
}

void CMsgPoorNetworkConditions::SharedDtor() {
}

void CMsgPoorNetworkConditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPoorNetworkConditions::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPoorNetworkConditions& CMsgPoorNetworkConditions::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPoorNetworkConditions* CMsgPoorNetworkConditions::New(::google::protobuf::Arena* arena) const {
  CMsgPoorNetworkConditions* n = new CMsgPoorNetworkConditions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPoorNetworkConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPoorNetworkConditions)
  players_.Clear();
  detection_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPoorNetworkConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPoorNetworkConditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EPoorNetworkConditionsType_IsValid(value)) {
            set_detection_type(static_cast< ::proto::dota::EPoorNetworkConditionsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPoorNetworkConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPoorNetworkConditions)
  return false;
#undef DO_
}

void CMsgPoorNetworkConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPoorNetworkConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->detection_type(), output);
  }

  // repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPoorNetworkConditions)
}

::google::protobuf::uint8* CMsgPoorNetworkConditions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPoorNetworkConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->detection_type(), target);
  }

  // repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPoorNetworkConditions)
  return target;
}

size_t CMsgPoorNetworkConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPoorNetworkConditions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  if (has_detection_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->detection_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPoorNetworkConditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPoorNetworkConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPoorNetworkConditions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPoorNetworkConditions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPoorNetworkConditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPoorNetworkConditions)
    MergeFrom(*source);
  }
}

void CMsgPoorNetworkConditions::MergeFrom(const CMsgPoorNetworkConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPoorNetworkConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_detection_type()) {
    set_detection_type(from.detection_type());
  }
}

void CMsgPoorNetworkConditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPoorNetworkConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPoorNetworkConditions::CopyFrom(const CMsgPoorNetworkConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPoorNetworkConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions::IsInitialized() const {
  return true;
}

void CMsgPoorNetworkConditions::Swap(CMsgPoorNetworkConditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPoorNetworkConditions::InternalSwap(CMsgPoorNetworkConditions* other) {
  players_.InternalSwap(&other->players_);
  std::swap(detection_type_, other->detection_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPoorNetworkConditions::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPoorNetworkConditions

// optional .proto.dota.EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
bool CMsgPoorNetworkConditions::has_detection_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPoorNetworkConditions::set_has_detection_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPoorNetworkConditions::clear_has_detection_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPoorNetworkConditions::clear_detection_type() {
  detection_type_ = 0;
  clear_has_detection_type();
}
::proto::dota::EPoorNetworkConditionsType CMsgPoorNetworkConditions::detection_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPoorNetworkConditions.detection_type)
  return static_cast< ::proto::dota::EPoorNetworkConditionsType >(detection_type_);
}
void CMsgPoorNetworkConditions::set_detection_type(::proto::dota::EPoorNetworkConditionsType value) {
  assert(::proto::dota::EPoorNetworkConditionsType_IsValid(value));
  set_has_detection_type();
  detection_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPoorNetworkConditions.detection_type)
}

// repeated .proto.dota.CMsgPoorNetworkConditions.Player players = 2;
int CMsgPoorNetworkConditions::players_size() const {
  return players_.size();
}
void CMsgPoorNetworkConditions::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgPoorNetworkConditions_Player& CMsgPoorNetworkConditions::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPoorNetworkConditions.players)
  return players_.Get(index);
}
::proto::dota::CMsgPoorNetworkConditions_Player* CMsgPoorNetworkConditions::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPoorNetworkConditions.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgPoorNetworkConditions_Player* CMsgPoorNetworkConditions::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgPoorNetworkConditions.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPoorNetworkConditions_Player >*
CMsgPoorNetworkConditions::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgPoorNetworkConditions.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPoorNetworkConditions_Player >&
CMsgPoorNetworkConditions::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgPoorNetworkConditions.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameserverCrash::kMatchIdFieldNumber;
const int CMsgGameserverCrash::kLobbyIdFieldNumber;
const int CMsgGameserverCrash::kGameStateFieldNumber;
const int CMsgGameserverCrash::kSentinelSaveTimeFieldNumber;
const int CMsgGameserverCrash::kCustomGameIdFieldNumber;
const int CMsgGameserverCrash::kTournamentIdFieldNumber;
const int CMsgGameserverCrash::kServerSteamIdFieldNumber;
const int CMsgGameserverCrash::kServerPublicIpAddrFieldNumber;
const int CMsgGameserverCrash::kServerPortFieldNumber;
const int CMsgGameserverCrash::kServerClusterFieldNumber;
const int CMsgGameserverCrash::kPidFieldNumber;
const int CMsgGameserverCrash::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameserverCrash::CMsgGameserverCrash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameserverCrash)
}
CMsgGameserverCrash::CMsgGameserverCrash(const CMsgGameserverCrash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(tournament_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameserverCrash)
}

void CMsgGameserverCrash::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(tournament_id_));
}

CMsgGameserverCrash::~CMsgGameserverCrash() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameserverCrash)
  SharedDtor();
}

void CMsgGameserverCrash::SharedDtor() {
}

void CMsgGameserverCrash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameserverCrash::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameserverCrash& CMsgGameserverCrash::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameserverCrash* CMsgGameserverCrash::New(::google::protobuf::Arena* arena) const {
  CMsgGameserverCrash* n = new CMsgGameserverCrash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameserverCrash::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameserverCrash)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&server_cluster_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(server_cluster_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&pid_, 0, reinterpret_cast<char*>(&tournament_id_) -
      reinterpret_cast<char*>(&pid_) + sizeof(tournament_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameserverCrash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameserverCrash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 lobby_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::proto::dota::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 sentinel_save_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_sentinel_save_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sentinel_save_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_public_ip_addr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_server_public_ip_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_public_ip_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_cluster = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_server_cluster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 engine = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_engine();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameserverCrash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameserverCrash)
  return false;
#undef DO_
}

void CMsgGameserverCrash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameserverCrash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->lobby_id(), output);
  }

  // optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->game_state(), output);
  }

  // optional fixed32 sentinel_save_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->sentinel_save_time(), output);
  }

  // optional fixed64 server_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->server_steam_id(), output);
  }

  // optional fixed32 server_public_ip_addr = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->server_public_ip_addr(), output);
  }

  // optional uint32 server_port = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->server_port(), output);
  }

  // optional uint32 server_cluster = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_cluster(), output);
  }

  // optional uint32 pid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pid(), output);
  }

  // optional uint32 engine = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->engine(), output);
  }

  // optional fixed64 custom_game_id = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->custom_game_id(), output);
  }

  // optional uint32 tournament_id = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tournament_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameserverCrash)
}

::google::protobuf::uint8* CMsgGameserverCrash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameserverCrash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->lobby_id(), target);
  }

  // optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->game_state(), target);
  }

  // optional fixed32 sentinel_save_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->sentinel_save_time(), target);
  }

  // optional fixed64 server_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->server_steam_id(), target);
  }

  // optional fixed32 server_public_ip_addr = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->server_public_ip_addr(), target);
  }

  // optional uint32 server_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->server_port(), target);
  }

  // optional uint32 server_cluster = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_cluster(), target);
  }

  // optional uint32 pid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pid(), target);
  }

  // optional uint32 engine = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->engine(), target);
  }

  // optional fixed64 custom_game_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->custom_game_id(), target);
  }

  // optional uint32 tournament_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tournament_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameserverCrash)
  return target;
}

size_t CMsgGameserverCrash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameserverCrash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed64 lobby_id = 2;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional fixed32 sentinel_save_time = 4;
    if (has_sentinel_save_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_steam_id = 5;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 server_public_ip_addr = 6;
    if (has_server_public_ip_addr()) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 7;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 server_cluster = 8;
    if (has_server_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 pid = 9;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional fixed64 custom_game_id = 11;
    if (has_custom_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 engine = 10;
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engine());
    }

    // optional uint32 tournament_id = 12;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameserverCrash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameserverCrash)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameserverCrash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameserverCrash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameserverCrash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameserverCrash)
    MergeFrom(*source);
  }
}

void CMsgGameserverCrash::MergeFrom(const CMsgGameserverCrash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameserverCrash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      sentinel_save_time_ = from.sentinel_save_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_public_ip_addr_ = from.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_cluster_ = from.server_cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000200u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000800u) {
      tournament_id_ = from.tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameserverCrash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameserverCrash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameserverCrash::CopyFrom(const CMsgGameserverCrash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameserverCrash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameserverCrash::IsInitialized() const {
  return true;
}

void CMsgGameserverCrash::Swap(CMsgGameserverCrash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameserverCrash::InternalSwap(CMsgGameserverCrash* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(game_state_, other->game_state_);
  std::swap(sentinel_save_time_, other->sentinel_save_time_);
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(server_public_ip_addr_, other->server_public_ip_addr_);
  std::swap(server_port_, other->server_port_);
  std::swap(server_cluster_, other->server_cluster_);
  std::swap(pid_, other->pid_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(engine_, other->engine_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameserverCrash::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameserverCrash

// optional uint64 match_id = 1;
bool CMsgGameserverCrash::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameserverCrash::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameserverCrash::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameserverCrash::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgGameserverCrash::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.match_id)
  return match_id_;
}
void CMsgGameserverCrash::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.match_id)
}

// optional fixed64 lobby_id = 2;
bool CMsgGameserverCrash::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameserverCrash::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameserverCrash::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameserverCrash::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgGameserverCrash::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.lobby_id)
  return lobby_id_;
}
void CMsgGameserverCrash::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.lobby_id)
}

// optional .proto.dota.DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
bool CMsgGameserverCrash::has_game_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameserverCrash::set_has_game_state() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameserverCrash::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameserverCrash::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
::proto::dota::DOTA_GameState CMsgGameserverCrash::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.game_state)
  return static_cast< ::proto::dota::DOTA_GameState >(game_state_);
}
void CMsgGameserverCrash::set_game_state(::proto::dota::DOTA_GameState value) {
  assert(::proto::dota::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.game_state)
}

// optional fixed32 sentinel_save_time = 4;
bool CMsgGameserverCrash::has_sentinel_save_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameserverCrash::set_has_sentinel_save_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameserverCrash::clear_has_sentinel_save_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameserverCrash::clear_sentinel_save_time() {
  sentinel_save_time_ = 0u;
  clear_has_sentinel_save_time();
}
::google::protobuf::uint32 CMsgGameserverCrash::sentinel_save_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.sentinel_save_time)
  return sentinel_save_time_;
}
void CMsgGameserverCrash::set_sentinel_save_time(::google::protobuf::uint32 value) {
  set_has_sentinel_save_time();
  sentinel_save_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.sentinel_save_time)
}

// optional fixed64 custom_game_id = 11;
bool CMsgGameserverCrash::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgGameserverCrash::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgGameserverCrash::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgGameserverCrash::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CMsgGameserverCrash::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.custom_game_id)
  return custom_game_id_;
}
void CMsgGameserverCrash::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.custom_game_id)
}

// optional uint32 tournament_id = 12;
bool CMsgGameserverCrash::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgGameserverCrash::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgGameserverCrash::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgGameserverCrash::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CMsgGameserverCrash::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.tournament_id)
  return tournament_id_;
}
void CMsgGameserverCrash::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.tournament_id)
}

// optional fixed64 server_steam_id = 5;
bool CMsgGameserverCrash::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGameserverCrash::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGameserverCrash::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGameserverCrash::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
::google::protobuf::uint64 CMsgGameserverCrash::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.server_steam_id)
  return server_steam_id_;
}
void CMsgGameserverCrash::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.server_steam_id)
}

// optional fixed32 server_public_ip_addr = 6;
bool CMsgGameserverCrash::has_server_public_ip_addr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGameserverCrash::set_has_server_public_ip_addr() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGameserverCrash::clear_has_server_public_ip_addr() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGameserverCrash::clear_server_public_ip_addr() {
  server_public_ip_addr_ = 0u;
  clear_has_server_public_ip_addr();
}
::google::protobuf::uint32 CMsgGameserverCrash::server_public_ip_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.server_public_ip_addr)
  return server_public_ip_addr_;
}
void CMsgGameserverCrash::set_server_public_ip_addr(::google::protobuf::uint32 value) {
  set_has_server_public_ip_addr();
  server_public_ip_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.server_public_ip_addr)
}

// optional uint32 server_port = 7;
bool CMsgGameserverCrash::has_server_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGameserverCrash::set_has_server_port() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGameserverCrash::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGameserverCrash::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
::google::protobuf::uint32 CMsgGameserverCrash::server_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.server_port)
  return server_port_;
}
void CMsgGameserverCrash::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.server_port)
}

// optional uint32 server_cluster = 8;
bool CMsgGameserverCrash::has_server_cluster() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGameserverCrash::set_has_server_cluster() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGameserverCrash::clear_has_server_cluster() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGameserverCrash::clear_server_cluster() {
  server_cluster_ = 0u;
  clear_has_server_cluster();
}
::google::protobuf::uint32 CMsgGameserverCrash::server_cluster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.server_cluster)
  return server_cluster_;
}
void CMsgGameserverCrash::set_server_cluster(::google::protobuf::uint32 value) {
  set_has_server_cluster();
  server_cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.server_cluster)
}

// optional uint32 pid = 9;
bool CMsgGameserverCrash::has_pid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgGameserverCrash::set_has_pid() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgGameserverCrash::clear_has_pid() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgGameserverCrash::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
::google::protobuf::uint32 CMsgGameserverCrash::pid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.pid)
  return pid_;
}
void CMsgGameserverCrash::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.pid)
}

// optional uint32 engine = 10;
bool CMsgGameserverCrash::has_engine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgGameserverCrash::set_has_engine() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgGameserverCrash::clear_has_engine() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgGameserverCrash::clear_engine() {
  engine_ = 0u;
  clear_has_engine();
}
::google::protobuf::uint32 CMsgGameserverCrash::engine() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameserverCrash.engine)
  return engine_;
}
void CMsgGameserverCrash::set_engine(::google::protobuf::uint32 value) {
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameserverCrash.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConnectedPlayers_Player::kSteamIdFieldNumber;
const int CMsgConnectedPlayers_Player::kHeroIdFieldNumber;
const int CMsgConnectedPlayers_Player::kLeaverStateFieldNumber;
const int CMsgConnectedPlayers_Player::kDisconnectReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConnectedPlayers.Player)
}
CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(const CMsgConnectedPlayers_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leaver_state()) {
    leaver_state_ = new ::proto::dota::CMsgLeaverState(*from.leaver_state_);
  } else {
    leaver_state_ = NULL;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConnectedPlayers.Player)
}

void CMsgConnectedPlayers_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&leaver_state_, 0, reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&leaver_state_) + sizeof(disconnect_reason_));
}

CMsgConnectedPlayers_Player::~CMsgConnectedPlayers_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConnectedPlayers.Player)
  SharedDtor();
}

void CMsgConnectedPlayers_Player::SharedDtor() {
  if (this != internal_default_instance()) {
    delete leaver_state_;
  }
}

void CMsgConnectedPlayers_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectedPlayers_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgConnectedPlayers_Player& CMsgConnectedPlayers_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgConnectedPlayers_Player* CMsgConnectedPlayers_Player::New(::google::protobuf::Arena* arena) const {
  CMsgConnectedPlayers_Player* n = new CMsgConnectedPlayers_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgConnectedPlayers_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConnectedPlayers.Player)
  if (has_leaver_state()) {
    GOOGLE_DCHECK(leaver_state_ != NULL);
    leaver_state_->::proto::dota::CMsgLeaverState::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&disconnect_reason_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(disconnect_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgConnectedPlayers_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConnectedPlayers.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgLeaverState leaver_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaver_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ::proto::dota::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConnectedPlayers.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConnectedPlayers.Player)
  return false;
#undef DO_
}

void CMsgConnectedPlayers_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConnectedPlayers.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional .proto.dota.CMsgLeaverState leaver_state = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leaver_state_, output);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->disconnect_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConnectedPlayers.Player)
}

::google::protobuf::uint8* CMsgConnectedPlayers_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConnectedPlayers.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional .proto.dota.CMsgLeaverState leaver_state = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->leaver_state_, deterministic, target);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->disconnect_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConnectedPlayers.Player)
  return target;
}

size_t CMsgConnectedPlayers_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConnectedPlayers.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgLeaverState leaver_state = 3;
    if (has_leaver_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leaver_state_);
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
    if (has_disconnect_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectedPlayers_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConnectedPlayers.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectedPlayers_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgConnectedPlayers_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConnectedPlayers.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConnectedPlayers.Player)
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers_Player::MergeFrom(const CMsgConnectedPlayers_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConnectedPlayers.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_leaver_state()->::proto::dota::CMsgLeaverState::MergeFrom(from.leaver_state());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      disconnect_reason_ = from.disconnect_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConnectedPlayers_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConnectedPlayers.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers_Player::CopyFrom(const CMsgConnectedPlayers_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConnectedPlayers.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers_Player::IsInitialized() const {
  return true;
}

void CMsgConnectedPlayers_Player::Swap(CMsgConnectedPlayers_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConnectedPlayers_Player::InternalSwap(CMsgConnectedPlayers_Player* other) {
  std::swap(leaver_state_, other->leaver_state_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(disconnect_reason_, other->disconnect_reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgConnectedPlayers_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgConnectedPlayers_Player

// optional fixed64 steam_id = 1;
bool CMsgConnectedPlayers_Player::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgConnectedPlayers_Player::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgConnectedPlayers_Player::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgConnectedPlayers_Player::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgConnectedPlayers_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.Player.steam_id)
  return steam_id_;
}
void CMsgConnectedPlayers_Player::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.Player.steam_id)
}

// optional uint32 hero_id = 2;
bool CMsgConnectedPlayers_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgConnectedPlayers_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgConnectedPlayers_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgConnectedPlayers_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgConnectedPlayers_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.Player.hero_id)
  return hero_id_;
}
void CMsgConnectedPlayers_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.Player.hero_id)
}

// optional .proto.dota.CMsgLeaverState leaver_state = 3;
bool CMsgConnectedPlayers_Player::has_leaver_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgConnectedPlayers_Player::set_has_leaver_state() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgConnectedPlayers_Player::clear_has_leaver_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgConnectedPlayers_Player::clear_leaver_state() {
  if (leaver_state_ != NULL) leaver_state_->::proto::dota::CMsgLeaverState::Clear();
  clear_has_leaver_state();
}
const ::proto::dota::CMsgLeaverState& CMsgConnectedPlayers_Player::leaver_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.Player.leaver_state)
  return leaver_state_ != NULL ? *leaver_state_
                         : *::proto::dota::CMsgLeaverState::internal_default_instance();
}
::proto::dota::CMsgLeaverState* CMsgConnectedPlayers_Player::mutable_leaver_state() {
  set_has_leaver_state();
  if (leaver_state_ == NULL) {
    leaver_state_ = new ::proto::dota::CMsgLeaverState;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgConnectedPlayers.Player.leaver_state)
  return leaver_state_;
}
::proto::dota::CMsgLeaverState* CMsgConnectedPlayers_Player::release_leaver_state() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgConnectedPlayers.Player.leaver_state)
  clear_has_leaver_state();
  ::proto::dota::CMsgLeaverState* temp = leaver_state_;
  leaver_state_ = NULL;
  return temp;
}
void CMsgConnectedPlayers_Player::set_allocated_leaver_state(::proto::dota::CMsgLeaverState* leaver_state) {
  delete leaver_state_;
  leaver_state_ = leaver_state;
  if (leaver_state) {
    set_has_leaver_state();
  } else {
    clear_has_leaver_state();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgConnectedPlayers.Player.leaver_state)
}

// optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
bool CMsgConnectedPlayers_Player::has_disconnect_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgConnectedPlayers_Player::set_has_disconnect_reason() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgConnectedPlayers_Player::clear_has_disconnect_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgConnectedPlayers_Player::clear_disconnect_reason() {
  disconnect_reason_ = 0;
  clear_has_disconnect_reason();
}
::proto::dota::ENetworkDisconnectionReason CMsgConnectedPlayers_Player::disconnect_reason() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.Player.disconnect_reason)
  return static_cast< ::proto::dota::ENetworkDisconnectionReason >(disconnect_reason_);
}
void CMsgConnectedPlayers_Player::set_disconnect_reason(::proto::dota::ENetworkDisconnectionReason value) {
  assert(::proto::dota::ENetworkDisconnectionReason_IsValid(value));
  set_has_disconnect_reason();
  disconnect_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.Player.disconnect_reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConnectedPlayers::kConnectedPlayersFieldNumber;
const int CMsgConnectedPlayers::kDisconnectedPlayersFieldNumber;
const int CMsgConnectedPlayers::kGameStateFieldNumber;
const int CMsgConnectedPlayers::kFirstBloodHappenedFieldNumber;
const int CMsgConnectedPlayers::kLegacyMassDisconnectFieldNumber;
const int CMsgConnectedPlayers::kPoorNetworkConditionsFieldNumber;
const int CMsgConnectedPlayers::kSendReasonFieldNumber;
const int CMsgConnectedPlayers::kRadiantKillsFieldNumber;
const int CMsgConnectedPlayers::kDireKillsFieldNumber;
const int CMsgConnectedPlayers::kRadiantLeadFieldNumber;
const int CMsgConnectedPlayers::kBuildingStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConnectedPlayers::CMsgConnectedPlayers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConnectedPlayers)
}
CMsgConnectedPlayers::CMsgConnectedPlayers(const CMsgConnectedPlayers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      connected_players_(from.connected_players_),
      disconnected_players_(from.disconnected_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_poor_network_conditions()) {
    poor_network_conditions_ = new ::proto::dota::CMsgPoorNetworkConditions(*from.poor_network_conditions_);
  } else {
    poor_network_conditions_ = NULL;
  }
  ::memcpy(&game_state_, &from.game_state_,
    reinterpret_cast<char*>(&radiant_lead_) -
    reinterpret_cast<char*>(&game_state_) + sizeof(radiant_lead_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConnectedPlayers)
}

void CMsgConnectedPlayers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&poor_network_conditions_, 0, reinterpret_cast<char*>(&radiant_lead_) -
    reinterpret_cast<char*>(&poor_network_conditions_) + sizeof(radiant_lead_));
}

CMsgConnectedPlayers::~CMsgConnectedPlayers() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConnectedPlayers)
  SharedDtor();
}

void CMsgConnectedPlayers::SharedDtor() {
  if (this != internal_default_instance()) {
    delete poor_network_conditions_;
  }
}

void CMsgConnectedPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectedPlayers::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgConnectedPlayers& CMsgConnectedPlayers::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgConnectedPlayers* CMsgConnectedPlayers::New(::google::protobuf::Arena* arena) const {
  CMsgConnectedPlayers* n = new CMsgConnectedPlayers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgConnectedPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConnectedPlayers)
  connected_players_.Clear();
  disconnected_players_.Clear();
  if (has_poor_network_conditions()) {
    GOOGLE_DCHECK(poor_network_conditions_ != NULL);
    poor_network_conditions_->::proto::dota::CMsgPoorNetworkConditions::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&game_state_, 0, reinterpret_cast<char*>(&dire_kills_) -
      reinterpret_cast<char*>(&game_state_) + sizeof(dire_kills_));
  }
  radiant_lead_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgConnectedPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConnectedPlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connected_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::proto::dota::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool first_blood_happened = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_first_blood_happened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disconnected_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgConnectedPlayers_SendReason_IsValid(value)) {
            set_send_reason(static_cast< ::proto::dota::CMsgConnectedPlayers_SendReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legacy_mass_disconnect = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_legacy_mass_disconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_mass_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poor_network_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_kills = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_radiant_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_kills = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_dire_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 radiant_lead = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_radiant_lead();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiant_lead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 building_state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_building_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConnectedPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConnectedPlayers)
  return false;
#undef DO_
}

void CMsgConnectedPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConnectedPlayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
  for (unsigned int i = 0, n = this->connected_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connected_players(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }

  // optional bool first_blood_happened = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->first_blood_happened(), output);
  }

  // repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
  for (unsigned int i = 0, n = this->disconnected_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->disconnected_players(i), output);
  }

  // optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->send_reason(), output);
  }

  // optional bool legacy_mass_disconnect = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->legacy_mass_disconnect(), output);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->poor_network_conditions_, output);
  }

  // optional uint32 radiant_kills = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->radiant_kills(), output);
  }

  // optional uint32 dire_kills = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dire_kills(), output);
  }

  // optional int32 radiant_lead = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->radiant_lead(), output);
  }

  // optional uint32 building_state = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->building_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConnectedPlayers)
}

::google::protobuf::uint8* CMsgConnectedPlayers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConnectedPlayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
  for (unsigned int i = 0, n = this->connected_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->connected_players(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }

  // optional bool first_blood_happened = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->first_blood_happened(), target);
  }

  // repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
  for (unsigned int i = 0, n = this->disconnected_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->disconnected_players(i), deterministic, target);
  }

  // optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->send_reason(), target);
  }

  // optional bool legacy_mass_disconnect = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->legacy_mass_disconnect(), target);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->poor_network_conditions_, deterministic, target);
  }

  // optional uint32 radiant_kills = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->radiant_kills(), target);
  }

  // optional uint32 dire_kills = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dire_kills(), target);
  }

  // optional int32 radiant_lead = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->radiant_lead(), target);
  }

  // optional uint32 building_state = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->building_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConnectedPlayers)
  return target;
}

size_t CMsgConnectedPlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConnectedPlayers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
  {
    unsigned int count = this->connected_players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connected_players(i));
    }
  }

  // repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
  {
    unsigned int count = this->disconnected_players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disconnected_players(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
    if (has_poor_network_conditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->poor_network_conditions_);
    }

    // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional bool first_blood_happened = 6;
    if (has_first_blood_happened()) {
      total_size += 1 + 1;
    }

    // optional bool legacy_mass_disconnect = 9;
    if (has_legacy_mass_disconnect()) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
    if (has_send_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->send_reason());
    }

    // optional uint32 radiant_kills = 11;
    if (has_radiant_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_kills());
    }

    // optional uint32 building_state = 15;
    if (has_building_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_state());
    }

    // optional uint32 dire_kills = 12;
    if (has_dire_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_kills());
    }

  }
  // optional int32 radiant_lead = 14;
  if (has_radiant_lead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radiant_lead());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectedPlayers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConnectedPlayers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectedPlayers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgConnectedPlayers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConnectedPlayers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConnectedPlayers)
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers::MergeFrom(const CMsgConnectedPlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConnectedPlayers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connected_players_.MergeFrom(from.connected_players_);
  disconnected_players_.MergeFrom(from.disconnected_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_poor_network_conditions()->::proto::dota::CMsgPoorNetworkConditions::MergeFrom(from.poor_network_conditions());
    }
    if (cached_has_bits & 0x00000002u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_blood_happened_ = from.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_mass_disconnect_ = from.legacy_mass_disconnect_;
    }
    if (cached_has_bits & 0x00000010u) {
      send_reason_ = from.send_reason_;
    }
    if (cached_has_bits & 0x00000020u) {
      radiant_kills_ = from.radiant_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      building_state_ = from.building_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_kills_ = from.dire_kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_radiant_lead(from.radiant_lead());
  }
}

void CMsgConnectedPlayers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConnectedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers::CopyFrom(const CMsgConnectedPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConnectedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers::IsInitialized() const {
  return true;
}

void CMsgConnectedPlayers::Swap(CMsgConnectedPlayers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConnectedPlayers::InternalSwap(CMsgConnectedPlayers* other) {
  connected_players_.InternalSwap(&other->connected_players_);
  disconnected_players_.InternalSwap(&other->disconnected_players_);
  std::swap(poor_network_conditions_, other->poor_network_conditions_);
  std::swap(game_state_, other->game_state_);
  std::swap(first_blood_happened_, other->first_blood_happened_);
  std::swap(legacy_mass_disconnect_, other->legacy_mass_disconnect_);
  std::swap(send_reason_, other->send_reason_);
  std::swap(radiant_kills_, other->radiant_kills_);
  std::swap(building_state_, other->building_state_);
  std::swap(dire_kills_, other->dire_kills_);
  std::swap(radiant_lead_, other->radiant_lead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgConnectedPlayers::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgConnectedPlayers

// repeated .proto.dota.CMsgConnectedPlayers.Player connected_players = 1;
int CMsgConnectedPlayers::connected_players_size() const {
  return connected_players_.size();
}
void CMsgConnectedPlayers::clear_connected_players() {
  connected_players_.Clear();
}
const ::proto::dota::CMsgConnectedPlayers_Player& CMsgConnectedPlayers::connected_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.connected_players)
  return connected_players_.Get(index);
}
::proto::dota::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::mutable_connected_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgConnectedPlayers.connected_players)
  return connected_players_.Mutable(index);
}
::proto::dota::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::add_connected_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgConnectedPlayers.connected_players)
  return connected_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConnectedPlayers_Player >*
CMsgConnectedPlayers::mutable_connected_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgConnectedPlayers.connected_players)
  return &connected_players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConnectedPlayers_Player >&
CMsgConnectedPlayers::connected_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgConnectedPlayers.connected_players)
  return connected_players_;
}

// repeated .proto.dota.CMsgConnectedPlayers.Player disconnected_players = 7;
int CMsgConnectedPlayers::disconnected_players_size() const {
  return disconnected_players_.size();
}
void CMsgConnectedPlayers::clear_disconnected_players() {
  disconnected_players_.Clear();
}
const ::proto::dota::CMsgConnectedPlayers_Player& CMsgConnectedPlayers::disconnected_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.disconnected_players)
  return disconnected_players_.Get(index);
}
::proto::dota::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::mutable_disconnected_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgConnectedPlayers.disconnected_players)
  return disconnected_players_.Mutable(index);
}
::proto::dota::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::add_disconnected_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgConnectedPlayers.disconnected_players)
  return disconnected_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConnectedPlayers_Player >*
CMsgConnectedPlayers::mutable_disconnected_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgConnectedPlayers.disconnected_players)
  return &disconnected_players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgConnectedPlayers_Player >&
CMsgConnectedPlayers::disconnected_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgConnectedPlayers.disconnected_players)
  return disconnected_players_;
}

// optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
bool CMsgConnectedPlayers::has_game_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgConnectedPlayers::set_has_game_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgConnectedPlayers::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgConnectedPlayers::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
::proto::dota::DOTA_GameState CMsgConnectedPlayers::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.game_state)
  return static_cast< ::proto::dota::DOTA_GameState >(game_state_);
}
void CMsgConnectedPlayers::set_game_state(::proto::dota::DOTA_GameState value) {
  assert(::proto::dota::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.game_state)
}

// optional bool first_blood_happened = 6;
bool CMsgConnectedPlayers::has_first_blood_happened() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgConnectedPlayers::set_has_first_blood_happened() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgConnectedPlayers::clear_has_first_blood_happened() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgConnectedPlayers::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
bool CMsgConnectedPlayers::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.first_blood_happened)
  return first_blood_happened_;
}
void CMsgConnectedPlayers::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.first_blood_happened)
}

// optional bool legacy_mass_disconnect = 9;
bool CMsgConnectedPlayers::has_legacy_mass_disconnect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgConnectedPlayers::set_has_legacy_mass_disconnect() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgConnectedPlayers::clear_has_legacy_mass_disconnect() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgConnectedPlayers::clear_legacy_mass_disconnect() {
  legacy_mass_disconnect_ = false;
  clear_has_legacy_mass_disconnect();
}
bool CMsgConnectedPlayers::legacy_mass_disconnect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.legacy_mass_disconnect)
  return legacy_mass_disconnect_;
}
void CMsgConnectedPlayers::set_legacy_mass_disconnect(bool value) {
  set_has_legacy_mass_disconnect();
  legacy_mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.legacy_mass_disconnect)
}

// optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 10;
bool CMsgConnectedPlayers::has_poor_network_conditions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgConnectedPlayers::set_has_poor_network_conditions() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgConnectedPlayers::clear_has_poor_network_conditions() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgConnectedPlayers::clear_poor_network_conditions() {
  if (poor_network_conditions_ != NULL) poor_network_conditions_->::proto::dota::CMsgPoorNetworkConditions::Clear();
  clear_has_poor_network_conditions();
}
const ::proto::dota::CMsgPoorNetworkConditions& CMsgConnectedPlayers::poor_network_conditions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.poor_network_conditions)
  return poor_network_conditions_ != NULL ? *poor_network_conditions_
                         : *::proto::dota::CMsgPoorNetworkConditions::internal_default_instance();
}
::proto::dota::CMsgPoorNetworkConditions* CMsgConnectedPlayers::mutable_poor_network_conditions() {
  set_has_poor_network_conditions();
  if (poor_network_conditions_ == NULL) {
    poor_network_conditions_ = new ::proto::dota::CMsgPoorNetworkConditions;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgConnectedPlayers.poor_network_conditions)
  return poor_network_conditions_;
}
::proto::dota::CMsgPoorNetworkConditions* CMsgConnectedPlayers::release_poor_network_conditions() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgConnectedPlayers.poor_network_conditions)
  clear_has_poor_network_conditions();
  ::proto::dota::CMsgPoorNetworkConditions* temp = poor_network_conditions_;
  poor_network_conditions_ = NULL;
  return temp;
}
void CMsgConnectedPlayers::set_allocated_poor_network_conditions(::proto::dota::CMsgPoorNetworkConditions* poor_network_conditions) {
  delete poor_network_conditions_;
  poor_network_conditions_ = poor_network_conditions;
  if (poor_network_conditions) {
    set_has_poor_network_conditions();
  } else {
    clear_has_poor_network_conditions();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgConnectedPlayers.poor_network_conditions)
}

// optional .proto.dota.CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
bool CMsgConnectedPlayers::has_send_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgConnectedPlayers::set_has_send_reason() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgConnectedPlayers::clear_has_send_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgConnectedPlayers::clear_send_reason() {
  send_reason_ = 0;
  clear_has_send_reason();
}
::proto::dota::CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::send_reason() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.send_reason)
  return static_cast< ::proto::dota::CMsgConnectedPlayers_SendReason >(send_reason_);
}
void CMsgConnectedPlayers::set_send_reason(::proto::dota::CMsgConnectedPlayers_SendReason value) {
  assert(::proto::dota::CMsgConnectedPlayers_SendReason_IsValid(value));
  set_has_send_reason();
  send_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.send_reason)
}

// optional uint32 radiant_kills = 11;
bool CMsgConnectedPlayers::has_radiant_kills() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgConnectedPlayers::set_has_radiant_kills() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgConnectedPlayers::clear_has_radiant_kills() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgConnectedPlayers::clear_radiant_kills() {
  radiant_kills_ = 0u;
  clear_has_radiant_kills();
}
::google::protobuf::uint32 CMsgConnectedPlayers::radiant_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.radiant_kills)
  return radiant_kills_;
}
void CMsgConnectedPlayers::set_radiant_kills(::google::protobuf::uint32 value) {
  set_has_radiant_kills();
  radiant_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.radiant_kills)
}

// optional uint32 dire_kills = 12;
bool CMsgConnectedPlayers::has_dire_kills() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgConnectedPlayers::set_has_dire_kills() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgConnectedPlayers::clear_has_dire_kills() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgConnectedPlayers::clear_dire_kills() {
  dire_kills_ = 0u;
  clear_has_dire_kills();
}
::google::protobuf::uint32 CMsgConnectedPlayers::dire_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.dire_kills)
  return dire_kills_;
}
void CMsgConnectedPlayers::set_dire_kills(::google::protobuf::uint32 value) {
  set_has_dire_kills();
  dire_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.dire_kills)
}

// optional int32 radiant_lead = 14;
bool CMsgConnectedPlayers::has_radiant_lead() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgConnectedPlayers::set_has_radiant_lead() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgConnectedPlayers::clear_has_radiant_lead() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgConnectedPlayers::clear_radiant_lead() {
  radiant_lead_ = 0;
  clear_has_radiant_lead();
}
::google::protobuf::int32 CMsgConnectedPlayers::radiant_lead() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.radiant_lead)
  return radiant_lead_;
}
void CMsgConnectedPlayers::set_radiant_lead(::google::protobuf::int32 value) {
  set_has_radiant_lead();
  radiant_lead_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.radiant_lead)
}

// optional uint32 building_state = 15;
bool CMsgConnectedPlayers::has_building_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgConnectedPlayers::set_has_building_state() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgConnectedPlayers::clear_has_building_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgConnectedPlayers::clear_building_state() {
  building_state_ = 0u;
  clear_has_building_state();
}
::google::protobuf::uint32 CMsgConnectedPlayers::building_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectedPlayers.building_state)
  return building_state_;
}
void CMsgConnectedPlayers::set_building_state(::google::protobuf::uint32 value) {
  set_has_building_state();
  building_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectedPlayers.building_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerInfo::kServerPublicIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPrivateIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPortFieldNumber;
const int CMsgGameServerInfo::kServerTvPortFieldNumber;
const int CMsgGameServerInfo::kAssignedServerTvPortFieldNumber;
const int CMsgGameServerInfo::kServerSteamdatagramPortFieldNumber;
const int CMsgGameServerInfo::kServerKeyFieldNumber;
const int CMsgGameServerInfo::kServerHibernationFieldNumber;
const int CMsgGameServerInfo::kServerTypeFieldNumber;
const int CMsgGameServerInfo::kServerRegionFieldNumber;
const int CMsgGameServerInfo::kServerLoadavgFieldNumber;
const int CMsgGameServerInfo::kServerTvBroadcastTimeFieldNumber;
const int CMsgGameServerInfo::kServerGameTimeFieldNumber;
const int CMsgGameServerInfo::kServerRelayConnectedSteamIdFieldNumber;
const int CMsgGameServerInfo::kRelaySlotsMaxFieldNumber;
const int CMsgGameServerInfo::kRelaysConnectedFieldNumber;
const int CMsgGameServerInfo::kRelayClientsConnectedFieldNumber;
const int CMsgGameServerInfo::kRelayedGameServerSteamIdFieldNumber;
const int CMsgGameServerInfo::kParentRelayCountFieldNumber;
const int CMsgGameServerInfo::kTvSecretCodeFieldNumber;
const int CMsgGameServerInfo::kServerVersionFieldNumber;
const int CMsgGameServerInfo::kServerClusterFieldNumber;
const int CMsgGameServerInfo::kAllowCustomGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerInfo::CMsgGameServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerInfo)
}
CMsgGameServerInfo::CMsgGameServerInfo(const CMsgGameServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_key()) {
    server_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_key_);
  }
  ::memcpy(&server_public_ip_addr_, &from.server_public_ip_addr_,
    reinterpret_cast<char*>(&allow_custom_games_) -
    reinterpret_cast<char*>(&server_public_ip_addr_) + sizeof(allow_custom_games_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerInfo)
}

void CMsgGameServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_public_ip_addr_, 0, reinterpret_cast<char*>(&allow_custom_games_) -
    reinterpret_cast<char*>(&server_public_ip_addr_) + sizeof(allow_custom_games_));
}

CMsgGameServerInfo::~CMsgGameServerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerInfo)
  SharedDtor();
}

void CMsgGameServerInfo::SharedDtor() {
  server_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameServerInfo& CMsgGameServerInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameServerInfo* CMsgGameServerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGameServerInfo* n = new CMsgGameServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerInfo)
  if (has_server_key()) {
    GOOGLE_DCHECK(!server_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*server_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&server_public_ip_addr_, 0, reinterpret_cast<char*>(&server_region_) -
      reinterpret_cast<char*>(&server_public_ip_addr_) + sizeof(server_region_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&server_loadavg_, 0, reinterpret_cast<char*>(&relay_clients_connected_) -
      reinterpret_cast<char*>(&server_loadavg_) + sizeof(relay_clients_connected_));
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ::memset(&parent_relay_count_, 0, reinterpret_cast<char*>(&allow_custom_games_) -
      reinterpret_cast<char*>(&parent_relay_count_) + sizeof(allow_custom_games_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 server_public_ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_server_public_ip_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_public_ip_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_private_ip_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_server_private_ip_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_private_ip_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_tv_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_server_tv_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_tv_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_key().data(), this->server_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameServerInfo.server_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool server_hibernation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_server_hibernation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_hibernation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGameServerInfo_ServerType_IsValid(value)) {
            set_server_type(static_cast< ::proto::dota::CMsgGameServerInfo_ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float server_loadavg = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_server_loadavg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_loadavg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float server_tv_broadcast_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_server_tv_broadcast_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_tv_broadcast_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float server_game_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_server_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_relay_connected_steam_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_server_relay_connected_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_relay_connected_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 relay_slots_max = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_relay_slots_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relay_slots_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 relays_connected = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_relays_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relays_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 relay_clients_connected = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_relay_clients_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relay_clients_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 relayed_game_server_steam_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_relayed_game_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relayed_game_server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parent_relay_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_parent_relay_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_relay_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 tv_secret_code = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_tv_secret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tv_secret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_version = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_server_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_cluster = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_server_cluster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_steamdatagram_port = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_server_steamdatagram_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_steamdatagram_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assigned_server_tv_port = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_assigned_server_tv_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assigned_server_tv_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGameServerInfo_CustomGames_IsValid(value)) {
            set_allow_custom_games(static_cast< ::proto::dota::CMsgGameServerInfo_CustomGames >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerInfo)
  return false;
#undef DO_
}

void CMsgGameServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 server_public_ip_addr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->server_public_ip_addr(), output);
  }

  // optional fixed32 server_private_ip_addr = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->server_private_ip_addr(), output);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }

  // optional uint32 server_tv_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_tv_port(), output);
  }

  // optional string server_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameServerInfo.server_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->server_key(), output);
  }

  // optional bool server_hibernation = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->server_hibernation(), output);
  }

  // optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->server_type(), output);
  }

  // optional uint32 server_region = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_region(), output);
  }

  // optional float server_loadavg = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->server_loadavg(), output);
  }

  // optional float server_tv_broadcast_time = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->server_tv_broadcast_time(), output);
  }

  // optional float server_game_time = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->server_game_time(), output);
  }

  // optional fixed64 server_relay_connected_steam_id = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->server_relay_connected_steam_id(), output);
  }

  // optional uint32 relay_slots_max = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->relay_slots_max(), output);
  }

  // optional int32 relays_connected = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->relays_connected(), output);
  }

  // optional int32 relay_clients_connected = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->relay_clients_connected(), output);
  }

  // optional fixed64 relayed_game_server_steam_id = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->relayed_game_server_steam_id(), output);
  }

  // optional uint32 parent_relay_count = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->parent_relay_count(), output);
  }

  // optional fixed64 tv_secret_code = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(18, this->tv_secret_code(), output);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->server_version(), output);
  }

  // optional uint32 server_cluster = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->server_cluster(), output);
  }

  // optional uint32 server_steamdatagram_port = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->server_steamdatagram_port(), output);
  }

  // optional uint32 assigned_server_tv_port = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->assigned_server_tv_port(), output);
  }

  // optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->allow_custom_games(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerInfo)
}

::google::protobuf::uint8* CMsgGameServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 server_public_ip_addr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->server_public_ip_addr(), target);
  }

  // optional fixed32 server_private_ip_addr = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->server_private_ip_addr(), target);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }

  // optional uint32 server_tv_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_tv_port(), target);
  }

  // optional string server_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameServerInfo.server_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_key(), target);
  }

  // optional bool server_hibernation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->server_hibernation(), target);
  }

  // optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->server_type(), target);
  }

  // optional uint32 server_region = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_region(), target);
  }

  // optional float server_loadavg = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->server_loadavg(), target);
  }

  // optional float server_tv_broadcast_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->server_tv_broadcast_time(), target);
  }

  // optional float server_game_time = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->server_game_time(), target);
  }

  // optional fixed64 server_relay_connected_steam_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->server_relay_connected_steam_id(), target);
  }

  // optional uint32 relay_slots_max = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->relay_slots_max(), target);
  }

  // optional int32 relays_connected = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->relays_connected(), target);
  }

  // optional int32 relay_clients_connected = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->relay_clients_connected(), target);
  }

  // optional fixed64 relayed_game_server_steam_id = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->relayed_game_server_steam_id(), target);
  }

  // optional uint32 parent_relay_count = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->parent_relay_count(), target);
  }

  // optional fixed64 tv_secret_code = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(18, this->tv_secret_code(), target);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->server_version(), target);
  }

  // optional uint32 server_cluster = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->server_cluster(), target);
  }

  // optional uint32 server_steamdatagram_port = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->server_steamdatagram_port(), target);
  }

  // optional uint32 assigned_server_tv_port = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->assigned_server_tv_port(), target);
  }

  // optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->allow_custom_games(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerInfo)
  return target;
}

size_t CMsgGameServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string server_key = 5;
    if (has_server_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_key());
    }

    // optional fixed32 server_public_ip_addr = 1;
    if (has_server_public_ip_addr()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_private_ip_addr = 2;
    if (has_server_private_ip_addr()) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 server_tv_port = 4;
    if (has_server_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_tv_port());
    }

    // optional bool server_hibernation = 6;
    if (has_server_hibernation()) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

    // optional uint32 server_region = 8;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float server_loadavg = 9;
    if (has_server_loadavg()) {
      total_size += 1 + 4;
    }

    // optional float server_tv_broadcast_time = 10;
    if (has_server_tv_broadcast_time()) {
      total_size += 1 + 4;
    }

    // optional float server_game_time = 11;
    if (has_server_game_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_relay_connected_steam_id = 12;
    if (has_server_relay_connected_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 relay_slots_max = 13;
    if (has_relay_slots_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relay_slots_max());
    }

    // optional int32 relays_connected = 14;
    if (has_relays_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relays_connected());
    }

    // optional fixed64 relayed_game_server_steam_id = 16;
    if (has_relayed_game_server_steam_id()) {
      total_size += 2 + 8;
    }

    // optional int32 relay_clients_connected = 15;
    if (has_relay_clients_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relay_clients_connected());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 parent_relay_count = 17;
    if (has_parent_relay_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_relay_count());
    }

    // optional fixed64 tv_secret_code = 18;
    if (has_tv_secret_code()) {
      total_size += 2 + 8;
    }

    // optional uint32 server_version = 19;
    if (has_server_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint32 server_cluster = 20;
    if (has_server_cluster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }

    // optional uint32 server_steamdatagram_port = 21;
    if (has_server_steamdatagram_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_steamdatagram_port());
    }

    // optional uint32 assigned_server_tv_port = 22;
    if (has_assigned_server_tv_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assigned_server_tv_port());
    }

    // optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
    if (has_allow_custom_games()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->allow_custom_games());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerInfo)
    MergeFrom(*source);
  }
}

void CMsgGameServerInfo::MergeFrom(const CMsgGameServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_server_key();
      server_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      server_public_ip_addr_ = from.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_private_ip_addr_ = from.server_private_ip_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_tv_port_ = from.server_tv_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_hibernation_ = from.server_hibernation_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_type_ = from.server_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      server_loadavg_ = from.server_loadavg_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_tv_broadcast_time_ = from.server_tv_broadcast_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_game_time_ = from.server_game_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      server_relay_connected_steam_id_ = from.server_relay_connected_steam_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      relay_slots_max_ = from.relay_slots_max_;
    }
    if (cached_has_bits & 0x00002000u) {
      relays_connected_ = from.relays_connected_;
    }
    if (cached_has_bits & 0x00004000u) {
      relayed_game_server_steam_id_ = from.relayed_game_server_steam_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      relay_clients_connected_ = from.relay_clients_connected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      parent_relay_count_ = from.parent_relay_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      tv_secret_code_ = from.tv_secret_code_;
    }
    if (cached_has_bits & 0x00040000u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      server_cluster_ = from.server_cluster_;
    }
    if (cached_has_bits & 0x00100000u) {
      server_steamdatagram_port_ = from.server_steamdatagram_port_;
    }
    if (cached_has_bits & 0x00200000u) {
      assigned_server_tv_port_ = from.assigned_server_tv_port_;
    }
    if (cached_has_bits & 0x00400000u) {
      allow_custom_games_ = from.allow_custom_games_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerInfo::CopyFrom(const CMsgGameServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerInfo::IsInitialized() const {
  return true;
}

void CMsgGameServerInfo::Swap(CMsgGameServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerInfo::InternalSwap(CMsgGameServerInfo* other) {
  server_key_.Swap(&other->server_key_);
  std::swap(server_public_ip_addr_, other->server_public_ip_addr_);
  std::swap(server_private_ip_addr_, other->server_private_ip_addr_);
  std::swap(server_port_, other->server_port_);
  std::swap(server_tv_port_, other->server_tv_port_);
  std::swap(server_hibernation_, other->server_hibernation_);
  std::swap(server_type_, other->server_type_);
  std::swap(server_region_, other->server_region_);
  std::swap(server_loadavg_, other->server_loadavg_);
  std::swap(server_tv_broadcast_time_, other->server_tv_broadcast_time_);
  std::swap(server_game_time_, other->server_game_time_);
  std::swap(server_relay_connected_steam_id_, other->server_relay_connected_steam_id_);
  std::swap(relay_slots_max_, other->relay_slots_max_);
  std::swap(relays_connected_, other->relays_connected_);
  std::swap(relayed_game_server_steam_id_, other->relayed_game_server_steam_id_);
  std::swap(relay_clients_connected_, other->relay_clients_connected_);
  std::swap(parent_relay_count_, other->parent_relay_count_);
  std::swap(tv_secret_code_, other->tv_secret_code_);
  std::swap(server_version_, other->server_version_);
  std::swap(server_cluster_, other->server_cluster_);
  std::swap(server_steamdatagram_port_, other->server_steamdatagram_port_);
  std::swap(assigned_server_tv_port_, other->assigned_server_tv_port_);
  std::swap(allow_custom_games_, other->allow_custom_games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameServerInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameServerInfo

// optional fixed32 server_public_ip_addr = 1;
bool CMsgGameServerInfo::has_server_public_ip_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameServerInfo::set_has_server_public_ip_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameServerInfo::clear_has_server_public_ip_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameServerInfo::clear_server_public_ip_addr() {
  server_public_ip_addr_ = 0u;
  clear_has_server_public_ip_addr();
}
::google::protobuf::uint32 CMsgGameServerInfo::server_public_ip_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_public_ip_addr)
  return server_public_ip_addr_;
}
void CMsgGameServerInfo::set_server_public_ip_addr(::google::protobuf::uint32 value) {
  set_has_server_public_ip_addr();
  server_public_ip_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_public_ip_addr)
}

// optional fixed32 server_private_ip_addr = 2;
bool CMsgGameServerInfo::has_server_private_ip_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameServerInfo::set_has_server_private_ip_addr() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameServerInfo::clear_has_server_private_ip_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameServerInfo::clear_server_private_ip_addr() {
  server_private_ip_addr_ = 0u;
  clear_has_server_private_ip_addr();
}
::google::protobuf::uint32 CMsgGameServerInfo::server_private_ip_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_private_ip_addr)
  return server_private_ip_addr_;
}
void CMsgGameServerInfo::set_server_private_ip_addr(::google::protobuf::uint32 value) {
  set_has_server_private_ip_addr();
  server_private_ip_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_private_ip_addr)
}

// optional uint32 server_port = 3;
bool CMsgGameServerInfo::has_server_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameServerInfo::set_has_server_port() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameServerInfo::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameServerInfo::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
::google::protobuf::uint32 CMsgGameServerInfo::server_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_port)
  return server_port_;
}
void CMsgGameServerInfo::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_port)
}

// optional uint32 server_tv_port = 4;
bool CMsgGameServerInfo::has_server_tv_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGameServerInfo::set_has_server_tv_port() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGameServerInfo::clear_has_server_tv_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGameServerInfo::clear_server_tv_port() {
  server_tv_port_ = 0u;
  clear_has_server_tv_port();
}
::google::protobuf::uint32 CMsgGameServerInfo::server_tv_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_tv_port)
  return server_tv_port_;
}
void CMsgGameServerInfo::set_server_tv_port(::google::protobuf::uint32 value) {
  set_has_server_tv_port();
  server_tv_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_tv_port)
}

// optional uint32 assigned_server_tv_port = 22;
bool CMsgGameServerInfo::has_assigned_server_tv_port() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgGameServerInfo::set_has_assigned_server_tv_port() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgGameServerInfo::clear_has_assigned_server_tv_port() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgGameServerInfo::clear_assigned_server_tv_port() {
  assigned_server_tv_port_ = 0u;
  clear_has_assigned_server_tv_port();
}
::google::protobuf::uint32 CMsgGameServerInfo::assigned_server_tv_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.assigned_server_tv_port)
  return assigned_server_tv_port_;
}
void CMsgGameServerInfo::set_assigned_server_tv_port(::google::protobuf::uint32 value) {
  set_has_assigned_server_tv_port();
  assigned_server_tv_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.assigned_server_tv_port)
}

// optional uint32 server_steamdatagram_port = 21;
bool CMsgGameServerInfo::has_server_steamdatagram_port() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgGameServerInfo::set_has_server_steamdatagram_port() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgGameServerInfo::clear_has_server_steamdatagram_port() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgGameServerInfo::clear_server_steamdatagram_port() {
  server_steamdatagram_port_ = 0u;
  clear_has_server_steamdatagram_port();
}
::google::protobuf::uint32 CMsgGameServerInfo::server_steamdatagram_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_steamdatagram_port)
  return server_steamdatagram_port_;
}
void CMsgGameServerInfo::set_server_steamdatagram_port(::google::protobuf::uint32 value) {
  set_has_server_steamdatagram_port();
  server_steamdatagram_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_steamdatagram_port)
}

// optional string server_key = 5;
bool CMsgGameServerInfo::has_server_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameServerInfo::set_has_server_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameServerInfo::clear_has_server_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameServerInfo::clear_server_key() {
  server_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_key();
}
const ::std::string& CMsgGameServerInfo::server_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_key)
  return server_key_.GetNoArena();
}
void CMsgGameServerInfo::set_server_key(const ::std::string& value) {
  set_has_server_key();
  server_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_key)
}
#if LANG_CXX11
void CMsgGameServerInfo::set_server_key(::std::string&& value) {
  set_has_server_key();
  server_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGameServerInfo.server_key)
}
#endif
void CMsgGameServerInfo::set_server_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_key();
  server_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGameServerInfo.server_key)
}
void CMsgGameServerInfo::set_server_key(const char* value, size_t size) {
  set_has_server_key();
  server_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGameServerInfo.server_key)
}
::std::string* CMsgGameServerInfo::mutable_server_key() {
  set_has_server_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameServerInfo.server_key)
  return server_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGameServerInfo::release_server_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameServerInfo.server_key)
  clear_has_server_key();
  return server_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGameServerInfo::set_allocated_server_key(::std::string* server_key) {
  if (server_key != NULL) {
    set_has_server_key();
  } else {
    clear_has_server_key();
  }
  server_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameServerInfo.server_key)
}

// optional bool server_hibernation = 6;
bool CMsgGameServerInfo::has_server_hibernation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGameServerInfo::set_has_server_hibernation() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGameServerInfo::clear_has_server_hibernation() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGameServerInfo::clear_server_hibernation() {
  server_hibernation_ = false;
  clear_has_server_hibernation();
}
bool CMsgGameServerInfo::server_hibernation() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_hibernation)
  return server_hibernation_;
}
void CMsgGameServerInfo::set_server_hibernation(bool value) {
  set_has_server_hibernation();
  server_hibernation_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_hibernation)
}

// optional .proto.dota.CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
bool CMsgGameServerInfo::has_server_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGameServerInfo::set_has_server_type() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGameServerInfo::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGameServerInfo::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
::proto::dota::CMsgGameServerInfo_ServerType CMsgGameServerInfo::server_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_type)
  return static_cast< ::proto::dota::CMsgGameServerInfo_ServerType >(server_type_);
}
void CMsgGameServerInfo::set_server_type(::proto::dota::CMsgGameServerInfo_ServerType value) {
  assert(::proto::dota::CMsgGameServerInfo_ServerType_IsValid(value));
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_type)
}

// optional uint32 server_region = 8;
bool CMsgGameServerInfo::has_server_region() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGameServerInfo::set_has_server_region() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGameServerInfo::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGameServerInfo::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
::google::protobuf::uint32 CMsgGameServerInfo::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_region)
  return server_region_;
}
void CMsgGameServerInfo::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_region)
}

// optional float server_loadavg = 9;
bool CMsgGameServerInfo::has_server_loadavg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgGameServerInfo::set_has_server_loadavg() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgGameServerInfo::clear_has_server_loadavg() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgGameServerInfo::clear_server_loadavg() {
  server_loadavg_ = 0;
  clear_has_server_loadavg();
}
float CMsgGameServerInfo::server_loadavg() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_loadavg)
  return server_loadavg_;
}
void CMsgGameServerInfo::set_server_loadavg(float value) {
  set_has_server_loadavg();
  server_loadavg_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_loadavg)
}

// optional float server_tv_broadcast_time = 10;
bool CMsgGameServerInfo::has_server_tv_broadcast_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgGameServerInfo::set_has_server_tv_broadcast_time() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgGameServerInfo::clear_has_server_tv_broadcast_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgGameServerInfo::clear_server_tv_broadcast_time() {
  server_tv_broadcast_time_ = 0;
  clear_has_server_tv_broadcast_time();
}
float CMsgGameServerInfo::server_tv_broadcast_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_tv_broadcast_time)
  return server_tv_broadcast_time_;
}
void CMsgGameServerInfo::set_server_tv_broadcast_time(float value) {
  set_has_server_tv_broadcast_time();
  server_tv_broadcast_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_tv_broadcast_time)
}

// optional float server_game_time = 11;
bool CMsgGameServerInfo::has_server_game_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgGameServerInfo::set_has_server_game_time() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgGameServerInfo::clear_has_server_game_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgGameServerInfo::clear_server_game_time() {
  server_game_time_ = 0;
  clear_has_server_game_time();
}
float CMsgGameServerInfo::server_game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_game_time)
  return server_game_time_;
}
void CMsgGameServerInfo::set_server_game_time(float value) {
  set_has_server_game_time();
  server_game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_game_time)
}

// optional fixed64 server_relay_connected_steam_id = 12;
bool CMsgGameServerInfo::has_server_relay_connected_steam_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgGameServerInfo::set_has_server_relay_connected_steam_id() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgGameServerInfo::clear_has_server_relay_connected_steam_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgGameServerInfo::clear_server_relay_connected_steam_id() {
  server_relay_connected_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_relay_connected_steam_id();
}
::google::protobuf::uint64 CMsgGameServerInfo::server_relay_connected_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_relay_connected_steam_id)
  return server_relay_connected_steam_id_;
}
void CMsgGameServerInfo::set_server_relay_connected_steam_id(::google::protobuf::uint64 value) {
  set_has_server_relay_connected_steam_id();
  server_relay_connected_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_relay_connected_steam_id)
}

// optional uint32 relay_slots_max = 13;
bool CMsgGameServerInfo::has_relay_slots_max() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgGameServerInfo::set_has_relay_slots_max() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgGameServerInfo::clear_has_relay_slots_max() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgGameServerInfo::clear_relay_slots_max() {
  relay_slots_max_ = 0u;
  clear_has_relay_slots_max();
}
::google::protobuf::uint32 CMsgGameServerInfo::relay_slots_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.relay_slots_max)
  return relay_slots_max_;
}
void CMsgGameServerInfo::set_relay_slots_max(::google::protobuf::uint32 value) {
  set_has_relay_slots_max();
  relay_slots_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.relay_slots_max)
}

// optional int32 relays_connected = 14;
bool CMsgGameServerInfo::has_relays_connected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgGameServerInfo::set_has_relays_connected() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgGameServerInfo::clear_has_relays_connected() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgGameServerInfo::clear_relays_connected() {
  relays_connected_ = 0;
  clear_has_relays_connected();
}
::google::protobuf::int32 CMsgGameServerInfo::relays_connected() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.relays_connected)
  return relays_connected_;
}
void CMsgGameServerInfo::set_relays_connected(::google::protobuf::int32 value) {
  set_has_relays_connected();
  relays_connected_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.relays_connected)
}

// optional int32 relay_clients_connected = 15;
bool CMsgGameServerInfo::has_relay_clients_connected() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgGameServerInfo::set_has_relay_clients_connected() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgGameServerInfo::clear_has_relay_clients_connected() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgGameServerInfo::clear_relay_clients_connected() {
  relay_clients_connected_ = 0;
  clear_has_relay_clients_connected();
}
::google::protobuf::int32 CMsgGameServerInfo::relay_clients_connected() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.relay_clients_connected)
  return relay_clients_connected_;
}
void CMsgGameServerInfo::set_relay_clients_connected(::google::protobuf::int32 value) {
  set_has_relay_clients_connected();
  relay_clients_connected_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.relay_clients_connected)
}

// optional fixed64 relayed_game_server_steam_id = 16;
bool CMsgGameServerInfo::has_relayed_game_server_steam_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgGameServerInfo::set_has_relayed_game_server_steam_id() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgGameServerInfo::clear_has_relayed_game_server_steam_id() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgGameServerInfo::clear_relayed_game_server_steam_id() {
  relayed_game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_relayed_game_server_steam_id();
}
::google::protobuf::uint64 CMsgGameServerInfo::relayed_game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.relayed_game_server_steam_id)
  return relayed_game_server_steam_id_;
}
void CMsgGameServerInfo::set_relayed_game_server_steam_id(::google::protobuf::uint64 value) {
  set_has_relayed_game_server_steam_id();
  relayed_game_server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.relayed_game_server_steam_id)
}

// optional uint32 parent_relay_count = 17;
bool CMsgGameServerInfo::has_parent_relay_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgGameServerInfo::set_has_parent_relay_count() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgGameServerInfo::clear_has_parent_relay_count() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgGameServerInfo::clear_parent_relay_count() {
  parent_relay_count_ = 0u;
  clear_has_parent_relay_count();
}
::google::protobuf::uint32 CMsgGameServerInfo::parent_relay_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.parent_relay_count)
  return parent_relay_count_;
}
void CMsgGameServerInfo::set_parent_relay_count(::google::protobuf::uint32 value) {
  set_has_parent_relay_count();
  parent_relay_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.parent_relay_count)
}

// optional fixed64 tv_secret_code = 18;
bool CMsgGameServerInfo::has_tv_secret_code() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgGameServerInfo::set_has_tv_secret_code() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgGameServerInfo::clear_has_tv_secret_code() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgGameServerInfo::clear_tv_secret_code() {
  tv_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_secret_code();
}
::google::protobuf::uint64 CMsgGameServerInfo::tv_secret_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.tv_secret_code)
  return tv_secret_code_;
}
void CMsgGameServerInfo::set_tv_secret_code(::google::protobuf::uint64 value) {
  set_has_tv_secret_code();
  tv_secret_code_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.tv_secret_code)
}

// optional uint32 server_version = 19;
bool CMsgGameServerInfo::has_server_version() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgGameServerInfo::set_has_server_version() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgGameServerInfo::clear_has_server_version() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgGameServerInfo::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
::google::protobuf::uint32 CMsgGameServerInfo::server_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_version)
  return server_version_;
}
void CMsgGameServerInfo::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_version)
}

// optional uint32 server_cluster = 20;
bool CMsgGameServerInfo::has_server_cluster() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgGameServerInfo::set_has_server_cluster() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgGameServerInfo::clear_has_server_cluster() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgGameServerInfo::clear_server_cluster() {
  server_cluster_ = 0u;
  clear_has_server_cluster();
}
::google::protobuf::uint32 CMsgGameServerInfo::server_cluster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.server_cluster)
  return server_cluster_;
}
void CMsgGameServerInfo::set_server_cluster(::google::protobuf::uint32 value) {
  set_has_server_cluster();
  server_cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.server_cluster)
}

// optional .proto.dota.CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
bool CMsgGameServerInfo::has_allow_custom_games() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgGameServerInfo::set_has_allow_custom_games() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgGameServerInfo::clear_has_allow_custom_games() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgGameServerInfo::clear_allow_custom_games() {
  allow_custom_games_ = 0;
  clear_has_allow_custom_games();
}
::proto::dota::CMsgGameServerInfo_CustomGames CMsgGameServerInfo::allow_custom_games() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerInfo.allow_custom_games)
  return static_cast< ::proto::dota::CMsgGameServerInfo_CustomGames >(allow_custom_games_);
}
void CMsgGameServerInfo::set_allow_custom_games(::proto::dota::CMsgGameServerInfo_CustomGames value) {
  assert(::proto::dota::CMsgGameServerInfo_CustomGames_IsValid(value));
  set_has_allow_custom_games();
  allow_custom_games_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerInfo.allow_custom_games)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLeaverDetected::kSteamIdFieldNumber;
const int CMsgLeaverDetected::kLeaverStatusFieldNumber;
const int CMsgLeaverDetected::kLeaverStateFieldNumber;
const int CMsgLeaverDetected::kServerClusterFieldNumber;
const int CMsgLeaverDetected::kDisconnectReasonFieldNumber;
const int CMsgLeaverDetected::kPoorNetworkConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeaverDetected::CMsgLeaverDetected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeaverDetected)
}
CMsgLeaverDetected::CMsgLeaverDetected(const CMsgLeaverDetected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leaver_state()) {
    leaver_state_ = new ::proto::dota::CMsgLeaverState(*from.leaver_state_);
  } else {
    leaver_state_ = NULL;
  }
  if (from.has_poor_network_conditions()) {
    poor_network_conditions_ = new ::proto::dota::CMsgPoorNetworkConditions(*from.poor_network_conditions_);
  } else {
    poor_network_conditions_ = NULL;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeaverDetected)
}

void CMsgLeaverDetected::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&leaver_state_, 0, reinterpret_cast<char*>(&disconnect_reason_) -
    reinterpret_cast<char*>(&leaver_state_) + sizeof(disconnect_reason_));
}

CMsgLeaverDetected::~CMsgLeaverDetected() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeaverDetected)
  SharedDtor();
}

void CMsgLeaverDetected::SharedDtor() {
  if (this != internal_default_instance()) {
    delete leaver_state_;
  }
  if (this != internal_default_instance()) {
    delete poor_network_conditions_;
  }
}

void CMsgLeaverDetected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverDetected::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLeaverDetected& CMsgLeaverDetected::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLeaverDetected* CMsgLeaverDetected::New(::google::protobuf::Arena* arena) const {
  CMsgLeaverDetected* n = new CMsgLeaverDetected;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLeaverDetected::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeaverDetected)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_leaver_state()) {
      GOOGLE_DCHECK(leaver_state_ != NULL);
      leaver_state_->::proto::dota::CMsgLeaverState::Clear();
    }
    if (has_poor_network_conditions()) {
      GOOGLE_DCHECK(poor_network_conditions_ != NULL);
      poor_network_conditions_->::proto::dota::CMsgPoorNetworkConditions::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&disconnect_reason_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(disconnect_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLeaverDetected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeaverDetected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALeaverStatus_t_IsValid(value)) {
            set_leaver_status(static_cast< ::proto::dota::DOTALeaverStatus_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgLeaverState leaver_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaver_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_cluster = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_server_cluster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ::proto::dota::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poor_network_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeaverDetected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeaverDetected)
  return false;
#undef DO_
}

void CMsgLeaverDetected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeaverDetected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->leaver_status(), output);
  }

  // optional .proto.dota.CMsgLeaverState leaver_state = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->leaver_state_, output);
  }

  // optional uint32 server_cluster = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_cluster(), output);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->disconnect_reason(), output);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->poor_network_conditions_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeaverDetected)
}

::google::protobuf::uint8* CMsgLeaverDetected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeaverDetected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->leaver_status(), target);
  }

  // optional .proto.dota.CMsgLeaverState leaver_state = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->leaver_state_, deterministic, target);
  }

  // optional uint32 server_cluster = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_cluster(), target);
  }

  // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->disconnect_reason(), target);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->poor_network_conditions_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeaverDetected)
  return target;
}

size_t CMsgLeaverDetected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeaverDetected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.CMsgLeaverState leaver_state = 4;
    if (has_leaver_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leaver_state_);
    }

    // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
    if (has_poor_network_conditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->poor_network_conditions_);
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
    if (has_leaver_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaver_status());
    }

    // optional uint32 server_cluster = 5;
    if (has_server_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }

    // optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
    if (has_disconnect_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverDetected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeaverDetected)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaverDetected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLeaverDetected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeaverDetected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeaverDetected)
    MergeFrom(*source);
  }
}

void CMsgLeaverDetected::MergeFrom(const CMsgLeaverDetected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeaverDetected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_leaver_state()->::proto::dota::CMsgLeaverState::MergeFrom(from.leaver_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_poor_network_conditions()->::proto::dota::CMsgPoorNetworkConditions::MergeFrom(from.poor_network_conditions());
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaver_status_ = from.leaver_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_cluster_ = from.server_cluster_;
    }
    if (cached_has_bits & 0x00000020u) {
      disconnect_reason_ = from.disconnect_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLeaverDetected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeaverDetected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetected::CopyFrom(const CMsgLeaverDetected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeaverDetected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetected::IsInitialized() const {
  return true;
}

void CMsgLeaverDetected::Swap(CMsgLeaverDetected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaverDetected::InternalSwap(CMsgLeaverDetected* other) {
  std::swap(leaver_state_, other->leaver_state_);
  std::swap(poor_network_conditions_, other->poor_network_conditions_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(leaver_status_, other->leaver_status_);
  std::swap(server_cluster_, other->server_cluster_);
  std::swap(disconnect_reason_, other->disconnect_reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLeaverDetected::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLeaverDetected

// optional fixed64 steam_id = 1;
bool CMsgLeaverDetected::has_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLeaverDetected::set_has_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLeaverDetected::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLeaverDetected::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgLeaverDetected::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverDetected.steam_id)
  return steam_id_;
}
void CMsgLeaverDetected::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverDetected.steam_id)
}

// optional .proto.dota.DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
bool CMsgLeaverDetected::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgLeaverDetected::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgLeaverDetected::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgLeaverDetected::clear_leaver_status() {
  leaver_status_ = 0;
  clear_has_leaver_status();
}
::proto::dota::DOTALeaverStatus_t CMsgLeaverDetected::leaver_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverDetected.leaver_status)
  return static_cast< ::proto::dota::DOTALeaverStatus_t >(leaver_status_);
}
void CMsgLeaverDetected::set_leaver_status(::proto::dota::DOTALeaverStatus_t value) {
  assert(::proto::dota::DOTALeaverStatus_t_IsValid(value));
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverDetected.leaver_status)
}

// optional .proto.dota.CMsgLeaverState leaver_state = 4;
bool CMsgLeaverDetected::has_leaver_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLeaverDetected::set_has_leaver_state() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLeaverDetected::clear_has_leaver_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLeaverDetected::clear_leaver_state() {
  if (leaver_state_ != NULL) leaver_state_->::proto::dota::CMsgLeaverState::Clear();
  clear_has_leaver_state();
}
const ::proto::dota::CMsgLeaverState& CMsgLeaverDetected::leaver_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverDetected.leaver_state)
  return leaver_state_ != NULL ? *leaver_state_
                         : *::proto::dota::CMsgLeaverState::internal_default_instance();
}
::proto::dota::CMsgLeaverState* CMsgLeaverDetected::mutable_leaver_state() {
  set_has_leaver_state();
  if (leaver_state_ == NULL) {
    leaver_state_ = new ::proto::dota::CMsgLeaverState;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLeaverDetected.leaver_state)
  return leaver_state_;
}
::proto::dota::CMsgLeaverState* CMsgLeaverDetected::release_leaver_state() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLeaverDetected.leaver_state)
  clear_has_leaver_state();
  ::proto::dota::CMsgLeaverState* temp = leaver_state_;
  leaver_state_ = NULL;
  return temp;
}
void CMsgLeaverDetected::set_allocated_leaver_state(::proto::dota::CMsgLeaverState* leaver_state) {
  delete leaver_state_;
  leaver_state_ = leaver_state;
  if (leaver_state) {
    set_has_leaver_state();
  } else {
    clear_has_leaver_state();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLeaverDetected.leaver_state)
}

// optional uint32 server_cluster = 5;
bool CMsgLeaverDetected::has_server_cluster() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgLeaverDetected::set_has_server_cluster() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgLeaverDetected::clear_has_server_cluster() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgLeaverDetected::clear_server_cluster() {
  server_cluster_ = 0u;
  clear_has_server_cluster();
}
::google::protobuf::uint32 CMsgLeaverDetected::server_cluster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverDetected.server_cluster)
  return server_cluster_;
}
void CMsgLeaverDetected::set_server_cluster(::google::protobuf::uint32 value) {
  set_has_server_cluster();
  server_cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverDetected.server_cluster)
}

// optional .proto.dota.ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
bool CMsgLeaverDetected::has_disconnect_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgLeaverDetected::set_has_disconnect_reason() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgLeaverDetected::clear_has_disconnect_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgLeaverDetected::clear_disconnect_reason() {
  disconnect_reason_ = 0;
  clear_has_disconnect_reason();
}
::proto::dota::ENetworkDisconnectionReason CMsgLeaverDetected::disconnect_reason() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverDetected.disconnect_reason)
  return static_cast< ::proto::dota::ENetworkDisconnectionReason >(disconnect_reason_);
}
void CMsgLeaverDetected::set_disconnect_reason(::proto::dota::ENetworkDisconnectionReason value) {
  assert(::proto::dota::ENetworkDisconnectionReason_IsValid(value));
  set_has_disconnect_reason();
  disconnect_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverDetected.disconnect_reason)
}

// optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 7;
bool CMsgLeaverDetected::has_poor_network_conditions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLeaverDetected::set_has_poor_network_conditions() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLeaverDetected::clear_has_poor_network_conditions() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLeaverDetected::clear_poor_network_conditions() {
  if (poor_network_conditions_ != NULL) poor_network_conditions_->::proto::dota::CMsgPoorNetworkConditions::Clear();
  clear_has_poor_network_conditions();
}
const ::proto::dota::CMsgPoorNetworkConditions& CMsgLeaverDetected::poor_network_conditions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverDetected.poor_network_conditions)
  return poor_network_conditions_ != NULL ? *poor_network_conditions_
                         : *::proto::dota::CMsgPoorNetworkConditions::internal_default_instance();
}
::proto::dota::CMsgPoorNetworkConditions* CMsgLeaverDetected::mutable_poor_network_conditions() {
  set_has_poor_network_conditions();
  if (poor_network_conditions_ == NULL) {
    poor_network_conditions_ = new ::proto::dota::CMsgPoorNetworkConditions;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLeaverDetected.poor_network_conditions)
  return poor_network_conditions_;
}
::proto::dota::CMsgPoorNetworkConditions* CMsgLeaverDetected::release_poor_network_conditions() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLeaverDetected.poor_network_conditions)
  clear_has_poor_network_conditions();
  ::proto::dota::CMsgPoorNetworkConditions* temp = poor_network_conditions_;
  poor_network_conditions_ = NULL;
  return temp;
}
void CMsgLeaverDetected::set_allocated_poor_network_conditions(::proto::dota::CMsgPoorNetworkConditions* poor_network_conditions) {
  delete poor_network_conditions_;
  poor_network_conditions_ = poor_network_conditions;
  if (poor_network_conditions) {
    set_has_poor_network_conditions();
  } else {
    clear_has_poor_network_conditions();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLeaverDetected.poor_network_conditions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLeaverDetectedResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeaverDetectedResponse)
}
CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(const CMsgLeaverDetectedResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeaverDetectedResponse)
}

void CMsgLeaverDetectedResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

CMsgLeaverDetectedResponse::~CMsgLeaverDetectedResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeaverDetectedResponse)
  SharedDtor();
}

void CMsgLeaverDetectedResponse::SharedDtor() {
}

void CMsgLeaverDetectedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverDetectedResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLeaverDetectedResponse& CMsgLeaverDetectedResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLeaverDetectedResponse* CMsgLeaverDetectedResponse::New(::google::protobuf::Arena* arena) const {
  CMsgLeaverDetectedResponse* n = new CMsgLeaverDetectedResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLeaverDetectedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeaverDetectedResponse)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLeaverDetectedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeaverDetectedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeaverDetectedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeaverDetectedResponse)
  return false;
#undef DO_
}

void CMsgLeaverDetectedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeaverDetectedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeaverDetectedResponse)
}

::google::protobuf::uint8* CMsgLeaverDetectedResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeaverDetectedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeaverDetectedResponse)
  return target;
}

size_t CMsgLeaverDetectedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeaverDetectedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverDetectedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeaverDetectedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaverDetectedResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLeaverDetectedResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeaverDetectedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeaverDetectedResponse)
    MergeFrom(*source);
  }
}

void CMsgLeaverDetectedResponse::MergeFrom(const CMsgLeaverDetectedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeaverDetectedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgLeaverDetectedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeaverDetectedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetectedResponse::CopyFrom(const CMsgLeaverDetectedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeaverDetectedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetectedResponse::IsInitialized() const {
  return true;
}

void CMsgLeaverDetectedResponse::Swap(CMsgLeaverDetectedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaverDetectedResponse::InternalSwap(CMsgLeaverDetectedResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLeaverDetectedResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLeaverDetectedResponse

// optional uint32 result = 1;
bool CMsgLeaverDetectedResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLeaverDetectedResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLeaverDetectedResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLeaverDetectedResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgLeaverDetectedResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverDetectedResponse.result)
  return result_;
}
void CMsgLeaverDetectedResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverDetectedResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyFinalPlayerStats::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
}
CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats(const CMsgDOTAFantasyFinalPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
}

void CMsgDOTAFantasyFinalPlayerStats::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAFantasyFinalPlayerStats::~CMsgDOTAFantasyFinalPlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyFinalPlayerStats::SharedDtor() {
}

void CMsgDOTAFantasyFinalPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyFinalPlayerStats::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyFinalPlayerStats& CMsgDOTAFantasyFinalPlayerStats::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyFinalPlayerStats* CMsgDOTAFantasyFinalPlayerStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyFinalPlayerStats* n = new CMsgDOTAFantasyFinalPlayerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyFinalPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyFinalPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  return false;
#undef DO_
}

void CMsgDOTAFantasyFinalPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyFinalPlayerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stats(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  return target;
}

size_t CMsgDOTAFantasyFinalPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyFinalPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyFinalPlayerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyFinalPlayerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyFinalPlayerStats::MergeFrom(const CMsgDOTAFantasyFinalPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void CMsgDOTAFantasyFinalPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyFinalPlayerStats::CopyFrom(const CMsgDOTAFantasyFinalPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyFinalPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyFinalPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyFinalPlayerStats::Swap(CMsgDOTAFantasyFinalPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyFinalPlayerStats::InternalSwap(CMsgDOTAFantasyFinalPlayerStats* other) {
  stats_.InternalSwap(&other->stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyFinalPlayerStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyFinalPlayerStats

// repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
int CMsgDOTAFantasyFinalPlayerStats::stats_size() const {
  return stats_.size();
}
void CMsgDOTAFantasyFinalPlayerStats::clear_stats() {
  stats_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyFinalPlayerStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyFinalPlayerStats.stats)
  return stats_.Get(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyFinalPlayerStats::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyFinalPlayerStats.stats)
  return stats_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyFinalPlayerStats::add_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyFinalPlayerStats.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >*
CMsgDOTAFantasyFinalPlayerStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyFinalPlayerStats.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >&
CMsgDOTAFantasyFinalPlayerStats::stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyFinalPlayerStats.stats)
  return stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLivePlayerStats::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLivePlayerStats)
}
CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats(const CMsgDOTAFantasyLivePlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLivePlayerStats)
}

void CMsgDOTAFantasyLivePlayerStats::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAFantasyLivePlayerStats::~CMsgDOTAFantasyLivePlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyLivePlayerStats::SharedDtor() {
}

void CMsgDOTAFantasyLivePlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLivePlayerStats::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLivePlayerStats& CMsgDOTAFantasyLivePlayerStats::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLivePlayerStats* CMsgDOTAFantasyLivePlayerStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLivePlayerStats* n = new CMsgDOTAFantasyLivePlayerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLivePlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLivePlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLivePlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLivePlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyLivePlayerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stats(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  return target;
}

size_t CMsgDOTAFantasyLivePlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLivePlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLivePlayerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLivePlayerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLivePlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLivePlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLivePlayerStats::MergeFrom(const CMsgDOTAFantasyLivePlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void CMsgDOTAFantasyLivePlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLivePlayerStats::CopyFrom(const CMsgDOTAFantasyLivePlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLivePlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLivePlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLivePlayerStats::Swap(CMsgDOTAFantasyLivePlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLivePlayerStats::InternalSwap(CMsgDOTAFantasyLivePlayerStats* other) {
  stats_.InternalSwap(&other->stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLivePlayerStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLivePlayerStats

// repeated .proto.dota.CMsgDOTAFantasyPlayerStats stats = 2;
int CMsgDOTAFantasyLivePlayerStats::stats_size() const {
  return stats_.size();
}
void CMsgDOTAFantasyLivePlayerStats::clear_stats() {
  stats_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyLivePlayerStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLivePlayerStats.stats)
  return stats_.Get(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyLivePlayerStats::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLivePlayerStats.stats)
  return stats_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyLivePlayerStats::add_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyLivePlayerStats.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >*
CMsgDOTAFantasyLivePlayerStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyLivePlayerStats.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >&
CMsgDOTAFantasyLivePlayerStats::stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyLivePlayerStats.stats)
  return stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMatch::kMatchIdFieldNumber;
const int CMsgDOTAFantasyMatch::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyMatch::kSeriesIdFieldNumber;
const int CMsgDOTAFantasyMatch::kStartTimeFieldNumber;
const int CMsgDOTAFantasyMatch::kSeriesTypeFieldNumber;
const int CMsgDOTAFantasyMatch::kTeam1FieldNumber;
const int CMsgDOTAFantasyMatch::kTeam2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMatch::CMsgDOTAFantasyMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMatch)
}
CMsgDOTAFantasyMatch::CMsgDOTAFantasyMatch(const CMsgDOTAFantasyMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&team_2_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(team_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMatch)
}

void CMsgDOTAFantasyMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&team_2_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(team_2_));
}

CMsgDOTAFantasyMatch::~CMsgDOTAFantasyMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMatch)
  SharedDtor();
}

void CMsgDOTAFantasyMatch::SharedDtor() {
}

void CMsgDOTAFantasyMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMatch::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyMatch& CMsgDOTAFantasyMatch::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyMatch* CMsgDOTAFantasyMatch::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyMatch* n = new CMsgDOTAFantasyMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMatch)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&team_2_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(team_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_series_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_team_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_team_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMatch)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 series_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->series_id(), output);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // optional uint32 series_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->series_type(), output);
  }

  // optional uint32 team_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_1(), output);
  }

  // optional uint32 team_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMatch)
}

::google::protobuf::uint8* CMsgDOTAFantasyMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 series_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->series_id(), target);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // optional uint32 series_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->series_type(), target);
  }

  // optional uint32 team_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_1(), target);
  }

  // optional uint32 team_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMatch)
  return target;
}

size_t CMsgDOTAFantasyMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 series_id = 3;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 series_type = 5;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 team_1 = 6;
    if (has_team_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_1());
    }

    // optional uint32 team_2 = 7;
    if (has_team_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMatch::MergeFrom(const CMsgDOTAFantasyMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_1_ = from.team_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_2_ = from.team_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMatch::CopyFrom(const CMsgDOTAFantasyMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMatch::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMatch::Swap(CMsgDOTAFantasyMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMatch::InternalSwap(CMsgDOTAFantasyMatch* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(series_id_, other->series_id_);
  std::swap(start_time_, other->start_time_);
  std::swap(series_type_, other->series_type_);
  std::swap(team_1_, other->team_1_);
  std::swap(team_2_, other->team_2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMatch::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyMatch

// optional uint64 match_id = 1;
bool CMsgDOTAFantasyMatch::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyMatch::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyMatch::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyMatch::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTAFantasyMatch::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMatch.match_id)
  return match_id_;
}
void CMsgDOTAFantasyMatch::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMatch.match_id)
}

// optional uint32 league_id = 2;
bool CMsgDOTAFantasyMatch::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyMatch::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyMatch::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyMatch::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyMatch::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMatch.league_id)
  return league_id_;
}
void CMsgDOTAFantasyMatch::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMatch.league_id)
}

// optional uint32 series_id = 3;
bool CMsgDOTAFantasyMatch::has_series_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyMatch::set_has_series_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyMatch::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyMatch::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyMatch::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMatch.series_id)
  return series_id_;
}
void CMsgDOTAFantasyMatch::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMatch.series_id)
}

// optional uint32 start_time = 4;
bool CMsgDOTAFantasyMatch::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyMatch::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyMatch::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyMatch::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyMatch::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMatch.start_time)
  return start_time_;
}
void CMsgDOTAFantasyMatch::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMatch.start_time)
}

// optional uint32 series_type = 5;
bool CMsgDOTAFantasyMatch::has_series_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyMatch::set_has_series_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyMatch::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyMatch::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
::google::protobuf::uint32 CMsgDOTAFantasyMatch::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMatch.series_type)
  return series_type_;
}
void CMsgDOTAFantasyMatch::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMatch.series_type)
}

// optional uint32 team_1 = 6;
bool CMsgDOTAFantasyMatch::has_team_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyMatch::set_has_team_1() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyMatch::clear_has_team_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyMatch::clear_team_1() {
  team_1_ = 0u;
  clear_has_team_1();
}
::google::protobuf::uint32 CMsgDOTAFantasyMatch::team_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMatch.team_1)
  return team_1_;
}
void CMsgDOTAFantasyMatch::set_team_1(::google::protobuf::uint32 value) {
  set_has_team_1();
  team_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMatch.team_1)
}

// optional uint32 team_2 = 7;
bool CMsgDOTAFantasyMatch::has_team_2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyMatch::set_has_team_2() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyMatch::clear_has_team_2() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyMatch::clear_team_2() {
  team_2_ = 0u;
  clear_has_team_2();
}
::google::protobuf::uint32 CMsgDOTAFantasyMatch::team_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMatch.team_2)
  return team_2_;
}
void CMsgDOTAFantasyMatch::set_team_2(::google::protobuf::uint32 value) {
  set_has_team_2();
  team_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMatch.team_2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAUpdateClippy::kGoodTeamHeroIdsFieldNumber;
const int CMsgDOTAUpdateClippy::kBadTeamHeroIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAUpdateClippy::CMsgDOTAUpdateClippy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAUpdateClippy)
}
CMsgDOTAUpdateClippy::CMsgDOTAUpdateClippy(const CMsgDOTAUpdateClippy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      good_team_hero_ids_(from.good_team_hero_ids_),
      bad_team_hero_ids_(from.bad_team_hero_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAUpdateClippy)
}

void CMsgDOTAUpdateClippy::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAUpdateClippy::~CMsgDOTAUpdateClippy() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAUpdateClippy)
  SharedDtor();
}

void CMsgDOTAUpdateClippy::SharedDtor() {
}

void CMsgDOTAUpdateClippy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAUpdateClippy::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAUpdateClippy& CMsgDOTAUpdateClippy::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAUpdateClippy* CMsgDOTAUpdateClippy::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAUpdateClippy* n = new CMsgDOTAUpdateClippy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAUpdateClippy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAUpdateClippy)
  good_team_hero_ids_.Clear();
  bad_team_hero_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAUpdateClippy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAUpdateClippy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 good_team_hero_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_good_team_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_good_team_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 bad_team_hero_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_bad_team_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bad_team_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAUpdateClippy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAUpdateClippy)
  return false;
#undef DO_
}

void CMsgDOTAUpdateClippy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAUpdateClippy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 good_team_hero_ids = 1;
  for (int i = 0, n = this->good_team_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->good_team_hero_ids(i), output);
  }

  // repeated uint32 bad_team_hero_ids = 2;
  for (int i = 0, n = this->bad_team_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->bad_team_hero_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAUpdateClippy)
}

::google::protobuf::uint8* CMsgDOTAUpdateClippy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAUpdateClippy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 good_team_hero_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->good_team_hero_ids_, target);

  // repeated uint32 bad_team_hero_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->bad_team_hero_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAUpdateClippy)
  return target;
}

size_t CMsgDOTAUpdateClippy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAUpdateClippy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 good_team_hero_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->good_team_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->good_team_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 bad_team_hero_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->bad_team_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bad_team_hero_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAUpdateClippy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAUpdateClippy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAUpdateClippy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAUpdateClippy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAUpdateClippy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAUpdateClippy)
    MergeFrom(*source);
  }
}

void CMsgDOTAUpdateClippy::MergeFrom(const CMsgDOTAUpdateClippy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAUpdateClippy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  good_team_hero_ids_.MergeFrom(from.good_team_hero_ids_);
  bad_team_hero_ids_.MergeFrom(from.bad_team_hero_ids_);
}

void CMsgDOTAUpdateClippy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAUpdateClippy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAUpdateClippy::CopyFrom(const CMsgDOTAUpdateClippy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAUpdateClippy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAUpdateClippy::IsInitialized() const {
  return true;
}

void CMsgDOTAUpdateClippy::Swap(CMsgDOTAUpdateClippy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAUpdateClippy::InternalSwap(CMsgDOTAUpdateClippy* other) {
  good_team_hero_ids_.InternalSwap(&other->good_team_hero_ids_);
  bad_team_hero_ids_.InternalSwap(&other->bad_team_hero_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAUpdateClippy::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAUpdateClippy

// repeated uint32 good_team_hero_ids = 1;
int CMsgDOTAUpdateClippy::good_team_hero_ids_size() const {
  return good_team_hero_ids_.size();
}
void CMsgDOTAUpdateClippy::clear_good_team_hero_ids() {
  good_team_hero_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTAUpdateClippy::good_team_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAUpdateClippy.good_team_hero_ids)
  return good_team_hero_ids_.Get(index);
}
void CMsgDOTAUpdateClippy::set_good_team_hero_ids(int index, ::google::protobuf::uint32 value) {
  good_team_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAUpdateClippy.good_team_hero_ids)
}
void CMsgDOTAUpdateClippy::add_good_team_hero_ids(::google::protobuf::uint32 value) {
  good_team_hero_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAUpdateClippy.good_team_hero_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAUpdateClippy::good_team_hero_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAUpdateClippy.good_team_hero_ids)
  return good_team_hero_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAUpdateClippy::mutable_good_team_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAUpdateClippy.good_team_hero_ids)
  return &good_team_hero_ids_;
}

// repeated uint32 bad_team_hero_ids = 2;
int CMsgDOTAUpdateClippy::bad_team_hero_ids_size() const {
  return bad_team_hero_ids_.size();
}
void CMsgDOTAUpdateClippy::clear_bad_team_hero_ids() {
  bad_team_hero_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTAUpdateClippy::bad_team_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAUpdateClippy.bad_team_hero_ids)
  return bad_team_hero_ids_.Get(index);
}
void CMsgDOTAUpdateClippy::set_bad_team_hero_ids(int index, ::google::protobuf::uint32 value) {
  bad_team_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAUpdateClippy.bad_team_hero_ids)
}
void CMsgDOTAUpdateClippy::add_bad_team_hero_ids(::google::protobuf::uint32 value) {
  bad_team_hero_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAUpdateClippy.bad_team_hero_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAUpdateClippy::bad_team_hero_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAUpdateClippy.bad_team_hero_ids)
  return bad_team_hero_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAUpdateClippy::mutable_bad_team_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAUpdateClippy.bad_team_hero_ids)
  return &bad_team_hero_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCRealtimeStats::kDelayedFieldNumber;
const int CMsgServerToGCRealtimeStats::kCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCRealtimeStats)
}
CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats(const CMsgServerToGCRealtimeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_delayed()) {
    delayed_ = new ::proto::dota::CMsgDOTARealtimeGameStatsTerse(*from.delayed_);
  } else {
    delayed_ = NULL;
  }
  if (from.has_current()) {
    current_ = new ::proto::dota::CMsgDOTARealtimeGameStats(*from.current_);
  } else {
    current_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCRealtimeStats)
}

void CMsgServerToGCRealtimeStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&delayed_, 0, reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&delayed_) + sizeof(current_));
}

CMsgServerToGCRealtimeStats::~CMsgServerToGCRealtimeStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCRealtimeStats)
  SharedDtor();
}

void CMsgServerToGCRealtimeStats::SharedDtor() {
  if (this != internal_default_instance()) {
    delete delayed_;
  }
  if (this != internal_default_instance()) {
    delete current_;
  }
}

void CMsgServerToGCRealtimeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCRealtimeStats::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCRealtimeStats& CMsgServerToGCRealtimeStats::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCRealtimeStats* CMsgServerToGCRealtimeStats::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCRealtimeStats* n = new CMsgServerToGCRealtimeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCRealtimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCRealtimeStats)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_delayed()) {
      GOOGLE_DCHECK(delayed_ != NULL);
      delayed_->::proto::dota::CMsgDOTARealtimeGameStatsTerse::Clear();
    }
    if (has_current()) {
      GOOGLE_DCHECK(current_ != NULL);
      current_->::proto::dota::CMsgDOTARealtimeGameStats::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCRealtimeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCRealtimeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delayed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTARealtimeGameStats current = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCRealtimeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCRealtimeStats)
  return false;
#undef DO_
}

void CMsgServerToGCRealtimeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCRealtimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->delayed_, output);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStats current = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->current_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCRealtimeStats)
}

::google::protobuf::uint8* CMsgServerToGCRealtimeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCRealtimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->delayed_, deterministic, target);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStats current = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->current_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCRealtimeStats)
  return target;
}

size_t CMsgServerToGCRealtimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCRealtimeStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
    if (has_delayed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->delayed_);
    }

    // optional .proto.dota.CMsgDOTARealtimeGameStats current = 2;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->current_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCRealtimeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCRealtimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRealtimeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCRealtimeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCRealtimeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCRealtimeStats)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRealtimeStats::MergeFrom(const CMsgServerToGCRealtimeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCRealtimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_delayed()->::proto::dota::CMsgDOTARealtimeGameStatsTerse::MergeFrom(from.delayed());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_current()->::proto::dota::CMsgDOTARealtimeGameStats::MergeFrom(from.current());
    }
  }
}

void CMsgServerToGCRealtimeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCRealtimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRealtimeStats::CopyFrom(const CMsgServerToGCRealtimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCRealtimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRealtimeStats::IsInitialized() const {
  return true;
}

void CMsgServerToGCRealtimeStats::Swap(CMsgServerToGCRealtimeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCRealtimeStats::InternalSwap(CMsgServerToGCRealtimeStats* other) {
  std::swap(delayed_, other->delayed_);
  std::swap(current_, other->current_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCRealtimeStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCRealtimeStats

// optional .proto.dota.CMsgDOTARealtimeGameStatsTerse delayed = 1;
bool CMsgServerToGCRealtimeStats::has_delayed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCRealtimeStats::set_has_delayed() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCRealtimeStats::clear_has_delayed() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCRealtimeStats::clear_delayed() {
  if (delayed_ != NULL) delayed_->::proto::dota::CMsgDOTARealtimeGameStatsTerse::Clear();
  clear_has_delayed();
}
const ::proto::dota::CMsgDOTARealtimeGameStatsTerse& CMsgServerToGCRealtimeStats::delayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCRealtimeStats.delayed)
  return delayed_ != NULL ? *delayed_
                         : *::proto::dota::CMsgDOTARealtimeGameStatsTerse::internal_default_instance();
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse* CMsgServerToGCRealtimeStats::mutable_delayed() {
  set_has_delayed();
  if (delayed_ == NULL) {
    delayed_ = new ::proto::dota::CMsgDOTARealtimeGameStatsTerse;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCRealtimeStats.delayed)
  return delayed_;
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse* CMsgServerToGCRealtimeStats::release_delayed() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgServerToGCRealtimeStats.delayed)
  clear_has_delayed();
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse* temp = delayed_;
  delayed_ = NULL;
  return temp;
}
void CMsgServerToGCRealtimeStats::set_allocated_delayed(::proto::dota::CMsgDOTARealtimeGameStatsTerse* delayed) {
  delete delayed_;
  delayed_ = delayed;
  if (delayed) {
    set_has_delayed();
  } else {
    clear_has_delayed();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgServerToGCRealtimeStats.delayed)
}

// optional .proto.dota.CMsgDOTARealtimeGameStats current = 2;
bool CMsgServerToGCRealtimeStats::has_current() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCRealtimeStats::set_has_current() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCRealtimeStats::clear_has_current() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCRealtimeStats::clear_current() {
  if (current_ != NULL) current_->::proto::dota::CMsgDOTARealtimeGameStats::Clear();
  clear_has_current();
}
const ::proto::dota::CMsgDOTARealtimeGameStats& CMsgServerToGCRealtimeStats::current() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCRealtimeStats.current)
  return current_ != NULL ? *current_
                         : *::proto::dota::CMsgDOTARealtimeGameStats::internal_default_instance();
}
::proto::dota::CMsgDOTARealtimeGameStats* CMsgServerToGCRealtimeStats::mutable_current() {
  set_has_current();
  if (current_ == NULL) {
    current_ = new ::proto::dota::CMsgDOTARealtimeGameStats;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCRealtimeStats.current)
  return current_;
}
::proto::dota::CMsgDOTARealtimeGameStats* CMsgServerToGCRealtimeStats::release_current() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgServerToGCRealtimeStats.current)
  clear_has_current();
  ::proto::dota::CMsgDOTARealtimeGameStats* temp = current_;
  current_ = NULL;
  return temp;
}
void CMsgServerToGCRealtimeStats::set_allocated_current(::proto::dota::CMsgDOTARealtimeGameStats* current) {
  delete current_;
  current_ = current;
  if (current) {
    set_has_current();
  } else {
    clear_has_current();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgServerToGCRealtimeStats.current)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerRealtimeStatsStartStop::kDelayedFieldNumber;
const int CMsgGCToServerRealtimeStatsStartStop::kCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
}
CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop(const CMsgGCToServerRealtimeStatsStartStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&delayed_, &from.delayed_,
    reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&delayed_) + sizeof(current_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
}

void CMsgGCToServerRealtimeStatsStartStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&delayed_, 0, reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&delayed_) + sizeof(current_));
}

CMsgGCToServerRealtimeStatsStartStop::~CMsgGCToServerRealtimeStatsStartStop() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  SharedDtor();
}

void CMsgGCToServerRealtimeStatsStartStop::SharedDtor() {
}

void CMsgGCToServerRealtimeStatsStartStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerRealtimeStatsStartStop::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToServerRealtimeStatsStartStop& CMsgGCToServerRealtimeStatsStartStop::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToServerRealtimeStatsStartStop* CMsgGCToServerRealtimeStatsStartStop::New(::google::protobuf::Arena* arena) const {
  CMsgGCToServerRealtimeStatsStartStop* n = new CMsgGCToServerRealtimeStatsStartStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToServerRealtimeStatsStartStop::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&delayed_, 0, reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&delayed_) + sizeof(current_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToServerRealtimeStatsStartStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool delayed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_delayed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool current = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  return false;
#undef DO_
}

void CMsgGCToServerRealtimeStatsStartStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->delayed(), output);
  }

  // optional bool current = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->current(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
}

::google::protobuf::uint8* CMsgGCToServerRealtimeStatsStartStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->delayed(), target);
  }

  // optional bool current = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->current(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  return target;
}

size_t CMsgGCToServerRealtimeStatsStartStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool delayed = 1;
    if (has_delayed()) {
      total_size += 1 + 1;
    }

    // optional bool current = 2;
    if (has_current()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerRealtimeStatsStartStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerRealtimeStatsStartStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToServerRealtimeStatsStartStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
    MergeFrom(*source);
  }
}

void CMsgGCToServerRealtimeStatsStartStop::MergeFrom(const CMsgGCToServerRealtimeStatsStartStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      delayed_ = from.delayed_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_ = from.current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerRealtimeStatsStartStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerRealtimeStatsStartStop::CopyFrom(const CMsgGCToServerRealtimeStatsStartStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerRealtimeStatsStartStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerRealtimeStatsStartStop::IsInitialized() const {
  return true;
}

void CMsgGCToServerRealtimeStatsStartStop::Swap(CMsgGCToServerRealtimeStatsStartStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerRealtimeStatsStartStop::InternalSwap(CMsgGCToServerRealtimeStatsStartStop* other) {
  std::swap(delayed_, other->delayed_);
  std::swap(current_, other->current_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToServerRealtimeStatsStartStop::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToServerRealtimeStatsStartStop

// optional bool delayed = 1;
bool CMsgGCToServerRealtimeStatsStartStop::has_delayed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToServerRealtimeStatsStartStop::set_has_delayed() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToServerRealtimeStatsStartStop::clear_has_delayed() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToServerRealtimeStatsStartStop::clear_delayed() {
  delayed_ = false;
  clear_has_delayed();
}
bool CMsgGCToServerRealtimeStatsStartStop::delayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerRealtimeStatsStartStop.delayed)
  return delayed_;
}
void CMsgGCToServerRealtimeStatsStartStop::set_delayed(bool value) {
  set_has_delayed();
  delayed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerRealtimeStatsStartStop.delayed)
}

// optional bool current = 2;
bool CMsgGCToServerRealtimeStatsStartStop::has_current() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToServerRealtimeStatsStartStop::set_has_current() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToServerRealtimeStatsStartStop::clear_has_current() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToServerRealtimeStatsStartStop::clear_current() {
  current_ = false;
  clear_has_current();
}
bool CMsgGCToServerRealtimeStatsStartStop::current() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerRealtimeStatsStartStop.current)
  return current_;
}
void CMsgGCToServerRealtimeStatsStartStop::set_current(bool value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerRealtimeStatsStartStop.current)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::kDotaTeamFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::kWinnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}
CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_) + sizeof(winner_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dota_team_, 0, reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_) + sizeof(winner_));
}

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::~CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedDtor() {
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* n = new CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&dota_team_, 0, reinterpret_cast<char*>(&winner_) -
      reinterpret_cast<char*>(&dota_team_) + sizeof(winner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dota_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool winner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_winner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &winner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->winner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->winner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 dota_team = 1;
    if (has_dota_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

    // optional bool winner = 2;
    if (has_winner()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_ = from.winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Swap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other) {
  std::swap(dota_team_, other->dota_team_);
  std::swap(winner_, other->winner_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData

// optional uint32 dota_team = 1;
bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::set_has_dota_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::clear_has_dota_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::clear_dota_team() {
  dota_team_ = 0u;
  clear_has_dota_team();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::dota_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData.dota_team)
  return dota_team_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::set_dota_team(::google::protobuf::uint32 value) {
  set_has_dota_team();
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData.dota_team)
}

// optional bool winner = 2;
bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::has_winner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::set_has_winner() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::clear_has_winner() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::clear_winner() {
  winner_ = false;
  clear_has_winner();
}
bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::winner() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData.winner)
  return winner_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::set_winner(bool value) {
  set_has_winner();
  winner_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData.winner)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSteamIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kItemsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kKillsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kDeathsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAssistsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLeaverStatusFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLastHitsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kDeniesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldPerMinFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kXpPerMinuteFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldSpentFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLevelFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledHeroDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledTowerDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledHeroHealingFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTimeLastSeenFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSupportAbilityValueFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kPartyIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledKillsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledDeathsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledAssistsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedFarmGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSupportGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedDeniesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedMissesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kMissesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kNetWorthFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTowerDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroHealingFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAbilityUpgradesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAdditionalUnitsInventoryFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kPermanentBuffsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kCustomGameDataFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kMatchPlayerFlagsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTalentAbilityIdsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroPickOrderFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroWasRandomedFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroWasBonusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
}
CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(const CMsgGameMatchSignOut_CTeam_CPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      items_(from.items_),
      ability_upgrades_(from.ability_upgrades_),
      additional_units_inventory_(from.additional_units_inventory_),
      permanent_buffs_(from.permanent_buffs_),
      talent_ability_ids_(from.talent_ability_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_custom_game_data()) {
    custom_game_data_ = new ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = NULL;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&hero_was_bonus_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(hero_was_bonus_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedCtor() {
  ::memset(&custom_game_data_, 0, reinterpret_cast<char*>(&hero_was_bonus_) -
    reinterpret_cast<char*>(&custom_game_data_) + sizeof(hero_was_bonus_));
  _cached_size_ = 0;
}

CMsgGameMatchSignOut_CTeam_CPlayer::~CMsgGameMatchSignOut_CTeam_CPlayer() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete custom_game_data_;
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_CPlayer::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOut_CTeam_CPlayer& CMsgGameMatchSignOut_CTeam_CPlayer::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam_CPlayer::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOut_CTeam_CPlayer* n = new CMsgGameMatchSignOut_CTeam_CPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  items_.Clear();
  ability_upgrades_.Clear();
  additional_units_inventory_.Clear();
  permanent_buffs_.Clear();
  talent_ability_ids_.Clear();
  if (has_custom_game_data()) {
    GOOGLE_DCHECK(custom_game_data_ != NULL);
    custom_game_data_->::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&leaver_status_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(leaver_status_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&last_hits_, 0, reinterpret_cast<char*>(&scaled_tower_damage_) -
      reinterpret_cast<char*>(&last_hits_) + sizeof(scaled_tower_damage_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&scaled_hero_healing_, 0, reinterpret_cast<char*>(&claimed_farm_gold_) -
      reinterpret_cast<char*>(&scaled_hero_healing_) + sizeof(claimed_farm_gold_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&support_gold_, 0, reinterpret_cast<char*>(&tower_damage_) -
      reinterpret_cast<char*>(&support_gold_) + sizeof(tower_damage_));
  }
  if (_has_bits_[32 / 32] & 15u) {
    ::memset(&hero_healing_, 0, reinterpret_cast<char*>(&hero_was_bonus_) -
      reinterpret_cast<char*>(&hero_healing_) + sizeof(hero_was_bonus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOut_CTeam_CPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_items())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_leaver_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_denies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_per_min = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_gold_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_per_minute = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_xp_per_minute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_spent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_gold_spent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_hero_damage = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_scaled_hero_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_tower_damage = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_scaled_tower_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_hero_healing = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_scaled_hero_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last_seen = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_time_last_seen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_ability_value = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_support_ability_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_ability_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 party_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_kills = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          set_has_scaled_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_deaths = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u)) {
          set_has_scaled_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_assists = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u)) {
          set_has_scaled_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_farm_gold = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_claimed_farm_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_farm_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_gold = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_support_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_denies = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_claimed_denies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_misses = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_claimed_misses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 misses = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_misses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ability_upgrades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_units_inventory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_net_worth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(282u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_player_flags = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_match_player_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_player_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          set_has_hero_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_damage = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_tower_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_healing = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          set_has_hero_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_permanent_buffs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 talent_ability_ids = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 328u, input, this->mutable_talent_ability_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(330u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_talent_ability_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_pick_order = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          set_has_hero_pick_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_pick_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hero_was_randomed = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_hero_was_randomed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hero_was_randomed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hero_was_bonus = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_hero_was_bonus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hero_was_bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // repeated uint32 items = 4;
  for (int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->items(i), output);
  }

  // optional uint32 gold = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gold(), output);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kills(), output);
  }

  // optional uint32 deaths = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deaths(), output);
  }

  // optional uint32 assists = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->assists(), output);
  }

  // optional uint32 leaver_status = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->leaver_status(), output);
  }

  // optional uint32 last_hits = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_hits(), output);
  }

  // optional uint32 denies = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->denies(), output);
  }

  // optional uint32 gold_per_min = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gold_per_min(), output);
  }

  // optional uint32 xp_per_minute = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->xp_per_minute(), output);
  }

  // optional uint32 gold_spent = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gold_spent(), output);
  }

  // optional uint32 level = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level(), output);
  }

  // optional uint32 scaled_hero_damage = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->scaled_hero_damage(), output);
  }

  // optional uint32 scaled_tower_damage = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->scaled_tower_damage(), output);
  }

  // optional uint32 scaled_hero_healing = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->scaled_hero_healing(), output);
  }

  // optional uint32 time_last_seen = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->time_last_seen(), output);
  }

  // optional uint32 support_ability_value = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->support_ability_value(), output);
  }

  // optional uint64 party_id = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->party_id(), output);
  }

  // optional float scaled_kills = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->scaled_kills(), output);
  }

  // optional float scaled_deaths = 25;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->scaled_deaths(), output);
  }

  // optional float scaled_assists = 26;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->scaled_assists(), output);
  }

  // optional uint32 claimed_farm_gold = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->claimed_farm_gold(), output);
  }

  // optional uint32 support_gold = 28;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->support_gold(), output);
  }

  // optional uint32 claimed_denies = 29;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->claimed_denies(), output);
  }

  // optional uint32 claimed_misses = 30;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->claimed_misses(), output);
  }

  // optional uint32 misses = 31;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->misses(), output);
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (unsigned int i = 0, n = this->ability_upgrades_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->ability_upgrades(i), output);
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (unsigned int i = 0, n = this->additional_units_inventory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->additional_units_inventory(i), output);
  }

  // optional uint32 net_worth = 34;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->net_worth(), output);
  }

  // optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->custom_game_data_, output);
  }

  // optional uint32 match_player_flags = 36;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->match_player_flags(), output);
  }

  // optional uint32 hero_damage = 37;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 38;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->tower_damage(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 hero_healing = 39;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->hero_healing(), output);
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
  for (unsigned int i = 0, n = this->permanent_buffs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->permanent_buffs(i), output);
  }

  // repeated uint32 talent_ability_ids = 41;
  for (int i = 0, n = this->talent_ability_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      41, this->talent_ability_ids(i), output);
  }

  // optional uint32 hero_pick_order = 42;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->hero_pick_order(), output);
  }

  // optional bool hero_was_randomed = 43;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->hero_was_randomed(), output);
  }

  // optional bool hero_was_bonus = 44;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->hero_was_bonus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam_CPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // repeated uint32 items = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->items_, target);

  // optional uint32 gold = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gold(), target);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kills(), target);
  }

  // optional uint32 deaths = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deaths(), target);
  }

  // optional uint32 assists = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->assists(), target);
  }

  // optional uint32 leaver_status = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->leaver_status(), target);
  }

  // optional uint32 last_hits = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_hits(), target);
  }

  // optional uint32 denies = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->denies(), target);
  }

  // optional uint32 gold_per_min = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gold_per_min(), target);
  }

  // optional uint32 xp_per_minute = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->xp_per_minute(), target);
  }

  // optional uint32 gold_spent = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gold_spent(), target);
  }

  // optional uint32 level = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->level(), target);
  }

  // optional uint32 scaled_hero_damage = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->scaled_hero_damage(), target);
  }

  // optional uint32 scaled_tower_damage = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->scaled_tower_damage(), target);
  }

  // optional uint32 scaled_hero_healing = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->scaled_hero_healing(), target);
  }

  // optional uint32 time_last_seen = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->time_last_seen(), target);
  }

  // optional uint32 support_ability_value = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->support_ability_value(), target);
  }

  // optional uint64 party_id = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->party_id(), target);
  }

  // optional float scaled_kills = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->scaled_kills(), target);
  }

  // optional float scaled_deaths = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->scaled_deaths(), target);
  }

  // optional float scaled_assists = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->scaled_assists(), target);
  }

  // optional uint32 claimed_farm_gold = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->claimed_farm_gold(), target);
  }

  // optional uint32 support_gold = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->support_gold(), target);
  }

  // optional uint32 claimed_denies = 29;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->claimed_denies(), target);
  }

  // optional uint32 claimed_misses = 30;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->claimed_misses(), target);
  }

  // optional uint32 misses = 31;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->misses(), target);
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (unsigned int i = 0, n = this->ability_upgrades_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->ability_upgrades(i), deterministic, target);
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (unsigned int i = 0, n = this->additional_units_inventory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, this->additional_units_inventory(i), deterministic, target);
  }

  // optional uint32 net_worth = 34;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->net_worth(), target);
  }

  // optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->custom_game_data_, deterministic, target);
  }

  // optional uint32 match_player_flags = 36;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->match_player_flags(), target);
  }

  // optional uint32 hero_damage = 37;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 38;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->tower_damage(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 hero_healing = 39;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->hero_healing(), target);
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
  for (unsigned int i = 0, n = this->permanent_buffs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, this->permanent_buffs(i), deterministic, target);
  }

  // repeated uint32 talent_ability_ids = 41;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(41, this->talent_ability_ids_, target);

  // optional uint32 hero_pick_order = 42;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->hero_pick_order(), target);
  }

  // optional bool hero_was_randomed = 43;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->hero_was_randomed(), target);
  }

  // optional bool hero_was_bonus = 44;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->hero_was_bonus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 items = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->items_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  {
    unsigned int count = this->ability_upgrades_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ability_upgrades(i));
    }
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
  {
    unsigned int count = this->additional_units_inventory_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->additional_units_inventory(i));
    }
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
  {
    unsigned int count = this->permanent_buffs_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->permanent_buffs(i));
    }
  }

  // repeated uint32 talent_ability_ids = 41;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->talent_ability_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->talent_ability_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
    if (has_custom_game_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->custom_game_data_);
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 kills = 6;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 7;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 8;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 leaver_status = 9;
    if (has_leaver_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_status());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 last_hits = 10;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 11;
    if (has_denies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional uint32 gold_per_min = 12;
    if (has_gold_per_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 xp_per_minute = 13;
    if (has_xp_per_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_minute());
    }

    // optional uint32 gold_spent = 14;
    if (has_gold_spent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_spent());
    }

    // optional uint32 level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 scaled_hero_damage = 16;
    if (has_scaled_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_damage());
    }

    // optional uint32 scaled_tower_damage = 17;
    if (has_scaled_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_tower_damage());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 scaled_hero_healing = 18;
    if (has_scaled_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_healing());
    }

    // optional uint32 time_last_seen = 19;
    if (has_time_last_seen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_seen());
    }

    // optional uint64 party_id = 21;
    if (has_party_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 support_ability_value = 20;
    if (has_support_ability_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_ability_value());
    }

    // optional float scaled_kills = 24;
    if (has_scaled_kills()) {
      total_size += 2 + 4;
    }

    // optional float scaled_deaths = 25;
    if (has_scaled_deaths()) {
      total_size += 2 + 4;
    }

    // optional float scaled_assists = 26;
    if (has_scaled_assists()) {
      total_size += 2 + 4;
    }

    // optional uint32 claimed_farm_gold = 27;
    if (has_claimed_farm_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_farm_gold());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 support_gold = 28;
    if (has_support_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_gold());
    }

    // optional uint32 claimed_denies = 29;
    if (has_claimed_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_denies());
    }

    // optional uint32 claimed_misses = 30;
    if (has_claimed_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_misses());
    }

    // optional uint32 misses = 31;
    if (has_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misses());
    }

    // optional uint32 net_worth = 34;
    if (has_net_worth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 match_player_flags = 36;
    if (has_match_player_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_player_flags());
    }

    // optional uint32 hero_damage = 37;
    if (has_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

    // optional uint32 tower_damage = 38;
    if (has_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

  }
  if (_has_bits_[32 / 32] & 15u) {
    // optional uint32 hero_healing = 39;
    if (has_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

    // optional uint32 hero_pick_order = 42;
    if (has_hero_pick_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_pick_order());
    }

    // optional bool hero_was_randomed = 43;
    if (has_hero_was_randomed()) {
      total_size += 2 + 1;
    }

    // optional bool hero_was_bonus = 44;
    if (has_hero_was_bonus()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOut_CTeam_CPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  additional_units_inventory_.MergeFrom(from.additional_units_inventory_);
  permanent_buffs_.MergeFrom(from.permanent_buffs_);
  talent_ability_ids_.MergeFrom(from.talent_ability_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_custom_game_data()->::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(from.custom_game_data());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000010u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      leaver_status_ = from.leaver_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000200u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000400u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00000800u) {
      xp_per_minute_ = from.xp_per_minute_;
    }
    if (cached_has_bits & 0x00001000u) {
      gold_spent_ = from.gold_spent_;
    }
    if (cached_has_bits & 0x00002000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00004000u) {
      scaled_hero_damage_ = from.scaled_hero_damage_;
    }
    if (cached_has_bits & 0x00008000u) {
      scaled_tower_damage_ = from.scaled_tower_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      scaled_hero_healing_ = from.scaled_hero_healing_;
    }
    if (cached_has_bits & 0x00020000u) {
      time_last_seen_ = from.time_last_seen_;
    }
    if (cached_has_bits & 0x00040000u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      support_ability_value_ = from.support_ability_value_;
    }
    if (cached_has_bits & 0x00100000u) {
      scaled_kills_ = from.scaled_kills_;
    }
    if (cached_has_bits & 0x00200000u) {
      scaled_deaths_ = from.scaled_deaths_;
    }
    if (cached_has_bits & 0x00400000u) {
      scaled_assists_ = from.scaled_assists_;
    }
    if (cached_has_bits & 0x00800000u) {
      claimed_farm_gold_ = from.claimed_farm_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      support_gold_ = from.support_gold_;
    }
    if (cached_has_bits & 0x02000000u) {
      claimed_denies_ = from.claimed_denies_;
    }
    if (cached_has_bits & 0x04000000u) {
      claimed_misses_ = from.claimed_misses_;
    }
    if (cached_has_bits & 0x08000000u) {
      misses_ = from.misses_;
    }
    if (cached_has_bits & 0x10000000u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x20000000u) {
      match_player_flags_ = from.match_player_flags_;
    }
    if (cached_has_bits & 0x40000000u) {
      hero_damage_ = from.hero_damage_;
    }
    if (cached_has_bits & 0x80000000u) {
      tower_damage_ = from.tower_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      hero_healing_ = from.hero_healing_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_pick_order_ = from.hero_pick_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_was_randomed_ = from.hero_was_randomed_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_was_bonus_ = from.hero_was_bonus_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::Swap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CTeam_CPlayer::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
  items_.InternalSwap(&other->items_);
  ability_upgrades_.InternalSwap(&other->ability_upgrades_);
  additional_units_inventory_.InternalSwap(&other->additional_units_inventory_);
  permanent_buffs_.InternalSwap(&other->permanent_buffs_);
  talent_ability_ids_.InternalSwap(&other->talent_ability_ids_);
  std::swap(custom_game_data_, other->custom_game_data_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(gold_, other->gold_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(leaver_status_, other->leaver_status_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(denies_, other->denies_);
  std::swap(gold_per_min_, other->gold_per_min_);
  std::swap(xp_per_minute_, other->xp_per_minute_);
  std::swap(gold_spent_, other->gold_spent_);
  std::swap(level_, other->level_);
  std::swap(scaled_hero_damage_, other->scaled_hero_damage_);
  std::swap(scaled_tower_damage_, other->scaled_tower_damage_);
  std::swap(scaled_hero_healing_, other->scaled_hero_healing_);
  std::swap(time_last_seen_, other->time_last_seen_);
  std::swap(party_id_, other->party_id_);
  std::swap(support_ability_value_, other->support_ability_value_);
  std::swap(scaled_kills_, other->scaled_kills_);
  std::swap(scaled_deaths_, other->scaled_deaths_);
  std::swap(scaled_assists_, other->scaled_assists_);
  std::swap(claimed_farm_gold_, other->claimed_farm_gold_);
  std::swap(support_gold_, other->support_gold_);
  std::swap(claimed_denies_, other->claimed_denies_);
  std::swap(claimed_misses_, other->claimed_misses_);
  std::swap(misses_, other->misses_);
  std::swap(net_worth_, other->net_worth_);
  std::swap(match_player_flags_, other->match_player_flags_);
  std::swap(hero_damage_, other->hero_damage_);
  std::swap(tower_damage_, other->tower_damage_);
  std::swap(hero_healing_, other->hero_healing_);
  std::swap(hero_pick_order_, other->hero_pick_order_);
  std::swap(hero_was_randomed_, other->hero_was_randomed_);
  std::swap(hero_was_bonus_, other->hero_was_bonus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam_CPlayer::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOut_CTeam_CPlayer

// optional fixed64 steam_id = 1;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgGameMatchSignOut_CTeam_CPlayer::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.steam_id)
  return steam_id_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.steam_id)
}

// optional uint32 hero_id = 3;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_id)
  return hero_id_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_id)
}

// repeated uint32 items = 4;
int CMsgGameMatchSignOut_CTeam_CPlayer::items_size() const {
  return items_.size();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_items() {
  items_.Clear();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.items)
  return items_.Get(index);
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.items)
}
void CMsgGameMatchSignOut_CTeam_CPlayer::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.items)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut_CTeam_CPlayer::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.items)
  return items_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.items)
  return &items_;
}

// optional uint32 gold = 5;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.gold)
  return gold_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.gold)
}

// optional uint32 kills = 6;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.kills)
  return kills_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.kills)
}

// optional uint32 deaths = 7;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_deaths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_deaths() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.deaths)
  return deaths_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.deaths)
}

// optional uint32 assists = 8;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_assists() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_assists() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_assists() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.assists)
  return assists_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.assists)
}

// optional uint32 leaver_status = 9;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_leaver_status() {
  leaver_status_ = 0u;
  clear_has_leaver_status();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::leaver_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.leaver_status)
  return leaver_status_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_leaver_status(::google::protobuf::uint32 value) {
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.leaver_status)
}

// optional uint32 last_hits = 10;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_last_hits() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_last_hits() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.last_hits)
  return last_hits_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.last_hits)
}

// optional uint32 denies = 11;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_denies() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_denies() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_denies() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.denies)
  return denies_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.denies)
}

// optional uint32 gold_per_min = 12;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold_per_min() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_gold_per_min() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::gold_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.gold_per_min)
  return gold_per_min_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.gold_per_min)
}

// optional uint32 xp_per_minute = 13;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_xp_per_minute() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_xp_per_minute() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_xp_per_minute() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_xp_per_minute() {
  xp_per_minute_ = 0u;
  clear_has_xp_per_minute();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::xp_per_minute() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.xp_per_minute)
  return xp_per_minute_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_xp_per_minute(::google::protobuf::uint32 value) {
  set_has_xp_per_minute();
  xp_per_minute_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.xp_per_minute)
}

// optional uint32 gold_spent = 14;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold_spent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_gold_spent() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_gold_spent() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold_spent() {
  gold_spent_ = 0u;
  clear_has_gold_spent();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::gold_spent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.gold_spent)
  return gold_spent_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold_spent(::google::protobuf::uint32 value) {
  set_has_gold_spent();
  gold_spent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.gold_spent)
}

// optional uint32 level = 15;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_level() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.level)
  return level_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.level)
}

// optional uint32 scaled_hero_damage = 16;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_hero_damage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_hero_damage() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_hero_damage() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_hero_damage() {
  scaled_hero_damage_ = 0u;
  clear_has_scaled_hero_damage();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::scaled_hero_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_hero_damage)
  return scaled_hero_damage_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_hero_damage(::google::protobuf::uint32 value) {
  set_has_scaled_hero_damage();
  scaled_hero_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_hero_damage)
}

// optional uint32 scaled_tower_damage = 17;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_tower_damage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_tower_damage() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_tower_damage() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_tower_damage() {
  scaled_tower_damage_ = 0u;
  clear_has_scaled_tower_damage();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::scaled_tower_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_tower_damage)
  return scaled_tower_damage_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_tower_damage(::google::protobuf::uint32 value) {
  set_has_scaled_tower_damage();
  scaled_tower_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_tower_damage)
}

// optional uint32 scaled_hero_healing = 18;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_hero_healing() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_hero_healing() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_hero_healing() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_hero_healing() {
  scaled_hero_healing_ = 0u;
  clear_has_scaled_hero_healing();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::scaled_hero_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_hero_healing)
  return scaled_hero_healing_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_hero_healing(::google::protobuf::uint32 value) {
  set_has_scaled_hero_healing();
  scaled_hero_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_hero_healing)
}

// optional uint32 time_last_seen = 19;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_time_last_seen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_time_last_seen() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_time_last_seen() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_time_last_seen() {
  time_last_seen_ = 0u;
  clear_has_time_last_seen();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::time_last_seen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.time_last_seen)
  return time_last_seen_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_time_last_seen(::google::protobuf::uint32 value) {
  set_has_time_last_seen();
  time_last_seen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.time_last_seen)
}

// optional uint32 support_ability_value = 20;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_support_ability_value() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_support_ability_value() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_support_ability_value() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_support_ability_value() {
  support_ability_value_ = 0u;
  clear_has_support_ability_value();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::support_ability_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.support_ability_value)
  return support_ability_value_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_support_ability_value(::google::protobuf::uint32 value) {
  set_has_support_ability_value();
  support_ability_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.support_ability_value)
}

// optional uint64 party_id = 21;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_party_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_party_id() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_party_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
::google::protobuf::uint64 CMsgGameMatchSignOut_CTeam_CPlayer::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.party_id)
  return party_id_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.party_id)
}

// optional float scaled_kills = 24;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_kills() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_kills() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_kills() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_kills() {
  scaled_kills_ = 0;
  clear_has_scaled_kills();
}
float CMsgGameMatchSignOut_CTeam_CPlayer::scaled_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_kills)
  return scaled_kills_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_kills(float value) {
  set_has_scaled_kills();
  scaled_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_kills)
}

// optional float scaled_deaths = 25;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_deaths() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_deaths() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_deaths() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_deaths() {
  scaled_deaths_ = 0;
  clear_has_scaled_deaths();
}
float CMsgGameMatchSignOut_CTeam_CPlayer::scaled_deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_deaths)
  return scaled_deaths_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_deaths(float value) {
  set_has_scaled_deaths();
  scaled_deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_deaths)
}

// optional float scaled_assists = 26;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_assists() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_assists() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_assists() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_assists() {
  scaled_assists_ = 0;
  clear_has_scaled_assists();
}
float CMsgGameMatchSignOut_CTeam_CPlayer::scaled_assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_assists)
  return scaled_assists_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_assists(float value) {
  set_has_scaled_assists();
  scaled_assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.scaled_assists)
}

// optional uint32 claimed_farm_gold = 27;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_farm_gold() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_claimed_farm_gold() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_claimed_farm_gold() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_farm_gold() {
  claimed_farm_gold_ = 0u;
  clear_has_claimed_farm_gold();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::claimed_farm_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.claimed_farm_gold)
  return claimed_farm_gold_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_farm_gold(::google::protobuf::uint32 value) {
  set_has_claimed_farm_gold();
  claimed_farm_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.claimed_farm_gold)
}

// optional uint32 support_gold = 28;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_support_gold() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_support_gold() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_support_gold() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_support_gold() {
  support_gold_ = 0u;
  clear_has_support_gold();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::support_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.support_gold)
  return support_gold_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_support_gold(::google::protobuf::uint32 value) {
  set_has_support_gold();
  support_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.support_gold)
}

// optional uint32 claimed_denies = 29;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_denies() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_claimed_denies() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_claimed_denies() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_denies() {
  claimed_denies_ = 0u;
  clear_has_claimed_denies();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::claimed_denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.claimed_denies)
  return claimed_denies_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_denies(::google::protobuf::uint32 value) {
  set_has_claimed_denies();
  claimed_denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.claimed_denies)
}

// optional uint32 claimed_misses = 30;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_misses() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_claimed_misses() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_claimed_misses() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_misses() {
  claimed_misses_ = 0u;
  clear_has_claimed_misses();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::claimed_misses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.claimed_misses)
  return claimed_misses_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_misses(::google::protobuf::uint32 value) {
  set_has_claimed_misses();
  claimed_misses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.claimed_misses)
}

// optional uint32 misses = 31;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_misses() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_misses() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_misses() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_misses() {
  misses_ = 0u;
  clear_has_misses();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::misses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.misses)
  return misses_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_misses(::google::protobuf::uint32 value) {
  set_has_misses();
  misses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.misses)
}

// optional uint32 net_worth = 34;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_net_worth() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_net_worth() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_net_worth() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_net_worth() {
  net_worth_ = 0u;
  clear_has_net_worth();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.net_worth)
  return net_worth_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_net_worth(::google::protobuf::uint32 value) {
  set_has_net_worth();
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.net_worth)
}

// optional uint32 hero_damage = 37;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_damage() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_damage() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage)
  return hero_damage_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage)
}

// optional uint32 tower_damage = 38;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_tower_damage() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_tower_damage() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::tower_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.tower_damage)
  return tower_damage_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.tower_damage)
}

// optional uint32 hero_healing = 39;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_healing() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_healing() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_healing() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_healing)
  return hero_healing_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_healing)
}

// repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 32;
int CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
const ::proto::dota::CMatchPlayerAbilityUpgrade& CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return ability_upgrades_.Get(index);
}
::proto::dota::CMatchPlayerAbilityUpgrade* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_ability_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return ability_upgrades_.Mutable(index);
}
::proto::dota::CMatchPlayerAbilityUpgrade* CMsgGameMatchSignOut_CTeam_CPlayer::add_ability_upgrades() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return ability_upgrades_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerAbilityUpgrade >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return &ability_upgrades_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerAbilityUpgrade >&
CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return ability_upgrades_;
}

// repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 33;
int CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory_size() const {
  return additional_units_inventory_.size();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_additional_units_inventory() {
  additional_units_inventory_.Clear();
}
const ::proto::dota::CMatchAdditionalUnitInventory& CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return additional_units_inventory_.Get(index);
}
::proto::dota::CMatchAdditionalUnitInventory* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_additional_units_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return additional_units_inventory_.Mutable(index);
}
::proto::dota::CMatchAdditionalUnitInventory* CMsgGameMatchSignOut_CTeam_CPlayer::add_additional_units_inventory() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return additional_units_inventory_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchAdditionalUnitInventory >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_additional_units_inventory() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return &additional_units_inventory_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchAdditionalUnitInventory >&
CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return additional_units_inventory_;
}

// repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 40;
int CMsgGameMatchSignOut_CTeam_CPlayer::permanent_buffs_size() const {
  return permanent_buffs_.size();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_permanent_buffs() {
  permanent_buffs_.Clear();
}
const ::proto::dota::CMatchPlayerPermanentBuff& CMsgGameMatchSignOut_CTeam_CPlayer::permanent_buffs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return permanent_buffs_.Get(index);
}
::proto::dota::CMatchPlayerPermanentBuff* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_permanent_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return permanent_buffs_.Mutable(index);
}
::proto::dota::CMatchPlayerPermanentBuff* CMsgGameMatchSignOut_CTeam_CPlayer::add_permanent_buffs() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return permanent_buffs_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerPermanentBuff >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_permanent_buffs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return &permanent_buffs_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerPermanentBuff >&
CMsgGameMatchSignOut_CTeam_CPlayer::permanent_buffs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return permanent_buffs_;
}

// optional .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_custom_game_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_custom_game_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_custom_game_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_custom_game_data() {
  if (custom_game_data_ != NULL) custom_game_data_->::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Clear();
  clear_has_custom_game_data();
}
const ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& CMsgGameMatchSignOut_CTeam_CPlayer::custom_game_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data)
  return custom_game_data_ != NULL ? *custom_game_data_
                         : *::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::internal_default_instance();
}
::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_custom_game_data() {
  set_has_custom_game_data();
  if (custom_game_data_ == NULL) {
    custom_game_data_ = new ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data)
  return custom_game_data_;
}
::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* CMsgGameMatchSignOut_CTeam_CPlayer::release_custom_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data)
  clear_has_custom_game_data();
  ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* temp = custom_game_data_;
  custom_game_data_ = NULL;
  return temp;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_allocated_custom_game_data(::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* custom_game_data) {
  delete custom_game_data_;
  custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    set_has_custom_game_data();
  } else {
    clear_has_custom_game_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data)
}

// optional uint32 match_player_flags = 36;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_match_player_flags() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_match_player_flags() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_match_player_flags() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_match_player_flags() {
  match_player_flags_ = 0u;
  clear_has_match_player_flags();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::match_player_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.match_player_flags)
  return match_player_flags_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_match_player_flags(::google::protobuf::uint32 value) {
  set_has_match_player_flags();
  match_player_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.match_player_flags)
}

// repeated uint32 talent_ability_ids = 41;
int CMsgGameMatchSignOut_CTeam_CPlayer::talent_ability_ids_size() const {
  return talent_ability_ids_.size();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_talent_ability_ids() {
  talent_ability_ids_.Clear();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::talent_ability_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
  return talent_ability_ids_.Get(index);
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_talent_ability_ids(int index, ::google::protobuf::uint32 value) {
  talent_ability_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
}
void CMsgGameMatchSignOut_CTeam_CPlayer::add_talent_ability_ids(::google::protobuf::uint32 value) {
  talent_ability_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut_CTeam_CPlayer::talent_ability_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
  return talent_ability_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_talent_ability_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
  return &talent_ability_ids_;
}

// optional uint32 hero_pick_order = 42;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_pick_order() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_pick_order() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_pick_order() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_pick_order() {
  hero_pick_order_ = 0u;
  clear_has_hero_pick_order();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_pick_order() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_pick_order)
  return hero_pick_order_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_pick_order(::google::protobuf::uint32 value) {
  set_has_hero_pick_order();
  hero_pick_order_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_pick_order)
}

// optional bool hero_was_randomed = 43;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_was_randomed() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_was_randomed() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_was_randomed() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_was_randomed() {
  hero_was_randomed_ = false;
  clear_has_hero_was_randomed();
}
bool CMsgGameMatchSignOut_CTeam_CPlayer::hero_was_randomed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_was_randomed)
  return hero_was_randomed_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_was_randomed(bool value) {
  set_has_hero_was_randomed();
  hero_was_randomed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_was_randomed)
}

// optional bool hero_was_bonus = 44;
bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_was_bonus() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_was_bonus() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_was_bonus() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_was_bonus() {
  hero_was_bonus_ = false;
  clear_has_hero_was_bonus();
}
bool CMsgGameMatchSignOut_CTeam_CPlayer::hero_was_bonus() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_was_bonus)
  return hero_was_bonus_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_was_bonus(bool value) {
  set_has_hero_was_bonus();
  hero_was_bonus_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_was_bonus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CTeam::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CTeam)
}
CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(const CMsgGameMatchSignOut_CTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CTeam)
}

void CMsgGameMatchSignOut_CTeam::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGameMatchSignOut_CTeam::~CMsgGameMatchSignOut_CTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CTeam)
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam::SharedDtor() {
}

void CMsgGameMatchSignOut_CTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOut_CTeam& CMsgGameMatchSignOut_CTeam::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut_CTeam::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOut_CTeam* n = new CMsgGameMatchSignOut_CTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOut_CTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOut_CTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CTeam)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CTeam)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CTeam)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOut_CTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CTeam)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const CMsgGameMatchSignOut_CTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const CMsgGameMatchSignOut_CTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam::Swap(CMsgGameMatchSignOut_CTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CTeam::InternalSwap(CMsgGameMatchSignOut_CTeam* other) {
  players_.InternalSwap(&other->players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOut_CTeam

// repeated .proto.dota.CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
int CMsgGameMatchSignOut_CTeam::players_size() const {
  return players_.size();
}
void CMsgGameMatchSignOut_CTeam::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer& CMsgGameMatchSignOut_CTeam::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CTeam.players)
  return players_.Get(index);
}
::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.CTeam.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.CTeam.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer >*
CMsgGameMatchSignOut_CTeam::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.CTeam.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_CTeam_CPlayer >&
CMsgGameMatchSignOut_CTeam::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.CTeam.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CAdditionalSignoutMsg::kIdFieldNumber;
const int CMsgGameMatchSignOut_CAdditionalSignoutMsg::kContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}
CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contents()) {
    contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contents_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedCtor() {
  _cached_size_ = 0;
  contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg::~CMsgGameMatchSignOut_CAdditionalSignoutMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  SharedDtor();
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedDtor() {
  contents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CAdditionalSignoutMsg::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOut_CAdditionalSignoutMsg& CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut_CAdditionalSignoutMsg::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOut_CAdditionalSignoutMsg* n = new CMsgGameMatchSignOut_CAdditionalSignoutMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  if (has_contents()) {
    GOOGLE_DCHECK(!contents_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*contents_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes contents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CAdditionalSignoutMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return target;
}

size_t CMsgGameMatchSignOut_CAdditionalSignoutMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CAdditionalSignoutMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOut_CAdditionalSignoutMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_contents();
      contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contents_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Swap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::InternalSwap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
  contents_.Swap(&other->contents_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CAdditionalSignoutMsg::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOut_CAdditionalSignoutMsg

// optional uint32 id = 1;
bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CAdditionalSignoutMsg::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.id)
  return id_;
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.id)
}

// optional bytes contents = 2;
bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::has_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_has_contents() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_has_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_contents() {
  contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contents();
}
const ::std::string& CMsgGameMatchSignOut_CAdditionalSignoutMsg::contents() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
  return contents_.GetNoArena();
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_contents(const ::std::string& value) {
  set_has_contents();
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
}
#if LANG_CXX11
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_contents(::std::string&& value) {
  set_has_contents();
  contents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
}
#endif
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_contents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contents();
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_contents(const void* value, size_t size) {
  set_has_contents();
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
}
::std::string* CMsgGameMatchSignOut_CAdditionalSignoutMsg::mutable_contents() {
  set_has_contents();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
  return contents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGameMatchSignOut_CAdditionalSignoutMsg::release_contents() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
  clear_has_contents();
  return contents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_allocated_contents(::std::string* contents) {
  if (contents != NULL) {
    set_has_contents();
  } else {
    clear_has_contents();
  }
  contents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contents);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kAccountIdFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kTimestampFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kEventTypeFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kGameTimeFieldNumber;
const int CMsgGameMatchSignOut_CSocialFeedMatchEvent::kReplayTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}
CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&replay_time_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(replay_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&replay_time_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(replay_time_));
}

CMsgGameMatchSignOut_CSocialFeedMatchEvent::~CMsgGameMatchSignOut_CSocialFeedMatchEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  SharedDtor();
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedDtor() {
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CSocialFeedMatchEvent::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOut_CSocialFeedMatchEvent& CMsgGameMatchSignOut_CSocialFeedMatchEvent::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOut_CSocialFeedMatchEvent* CMsgGameMatchSignOut_CSocialFeedMatchEvent::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOut_CSocialFeedMatchEvent* n = new CMsgGameMatchSignOut_CSocialFeedMatchEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&replay_time_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(replay_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_event_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 replay_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_replay_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replay_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 event_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_type(), output);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_time(), output);
  }

  // optional uint32 replay_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->replay_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CSocialFeedMatchEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 event_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_type(), target);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_time(), target);
  }

  // optional uint32 replay_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->replay_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return target;
}

size_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

    // optional int32 game_time = 4;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 replay_time = 5;
    if (has_replay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replay_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CSocialFeedMatchEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOut_CSocialFeedMatchEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      replay_time_ = from.replay_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::CopyFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::Swap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::InternalSwap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(event_type_, other->event_type_);
  std::swap(game_time_, other->game_time_);
  std::swap(replay_time_, other->replay_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CSocialFeedMatchEvent::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOut_CSocialFeedMatchEvent

// optional uint32 account_id = 1;
bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CSocialFeedMatchEvent::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.account_id)
  return account_id_;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.account_id)
}

// optional uint32 timestamp = 2;
bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CSocialFeedMatchEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.timestamp)
  return timestamp_;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.timestamp)
}

// optional uint32 event_type = 3;
bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_event_type() {
  event_type_ = 0u;
  clear_has_event_type();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CSocialFeedMatchEvent::event_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.event_type)
  return event_type_;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_event_type(::google::protobuf::uint32 value) {
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.event_type)
}

// optional int32 game_time = 4;
bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_game_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_has_game_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
::google::protobuf::int32 CMsgGameMatchSignOut_CSocialFeedMatchEvent::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.game_time)
  return game_time_;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.game_time)
}

// optional uint32 replay_time = 5;
bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_replay_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_has_replay_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_has_replay_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_replay_time() {
  replay_time_ = 0u;
  clear_has_replay_time();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CSocialFeedMatchEvent::replay_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.replay_time)
  return replay_time_;
}
void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_replay_time(::google::protobuf::uint32 value) {
  set_has_replay_time();
  replay_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent.replay_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_CCustomGameData::kPublishTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
}
CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData(const CMsgGameMatchSignOut_CCustomGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  publish_timestamp_ = from.publish_timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
}

void CMsgGameMatchSignOut_CCustomGameData::SharedCtor() {
  _cached_size_ = 0;
  publish_timestamp_ = 0u;
}

CMsgGameMatchSignOut_CCustomGameData::~CMsgGameMatchSignOut_CCustomGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  SharedDtor();
}

void CMsgGameMatchSignOut_CCustomGameData::SharedDtor() {
}

void CMsgGameMatchSignOut_CCustomGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CCustomGameData::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOut_CCustomGameData& CMsgGameMatchSignOut_CCustomGameData::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOut_CCustomGameData* CMsgGameMatchSignOut_CCustomGameData::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOut_CCustomGameData* n = new CMsgGameMatchSignOut_CCustomGameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOut_CCustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  publish_timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOut_CCustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 publish_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publish_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publish_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_CCustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 publish_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->publish_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CCustomGameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 publish_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->publish_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  return target;
}

size_t CMsgGameMatchSignOut_CCustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 publish_timestamp = 1;
  if (has_publish_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->publish_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CCustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CCustomGameData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOut_CCustomGameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CCustomGameData::MergeFrom(const CMsgGameMatchSignOut_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_publish_timestamp()) {
    set_publish_timestamp(from.publish_timestamp());
  }
}

void CMsgGameMatchSignOut_CCustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CCustomGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CCustomGameData::Swap(CMsgGameMatchSignOut_CCustomGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_CCustomGameData::InternalSwap(CMsgGameMatchSignOut_CCustomGameData* other) {
  std::swap(publish_timestamp_, other->publish_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CCustomGameData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOut_CCustomGameData

// optional uint32 publish_timestamp = 1;
bool CMsgGameMatchSignOut_CCustomGameData::has_publish_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOut_CCustomGameData::set_has_publish_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOut_CCustomGameData::clear_has_publish_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOut_CCustomGameData::clear_publish_timestamp() {
  publish_timestamp_ = 0u;
  clear_has_publish_timestamp();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_CCustomGameData::publish_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.CCustomGameData.publish_timestamp)
  return publish_timestamp_;
}
void CMsgGameMatchSignOut_CCustomGameData::set_publish_timestamp(::google::protobuf::uint32 value) {
  set_has_publish_timestamp();
  publish_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.CCustomGameData.publish_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kNameSuffixFieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kScoreFieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData1FieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData2FieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData3FieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData4FieldNumber;
const int CMsgGameMatchSignOut_EventGameLeaderboardEntry::kExtraData5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}
CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name_suffix()) {
    name_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_suffix_);
  }
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&extra_data_5_) -
    reinterpret_cast<char*>(&score_) + sizeof(extra_data_5_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SharedCtor() {
  _cached_size_ = 0;
  name_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, reinterpret_cast<char*>(&extra_data_5_) -
    reinterpret_cast<char*>(&score_) + sizeof(extra_data_5_));
}

CMsgGameMatchSignOut_EventGameLeaderboardEntry::~CMsgGameMatchSignOut_EventGameLeaderboardEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  SharedDtor();
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SharedDtor() {
  name_suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_EventGameLeaderboardEntry::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOut_EventGameLeaderboardEntry& CMsgGameMatchSignOut_EventGameLeaderboardEntry::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOut_EventGameLeaderboardEntry* CMsgGameMatchSignOut_EventGameLeaderboardEntry::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOut_EventGameLeaderboardEntry* n = new CMsgGameMatchSignOut_EventGameLeaderboardEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  if (has_name_suffix()) {
    GOOGLE_DCHECK(!name_suffix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_suffix_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&extra_data_5_) -
      reinterpret_cast<char*>(&score_) + sizeof(extra_data_5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name_suffix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_suffix().data(), this->name_suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_extra_data_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_extra_data_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_extra_data_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_4 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_extra_data_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extra_data_5 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_extra_data_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_data_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name_suffix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_suffix().data(), this->name_suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name_suffix(), output);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional uint32 extra_data_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->extra_data_1(), output);
  }

  // optional uint32 extra_data_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->extra_data_2(), output);
  }

  // optional uint32 extra_data_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extra_data_3(), output);
  }

  // optional uint32 extra_data_4 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->extra_data_4(), output);
  }

  // optional uint32 extra_data_5 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->extra_data_5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}

::google::protobuf::uint8* CMsgGameMatchSignOut_EventGameLeaderboardEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name_suffix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_suffix().data(), this->name_suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name_suffix(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional uint32 extra_data_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->extra_data_1(), target);
  }

  // optional uint32 extra_data_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->extra_data_2(), target);
  }

  // optional uint32 extra_data_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->extra_data_3(), target);
  }

  // optional uint32 extra_data_4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->extra_data_4(), target);
  }

  // optional uint32 extra_data_5 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->extra_data_5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  return target;
}

size_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string name_suffix = 1;
    if (has_name_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_suffix());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional uint32 extra_data_1 = 3;
    if (has_extra_data_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_1());
    }

    // optional uint32 extra_data_2 = 4;
    if (has_extra_data_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_2());
    }

    // optional uint32 extra_data_3 = 5;
    if (has_extra_data_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_3());
    }

    // optional uint32 extra_data_4 = 6;
    if (has_extra_data_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_4());
    }

    // optional uint32 extra_data_5 = 7;
    if (has_extra_data_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_data_5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut_EventGameLeaderboardEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOut_EventGameLeaderboardEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergeFrom(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name_suffix();
      name_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_suffix_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      extra_data_1_ = from.extra_data_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      extra_data_2_ = from.extra_data_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      extra_data_3_ = from.extra_data_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      extra_data_4_ = from.extra_data_4_;
    }
    if (cached_has_bits & 0x00000040u) {
      extra_data_5_ = from.extra_data_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::CopyFrom(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::Swap(CMsgGameMatchSignOut_EventGameLeaderboardEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::InternalSwap(CMsgGameMatchSignOut_EventGameLeaderboardEntry* other) {
  name_suffix_.Swap(&other->name_suffix_);
  std::swap(score_, other->score_);
  std::swap(extra_data_1_, other->extra_data_1_);
  std::swap(extra_data_2_, other->extra_data_2_);
  std::swap(extra_data_3_, other->extra_data_3_);
  std::swap(extra_data_4_, other->extra_data_4_);
  std::swap(extra_data_5_, other->extra_data_5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut_EventGameLeaderboardEntry::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOut_EventGameLeaderboardEntry

// optional string name_suffix = 1;
bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_name_suffix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_has_name_suffix() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_has_name_suffix() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_name_suffix() {
  name_suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_suffix();
}
const ::std::string& CMsgGameMatchSignOut_EventGameLeaderboardEntry::name_suffix() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
  return name_suffix_.GetNoArena();
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_name_suffix(const ::std::string& value) {
  set_has_name_suffix();
  name_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
}
#if LANG_CXX11
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_name_suffix(::std::string&& value) {
  set_has_name_suffix();
  name_suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
}
#endif
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_name_suffix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name_suffix();
  name_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_name_suffix(const char* value, size_t size) {
  set_has_name_suffix();
  name_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
}
::std::string* CMsgGameMatchSignOut_EventGameLeaderboardEntry::mutable_name_suffix() {
  set_has_name_suffix();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
  return name_suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGameMatchSignOut_EventGameLeaderboardEntry::release_name_suffix() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
  clear_has_name_suffix();
  return name_suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_allocated_name_suffix(::std::string* name_suffix) {
  if (name_suffix != NULL) {
    set_has_name_suffix();
  } else {
    clear_has_name_suffix();
  }
  name_suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_suffix);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
}

// optional int32 score = 2;
bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_score() {
  score_ = 0;
  clear_has_score();
}
::google::protobuf::int32 CMsgGameMatchSignOut_EventGameLeaderboardEntry::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.score)
  return score_;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.score)
}

// optional uint32 extra_data_1 = 3;
bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_has_extra_data_1() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_has_extra_data_1() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_1() {
  extra_data_1_ = 0u;
  clear_has_extra_data_1();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_1)
  return extra_data_1_;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_1(::google::protobuf::uint32 value) {
  set_has_extra_data_1();
  extra_data_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_1)
}

// optional uint32 extra_data_2 = 4;
bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_has_extra_data_2() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_has_extra_data_2() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_2() {
  extra_data_2_ = 0u;
  clear_has_extra_data_2();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_2)
  return extra_data_2_;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_2(::google::protobuf::uint32 value) {
  set_has_extra_data_2();
  extra_data_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_2)
}

// optional uint32 extra_data_3 = 5;
bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_has_extra_data_3() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_has_extra_data_3() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_3() {
  extra_data_3_ = 0u;
  clear_has_extra_data_3();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_3)
  return extra_data_3_;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_3(::google::protobuf::uint32 value) {
  set_has_extra_data_3();
  extra_data_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_3)
}

// optional uint32 extra_data_4 = 6;
bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_has_extra_data_4() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_has_extra_data_4() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_4() {
  extra_data_4_ = 0u;
  clear_has_extra_data_4();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_4() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_4)
  return extra_data_4_;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_4(::google::protobuf::uint32 value) {
  set_has_extra_data_4();
  extra_data_4_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_4)
}

// optional uint32 extra_data_5 = 7;
bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_5() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_has_extra_data_5() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_has_extra_data_5() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_5() {
  extra_data_5_ = 0u;
  clear_has_extra_data_5();
}
::google::protobuf::uint32 CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_5() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_5)
  return extra_data_5_;
}
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_5(::google::protobuf::uint32 value) {
  set_has_extra_data_5();
  extra_data_5_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOut::kMatchIdFieldNumber;
const int CMsgGameMatchSignOut::kDurationFieldNumber;
const int CMsgGameMatchSignOut::kGoodGuysWinFieldNumber;
const int CMsgGameMatchSignOut::kDateFieldNumber;
const int CMsgGameMatchSignOut::kNumPlayersFieldNumber;
const int CMsgGameMatchSignOut::kTeamsFieldNumber;
const int CMsgGameMatchSignOut::kTowerStatusFieldNumber;
const int CMsgGameMatchSignOut::kBarracksStatusFieldNumber;
const int CMsgGameMatchSignOut::kClusterFieldNumber;
const int CMsgGameMatchSignOut::kServerAddrFieldNumber;
const int CMsgGameMatchSignOut::kFirstBloodTimeFieldNumber;
const int CMsgGameMatchSignOut::kGameBalanceFieldNumber;
const int CMsgGameMatchSignOut::kEventScoreFieldNumber;
const int CMsgGameMatchSignOut::kPicksBansFieldNumber;
const int CMsgGameMatchSignOut::kFantasyStatsFieldNumber;
const int CMsgGameMatchSignOut::kPlayerStrangeCountAdjustmentsFieldNumber;
const int CMsgGameMatchSignOut::kAutomaticSurrenderFieldNumber;
const int CMsgGameMatchSignOut::kServerVersionFieldNumber;
const int CMsgGameMatchSignOut::kLegacyMassDisconnectFieldNumber;
const int CMsgGameMatchSignOut::kPoorNetworkConditionsFieldNumber;
const int CMsgGameMatchSignOut::kAdditionalMsgsFieldNumber;
const int CMsgGameMatchSignOut::kSocialFeedEventsFieldNumber;
const int CMsgGameMatchSignOut::kAverageNetworthDeltaFieldNumber;
const int CMsgGameMatchSignOut::kNetworthDeltaMin10FieldNumber;
const int CMsgGameMatchSignOut::kNetworthDeltaMin20FieldNumber;
const int CMsgGameMatchSignOut::kMaximumLosingNetworthLeadFieldNumber;
const int CMsgGameMatchSignOut::kAverageExperienceDeltaFieldNumber;
const int CMsgGameMatchSignOut::kExperienceDeltaMin10FieldNumber;
const int CMsgGameMatchSignOut::kExperienceDeltaMin20FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldWinnerMin10FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldWinnerMin20FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldWinnerTotalFieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldLoserMin10FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldLoserMin20FieldNumber;
const int CMsgGameMatchSignOut::kBonusGoldLoserTotalFieldNumber;
const int CMsgGameMatchSignOut::kCustomGameDataFieldNumber;
const int CMsgGameMatchSignOut::kMatchFlagsFieldNumber;
const int CMsgGameMatchSignOut::kTeamScoresFieldNumber;
const int CMsgGameMatchSignOut::kPreGameDurationFieldNumber;
const int CMsgGameMatchSignOut::kEventGameLeaderboardEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOut::CMsgGameMatchSignOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOut)
}
CMsgGameMatchSignOut::CMsgGameMatchSignOut(const CMsgGameMatchSignOut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      num_players_(from.num_players_),
      teams_(from.teams_),
      tower_status_(from.tower_status_),
      barracks_status_(from.barracks_status_),
      picks_bans_(from.picks_bans_),
      player_strange_count_adjustments_(from.player_strange_count_adjustments_),
      additional_msgs_(from.additional_msgs_),
      social_feed_events_(from.social_feed_events_),
      team_scores_(from.team_scores_),
      fantasy_stats_(from.fantasy_stats_),
      event_game_leaderboard_entries_(from.event_game_leaderboard_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_addr()) {
    server_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_addr_);
  }
  if (from.has_poor_network_conditions()) {
    poor_network_conditions_ = new ::proto::dota::CMsgPoorNetworkConditions(*from.poor_network_conditions_);
  } else {
    poor_network_conditions_ = NULL;
  }
  if (from.has_custom_game_data()) {
    custom_game_data_ = new ::proto::dota::CMsgGameMatchSignOut_CCustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = NULL;
  }
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&pre_game_duration_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(pre_game_duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOut)
}

void CMsgGameMatchSignOut::SharedCtor() {
  _cached_size_ = 0;
  server_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&poor_network_conditions_, 0, reinterpret_cast<char*>(&pre_game_duration_) -
    reinterpret_cast<char*>(&poor_network_conditions_) + sizeof(pre_game_duration_));
}

CMsgGameMatchSignOut::~CMsgGameMatchSignOut() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOut)
  SharedDtor();
}

void CMsgGameMatchSignOut::SharedDtor() {
  server_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete poor_network_conditions_;
  }
  if (this != internal_default_instance()) {
    delete custom_game_data_;
  }
}

void CMsgGameMatchSignOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOut& CMsgGameMatchSignOut::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOut* CMsgGameMatchSignOut::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOut* n = new CMsgGameMatchSignOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOut::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOut)
  num_players_.Clear();
  teams_.Clear();
  tower_status_.Clear();
  barracks_status_.Clear();
  picks_bans_.Clear();
  player_strange_count_adjustments_.Clear();
  additional_msgs_.Clear();
  social_feed_events_.Clear();
  team_scores_.Clear();
  fantasy_stats_.Clear();
  event_game_leaderboard_entries_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_server_addr()) {
      GOOGLE_DCHECK(!server_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_addr_.UnsafeRawStringPointer())->clear();
    }
    if (has_poor_network_conditions()) {
      GOOGLE_DCHECK(poor_network_conditions_ != NULL);
      poor_network_conditions_->::proto::dota::CMsgPoorNetworkConditions::Clear();
    }
    if (has_custom_game_data()) {
      GOOGLE_DCHECK(custom_game_data_ != NULL);
      custom_game_data_->::proto::dota::CMsgGameMatchSignOut_CCustomGameData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&first_blood_time_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(first_blood_time_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&game_balance_, 0, reinterpret_cast<char*>(&networth_delta_min10_) -
      reinterpret_cast<char*>(&game_balance_) + sizeof(networth_delta_min10_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&networth_delta_min20_, 0, reinterpret_cast<char*>(&bonus_gold_winner_total_) -
      reinterpret_cast<char*>(&networth_delta_min20_) + sizeof(bonus_gold_winner_total_));
  }
  if (_has_bits_[24 / 32] & 520093696u) {
    ::memset(&bonus_gold_loser_min10_, 0, reinterpret_cast<char*>(&pre_game_duration_) -
      reinterpret_cast<char*>(&bonus_gold_loser_min10_) + sizeof(pre_game_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool good_guys_win = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_good_guys_win();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &good_guys_win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_players = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_num_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tower_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_tower_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tower_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 barracks_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_barracks_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_barracks_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_cluster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_addr = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_addr().data(), this->server_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameMatchSignOut.server_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_first_blood_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float game_balance = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_game_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_event_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_strange_count_adjustments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool automatic_surrender = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_automatic_surrender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatic_surrender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_version = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_server_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_msgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legacy_mass_disconnect = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_legacy_mass_disconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_mass_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 average_networth_delta = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_average_networth_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &average_networth_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 networth_delta_min10 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_networth_delta_min10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &networth_delta_min10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 networth_delta_min20 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_networth_delta_min20();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &networth_delta_min20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 maximum_losing_networth_lead = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_maximum_losing_networth_lead();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maximum_losing_networth_lead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 average_experience_delta = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_average_experience_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &average_experience_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 experience_delta_min10 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_experience_delta_min10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &experience_delta_min10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 experience_delta_min20 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_experience_delta_min20();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &experience_delta_min20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bonus_gold_winner_min10 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_bonus_gold_winner_min10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_winner_min10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bonus_gold_winner_min20 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_bonus_gold_winner_min20();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_winner_min20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bonus_gold_winner_total = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_bonus_gold_winner_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_gold_winner_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bonus_gold_loser_min10 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_bonus_gold_loser_min10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_loser_min10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 bonus_gold_loser_min20 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_bonus_gold_loser_min20();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_gold_loser_min20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bonus_gold_loser_total = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_bonus_gold_loser_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_gold_loser_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(282u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poor_network_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(290u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_social_feed_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_flags = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_match_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_scores = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 312u, input, this->mutable_team_scores())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(314u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_scores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pre_game_duration = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          set_has_pre_game_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_game_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(330u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_game_leaderboard_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOut)
  return false;
#undef DO_
}

void CMsgGameMatchSignOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // optional bool good_guys_win = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->good_guys_win(), output);
  }

  // optional fixed32 date = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->date(), output);
  }

  // repeated uint32 num_players = 5;
  for (int i = 0, n = this->num_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->num_players(i), output);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->teams(i), output);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0, n = this->tower_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->tower_status(i), output);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0, n = this->barracks_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->barracks_status(i), output);
  }

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cluster(), output);
  }

  // optional string server_addr = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOut.server_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->server_addr(), output);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->first_blood_time(), output);
  }

  // optional float game_balance = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->game_balance(), output);
  }

  // optional uint32 event_score = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->event_score(), output);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->picks_bans(i), output);
  }

  // repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (unsigned int i = 0, n = this->player_strange_count_adjustments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->player_strange_count_adjustments(i), output);
  }

  // optional bool automatic_surrender = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->automatic_surrender(), output);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->server_version(), output);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (unsigned int i = 0, n = this->additional_msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->additional_msgs(i), output);
  }

  // optional bool legacy_mass_disconnect = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->legacy_mass_disconnect(), output);
  }

  // optional sint32 average_networth_delta = 22;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->average_networth_delta(), output);
  }

  // optional sint32 networth_delta_min10 = 23;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->networth_delta_min10(), output);
  }

  // optional sint32 networth_delta_min20 = 24;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(24, this->networth_delta_min20(), output);
  }

  // optional sint32 maximum_losing_networth_lead = 25;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(25, this->maximum_losing_networth_lead(), output);
  }

  // optional sint32 average_experience_delta = 26;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(26, this->average_experience_delta(), output);
  }

  // optional sint32 experience_delta_min10 = 27;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(27, this->experience_delta_min10(), output);
  }

  // optional sint32 experience_delta_min20 = 28;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(28, this->experience_delta_min20(), output);
  }

  // optional sint32 bonus_gold_winner_min10 = 29;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->bonus_gold_winner_min10(), output);
  }

  // optional sint32 bonus_gold_winner_min20 = 30;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->bonus_gold_winner_min20(), output);
  }

  // optional uint32 bonus_gold_winner_total = 31;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->bonus_gold_winner_total(), output);
  }

  // optional sint32 bonus_gold_loser_min10 = 32;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(32, this->bonus_gold_loser_min10(), output);
  }

  // optional sint32 bonus_gold_loser_min20 = 33;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(33, this->bonus_gold_loser_min20(), output);
  }

  // optional uint32 bonus_gold_loser_total = 34;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->bonus_gold_loser_total(), output);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->poor_network_conditions_, output);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  for (unsigned int i = 0, n = this->social_feed_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->social_feed_events(i), output);
  }

  // optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->custom_game_data_, output);
  }

  // optional uint32 match_flags = 38;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->match_flags(), output);
  }

  // repeated uint32 team_scores = 39;
  for (int i = 0, n = this->team_scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      39, this->team_scores(i), output);
  }

  // optional uint32 pre_game_duration = 40;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->pre_game_duration(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  for (unsigned int i = 0, n = this->fantasy_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->fantasy_stats(i), output);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  for (unsigned int i = 0, n = this->event_game_leaderboard_entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->event_game_leaderboard_entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOut)
}

::google::protobuf::uint8* CMsgGameMatchSignOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // optional bool good_guys_win = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->good_guys_win(), target);
  }

  // optional fixed32 date = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->date(), target);
  }

  // repeated uint32 num_players = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->num_players_, target);

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->teams(i), deterministic, target);
  }

  // repeated uint32 tower_status = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->tower_status_, target);

  // repeated uint32 barracks_status = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->barracks_status_, target);

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cluster(), target);
  }

  // optional string server_addr = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOut.server_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->server_addr(), target);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->first_blood_time(), target);
  }

  // optional float game_balance = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->game_balance(), target);
  }

  // optional uint32 event_score = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->event_score(), target);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->picks_bans(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (unsigned int i = 0, n = this->player_strange_count_adjustments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->player_strange_count_adjustments(i), deterministic, target);
  }

  // optional bool automatic_surrender = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->automatic_surrender(), target);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->server_version(), target);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (unsigned int i = 0, n = this->additional_msgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->additional_msgs(i), deterministic, target);
  }

  // optional bool legacy_mass_disconnect = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->legacy_mass_disconnect(), target);
  }

  // optional sint32 average_networth_delta = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->average_networth_delta(), target);
  }

  // optional sint32 networth_delta_min10 = 23;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->networth_delta_min10(), target);
  }

  // optional sint32 networth_delta_min20 = 24;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(24, this->networth_delta_min20(), target);
  }

  // optional sint32 maximum_losing_networth_lead = 25;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(25, this->maximum_losing_networth_lead(), target);
  }

  // optional sint32 average_experience_delta = 26;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(26, this->average_experience_delta(), target);
  }

  // optional sint32 experience_delta_min10 = 27;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(27, this->experience_delta_min10(), target);
  }

  // optional sint32 experience_delta_min20 = 28;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(28, this->experience_delta_min20(), target);
  }

  // optional sint32 bonus_gold_winner_min10 = 29;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->bonus_gold_winner_min10(), target);
  }

  // optional sint32 bonus_gold_winner_min20 = 30;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->bonus_gold_winner_min20(), target);
  }

  // optional uint32 bonus_gold_winner_total = 31;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->bonus_gold_winner_total(), target);
  }

  // optional sint32 bonus_gold_loser_min10 = 32;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(32, this->bonus_gold_loser_min10(), target);
  }

  // optional sint32 bonus_gold_loser_min20 = 33;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(33, this->bonus_gold_loser_min20(), target);
  }

  // optional uint32 bonus_gold_loser_total = 34;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->bonus_gold_loser_total(), target);
  }

  // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->poor_network_conditions_, deterministic, target);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  for (unsigned int i = 0, n = this->social_feed_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, this->social_feed_events(i), deterministic, target);
  }

  // optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->custom_game_data_, deterministic, target);
  }

  // optional uint32 match_flags = 38;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->match_flags(), target);
  }

  // repeated uint32 team_scores = 39;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(39, this->team_scores_, target);

  // optional uint32 pre_game_duration = 40;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->pre_game_duration(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  for (unsigned int i = 0, n = this->fantasy_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, this->fantasy_stats(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  for (unsigned int i = 0, n = this->event_game_leaderboard_entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, this->event_game_leaderboard_entries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOut)
  return target;
}

size_t CMsgGameMatchSignOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOut)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 num_players = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_players_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->num_players_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
  {
    unsigned int count = this->teams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(i));
    }
  }

  // repeated uint32 tower_status = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tower_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tower_status_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_status = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->barracks_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->barracks_status_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
  {
    unsigned int count = this->picks_bans_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picks_bans(i));
    }
  }

  // repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  {
    unsigned int count = this->player_strange_count_adjustments_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_strange_count_adjustments(i));
    }
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  {
    unsigned int count = this->additional_msgs_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->additional_msgs(i));
    }
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  {
    unsigned int count = this->social_feed_events_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->social_feed_events(i));
    }
  }

  // repeated uint32 team_scores = 39;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_scores_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->team_scores_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  {
    unsigned int count = this->fantasy_stats_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fantasy_stats(i));
    }
  }

  // repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  {
    unsigned int count = this->event_game_leaderboard_entries_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_game_leaderboard_entries(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string server_addr = 11;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_addr());
    }

    // optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
    if (has_poor_network_conditions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->poor_network_conditions_);
    }

    // optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
    if (has_custom_game_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->custom_game_data_);
    }

    // optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional fixed32 date = 4;
    if (has_date()) {
      total_size += 1 + 4;
    }

    // optional uint32 cluster = 10;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }

    // optional uint32 first_blood_time = 12;
    if (has_first_blood_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_time());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float game_balance = 13;
    if (has_game_balance()) {
      total_size += 1 + 4;
    }

    // optional uint32 event_score = 14;
    if (has_event_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_score());
    }

    // optional bool good_guys_win = 3;
    if (has_good_guys_win()) {
      total_size += 1 + 1;
    }

    // optional bool automatic_surrender = 18;
    if (has_automatic_surrender()) {
      total_size += 2 + 1;
    }

    // optional bool legacy_mass_disconnect = 21;
    if (has_legacy_mass_disconnect()) {
      total_size += 2 + 1;
    }

    // optional uint32 server_version = 19;
    if (has_server_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional sint32 average_networth_delta = 22;
    if (has_average_networth_delta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->average_networth_delta());
    }

    // optional sint32 networth_delta_min10 = 23;
    if (has_networth_delta_min10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->networth_delta_min10());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional sint32 networth_delta_min20 = 24;
    if (has_networth_delta_min20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->networth_delta_min20());
    }

    // optional sint32 maximum_losing_networth_lead = 25;
    if (has_maximum_losing_networth_lead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maximum_losing_networth_lead());
    }

    // optional sint32 average_experience_delta = 26;
    if (has_average_experience_delta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->average_experience_delta());
    }

    // optional sint32 experience_delta_min10 = 27;
    if (has_experience_delta_min10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->experience_delta_min10());
    }

    // optional sint32 experience_delta_min20 = 28;
    if (has_experience_delta_min20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->experience_delta_min20());
    }

    // optional sint32 bonus_gold_winner_min10 = 29;
    if (has_bonus_gold_winner_min10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_winner_min10());
    }

    // optional sint32 bonus_gold_winner_min20 = 30;
    if (has_bonus_gold_winner_min20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_winner_min20());
    }

    // optional uint32 bonus_gold_winner_total = 31;
    if (has_bonus_gold_winner_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_gold_winner_total());
    }

  }
  if (_has_bits_[24 / 32] & 520093696u) {
    // optional sint32 bonus_gold_loser_min10 = 32;
    if (has_bonus_gold_loser_min10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_loser_min10());
    }

    // optional sint32 bonus_gold_loser_min20 = 33;
    if (has_bonus_gold_loser_min20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_gold_loser_min20());
    }

    // optional uint32 bonus_gold_loser_total = 34;
    if (has_bonus_gold_loser_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_gold_loser_total());
    }

    // optional uint32 match_flags = 38;
    if (has_match_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_flags());
    }

    // optional uint32 pre_game_duration = 40;
    if (has_pre_game_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_game_duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOut)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOut)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut::MergeFrom(const CMsgGameMatchSignOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num_players_.MergeFrom(from.num_players_);
  teams_.MergeFrom(from.teams_);
  tower_status_.MergeFrom(from.tower_status_);
  barracks_status_.MergeFrom(from.barracks_status_);
  picks_bans_.MergeFrom(from.picks_bans_);
  player_strange_count_adjustments_.MergeFrom(from.player_strange_count_adjustments_);
  additional_msgs_.MergeFrom(from.additional_msgs_);
  social_feed_events_.MergeFrom(from.social_feed_events_);
  team_scores_.MergeFrom(from.team_scores_);
  fantasy_stats_.MergeFrom(from.fantasy_stats_);
  event_game_leaderboard_entries_.MergeFrom(from.event_game_leaderboard_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_server_addr();
      server_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_poor_network_conditions()->::proto::dota::CMsgPoorNetworkConditions::MergeFrom(from.poor_network_conditions());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_custom_game_data()->::proto::dota::CMsgGameMatchSignOut_CCustomGameData::MergeFrom(from.custom_game_data());
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      date_ = from.date_;
    }
    if (cached_has_bits & 0x00000040u) {
      cluster_ = from.cluster_;
    }
    if (cached_has_bits & 0x00000080u) {
      first_blood_time_ = from.first_blood_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      game_balance_ = from.game_balance_;
    }
    if (cached_has_bits & 0x00000200u) {
      event_score_ = from.event_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      good_guys_win_ = from.good_guys_win_;
    }
    if (cached_has_bits & 0x00000800u) {
      automatic_surrender_ = from.automatic_surrender_;
    }
    if (cached_has_bits & 0x00001000u) {
      legacy_mass_disconnect_ = from.legacy_mass_disconnect_;
    }
    if (cached_has_bits & 0x00002000u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00004000u) {
      average_networth_delta_ = from.average_networth_delta_;
    }
    if (cached_has_bits & 0x00008000u) {
      networth_delta_min10_ = from.networth_delta_min10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      networth_delta_min20_ = from.networth_delta_min20_;
    }
    if (cached_has_bits & 0x00020000u) {
      maximum_losing_networth_lead_ = from.maximum_losing_networth_lead_;
    }
    if (cached_has_bits & 0x00040000u) {
      average_experience_delta_ = from.average_experience_delta_;
    }
    if (cached_has_bits & 0x00080000u) {
      experience_delta_min10_ = from.experience_delta_min10_;
    }
    if (cached_has_bits & 0x00100000u) {
      experience_delta_min20_ = from.experience_delta_min20_;
    }
    if (cached_has_bits & 0x00200000u) {
      bonus_gold_winner_min10_ = from.bonus_gold_winner_min10_;
    }
    if (cached_has_bits & 0x00400000u) {
      bonus_gold_winner_min20_ = from.bonus_gold_winner_min20_;
    }
    if (cached_has_bits & 0x00800000u) {
      bonus_gold_winner_total_ = from.bonus_gold_winner_total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 520093696u) {
    if (cached_has_bits & 0x01000000u) {
      bonus_gold_loser_min10_ = from.bonus_gold_loser_min10_;
    }
    if (cached_has_bits & 0x02000000u) {
      bonus_gold_loser_min20_ = from.bonus_gold_loser_min20_;
    }
    if (cached_has_bits & 0x04000000u) {
      bonus_gold_loser_total_ = from.bonus_gold_loser_total_;
    }
    if (cached_has_bits & 0x08000000u) {
      match_flags_ = from.match_flags_;
    }
    if (cached_has_bits & 0x10000000u) {
      pre_game_duration_ = from.pre_game_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut::CopyFrom(const CMsgGameMatchSignOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut::Swap(CMsgGameMatchSignOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOut::InternalSwap(CMsgGameMatchSignOut* other) {
  num_players_.InternalSwap(&other->num_players_);
  teams_.InternalSwap(&other->teams_);
  tower_status_.InternalSwap(&other->tower_status_);
  barracks_status_.InternalSwap(&other->barracks_status_);
  picks_bans_.InternalSwap(&other->picks_bans_);
  player_strange_count_adjustments_.InternalSwap(&other->player_strange_count_adjustments_);
  additional_msgs_.InternalSwap(&other->additional_msgs_);
  social_feed_events_.InternalSwap(&other->social_feed_events_);
  team_scores_.InternalSwap(&other->team_scores_);
  fantasy_stats_.InternalSwap(&other->fantasy_stats_);
  event_game_leaderboard_entries_.InternalSwap(&other->event_game_leaderboard_entries_);
  server_addr_.Swap(&other->server_addr_);
  std::swap(poor_network_conditions_, other->poor_network_conditions_);
  std::swap(custom_game_data_, other->custom_game_data_);
  std::swap(match_id_, other->match_id_);
  std::swap(duration_, other->duration_);
  std::swap(date_, other->date_);
  std::swap(cluster_, other->cluster_);
  std::swap(first_blood_time_, other->first_blood_time_);
  std::swap(game_balance_, other->game_balance_);
  std::swap(event_score_, other->event_score_);
  std::swap(good_guys_win_, other->good_guys_win_);
  std::swap(automatic_surrender_, other->automatic_surrender_);
  std::swap(legacy_mass_disconnect_, other->legacy_mass_disconnect_);
  std::swap(server_version_, other->server_version_);
  std::swap(average_networth_delta_, other->average_networth_delta_);
  std::swap(networth_delta_min10_, other->networth_delta_min10_);
  std::swap(networth_delta_min20_, other->networth_delta_min20_);
  std::swap(maximum_losing_networth_lead_, other->maximum_losing_networth_lead_);
  std::swap(average_experience_delta_, other->average_experience_delta_);
  std::swap(experience_delta_min10_, other->experience_delta_min10_);
  std::swap(experience_delta_min20_, other->experience_delta_min20_);
  std::swap(bonus_gold_winner_min10_, other->bonus_gold_winner_min10_);
  std::swap(bonus_gold_winner_min20_, other->bonus_gold_winner_min20_);
  std::swap(bonus_gold_winner_total_, other->bonus_gold_winner_total_);
  std::swap(bonus_gold_loser_min10_, other->bonus_gold_loser_min10_);
  std::swap(bonus_gold_loser_min20_, other->bonus_gold_loser_min20_);
  std::swap(bonus_gold_loser_total_, other->bonus_gold_loser_total_);
  std::swap(match_flags_, other->match_flags_);
  std::swap(pre_game_duration_, other->pre_game_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOut::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOut

// optional uint64 match_id = 1 [(.proto.dota.key_field) = true];
bool CMsgGameMatchSignOut::has_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameMatchSignOut::set_has_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameMatchSignOut::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameMatchSignOut::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgGameMatchSignOut::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.match_id)
  return match_id_;
}
void CMsgGameMatchSignOut::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.match_id)
}

// optional uint32 duration = 2;
bool CMsgGameMatchSignOut::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGameMatchSignOut::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGameMatchSignOut::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGameMatchSignOut::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.duration)
  return duration_;
}
void CMsgGameMatchSignOut::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.duration)
}

// optional bool good_guys_win = 3;
bool CMsgGameMatchSignOut::has_good_guys_win() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgGameMatchSignOut::set_has_good_guys_win() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgGameMatchSignOut::clear_has_good_guys_win() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgGameMatchSignOut::clear_good_guys_win() {
  good_guys_win_ = false;
  clear_has_good_guys_win();
}
bool CMsgGameMatchSignOut::good_guys_win() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.good_guys_win)
  return good_guys_win_;
}
void CMsgGameMatchSignOut::set_good_guys_win(bool value) {
  set_has_good_guys_win();
  good_guys_win_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.good_guys_win)
}

// optional fixed32 date = 4;
bool CMsgGameMatchSignOut::has_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGameMatchSignOut::set_has_date() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGameMatchSignOut::clear_has_date() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGameMatchSignOut::clear_date() {
  date_ = 0u;
  clear_has_date();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.date)
  return date_;
}
void CMsgGameMatchSignOut::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.date)
}

// repeated uint32 num_players = 5;
int CMsgGameMatchSignOut::num_players_size() const {
  return num_players_.size();
}
void CMsgGameMatchSignOut::clear_num_players() {
  num_players_.Clear();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::num_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.num_players)
  return num_players_.Get(index);
}
void CMsgGameMatchSignOut::set_num_players(int index, ::google::protobuf::uint32 value) {
  num_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.num_players)
}
void CMsgGameMatchSignOut::add_num_players(::google::protobuf::uint32 value) {
  num_players_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.num_players)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::num_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.num_players)
  return num_players_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_num_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.num_players)
  return &num_players_;
}

// repeated .proto.dota.CMsgGameMatchSignOut.CTeam teams = 6;
int CMsgGameMatchSignOut::teams_size() const {
  return teams_.size();
}
void CMsgGameMatchSignOut::clear_teams() {
  teams_.Clear();
}
const ::proto::dota::CMsgGameMatchSignOut_CTeam& CMsgGameMatchSignOut::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.teams)
  return teams_.Get(index);
}
::proto::dota::CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.teams)
  return teams_.Mutable(index);
}
::proto::dota::CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_CTeam >*
CMsgGameMatchSignOut::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_CTeam >&
CMsgGameMatchSignOut::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.teams)
  return teams_;
}

// repeated uint32 tower_status = 8;
int CMsgGameMatchSignOut::tower_status_size() const {
  return tower_status_.size();
}
void CMsgGameMatchSignOut::clear_tower_status() {
  tower_status_.Clear();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::tower_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.tower_status)
  return tower_status_.Get(index);
}
void CMsgGameMatchSignOut::set_tower_status(int index, ::google::protobuf::uint32 value) {
  tower_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.tower_status)
}
void CMsgGameMatchSignOut::add_tower_status(::google::protobuf::uint32 value) {
  tower_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.tower_status)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::tower_status() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.tower_status)
  return tower_status_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_tower_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.tower_status)
  return &tower_status_;
}

// repeated uint32 barracks_status = 9;
int CMsgGameMatchSignOut::barracks_status_size() const {
  return barracks_status_.size();
}
void CMsgGameMatchSignOut::clear_barracks_status() {
  barracks_status_.Clear();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::barracks_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.barracks_status)
  return barracks_status_.Get(index);
}
void CMsgGameMatchSignOut::set_barracks_status(int index, ::google::protobuf::uint32 value) {
  barracks_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.barracks_status)
}
void CMsgGameMatchSignOut::add_barracks_status(::google::protobuf::uint32 value) {
  barracks_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.barracks_status)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::barracks_status() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.barracks_status)
  return barracks_status_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_barracks_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.barracks_status)
  return &barracks_status_;
}

// optional uint32 cluster = 10;
bool CMsgGameMatchSignOut::has_cluster() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGameMatchSignOut::set_has_cluster() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGameMatchSignOut::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGameMatchSignOut::clear_cluster() {
  cluster_ = 0u;
  clear_has_cluster();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::cluster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.cluster)
  return cluster_;
}
void CMsgGameMatchSignOut::set_cluster(::google::protobuf::uint32 value) {
  set_has_cluster();
  cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.cluster)
}

// optional string server_addr = 11;
bool CMsgGameMatchSignOut::has_server_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOut::set_has_server_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOut::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOut::clear_server_addr() {
  server_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_addr();
}
const ::std::string& CMsgGameMatchSignOut::server_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.server_addr)
  return server_addr_.GetNoArena();
}
void CMsgGameMatchSignOut::set_server_addr(const ::std::string& value) {
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.server_addr)
}
#if LANG_CXX11
void CMsgGameMatchSignOut::set_server_addr(::std::string&& value) {
  set_has_server_addr();
  server_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGameMatchSignOut.server_addr)
}
#endif
void CMsgGameMatchSignOut::set_server_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGameMatchSignOut.server_addr)
}
void CMsgGameMatchSignOut::set_server_addr(const char* value, size_t size) {
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGameMatchSignOut.server_addr)
}
::std::string* CMsgGameMatchSignOut::mutable_server_addr() {
  set_has_server_addr();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.server_addr)
  return server_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGameMatchSignOut::release_server_addr() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignOut.server_addr)
  clear_has_server_addr();
  return server_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGameMatchSignOut::set_allocated_server_addr(::std::string* server_addr) {
  if (server_addr != NULL) {
    set_has_server_addr();
  } else {
    clear_has_server_addr();
  }
  server_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_addr);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignOut.server_addr)
}

// optional uint32 first_blood_time = 12;
bool CMsgGameMatchSignOut::has_first_blood_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGameMatchSignOut::set_has_first_blood_time() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGameMatchSignOut::clear_has_first_blood_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGameMatchSignOut::clear_first_blood_time() {
  first_blood_time_ = 0u;
  clear_has_first_blood_time();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::first_blood_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.first_blood_time)
  return first_blood_time_;
}
void CMsgGameMatchSignOut::set_first_blood_time(::google::protobuf::uint32 value) {
  set_has_first_blood_time();
  first_blood_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.first_blood_time)
}

// optional float game_balance = 13;
bool CMsgGameMatchSignOut::has_game_balance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgGameMatchSignOut::set_has_game_balance() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgGameMatchSignOut::clear_has_game_balance() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgGameMatchSignOut::clear_game_balance() {
  game_balance_ = 0;
  clear_has_game_balance();
}
float CMsgGameMatchSignOut::game_balance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.game_balance)
  return game_balance_;
}
void CMsgGameMatchSignOut::set_game_balance(float value) {
  set_has_game_balance();
  game_balance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.game_balance)
}

// optional uint32 event_score = 14;
bool CMsgGameMatchSignOut::has_event_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgGameMatchSignOut::set_has_event_score() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgGameMatchSignOut::clear_has_event_score() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgGameMatchSignOut::clear_event_score() {
  event_score_ = 0u;
  clear_has_event_score();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::event_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.event_score)
  return event_score_;
}
void CMsgGameMatchSignOut::set_event_score(::google::protobuf::uint32 value) {
  set_has_event_score();
  event_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.event_score)
}

// repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 15;
int CMsgGameMatchSignOut::picks_bans_size() const {
  return picks_bans_.size();
}
void CMsgGameMatchSignOut::clear_picks_bans() {
  picks_bans_.Clear();
}
const ::proto::dota::CMatchHeroSelectEvent& CMsgGameMatchSignOut::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.picks_bans)
  return picks_bans_.Get(index);
}
::proto::dota::CMatchHeroSelectEvent* CMsgGameMatchSignOut::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.picks_bans)
  return picks_bans_.Mutable(index);
}
::proto::dota::CMatchHeroSelectEvent* CMsgGameMatchSignOut::add_picks_bans() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.picks_bans)
  return picks_bans_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >*
CMsgGameMatchSignOut::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.picks_bans)
  return &picks_bans_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >&
CMsgGameMatchSignOut::picks_bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.picks_bans)
  return picks_bans_;
}

// repeated .proto.dota.CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
int CMsgGameMatchSignOut::fantasy_stats_size() const {
  return fantasy_stats_.size();
}
void CMsgGameMatchSignOut::clear_fantasy_stats() {
  fantasy_stats_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyPlayerStats& CMsgGameMatchSignOut::fantasy_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.fantasy_stats)
  return fantasy_stats_.Get(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgGameMatchSignOut::mutable_fantasy_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.fantasy_stats)
  return fantasy_stats_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgGameMatchSignOut::add_fantasy_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.fantasy_stats)
  return fantasy_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >*
CMsgGameMatchSignOut::mutable_fantasy_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.fantasy_stats)
  return &fantasy_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >&
CMsgGameMatchSignOut::fantasy_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.fantasy_stats)
  return fantasy_stats_;
}

// repeated .proto.dota.CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
int CMsgGameMatchSignOut::player_strange_count_adjustments_size() const {
  return player_strange_count_adjustments_.size();
}
void CMsgGameMatchSignOut::clear_player_strange_count_adjustments() {
  player_strange_count_adjustments_.Clear();
}
const ::proto::dota::CMsgEconPlayerStrangeCountAdjustment& CMsgGameMatchSignOut::player_strange_count_adjustments(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.player_strange_count_adjustments)
  return player_strange_count_adjustments_.Get(index);
}
::proto::dota::CMsgEconPlayerStrangeCountAdjustment* CMsgGameMatchSignOut::mutable_player_strange_count_adjustments(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.player_strange_count_adjustments)
  return player_strange_count_adjustments_.Mutable(index);
}
::proto::dota::CMsgEconPlayerStrangeCountAdjustment* CMsgGameMatchSignOut::add_player_strange_count_adjustments() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.player_strange_count_adjustments)
  return player_strange_count_adjustments_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgEconPlayerStrangeCountAdjustment >*
CMsgGameMatchSignOut::mutable_player_strange_count_adjustments() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.player_strange_count_adjustments)
  return &player_strange_count_adjustments_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgEconPlayerStrangeCountAdjustment >&
CMsgGameMatchSignOut::player_strange_count_adjustments() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.player_strange_count_adjustments)
  return player_strange_count_adjustments_;
}

// optional bool automatic_surrender = 18;
bool CMsgGameMatchSignOut::has_automatic_surrender() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgGameMatchSignOut::set_has_automatic_surrender() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgGameMatchSignOut::clear_has_automatic_surrender() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgGameMatchSignOut::clear_automatic_surrender() {
  automatic_surrender_ = false;
  clear_has_automatic_surrender();
}
bool CMsgGameMatchSignOut::automatic_surrender() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.automatic_surrender)
  return automatic_surrender_;
}
void CMsgGameMatchSignOut::set_automatic_surrender(bool value) {
  set_has_automatic_surrender();
  automatic_surrender_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.automatic_surrender)
}

// optional uint32 server_version = 19;
bool CMsgGameMatchSignOut::has_server_version() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgGameMatchSignOut::set_has_server_version() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgGameMatchSignOut::clear_has_server_version() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgGameMatchSignOut::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::server_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.server_version)
  return server_version_;
}
void CMsgGameMatchSignOut::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.server_version)
}

// optional bool legacy_mass_disconnect = 21;
bool CMsgGameMatchSignOut::has_legacy_mass_disconnect() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgGameMatchSignOut::set_has_legacy_mass_disconnect() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgGameMatchSignOut::clear_has_legacy_mass_disconnect() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgGameMatchSignOut::clear_legacy_mass_disconnect() {
  legacy_mass_disconnect_ = false;
  clear_has_legacy_mass_disconnect();
}
bool CMsgGameMatchSignOut::legacy_mass_disconnect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.legacy_mass_disconnect)
  return legacy_mass_disconnect_;
}
void CMsgGameMatchSignOut::set_legacy_mass_disconnect(bool value) {
  set_has_legacy_mass_disconnect();
  legacy_mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.legacy_mass_disconnect)
}

// optional .proto.dota.CMsgPoorNetworkConditions poor_network_conditions = 35;
bool CMsgGameMatchSignOut::has_poor_network_conditions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOut::set_has_poor_network_conditions() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignOut::clear_has_poor_network_conditions() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignOut::clear_poor_network_conditions() {
  if (poor_network_conditions_ != NULL) poor_network_conditions_->::proto::dota::CMsgPoorNetworkConditions::Clear();
  clear_has_poor_network_conditions();
}
const ::proto::dota::CMsgPoorNetworkConditions& CMsgGameMatchSignOut::poor_network_conditions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.poor_network_conditions)
  return poor_network_conditions_ != NULL ? *poor_network_conditions_
                         : *::proto::dota::CMsgPoorNetworkConditions::internal_default_instance();
}
::proto::dota::CMsgPoorNetworkConditions* CMsgGameMatchSignOut::mutable_poor_network_conditions() {
  set_has_poor_network_conditions();
  if (poor_network_conditions_ == NULL) {
    poor_network_conditions_ = new ::proto::dota::CMsgPoorNetworkConditions;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.poor_network_conditions)
  return poor_network_conditions_;
}
::proto::dota::CMsgPoorNetworkConditions* CMsgGameMatchSignOut::release_poor_network_conditions() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignOut.poor_network_conditions)
  clear_has_poor_network_conditions();
  ::proto::dota::CMsgPoorNetworkConditions* temp = poor_network_conditions_;
  poor_network_conditions_ = NULL;
  return temp;
}
void CMsgGameMatchSignOut::set_allocated_poor_network_conditions(::proto::dota::CMsgPoorNetworkConditions* poor_network_conditions) {
  delete poor_network_conditions_;
  poor_network_conditions_ = poor_network_conditions;
  if (poor_network_conditions) {
    set_has_poor_network_conditions();
  } else {
    clear_has_poor_network_conditions();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignOut.poor_network_conditions)
}

// repeated .proto.dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
int CMsgGameMatchSignOut::additional_msgs_size() const {
  return additional_msgs_.size();
}
void CMsgGameMatchSignOut::clear_additional_msgs() {
  additional_msgs_.Clear();
}
const ::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg& CMsgGameMatchSignOut::additional_msgs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.additional_msgs)
  return additional_msgs_.Get(index);
}
::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut::mutable_additional_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.additional_msgs)
  return additional_msgs_.Mutable(index);
}
::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut::add_additional_msgs() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.additional_msgs)
  return additional_msgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg >*
CMsgGameMatchSignOut::mutable_additional_msgs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.additional_msgs)
  return &additional_msgs_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_CAdditionalSignoutMsg >&
CMsgGameMatchSignOut::additional_msgs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.additional_msgs)
  return additional_msgs_;
}

// repeated .proto.dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
int CMsgGameMatchSignOut::social_feed_events_size() const {
  return social_feed_events_.size();
}
void CMsgGameMatchSignOut::clear_social_feed_events() {
  social_feed_events_.Clear();
}
const ::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent& CMsgGameMatchSignOut::social_feed_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.social_feed_events)
  return social_feed_events_.Get(index);
}
::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent* CMsgGameMatchSignOut::mutable_social_feed_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.social_feed_events)
  return social_feed_events_.Mutable(index);
}
::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent* CMsgGameMatchSignOut::add_social_feed_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.social_feed_events)
  return social_feed_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent >*
CMsgGameMatchSignOut::mutable_social_feed_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.social_feed_events)
  return &social_feed_events_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_CSocialFeedMatchEvent >&
CMsgGameMatchSignOut::social_feed_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.social_feed_events)
  return social_feed_events_;
}

// optional sint32 average_networth_delta = 22;
bool CMsgGameMatchSignOut::has_average_networth_delta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgGameMatchSignOut::set_has_average_networth_delta() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgGameMatchSignOut::clear_has_average_networth_delta() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgGameMatchSignOut::clear_average_networth_delta() {
  average_networth_delta_ = 0;
  clear_has_average_networth_delta();
}
::google::protobuf::int32 CMsgGameMatchSignOut::average_networth_delta() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.average_networth_delta)
  return average_networth_delta_;
}
void CMsgGameMatchSignOut::set_average_networth_delta(::google::protobuf::int32 value) {
  set_has_average_networth_delta();
  average_networth_delta_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.average_networth_delta)
}

// optional sint32 networth_delta_min10 = 23;
bool CMsgGameMatchSignOut::has_networth_delta_min10() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgGameMatchSignOut::set_has_networth_delta_min10() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgGameMatchSignOut::clear_has_networth_delta_min10() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgGameMatchSignOut::clear_networth_delta_min10() {
  networth_delta_min10_ = 0;
  clear_has_networth_delta_min10();
}
::google::protobuf::int32 CMsgGameMatchSignOut::networth_delta_min10() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.networth_delta_min10)
  return networth_delta_min10_;
}
void CMsgGameMatchSignOut::set_networth_delta_min10(::google::protobuf::int32 value) {
  set_has_networth_delta_min10();
  networth_delta_min10_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.networth_delta_min10)
}

// optional sint32 networth_delta_min20 = 24;
bool CMsgGameMatchSignOut::has_networth_delta_min20() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgGameMatchSignOut::set_has_networth_delta_min20() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgGameMatchSignOut::clear_has_networth_delta_min20() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgGameMatchSignOut::clear_networth_delta_min20() {
  networth_delta_min20_ = 0;
  clear_has_networth_delta_min20();
}
::google::protobuf::int32 CMsgGameMatchSignOut::networth_delta_min20() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.networth_delta_min20)
  return networth_delta_min20_;
}
void CMsgGameMatchSignOut::set_networth_delta_min20(::google::protobuf::int32 value) {
  set_has_networth_delta_min20();
  networth_delta_min20_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.networth_delta_min20)
}

// optional sint32 maximum_losing_networth_lead = 25;
bool CMsgGameMatchSignOut::has_maximum_losing_networth_lead() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgGameMatchSignOut::set_has_maximum_losing_networth_lead() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgGameMatchSignOut::clear_has_maximum_losing_networth_lead() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgGameMatchSignOut::clear_maximum_losing_networth_lead() {
  maximum_losing_networth_lead_ = 0;
  clear_has_maximum_losing_networth_lead();
}
::google::protobuf::int32 CMsgGameMatchSignOut::maximum_losing_networth_lead() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.maximum_losing_networth_lead)
  return maximum_losing_networth_lead_;
}
void CMsgGameMatchSignOut::set_maximum_losing_networth_lead(::google::protobuf::int32 value) {
  set_has_maximum_losing_networth_lead();
  maximum_losing_networth_lead_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.maximum_losing_networth_lead)
}

// optional sint32 average_experience_delta = 26;
bool CMsgGameMatchSignOut::has_average_experience_delta() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgGameMatchSignOut::set_has_average_experience_delta() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgGameMatchSignOut::clear_has_average_experience_delta() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgGameMatchSignOut::clear_average_experience_delta() {
  average_experience_delta_ = 0;
  clear_has_average_experience_delta();
}
::google::protobuf::int32 CMsgGameMatchSignOut::average_experience_delta() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.average_experience_delta)
  return average_experience_delta_;
}
void CMsgGameMatchSignOut::set_average_experience_delta(::google::protobuf::int32 value) {
  set_has_average_experience_delta();
  average_experience_delta_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.average_experience_delta)
}

// optional sint32 experience_delta_min10 = 27;
bool CMsgGameMatchSignOut::has_experience_delta_min10() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgGameMatchSignOut::set_has_experience_delta_min10() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgGameMatchSignOut::clear_has_experience_delta_min10() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgGameMatchSignOut::clear_experience_delta_min10() {
  experience_delta_min10_ = 0;
  clear_has_experience_delta_min10();
}
::google::protobuf::int32 CMsgGameMatchSignOut::experience_delta_min10() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.experience_delta_min10)
  return experience_delta_min10_;
}
void CMsgGameMatchSignOut::set_experience_delta_min10(::google::protobuf::int32 value) {
  set_has_experience_delta_min10();
  experience_delta_min10_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.experience_delta_min10)
}

// optional sint32 experience_delta_min20 = 28;
bool CMsgGameMatchSignOut::has_experience_delta_min20() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgGameMatchSignOut::set_has_experience_delta_min20() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgGameMatchSignOut::clear_has_experience_delta_min20() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgGameMatchSignOut::clear_experience_delta_min20() {
  experience_delta_min20_ = 0;
  clear_has_experience_delta_min20();
}
::google::protobuf::int32 CMsgGameMatchSignOut::experience_delta_min20() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.experience_delta_min20)
  return experience_delta_min20_;
}
void CMsgGameMatchSignOut::set_experience_delta_min20(::google::protobuf::int32 value) {
  set_has_experience_delta_min20();
  experience_delta_min20_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.experience_delta_min20)
}

// optional sint32 bonus_gold_winner_min10 = 29;
bool CMsgGameMatchSignOut::has_bonus_gold_winner_min10() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgGameMatchSignOut::set_has_bonus_gold_winner_min10() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgGameMatchSignOut::clear_has_bonus_gold_winner_min10() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgGameMatchSignOut::clear_bonus_gold_winner_min10() {
  bonus_gold_winner_min10_ = 0;
  clear_has_bonus_gold_winner_min10();
}
::google::protobuf::int32 CMsgGameMatchSignOut::bonus_gold_winner_min10() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.bonus_gold_winner_min10)
  return bonus_gold_winner_min10_;
}
void CMsgGameMatchSignOut::set_bonus_gold_winner_min10(::google::protobuf::int32 value) {
  set_has_bonus_gold_winner_min10();
  bonus_gold_winner_min10_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.bonus_gold_winner_min10)
}

// optional sint32 bonus_gold_winner_min20 = 30;
bool CMsgGameMatchSignOut::has_bonus_gold_winner_min20() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgGameMatchSignOut::set_has_bonus_gold_winner_min20() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgGameMatchSignOut::clear_has_bonus_gold_winner_min20() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgGameMatchSignOut::clear_bonus_gold_winner_min20() {
  bonus_gold_winner_min20_ = 0;
  clear_has_bonus_gold_winner_min20();
}
::google::protobuf::int32 CMsgGameMatchSignOut::bonus_gold_winner_min20() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.bonus_gold_winner_min20)
  return bonus_gold_winner_min20_;
}
void CMsgGameMatchSignOut::set_bonus_gold_winner_min20(::google::protobuf::int32 value) {
  set_has_bonus_gold_winner_min20();
  bonus_gold_winner_min20_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.bonus_gold_winner_min20)
}

// optional uint32 bonus_gold_winner_total = 31;
bool CMsgGameMatchSignOut::has_bonus_gold_winner_total() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgGameMatchSignOut::set_has_bonus_gold_winner_total() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgGameMatchSignOut::clear_has_bonus_gold_winner_total() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgGameMatchSignOut::clear_bonus_gold_winner_total() {
  bonus_gold_winner_total_ = 0u;
  clear_has_bonus_gold_winner_total();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::bonus_gold_winner_total() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.bonus_gold_winner_total)
  return bonus_gold_winner_total_;
}
void CMsgGameMatchSignOut::set_bonus_gold_winner_total(::google::protobuf::uint32 value) {
  set_has_bonus_gold_winner_total();
  bonus_gold_winner_total_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.bonus_gold_winner_total)
}

// optional sint32 bonus_gold_loser_min10 = 32;
bool CMsgGameMatchSignOut::has_bonus_gold_loser_min10() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgGameMatchSignOut::set_has_bonus_gold_loser_min10() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgGameMatchSignOut::clear_has_bonus_gold_loser_min10() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgGameMatchSignOut::clear_bonus_gold_loser_min10() {
  bonus_gold_loser_min10_ = 0;
  clear_has_bonus_gold_loser_min10();
}
::google::protobuf::int32 CMsgGameMatchSignOut::bonus_gold_loser_min10() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.bonus_gold_loser_min10)
  return bonus_gold_loser_min10_;
}
void CMsgGameMatchSignOut::set_bonus_gold_loser_min10(::google::protobuf::int32 value) {
  set_has_bonus_gold_loser_min10();
  bonus_gold_loser_min10_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.bonus_gold_loser_min10)
}

// optional sint32 bonus_gold_loser_min20 = 33;
bool CMsgGameMatchSignOut::has_bonus_gold_loser_min20() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgGameMatchSignOut::set_has_bonus_gold_loser_min20() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgGameMatchSignOut::clear_has_bonus_gold_loser_min20() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgGameMatchSignOut::clear_bonus_gold_loser_min20() {
  bonus_gold_loser_min20_ = 0;
  clear_has_bonus_gold_loser_min20();
}
::google::protobuf::int32 CMsgGameMatchSignOut::bonus_gold_loser_min20() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.bonus_gold_loser_min20)
  return bonus_gold_loser_min20_;
}
void CMsgGameMatchSignOut::set_bonus_gold_loser_min20(::google::protobuf::int32 value) {
  set_has_bonus_gold_loser_min20();
  bonus_gold_loser_min20_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.bonus_gold_loser_min20)
}

// optional uint32 bonus_gold_loser_total = 34;
bool CMsgGameMatchSignOut::has_bonus_gold_loser_total() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgGameMatchSignOut::set_has_bonus_gold_loser_total() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgGameMatchSignOut::clear_has_bonus_gold_loser_total() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgGameMatchSignOut::clear_bonus_gold_loser_total() {
  bonus_gold_loser_total_ = 0u;
  clear_has_bonus_gold_loser_total();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::bonus_gold_loser_total() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.bonus_gold_loser_total)
  return bonus_gold_loser_total_;
}
void CMsgGameMatchSignOut::set_bonus_gold_loser_total(::google::protobuf::uint32 value) {
  set_has_bonus_gold_loser_total();
  bonus_gold_loser_total_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.bonus_gold_loser_total)
}

// optional .proto.dota.CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
bool CMsgGameMatchSignOut::has_custom_game_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameMatchSignOut::set_has_custom_game_data() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameMatchSignOut::clear_has_custom_game_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameMatchSignOut::clear_custom_game_data() {
  if (custom_game_data_ != NULL) custom_game_data_->::proto::dota::CMsgGameMatchSignOut_CCustomGameData::Clear();
  clear_has_custom_game_data();
}
const ::proto::dota::CMsgGameMatchSignOut_CCustomGameData& CMsgGameMatchSignOut::custom_game_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.custom_game_data)
  return custom_game_data_ != NULL ? *custom_game_data_
                         : *::proto::dota::CMsgGameMatchSignOut_CCustomGameData::internal_default_instance();
}
::proto::dota::CMsgGameMatchSignOut_CCustomGameData* CMsgGameMatchSignOut::mutable_custom_game_data() {
  set_has_custom_game_data();
  if (custom_game_data_ == NULL) {
    custom_game_data_ = new ::proto::dota::CMsgGameMatchSignOut_CCustomGameData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.custom_game_data)
  return custom_game_data_;
}
::proto::dota::CMsgGameMatchSignOut_CCustomGameData* CMsgGameMatchSignOut::release_custom_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignOut.custom_game_data)
  clear_has_custom_game_data();
  ::proto::dota::CMsgGameMatchSignOut_CCustomGameData* temp = custom_game_data_;
  custom_game_data_ = NULL;
  return temp;
}
void CMsgGameMatchSignOut::set_allocated_custom_game_data(::proto::dota::CMsgGameMatchSignOut_CCustomGameData* custom_game_data) {
  delete custom_game_data_;
  custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    set_has_custom_game_data();
  } else {
    clear_has_custom_game_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignOut.custom_game_data)
}

// optional uint32 match_flags = 38;
bool CMsgGameMatchSignOut::has_match_flags() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgGameMatchSignOut::set_has_match_flags() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgGameMatchSignOut::clear_has_match_flags() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgGameMatchSignOut::clear_match_flags() {
  match_flags_ = 0u;
  clear_has_match_flags();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::match_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.match_flags)
  return match_flags_;
}
void CMsgGameMatchSignOut::set_match_flags(::google::protobuf::uint32 value) {
  set_has_match_flags();
  match_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.match_flags)
}

// repeated uint32 team_scores = 39;
int CMsgGameMatchSignOut::team_scores_size() const {
  return team_scores_.size();
}
void CMsgGameMatchSignOut::clear_team_scores() {
  team_scores_.Clear();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::team_scores(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.team_scores)
  return team_scores_.Get(index);
}
void CMsgGameMatchSignOut::set_team_scores(int index, ::google::protobuf::uint32 value) {
  team_scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.team_scores)
}
void CMsgGameMatchSignOut::add_team_scores(::google::protobuf::uint32 value) {
  team_scores_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.team_scores)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::team_scores() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.team_scores)
  return team_scores_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_team_scores() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.team_scores)
  return &team_scores_;
}

// optional uint32 pre_game_duration = 40;
bool CMsgGameMatchSignOut::has_pre_game_duration() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgGameMatchSignOut::set_has_pre_game_duration() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgGameMatchSignOut::clear_has_pre_game_duration() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgGameMatchSignOut::clear_pre_game_duration() {
  pre_game_duration_ = 0u;
  clear_has_pre_game_duration();
}
::google::protobuf::uint32 CMsgGameMatchSignOut::pre_game_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.pre_game_duration)
  return pre_game_duration_;
}
void CMsgGameMatchSignOut::set_pre_game_duration(::google::protobuf::uint32 value) {
  set_has_pre_game_duration();
  pre_game_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOut.pre_game_duration)
}

// repeated .proto.dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
int CMsgGameMatchSignOut::event_game_leaderboard_entries_size() const {
  return event_game_leaderboard_entries_.size();
}
void CMsgGameMatchSignOut::clear_event_game_leaderboard_entries() {
  event_game_leaderboard_entries_.Clear();
}
const ::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry& CMsgGameMatchSignOut::event_game_leaderboard_entries(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return event_game_leaderboard_entries_.Get(index);
}
::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry* CMsgGameMatchSignOut::mutable_event_game_leaderboard_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return event_game_leaderboard_entries_.Mutable(index);
}
::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry* CMsgGameMatchSignOut::add_event_game_leaderboard_entries() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return event_game_leaderboard_entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry >*
CMsgGameMatchSignOut::mutable_event_game_leaderboard_entries() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return &event_game_leaderboard_entries_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignOut_EventGameLeaderboardEntry >&
CMsgGameMatchSignOut::event_game_leaderboard_entries() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return event_game_leaderboard_entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutDraftInfo::kRadiantCaptainAccountIdFieldNumber;
const int CMsgSignOutDraftInfo::kDireCaptainAccountIdFieldNumber;
const int CMsgSignOutDraftInfo::kPicksBansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutDraftInfo::CMsgSignOutDraftInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutDraftInfo)
}
CMsgSignOutDraftInfo::CMsgSignOutDraftInfo(const CMsgSignOutDraftInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      picks_bans_(from.picks_bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radiant_captain_account_id_, &from.radiant_captain_account_id_,
    reinterpret_cast<char*>(&dire_captain_account_id_) -
    reinterpret_cast<char*>(&radiant_captain_account_id_) + sizeof(dire_captain_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutDraftInfo)
}

void CMsgSignOutDraftInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&radiant_captain_account_id_, 0, reinterpret_cast<char*>(&dire_captain_account_id_) -
    reinterpret_cast<char*>(&radiant_captain_account_id_) + sizeof(dire_captain_account_id_));
}

CMsgSignOutDraftInfo::~CMsgSignOutDraftInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutDraftInfo)
  SharedDtor();
}

void CMsgSignOutDraftInfo::SharedDtor() {
}

void CMsgSignOutDraftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutDraftInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutDraftInfo& CMsgSignOutDraftInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutDraftInfo* CMsgSignOutDraftInfo::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutDraftInfo* n = new CMsgSignOutDraftInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutDraftInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutDraftInfo)
  picks_bans_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&radiant_captain_account_id_, 0, reinterpret_cast<char*>(&dire_captain_account_id_) -
      reinterpret_cast<char*>(&radiant_captain_account_id_) + sizeof(dire_captain_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutDraftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutDraftInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 radiant_captain_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_radiant_captain_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_captain_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_captain_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_dire_captain_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_captain_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutDraftInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutDraftInfo)
  return false;
#undef DO_
}

void CMsgSignOutDraftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutDraftInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 radiant_captain_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->radiant_captain_account_id(), output);
  }

  // optional uint32 dire_captain_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dire_captain_account_id(), output);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->picks_bans(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutDraftInfo)
}

::google::protobuf::uint8* CMsgSignOutDraftInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutDraftInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 radiant_captain_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->radiant_captain_account_id(), target);
  }

  // optional uint32 dire_captain_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dire_captain_account_id(), target);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->picks_bans(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutDraftInfo)
  return target;
}

size_t CMsgSignOutDraftInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutDraftInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
  {
    unsigned int count = this->picks_bans_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picks_bans(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 radiant_captain_account_id = 1;
    if (has_radiant_captain_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_captain_account_id());
    }

    // optional uint32 dire_captain_account_id = 2;
    if (has_dire_captain_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_captain_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutDraftInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutDraftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutDraftInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutDraftInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutDraftInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutDraftInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutDraftInfo::MergeFrom(const CMsgSignOutDraftInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutDraftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picks_bans_.MergeFrom(from.picks_bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      radiant_captain_account_id_ = from.radiant_captain_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      dire_captain_account_id_ = from.dire_captain_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutDraftInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutDraftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutDraftInfo::CopyFrom(const CMsgSignOutDraftInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutDraftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutDraftInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutDraftInfo::Swap(CMsgSignOutDraftInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutDraftInfo::InternalSwap(CMsgSignOutDraftInfo* other) {
  picks_bans_.InternalSwap(&other->picks_bans_);
  std::swap(radiant_captain_account_id_, other->radiant_captain_account_id_);
  std::swap(dire_captain_account_id_, other->dire_captain_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutDraftInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutDraftInfo

// optional uint32 radiant_captain_account_id = 1;
bool CMsgSignOutDraftInfo::has_radiant_captain_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutDraftInfo::set_has_radiant_captain_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutDraftInfo::clear_has_radiant_captain_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutDraftInfo::clear_radiant_captain_account_id() {
  radiant_captain_account_id_ = 0u;
  clear_has_radiant_captain_account_id();
}
::google::protobuf::uint32 CMsgSignOutDraftInfo::radiant_captain_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutDraftInfo.radiant_captain_account_id)
  return radiant_captain_account_id_;
}
void CMsgSignOutDraftInfo::set_radiant_captain_account_id(::google::protobuf::uint32 value) {
  set_has_radiant_captain_account_id();
  radiant_captain_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutDraftInfo.radiant_captain_account_id)
}

// optional uint32 dire_captain_account_id = 2;
bool CMsgSignOutDraftInfo::has_dire_captain_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutDraftInfo::set_has_dire_captain_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutDraftInfo::clear_has_dire_captain_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutDraftInfo::clear_dire_captain_account_id() {
  dire_captain_account_id_ = 0u;
  clear_has_dire_captain_account_id();
}
::google::protobuf::uint32 CMsgSignOutDraftInfo::dire_captain_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutDraftInfo.dire_captain_account_id)
  return dire_captain_account_id_;
}
void CMsgSignOutDraftInfo::set_dire_captain_account_id(::google::protobuf::uint32 value) {
  set_has_dire_captain_account_id();
  dire_captain_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutDraftInfo.dire_captain_account_id)
}

// repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 3;
int CMsgSignOutDraftInfo::picks_bans_size() const {
  return picks_bans_.size();
}
void CMsgSignOutDraftInfo::clear_picks_bans() {
  picks_bans_.Clear();
}
const ::proto::dota::CMatchHeroSelectEvent& CMsgSignOutDraftInfo::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutDraftInfo.picks_bans)
  return picks_bans_.Get(index);
}
::proto::dota::CMatchHeroSelectEvent* CMsgSignOutDraftInfo::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSignOutDraftInfo.picks_bans)
  return picks_bans_.Mutable(index);
}
::proto::dota::CMatchHeroSelectEvent* CMsgSignOutDraftInfo::add_picks_bans() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutDraftInfo.picks_bans)
  return picks_bans_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >*
CMsgSignOutDraftInfo::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutDraftInfo.picks_bans)
  return &picks_bans_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >&
CMsgSignOutDraftInfo::picks_bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutDraftInfo.picks_bans)
  return picks_bans_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutBotInfo::kAllowCheatsFieldNumber;
const int CMsgSignOutBotInfo::kBotDifficultyRadiantFieldNumber;
const int CMsgSignOutBotInfo::kCreatedLobbyFieldNumber;
const int CMsgSignOutBotInfo::kBotDifficultyDireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutBotInfo::CMsgSignOutBotInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutBotInfo)
}
CMsgSignOutBotInfo::CMsgSignOutBotInfo(const CMsgSignOutBotInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bot_difficulty_radiant_, &from.bot_difficulty_radiant_,
    reinterpret_cast<char*>(&bot_difficulty_dire_) -
    reinterpret_cast<char*>(&bot_difficulty_radiant_) + sizeof(bot_difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutBotInfo)
}

void CMsgSignOutBotInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bot_difficulty_radiant_, 0, reinterpret_cast<char*>(&bot_difficulty_dire_) -
    reinterpret_cast<char*>(&bot_difficulty_radiant_) + sizeof(bot_difficulty_dire_));
}

CMsgSignOutBotInfo::~CMsgSignOutBotInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutBotInfo)
  SharedDtor();
}

void CMsgSignOutBotInfo::SharedDtor() {
}

void CMsgSignOutBotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutBotInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutBotInfo& CMsgSignOutBotInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutBotInfo* CMsgSignOutBotInfo::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutBotInfo* n = new CMsgSignOutBotInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutBotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutBotInfo)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&bot_difficulty_radiant_, 0, reinterpret_cast<char*>(&bot_difficulty_dire_) -
      reinterpret_cast<char*>(&bot_difficulty_radiant_) + sizeof(bot_difficulty_dire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutBotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutBotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allow_cheats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_allow_cheats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_radiant(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool created_lobby = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_created_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &created_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_dire(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutBotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutBotInfo)
  return false;
#undef DO_
}

void CMsgSignOutBotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutBotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow_cheats(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bot_difficulty_radiant(), output);
  }

  // optional bool created_lobby = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->created_lobby(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bot_difficulty_dire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutBotInfo)
}

::google::protobuf::uint8* CMsgSignOutBotInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutBotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow_cheats(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bot_difficulty_radiant(), target);
  }

  // optional bool created_lobby = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->created_lobby(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bot_difficulty_dire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutBotInfo)
  return target;
}

size_t CMsgSignOutBotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutBotInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_radiant());
    }

    // optional bool allow_cheats = 1;
    if (has_allow_cheats()) {
      total_size += 1 + 1;
    }

    // optional bool created_lobby = 3;
    if (has_created_lobby()) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty_dire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_dire());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutBotInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutBotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutBotInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutBotInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutBotInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutBotInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutBotInfo::MergeFrom(const CMsgSignOutBotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutBotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      bot_difficulty_radiant_ = from.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000002u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00000004u) {
      created_lobby_ = from.created_lobby_;
    }
    if (cached_has_bits & 0x00000008u) {
      bot_difficulty_dire_ = from.bot_difficulty_dire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutBotInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutBotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutBotInfo::CopyFrom(const CMsgSignOutBotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutBotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBotInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutBotInfo::Swap(CMsgSignOutBotInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutBotInfo::InternalSwap(CMsgSignOutBotInfo* other) {
  std::swap(bot_difficulty_radiant_, other->bot_difficulty_radiant_);
  std::swap(allow_cheats_, other->allow_cheats_);
  std::swap(created_lobby_, other->created_lobby_);
  std::swap(bot_difficulty_dire_, other->bot_difficulty_dire_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutBotInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutBotInfo

// optional bool allow_cheats = 1;
bool CMsgSignOutBotInfo::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutBotInfo::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutBotInfo::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutBotInfo::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
bool CMsgSignOutBotInfo::allow_cheats() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutBotInfo.allow_cheats)
  return allow_cheats_;
}
void CMsgSignOutBotInfo::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutBotInfo.allow_cheats)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
bool CMsgSignOutBotInfo::has_bot_difficulty_radiant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutBotInfo::set_has_bot_difficulty_radiant() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutBotInfo::clear_has_bot_difficulty_radiant() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutBotInfo::clear_bot_difficulty_radiant() {
  bot_difficulty_radiant_ = 0;
  clear_has_bot_difficulty_radiant();
}
::proto::dota::DOTABotDifficulty CMsgSignOutBotInfo::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutBotInfo.bot_difficulty_radiant)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_radiant_);
}
void CMsgSignOutBotInfo::set_bot_difficulty_radiant(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_radiant();
  bot_difficulty_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutBotInfo.bot_difficulty_radiant)
}

// optional bool created_lobby = 3;
bool CMsgSignOutBotInfo::has_created_lobby() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSignOutBotInfo::set_has_created_lobby() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSignOutBotInfo::clear_has_created_lobby() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSignOutBotInfo::clear_created_lobby() {
  created_lobby_ = false;
  clear_has_created_lobby();
}
bool CMsgSignOutBotInfo::created_lobby() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutBotInfo.created_lobby)
  return created_lobby_;
}
void CMsgSignOutBotInfo::set_created_lobby(bool value) {
  set_has_created_lobby();
  created_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutBotInfo.created_lobby)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
bool CMsgSignOutBotInfo::has_bot_difficulty_dire() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSignOutBotInfo::set_has_bot_difficulty_dire() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSignOutBotInfo::clear_has_bot_difficulty_dire() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSignOutBotInfo::clear_bot_difficulty_dire() {
  bot_difficulty_dire_ = 0;
  clear_has_bot_difficulty_dire();
}
::proto::dota::DOTABotDifficulty CMsgSignOutBotInfo::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutBotInfo.bot_difficulty_dire)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_dire_);
}
void CMsgSignOutBotInfo::set_bot_difficulty_dire(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_dire();
  bot_difficulty_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutBotInfo.bot_difficulty_dire)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutPlayerStats::kAccountIdFieldNumber;
const int CMsgSignOutPlayerStats::kMatchIdFieldNumber;
const int CMsgSignOutPlayerStats::kRankFieldNumber;
const int CMsgSignOutPlayerStats::kHeroIdFieldNumber;
const int CMsgSignOutPlayerStats::kRampagesFieldNumber;
const int CMsgSignOutPlayerStats::kTripleKillsFieldNumber;
const int CMsgSignOutPlayerStats::kFirstBloodClaimedFieldNumber;
const int CMsgSignOutPlayerStats::kFirstBloodGivenFieldNumber;
const int CMsgSignOutPlayerStats::kCouriersKilledFieldNumber;
const int CMsgSignOutPlayerStats::kAegisesSnatchedFieldNumber;
const int CMsgSignOutPlayerStats::kCheesesEatenFieldNumber;
const int CMsgSignOutPlayerStats::kCreepsStackedFieldNumber;
const int CMsgSignOutPlayerStats::kFightScoreFieldNumber;
const int CMsgSignOutPlayerStats::kFarmScoreFieldNumber;
const int CMsgSignOutPlayerStats::kSupportScoreFieldNumber;
const int CMsgSignOutPlayerStats::kPushScoreFieldNumber;
const int CMsgSignOutPlayerStats::kKillsFieldNumber;
const int CMsgSignOutPlayerStats::kDeathsFieldNumber;
const int CMsgSignOutPlayerStats::kAssistsFieldNumber;
const int CMsgSignOutPlayerStats::kLastHitsFieldNumber;
const int CMsgSignOutPlayerStats::kDeniesFieldNumber;
const int CMsgSignOutPlayerStats::kGpmFieldNumber;
const int CMsgSignOutPlayerStats::kXppmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutPlayerStats::CMsgSignOutPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutPlayerStats)
}
CMsgSignOutPlayerStats::CMsgSignOutPlayerStats(const CMsgSignOutPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&xppm_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(xppm_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutPlayerStats)
}

void CMsgSignOutPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&xppm_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(xppm_));
}

CMsgSignOutPlayerStats::~CMsgSignOutPlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutPlayerStats)
  SharedDtor();
}

void CMsgSignOutPlayerStats::SharedDtor() {
}

void CMsgSignOutPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutPlayerStats::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutPlayerStats& CMsgSignOutPlayerStats::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutPlayerStats* CMsgSignOutPlayerStats::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutPlayerStats* n = new CMsgSignOutPlayerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutPlayerStats)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&first_blood_given_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(first_blood_given_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&couriers_killed_, 0, reinterpret_cast<char*>(&push_score_) -
      reinterpret_cast<char*>(&couriers_killed_) + sizeof(push_score_));
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ::memset(&kills_, 0, reinterpret_cast<char*>(&xppm_) -
      reinterpret_cast<char*>(&kills_) + sizeof(xppm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rampages = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_rampages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rampages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 triple_kills = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_triple_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triple_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood_claimed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_first_blood_claimed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_claimed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood_given = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_first_blood_given();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_given_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 couriers_killed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_couriers_killed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &couriers_killed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 aegises_snatched = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_aegises_snatched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aegises_snatched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cheeses_eaten = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_cheeses_eaten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheeses_eaten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creeps_stacked = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_creeps_stacked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creeps_stacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fight_score = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_fight_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fight_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float farm_score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_farm_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &farm_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float support_score = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_support_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &support_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float push_score = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_push_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &push_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_denies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gpm = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_gpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xppm = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          set_has_xppm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutPlayerStats)
  return false;
#undef DO_
}

void CMsgSignOutPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional uint32 rank = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  // optional uint32 rampages = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rampages(), output);
  }

  // optional uint32 triple_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->triple_kills(), output);
  }

  // optional uint32 first_blood_claimed = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->first_blood_claimed(), output);
  }

  // optional uint32 first_blood_given = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->first_blood_given(), output);
  }

  // optional uint32 couriers_killed = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->couriers_killed(), output);
  }

  // optional uint32 aegises_snatched = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->aegises_snatched(), output);
  }

  // optional uint32 cheeses_eaten = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cheeses_eaten(), output);
  }

  // optional uint32 creeps_stacked = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->creeps_stacked(), output);
  }

  // optional float fight_score = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fight_score(), output);
  }

  // optional float farm_score = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->farm_score(), output);
  }

  // optional float support_score = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->support_score(), output);
  }

  // optional float push_score = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->push_score(), output);
  }

  // optional uint32 kills = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->kills(), output);
  }

  // optional uint32 deaths = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->deaths(), output);
  }

  // optional uint32 assists = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->assists(), output);
  }

  // optional uint32 last_hits = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->last_hits(), output);
  }

  // optional uint32 denies = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->denies(), output);
  }

  // optional float gpm = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->gpm(), output);
  }

  // optional float xppm = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->xppm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutPlayerStats)
}

::google::protobuf::uint8* CMsgSignOutPlayerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional uint32 rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  // optional uint32 rampages = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rampages(), target);
  }

  // optional uint32 triple_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->triple_kills(), target);
  }

  // optional uint32 first_blood_claimed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->first_blood_claimed(), target);
  }

  // optional uint32 first_blood_given = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->first_blood_given(), target);
  }

  // optional uint32 couriers_killed = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->couriers_killed(), target);
  }

  // optional uint32 aegises_snatched = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->aegises_snatched(), target);
  }

  // optional uint32 cheeses_eaten = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cheeses_eaten(), target);
  }

  // optional uint32 creeps_stacked = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->creeps_stacked(), target);
  }

  // optional float fight_score = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->fight_score(), target);
  }

  // optional float farm_score = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->farm_score(), target);
  }

  // optional float support_score = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->support_score(), target);
  }

  // optional float push_score = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->push_score(), target);
  }

  // optional uint32 kills = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->kills(), target);
  }

  // optional uint32 deaths = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->deaths(), target);
  }

  // optional uint32 assists = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->assists(), target);
  }

  // optional uint32 last_hits = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->last_hits(), target);
  }

  // optional uint32 denies = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->denies(), target);
  }

  // optional float gpm = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->gpm(), target);
  }

  // optional float xppm = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->xppm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutPlayerStats)
  return target;
}

size_t CMsgSignOutPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional int32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 rampages = 5;
    if (has_rampages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rampages());
    }

    // optional uint32 triple_kills = 6;
    if (has_triple_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triple_kills());
    }

    // optional uint32 first_blood_claimed = 7;
    if (has_first_blood_claimed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_claimed());
    }

    // optional uint32 first_blood_given = 8;
    if (has_first_blood_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_given());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 couriers_killed = 9;
    if (has_couriers_killed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->couriers_killed());
    }

    // optional uint32 aegises_snatched = 10;
    if (has_aegises_snatched()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aegises_snatched());
    }

    // optional uint32 cheeses_eaten = 11;
    if (has_cheeses_eaten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheeses_eaten());
    }

    // optional uint32 creeps_stacked = 12;
    if (has_creeps_stacked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creeps_stacked());
    }

    // optional float fight_score = 13;
    if (has_fight_score()) {
      total_size += 1 + 4;
    }

    // optional float farm_score = 14;
    if (has_farm_score()) {
      total_size += 1 + 4;
    }

    // optional float support_score = 15;
    if (has_support_score()) {
      total_size += 1 + 4;
    }

    // optional float push_score = 16;
    if (has_push_score()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 kills = 17;
    if (has_kills()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 18;
    if (has_deaths()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 19;
    if (has_assists()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 last_hits = 20;
    if (has_last_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 21;
    if (has_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional float gpm = 22;
    if (has_gpm()) {
      total_size += 2 + 4;
    }

    // optional float xppm = 23;
    if (has_xppm()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutPlayerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutPlayerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgSignOutPlayerStats::MergeFrom(const CMsgSignOutPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      rampages_ = from.rampages_;
    }
    if (cached_has_bits & 0x00000020u) {
      triple_kills_ = from.triple_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      first_blood_claimed_ = from.first_blood_claimed_;
    }
    if (cached_has_bits & 0x00000080u) {
      first_blood_given_ = from.first_blood_given_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      couriers_killed_ = from.couriers_killed_;
    }
    if (cached_has_bits & 0x00000200u) {
      aegises_snatched_ = from.aegises_snatched_;
    }
    if (cached_has_bits & 0x00000400u) {
      cheeses_eaten_ = from.cheeses_eaten_;
    }
    if (cached_has_bits & 0x00000800u) {
      creeps_stacked_ = from.creeps_stacked_;
    }
    if (cached_has_bits & 0x00001000u) {
      fight_score_ = from.fight_score_;
    }
    if (cached_has_bits & 0x00002000u) {
      farm_score_ = from.farm_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      support_score_ = from.support_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      push_score_ = from.push_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00020000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00040000u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00080000u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00100000u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00200000u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00400000u) {
      xppm_ = from.xppm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutPlayerStats::CopyFrom(const CMsgSignOutPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutPlayerStats::IsInitialized() const {
  return true;
}

void CMsgSignOutPlayerStats::Swap(CMsgSignOutPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutPlayerStats::InternalSwap(CMsgSignOutPlayerStats* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(rank_, other->rank_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(rampages_, other->rampages_);
  std::swap(triple_kills_, other->triple_kills_);
  std::swap(first_blood_claimed_, other->first_blood_claimed_);
  std::swap(first_blood_given_, other->first_blood_given_);
  std::swap(couriers_killed_, other->couriers_killed_);
  std::swap(aegises_snatched_, other->aegises_snatched_);
  std::swap(cheeses_eaten_, other->cheeses_eaten_);
  std::swap(creeps_stacked_, other->creeps_stacked_);
  std::swap(fight_score_, other->fight_score_);
  std::swap(farm_score_, other->farm_score_);
  std::swap(support_score_, other->support_score_);
  std::swap(push_score_, other->push_score_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(denies_, other->denies_);
  std::swap(gpm_, other->gpm_);
  std::swap(xppm_, other->xppm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutPlayerStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutPlayerStats

// optional int32 account_id = 1;
bool CMsgSignOutPlayerStats::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutPlayerStats::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutPlayerStats::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutPlayerStats::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 CMsgSignOutPlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.account_id)
  return account_id_;
}
void CMsgSignOutPlayerStats::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.account_id)
}

// optional uint64 match_id = 2;
bool CMsgSignOutPlayerStats::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutPlayerStats::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutPlayerStats::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutPlayerStats::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgSignOutPlayerStats::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.match_id)
  return match_id_;
}
void CMsgSignOutPlayerStats::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.match_id)
}

// optional uint32 rank = 3;
bool CMsgSignOutPlayerStats::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSignOutPlayerStats::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSignOutPlayerStats::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSignOutPlayerStats::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.rank)
  return rank_;
}
void CMsgSignOutPlayerStats::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.rank)
}

// optional uint32 hero_id = 4;
bool CMsgSignOutPlayerStats::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSignOutPlayerStats::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSignOutPlayerStats::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSignOutPlayerStats::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.hero_id)
  return hero_id_;
}
void CMsgSignOutPlayerStats::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.hero_id)
}

// optional uint32 rampages = 5;
bool CMsgSignOutPlayerStats::has_rampages() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSignOutPlayerStats::set_has_rampages() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSignOutPlayerStats::clear_has_rampages() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSignOutPlayerStats::clear_rampages() {
  rampages_ = 0u;
  clear_has_rampages();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::rampages() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.rampages)
  return rampages_;
}
void CMsgSignOutPlayerStats::set_rampages(::google::protobuf::uint32 value) {
  set_has_rampages();
  rampages_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.rampages)
}

// optional uint32 triple_kills = 6;
bool CMsgSignOutPlayerStats::has_triple_kills() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSignOutPlayerStats::set_has_triple_kills() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSignOutPlayerStats::clear_has_triple_kills() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSignOutPlayerStats::clear_triple_kills() {
  triple_kills_ = 0u;
  clear_has_triple_kills();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::triple_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.triple_kills)
  return triple_kills_;
}
void CMsgSignOutPlayerStats::set_triple_kills(::google::protobuf::uint32 value) {
  set_has_triple_kills();
  triple_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.triple_kills)
}

// optional uint32 first_blood_claimed = 7;
bool CMsgSignOutPlayerStats::has_first_blood_claimed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgSignOutPlayerStats::set_has_first_blood_claimed() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgSignOutPlayerStats::clear_has_first_blood_claimed() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgSignOutPlayerStats::clear_first_blood_claimed() {
  first_blood_claimed_ = 0u;
  clear_has_first_blood_claimed();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::first_blood_claimed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.first_blood_claimed)
  return first_blood_claimed_;
}
void CMsgSignOutPlayerStats::set_first_blood_claimed(::google::protobuf::uint32 value) {
  set_has_first_blood_claimed();
  first_blood_claimed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.first_blood_claimed)
}

// optional uint32 first_blood_given = 8;
bool CMsgSignOutPlayerStats::has_first_blood_given() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgSignOutPlayerStats::set_has_first_blood_given() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgSignOutPlayerStats::clear_has_first_blood_given() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgSignOutPlayerStats::clear_first_blood_given() {
  first_blood_given_ = 0u;
  clear_has_first_blood_given();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::first_blood_given() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.first_blood_given)
  return first_blood_given_;
}
void CMsgSignOutPlayerStats::set_first_blood_given(::google::protobuf::uint32 value) {
  set_has_first_blood_given();
  first_blood_given_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.first_blood_given)
}

// optional uint32 couriers_killed = 9;
bool CMsgSignOutPlayerStats::has_couriers_killed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgSignOutPlayerStats::set_has_couriers_killed() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgSignOutPlayerStats::clear_has_couriers_killed() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgSignOutPlayerStats::clear_couriers_killed() {
  couriers_killed_ = 0u;
  clear_has_couriers_killed();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::couriers_killed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.couriers_killed)
  return couriers_killed_;
}
void CMsgSignOutPlayerStats::set_couriers_killed(::google::protobuf::uint32 value) {
  set_has_couriers_killed();
  couriers_killed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.couriers_killed)
}

// optional uint32 aegises_snatched = 10;
bool CMsgSignOutPlayerStats::has_aegises_snatched() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgSignOutPlayerStats::set_has_aegises_snatched() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgSignOutPlayerStats::clear_has_aegises_snatched() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgSignOutPlayerStats::clear_aegises_snatched() {
  aegises_snatched_ = 0u;
  clear_has_aegises_snatched();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::aegises_snatched() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.aegises_snatched)
  return aegises_snatched_;
}
void CMsgSignOutPlayerStats::set_aegises_snatched(::google::protobuf::uint32 value) {
  set_has_aegises_snatched();
  aegises_snatched_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.aegises_snatched)
}

// optional uint32 cheeses_eaten = 11;
bool CMsgSignOutPlayerStats::has_cheeses_eaten() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgSignOutPlayerStats::set_has_cheeses_eaten() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgSignOutPlayerStats::clear_has_cheeses_eaten() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgSignOutPlayerStats::clear_cheeses_eaten() {
  cheeses_eaten_ = 0u;
  clear_has_cheeses_eaten();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::cheeses_eaten() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.cheeses_eaten)
  return cheeses_eaten_;
}
void CMsgSignOutPlayerStats::set_cheeses_eaten(::google::protobuf::uint32 value) {
  set_has_cheeses_eaten();
  cheeses_eaten_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.cheeses_eaten)
}

// optional uint32 creeps_stacked = 12;
bool CMsgSignOutPlayerStats::has_creeps_stacked() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgSignOutPlayerStats::set_has_creeps_stacked() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgSignOutPlayerStats::clear_has_creeps_stacked() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgSignOutPlayerStats::clear_creeps_stacked() {
  creeps_stacked_ = 0u;
  clear_has_creeps_stacked();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::creeps_stacked() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.creeps_stacked)
  return creeps_stacked_;
}
void CMsgSignOutPlayerStats::set_creeps_stacked(::google::protobuf::uint32 value) {
  set_has_creeps_stacked();
  creeps_stacked_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.creeps_stacked)
}

// optional float fight_score = 13;
bool CMsgSignOutPlayerStats::has_fight_score() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_fight_score() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgSignOutPlayerStats::clear_has_fight_score() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgSignOutPlayerStats::clear_fight_score() {
  fight_score_ = 0;
  clear_has_fight_score();
}
float CMsgSignOutPlayerStats::fight_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.fight_score)
  return fight_score_;
}
void CMsgSignOutPlayerStats::set_fight_score(float value) {
  set_has_fight_score();
  fight_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.fight_score)
}

// optional float farm_score = 14;
bool CMsgSignOutPlayerStats::has_farm_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_farm_score() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgSignOutPlayerStats::clear_has_farm_score() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgSignOutPlayerStats::clear_farm_score() {
  farm_score_ = 0;
  clear_has_farm_score();
}
float CMsgSignOutPlayerStats::farm_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.farm_score)
  return farm_score_;
}
void CMsgSignOutPlayerStats::set_farm_score(float value) {
  set_has_farm_score();
  farm_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.farm_score)
}

// optional float support_score = 15;
bool CMsgSignOutPlayerStats::has_support_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_support_score() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgSignOutPlayerStats::clear_has_support_score() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgSignOutPlayerStats::clear_support_score() {
  support_score_ = 0;
  clear_has_support_score();
}
float CMsgSignOutPlayerStats::support_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.support_score)
  return support_score_;
}
void CMsgSignOutPlayerStats::set_support_score(float value) {
  set_has_support_score();
  support_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.support_score)
}

// optional float push_score = 16;
bool CMsgSignOutPlayerStats::has_push_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_push_score() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgSignOutPlayerStats::clear_has_push_score() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgSignOutPlayerStats::clear_push_score() {
  push_score_ = 0;
  clear_has_push_score();
}
float CMsgSignOutPlayerStats::push_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.push_score)
  return push_score_;
}
void CMsgSignOutPlayerStats::set_push_score(float value) {
  set_has_push_score();
  push_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.push_score)
}

// optional uint32 kills = 17;
bool CMsgSignOutPlayerStats::has_kills() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_kills() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgSignOutPlayerStats::clear_has_kills() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgSignOutPlayerStats::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.kills)
  return kills_;
}
void CMsgSignOutPlayerStats::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.kills)
}

// optional uint32 deaths = 18;
bool CMsgSignOutPlayerStats::has_deaths() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_deaths() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgSignOutPlayerStats::clear_has_deaths() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgSignOutPlayerStats::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.deaths)
  return deaths_;
}
void CMsgSignOutPlayerStats::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.deaths)
}

// optional uint32 assists = 19;
bool CMsgSignOutPlayerStats::has_assists() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_assists() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgSignOutPlayerStats::clear_has_assists() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgSignOutPlayerStats::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.assists)
  return assists_;
}
void CMsgSignOutPlayerStats::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.assists)
}

// optional uint32 last_hits = 20;
bool CMsgSignOutPlayerStats::has_last_hits() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_last_hits() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgSignOutPlayerStats::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgSignOutPlayerStats::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.last_hits)
  return last_hits_;
}
void CMsgSignOutPlayerStats::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.last_hits)
}

// optional uint32 denies = 21;
bool CMsgSignOutPlayerStats::has_denies() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_denies() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgSignOutPlayerStats::clear_has_denies() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgSignOutPlayerStats::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
::google::protobuf::uint32 CMsgSignOutPlayerStats::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.denies)
  return denies_;
}
void CMsgSignOutPlayerStats::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.denies)
}

// optional float gpm = 22;
bool CMsgSignOutPlayerStats::has_gpm() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_gpm() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgSignOutPlayerStats::clear_has_gpm() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgSignOutPlayerStats::clear_gpm() {
  gpm_ = 0;
  clear_has_gpm();
}
float CMsgSignOutPlayerStats::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.gpm)
  return gpm_;
}
void CMsgSignOutPlayerStats::set_gpm(float value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.gpm)
}

// optional float xppm = 23;
bool CMsgSignOutPlayerStats::has_xppm() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgSignOutPlayerStats::set_has_xppm() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgSignOutPlayerStats::clear_has_xppm() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgSignOutPlayerStats::clear_xppm() {
  xppm_ = 0;
  clear_has_xppm();
}
float CMsgSignOutPlayerStats::xppm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutPlayerStats.xppm)
  return xppm_;
}
void CMsgSignOutPlayerStats::set_xppm(float value) {
  set_has_xppm();
  xppm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutPlayerStats.xppm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kAccountIdFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kPingsFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kMaxPingsPerIntervalFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kTeammatePingsFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kMaxTeammatePingsPerIntervalFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kTeamChatMessagesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kAllChatMessagesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kChatWheelMessagesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kPausesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kUnpausesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kLinesDrawnFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kVoiceChatSecondsFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kChatMutesFieldNumber;
const int CMsgSignOutCommunicationSummary_PlayerCommunication::kVoiceMutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
}
CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication(const CMsgSignOutCommunicationSummary_PlayerCommunication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&voice_mutes_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(voice_mutes_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&voice_mutes_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(voice_mutes_));
}

CMsgSignOutCommunicationSummary_PlayerCommunication::~CMsgSignOutCommunicationSummary_PlayerCommunication() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  SharedDtor();
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedDtor() {
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutCommunicationSummary_PlayerCommunication::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutCommunicationSummary_PlayerCommunication& CMsgSignOutCommunicationSummary_PlayerCommunication::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutCommunicationSummary_PlayerCommunication* CMsgSignOutCommunicationSummary_PlayerCommunication::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutCommunicationSummary_PlayerCommunication* n = new CMsgSignOutCommunicationSummary_PlayerCommunication;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&chat_wheel_messages_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(chat_wheel_messages_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&pauses_, 0, reinterpret_cast<char*>(&voice_mutes_) -
      reinterpret_cast<char*>(&pauses_) + sizeof(voice_mutes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutCommunicationSummary_PlayerCommunication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_pings_per_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max_pings_per_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_pings_per_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teammate_pings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_teammate_pings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammate_pings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_teammate_pings_per_interval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_max_teammate_pings_per_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_teammate_pings_per_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_chat_messages = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_team_chat_messages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_chat_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 all_chat_messages = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_all_chat_messages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_chat_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chat_wheel_messages = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_chat_wheel_messages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_wheel_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pauses = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pauses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pauses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unpauses = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_unpauses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unpauses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lines_drawn = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_lines_drawn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lines_drawn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 voice_chat_seconds = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_voice_chat_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voice_chat_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chat_mutes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_chat_mutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_mutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 voice_mutes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_voice_mutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voice_mutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  return false;
#undef DO_
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 pings = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pings(), output);
  }

  // optional uint32 max_pings_per_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_pings_per_interval(), output);
  }

  // optional uint32 teammate_pings = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teammate_pings(), output);
  }

  // optional uint32 max_teammate_pings_per_interval = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_teammate_pings_per_interval(), output);
  }

  // optional uint32 team_chat_messages = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_chat_messages(), output);
  }

  // optional uint32 all_chat_messages = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->all_chat_messages(), output);
  }

  // optional uint32 chat_wheel_messages = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->chat_wheel_messages(), output);
  }

  // optional uint32 pauses = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pauses(), output);
  }

  // optional uint32 unpauses = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->unpauses(), output);
  }

  // optional uint32 lines_drawn = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lines_drawn(), output);
  }

  // optional uint32 voice_chat_seconds = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->voice_chat_seconds(), output);
  }

  // optional uint32 chat_mutes = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->chat_mutes(), output);
  }

  // optional uint32 voice_mutes = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->voice_mutes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
}

::google::protobuf::uint8* CMsgSignOutCommunicationSummary_PlayerCommunication::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 pings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pings(), target);
  }

  // optional uint32 max_pings_per_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_pings_per_interval(), target);
  }

  // optional uint32 teammate_pings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teammate_pings(), target);
  }

  // optional uint32 max_teammate_pings_per_interval = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_teammate_pings_per_interval(), target);
  }

  // optional uint32 team_chat_messages = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_chat_messages(), target);
  }

  // optional uint32 all_chat_messages = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->all_chat_messages(), target);
  }

  // optional uint32 chat_wheel_messages = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->chat_wheel_messages(), target);
  }

  // optional uint32 pauses = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pauses(), target);
  }

  // optional uint32 unpauses = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->unpauses(), target);
  }

  // optional uint32 lines_drawn = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lines_drawn(), target);
  }

  // optional uint32 voice_chat_seconds = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->voice_chat_seconds(), target);
  }

  // optional uint32 chat_mutes = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->chat_mutes(), target);
  }

  // optional uint32 voice_mutes = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->voice_mutes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  return target;
}

size_t CMsgSignOutCommunicationSummary_PlayerCommunication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 pings = 2;
    if (has_pings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pings());
    }

    // optional uint32 max_pings_per_interval = 3;
    if (has_max_pings_per_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_pings_per_interval());
    }

    // optional uint32 teammate_pings = 4;
    if (has_teammate_pings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammate_pings());
    }

    // optional uint32 max_teammate_pings_per_interval = 5;
    if (has_max_teammate_pings_per_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_teammate_pings_per_interval());
    }

    // optional uint32 team_chat_messages = 6;
    if (has_team_chat_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_chat_messages());
    }

    // optional uint32 all_chat_messages = 7;
    if (has_all_chat_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_chat_messages());
    }

    // optional uint32 chat_wheel_messages = 8;
    if (has_chat_wheel_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_wheel_messages());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 pauses = 9;
    if (has_pauses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pauses());
    }

    // optional uint32 unpauses = 10;
    if (has_unpauses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unpauses());
    }

    // optional uint32 lines_drawn = 11;
    if (has_lines_drawn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lines_drawn());
    }

    // optional uint32 voice_chat_seconds = 12;
    if (has_voice_chat_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voice_chat_seconds());
    }

    // optional uint32 chat_mutes = 13;
    if (has_chat_mutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_mutes());
    }

    // optional uint32 voice_mutes = 14;
    if (has_voice_mutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voice_mutes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunicationSummary_PlayerCommunication* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutCommunicationSummary_PlayerCommunication>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::MergeFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pings_ = from.pings_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_pings_per_interval_ = from.max_pings_per_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      teammate_pings_ = from.teammate_pings_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_teammate_pings_per_interval_ = from.max_teammate_pings_per_interval_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_chat_messages_ = from.team_chat_messages_;
    }
    if (cached_has_bits & 0x00000040u) {
      all_chat_messages_ = from.all_chat_messages_;
    }
    if (cached_has_bits & 0x00000080u) {
      chat_wheel_messages_ = from.chat_wheel_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      pauses_ = from.pauses_;
    }
    if (cached_has_bits & 0x00000200u) {
      unpauses_ = from.unpauses_;
    }
    if (cached_has_bits & 0x00000400u) {
      lines_drawn_ = from.lines_drawn_;
    }
    if (cached_has_bits & 0x00000800u) {
      voice_chat_seconds_ = from.voice_chat_seconds_;
    }
    if (cached_has_bits & 0x00001000u) {
      chat_mutes_ = from.chat_mutes_;
    }
    if (cached_has_bits & 0x00002000u) {
      voice_mutes_ = from.voice_mutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::CopyFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary_PlayerCommunication::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::Swap(CMsgSignOutCommunicationSummary_PlayerCommunication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::InternalSwap(CMsgSignOutCommunicationSummary_PlayerCommunication* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(pings_, other->pings_);
  std::swap(max_pings_per_interval_, other->max_pings_per_interval_);
  std::swap(teammate_pings_, other->teammate_pings_);
  std::swap(max_teammate_pings_per_interval_, other->max_teammate_pings_per_interval_);
  std::swap(team_chat_messages_, other->team_chat_messages_);
  std::swap(all_chat_messages_, other->all_chat_messages_);
  std::swap(chat_wheel_messages_, other->chat_wheel_messages_);
  std::swap(pauses_, other->pauses_);
  std::swap(unpauses_, other->unpauses_);
  std::swap(lines_drawn_, other->lines_drawn_);
  std::swap(voice_chat_seconds_, other->voice_chat_seconds_);
  std::swap(chat_mutes_, other->chat_mutes_);
  std::swap(voice_mutes_, other->voice_mutes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutCommunicationSummary_PlayerCommunication::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutCommunicationSummary_PlayerCommunication

// optional uint32 account_id = 1;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.account_id)
  return account_id_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.account_id)
}

// optional uint32 pings = 2;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_pings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_pings() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_pings() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_pings() {
  pings_ = 0u;
  clear_has_pings();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::pings() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.pings)
  return pings_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_pings(::google::protobuf::uint32 value) {
  set_has_pings();
  pings_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.pings)
}

// optional uint32 max_pings_per_interval = 3;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_max_pings_per_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_max_pings_per_interval() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_max_pings_per_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_max_pings_per_interval() {
  max_pings_per_interval_ = 0u;
  clear_has_max_pings_per_interval();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::max_pings_per_interval() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.max_pings_per_interval)
  return max_pings_per_interval_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_max_pings_per_interval(::google::protobuf::uint32 value) {
  set_has_max_pings_per_interval();
  max_pings_per_interval_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.max_pings_per_interval)
}

// optional uint32 teammate_pings = 4;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_teammate_pings() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_teammate_pings() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_teammate_pings() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_teammate_pings() {
  teammate_pings_ = 0u;
  clear_has_teammate_pings();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::teammate_pings() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.teammate_pings)
  return teammate_pings_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_teammate_pings(::google::protobuf::uint32 value) {
  set_has_teammate_pings();
  teammate_pings_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.teammate_pings)
}

// optional uint32 max_teammate_pings_per_interval = 5;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_max_teammate_pings_per_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_max_teammate_pings_per_interval() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_max_teammate_pings_per_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_max_teammate_pings_per_interval() {
  max_teammate_pings_per_interval_ = 0u;
  clear_has_max_teammate_pings_per_interval();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::max_teammate_pings_per_interval() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.max_teammate_pings_per_interval)
  return max_teammate_pings_per_interval_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_max_teammate_pings_per_interval(::google::protobuf::uint32 value) {
  set_has_max_teammate_pings_per_interval();
  max_teammate_pings_per_interval_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.max_teammate_pings_per_interval)
}

// optional uint32 team_chat_messages = 6;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_team_chat_messages() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_team_chat_messages() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_team_chat_messages() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_team_chat_messages() {
  team_chat_messages_ = 0u;
  clear_has_team_chat_messages();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::team_chat_messages() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.team_chat_messages)
  return team_chat_messages_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_team_chat_messages(::google::protobuf::uint32 value) {
  set_has_team_chat_messages();
  team_chat_messages_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.team_chat_messages)
}

// optional uint32 all_chat_messages = 7;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_all_chat_messages() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_all_chat_messages() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_all_chat_messages() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_all_chat_messages() {
  all_chat_messages_ = 0u;
  clear_has_all_chat_messages();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::all_chat_messages() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.all_chat_messages)
  return all_chat_messages_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_all_chat_messages(::google::protobuf::uint32 value) {
  set_has_all_chat_messages();
  all_chat_messages_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.all_chat_messages)
}

// optional uint32 chat_wheel_messages = 8;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_chat_wheel_messages() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_chat_wheel_messages() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_chat_wheel_messages() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_chat_wheel_messages() {
  chat_wheel_messages_ = 0u;
  clear_has_chat_wheel_messages();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::chat_wheel_messages() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.chat_wheel_messages)
  return chat_wheel_messages_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_chat_wheel_messages(::google::protobuf::uint32 value) {
  set_has_chat_wheel_messages();
  chat_wheel_messages_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.chat_wheel_messages)
}

// optional uint32 pauses = 9;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_pauses() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_pauses() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_pauses() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_pauses() {
  pauses_ = 0u;
  clear_has_pauses();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::pauses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.pauses)
  return pauses_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_pauses(::google::protobuf::uint32 value) {
  set_has_pauses();
  pauses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.pauses)
}

// optional uint32 unpauses = 10;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_unpauses() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_unpauses() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_unpauses() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_unpauses() {
  unpauses_ = 0u;
  clear_has_unpauses();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::unpauses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.unpauses)
  return unpauses_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_unpauses(::google::protobuf::uint32 value) {
  set_has_unpauses();
  unpauses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.unpauses)
}

// optional uint32 lines_drawn = 11;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_lines_drawn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_lines_drawn() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_lines_drawn() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_lines_drawn() {
  lines_drawn_ = 0u;
  clear_has_lines_drawn();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::lines_drawn() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.lines_drawn)
  return lines_drawn_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_lines_drawn(::google::protobuf::uint32 value) {
  set_has_lines_drawn();
  lines_drawn_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.lines_drawn)
}

// optional uint32 voice_chat_seconds = 12;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_voice_chat_seconds() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_voice_chat_seconds() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_voice_chat_seconds() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_voice_chat_seconds() {
  voice_chat_seconds_ = 0u;
  clear_has_voice_chat_seconds();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::voice_chat_seconds() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.voice_chat_seconds)
  return voice_chat_seconds_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_voice_chat_seconds(::google::protobuf::uint32 value) {
  set_has_voice_chat_seconds();
  voice_chat_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.voice_chat_seconds)
}

// optional uint32 chat_mutes = 13;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_chat_mutes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_chat_mutes() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_chat_mutes() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_chat_mutes() {
  chat_mutes_ = 0u;
  clear_has_chat_mutes();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::chat_mutes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.chat_mutes)
  return chat_mutes_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_chat_mutes(::google::protobuf::uint32 value) {
  set_has_chat_mutes();
  chat_mutes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.chat_mutes)
}

// optional uint32 voice_mutes = 14;
bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_voice_mutes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_has_voice_mutes() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_has_voice_mutes() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_voice_mutes() {
  voice_mutes_ = 0u;
  clear_has_voice_mutes();
}
::google::protobuf::uint32 CMsgSignOutCommunicationSummary_PlayerCommunication::voice_mutes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.voice_mutes)
  return voice_mutes_;
}
void CMsgSignOutCommunicationSummary_PlayerCommunication::set_voice_mutes(::google::protobuf::uint32 value) {
  set_has_voice_mutes();
  voice_mutes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication.voice_mutes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutCommunicationSummary::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutCommunicationSummary)
}
CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary(const CMsgSignOutCommunicationSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutCommunicationSummary)
}

void CMsgSignOutCommunicationSummary::SharedCtor() {
  _cached_size_ = 0;
}

CMsgSignOutCommunicationSummary::~CMsgSignOutCommunicationSummary() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutCommunicationSummary)
  SharedDtor();
}

void CMsgSignOutCommunicationSummary::SharedDtor() {
}

void CMsgSignOutCommunicationSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutCommunicationSummary::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutCommunicationSummary& CMsgSignOutCommunicationSummary::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutCommunicationSummary* CMsgSignOutCommunicationSummary::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutCommunicationSummary* n = new CMsgSignOutCommunicationSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutCommunicationSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutCommunicationSummary)
  players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutCommunicationSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutCommunicationSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutCommunicationSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutCommunicationSummary)
  return false;
#undef DO_
}

void CMsgSignOutCommunicationSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutCommunicationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutCommunicationSummary)
}

::google::protobuf::uint8* CMsgSignOutCommunicationSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutCommunicationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutCommunicationSummary)
  return target;
}

size_t CMsgSignOutCommunicationSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutCommunicationSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutCommunicationSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutCommunicationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunicationSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutCommunicationSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutCommunicationSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutCommunicationSummary)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunicationSummary::MergeFrom(const CMsgSignOutCommunicationSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutCommunicationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void CMsgSignOutCommunicationSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutCommunicationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunicationSummary::CopyFrom(const CMsgSignOutCommunicationSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutCommunicationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary::Swap(CMsgSignOutCommunicationSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutCommunicationSummary::InternalSwap(CMsgSignOutCommunicationSummary* other) {
  players_.InternalSwap(&other->players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutCommunicationSummary::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutCommunicationSummary

// repeated .proto.dota.CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
int CMsgSignOutCommunicationSummary::players_size() const {
  return players_.size();
}
void CMsgSignOutCommunicationSummary::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication& CMsgSignOutCommunicationSummary::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunicationSummary.players)
  return players_.Get(index);
}
::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication* CMsgSignOutCommunicationSummary::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSignOutCommunicationSummary.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication* CMsgSignOutCommunicationSummary::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutCommunicationSummary.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication >*
CMsgSignOutCommunicationSummary::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutCommunicationSummary.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutCommunicationSummary_PlayerCommunication >&
CMsgSignOutCommunicationSummary::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutCommunicationSummary.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kHeroIdFieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgKillsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgDeathsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgAssistsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgGpmX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kAvgXpmX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestKillsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestAssistsX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestGpmX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestXpmX16FieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kWinStreakFieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kBestWinStreakFieldNumber;
const int CMsgGameMatchSignoutResponse_PlayerMetadata::kGamesPlayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
}
CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata(const CMsgGameMatchSignoutResponse_PlayerMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    reinterpret_cast<char*>(&games_played_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(games_played_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hero_id_, 0, reinterpret_cast<char*>(&games_played_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(games_played_));
}

CMsgGameMatchSignoutResponse_PlayerMetadata::~CMsgGameMatchSignoutResponse_PlayerMetadata() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  SharedDtor();
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SharedDtor() {
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse_PlayerMetadata::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignoutResponse_PlayerMetadata& CMsgGameMatchSignoutResponse_PlayerMetadata::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignoutResponse_PlayerMetadata* CMsgGameMatchSignoutResponse_PlayerMetadata::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignoutResponse_PlayerMetadata* n = new CMsgGameMatchSignoutResponse_PlayerMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&hero_id_, 0, reinterpret_cast<char*>(&best_assists_x16_) -
      reinterpret_cast<char*>(&hero_id_) + sizeof(best_assists_x16_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&best_gpm_x16_, 0, reinterpret_cast<char*>(&games_played_) -
      reinterpret_cast<char*>(&best_gpm_x16_) + sizeof(games_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignoutResponse_PlayerMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_kills_x16 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_avg_kills_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_kills_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_deaths_x16 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_avg_deaths_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_deaths_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_assists_x16 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_avg_assists_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_assists_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_gpm_x16 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_avg_gpm_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_gpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_xpm_x16 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_avg_xpm_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_xpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_kills_x16 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_best_kills_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_kills_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_assists_x16 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_best_assists_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_assists_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_gpm_x16 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_best_gpm_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_gpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_xpm_x16 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_best_xpm_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_xpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 win_streak = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_win_streak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_win_streak = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_best_win_streak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_win_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 games_played = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_games_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  return false;
#undef DO_
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 avg_kills_x16 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avg_kills_x16(), output);
  }

  // optional uint32 avg_deaths_x16 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avg_deaths_x16(), output);
  }

  // optional uint32 avg_assists_x16 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avg_assists_x16(), output);
  }

  // optional uint32 avg_gpm_x16 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avg_gpm_x16(), output);
  }

  // optional uint32 avg_xpm_x16 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->avg_xpm_x16(), output);
  }

  // optional uint32 best_kills_x16 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->best_kills_x16(), output);
  }

  // optional uint32 best_assists_x16 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->best_assists_x16(), output);
  }

  // optional uint32 best_gpm_x16 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->best_gpm_x16(), output);
  }

  // optional uint32 best_xpm_x16 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->best_xpm_x16(), output);
  }

  // optional uint32 win_streak = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->win_streak(), output);
  }

  // optional uint32 best_win_streak = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->best_win_streak(), output);
  }

  // optional uint32 games_played = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->games_played(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
}

::google::protobuf::uint8* CMsgGameMatchSignoutResponse_PlayerMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 avg_kills_x16 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->win_streak(), target);
  }

  // optional uint32 best_win_streak = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->best_win_streak(), target);
  }

  // optional uint32 games_played = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->games_played(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  return target;
}

size_t CMsgGameMatchSignoutResponse_PlayerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 avg_kills_x16 = 2;
    if (has_avg_kills_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 3;
    if (has_avg_deaths_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 4;
    if (has_avg_assists_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 5;
    if (has_avg_gpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 6;
    if (has_avg_xpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 7;
    if (has_best_kills_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_kills_x16());
    }

    // optional uint32 best_assists_x16 = 8;
    if (has_best_assists_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_assists_x16());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 best_gpm_x16 = 9;
    if (has_best_gpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 10;
    if (has_best_xpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_xpm_x16());
    }

    // optional uint32 win_streak = 11;
    if (has_win_streak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_streak());
    }

    // optional uint32 best_win_streak = 12;
    if (has_best_win_streak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_win_streak());
    }

    // optional uint32 games_played = 13;
    if (has_games_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_played());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse_PlayerMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignoutResponse_PlayerMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::MergeFrom(const CMsgGameMatchSignoutResponse_PlayerMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      avg_kills_x16_ = from.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_deaths_x16_ = from.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_assists_x16_ = from.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_gpm_x16_ = from.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_xpm_x16_ = from.avg_xpm_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      best_kills_x16_ = from.best_kills_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      best_assists_x16_ = from.best_assists_x16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      best_gpm_x16_ = from.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      best_xpm_x16_ = from.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      win_streak_ = from.win_streak_;
    }
    if (cached_has_bits & 0x00000800u) {
      best_win_streak_ = from.best_win_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      games_played_ = from.games_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::CopyFrom(const CMsgGameMatchSignoutResponse_PlayerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse_PlayerMetadata::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::Swap(CMsgGameMatchSignoutResponse_PlayerMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::InternalSwap(CMsgGameMatchSignoutResponse_PlayerMetadata* other) {
  std::swap(hero_id_, other->hero_id_);
  std::swap(avg_kills_x16_, other->avg_kills_x16_);
  std::swap(avg_deaths_x16_, other->avg_deaths_x16_);
  std::swap(avg_assists_x16_, other->avg_assists_x16_);
  std::swap(avg_gpm_x16_, other->avg_gpm_x16_);
  std::swap(avg_xpm_x16_, other->avg_xpm_x16_);
  std::swap(best_kills_x16_, other->best_kills_x16_);
  std::swap(best_assists_x16_, other->best_assists_x16_);
  std::swap(best_gpm_x16_, other->best_gpm_x16_);
  std::swap(best_xpm_x16_, other->best_xpm_x16_);
  std::swap(win_streak_, other->win_streak_);
  std::swap(best_win_streak_, other->best_win_streak_);
  std::swap(games_played_, other->games_played_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignoutResponse_PlayerMetadata::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignoutResponse_PlayerMetadata

// optional uint32 hero_id = 1;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.hero_id)
  return hero_id_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.hero_id)
}

// optional uint32 avg_kills_x16 = 2;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_kills_x16() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_avg_kills_x16() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_avg_kills_x16() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_kills_x16() {
  avg_kills_x16_ = 0u;
  clear_has_avg_kills_x16();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::avg_kills_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_kills_x16)
  return avg_kills_x16_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_kills_x16(::google::protobuf::uint32 value) {
  set_has_avg_kills_x16();
  avg_kills_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_kills_x16)
}

// optional uint32 avg_deaths_x16 = 3;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_deaths_x16() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_avg_deaths_x16() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_avg_deaths_x16() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_deaths_x16() {
  avg_deaths_x16_ = 0u;
  clear_has_avg_deaths_x16();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::avg_deaths_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_deaths_x16)
  return avg_deaths_x16_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_deaths_x16(::google::protobuf::uint32 value) {
  set_has_avg_deaths_x16();
  avg_deaths_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_deaths_x16)
}

// optional uint32 avg_assists_x16 = 4;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_assists_x16() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_avg_assists_x16() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_avg_assists_x16() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_assists_x16() {
  avg_assists_x16_ = 0u;
  clear_has_avg_assists_x16();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::avg_assists_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_assists_x16)
  return avg_assists_x16_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_assists_x16(::google::protobuf::uint32 value) {
  set_has_avg_assists_x16();
  avg_assists_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_assists_x16)
}

// optional uint32 avg_gpm_x16 = 5;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_gpm_x16() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_avg_gpm_x16() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_avg_gpm_x16() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_gpm_x16() {
  avg_gpm_x16_ = 0u;
  clear_has_avg_gpm_x16();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::avg_gpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_gpm_x16)
  return avg_gpm_x16_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_gpm_x16(::google::protobuf::uint32 value) {
  set_has_avg_gpm_x16();
  avg_gpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_gpm_x16)
}

// optional uint32 avg_xpm_x16 = 6;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_xpm_x16() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_avg_xpm_x16() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_avg_xpm_x16() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_xpm_x16() {
  avg_xpm_x16_ = 0u;
  clear_has_avg_xpm_x16();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::avg_xpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_xpm_x16)
  return avg_xpm_x16_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_xpm_x16(::google::protobuf::uint32 value) {
  set_has_avg_xpm_x16();
  avg_xpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.avg_xpm_x16)
}

// optional uint32 best_kills_x16 = 7;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_kills_x16() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_best_kills_x16() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_best_kills_x16() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_kills_x16() {
  best_kills_x16_ = 0u;
  clear_has_best_kills_x16();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::best_kills_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_kills_x16)
  return best_kills_x16_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_kills_x16(::google::protobuf::uint32 value) {
  set_has_best_kills_x16();
  best_kills_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_kills_x16)
}

// optional uint32 best_assists_x16 = 8;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_assists_x16() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_best_assists_x16() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_best_assists_x16() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_assists_x16() {
  best_assists_x16_ = 0u;
  clear_has_best_assists_x16();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::best_assists_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_assists_x16)
  return best_assists_x16_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_assists_x16(::google::protobuf::uint32 value) {
  set_has_best_assists_x16();
  best_assists_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_assists_x16)
}

// optional uint32 best_gpm_x16 = 9;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_gpm_x16() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_best_gpm_x16() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_best_gpm_x16() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_gpm_x16() {
  best_gpm_x16_ = 0u;
  clear_has_best_gpm_x16();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::best_gpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_gpm_x16)
  return best_gpm_x16_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_gpm_x16(::google::protobuf::uint32 value) {
  set_has_best_gpm_x16();
  best_gpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_gpm_x16)
}

// optional uint32 best_xpm_x16 = 10;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_xpm_x16() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_best_xpm_x16() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_best_xpm_x16() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_xpm_x16() {
  best_xpm_x16_ = 0u;
  clear_has_best_xpm_x16();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::best_xpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_xpm_x16)
  return best_xpm_x16_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_xpm_x16(::google::protobuf::uint32 value) {
  set_has_best_xpm_x16();
  best_xpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_xpm_x16)
}

// optional uint32 win_streak = 11;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_win_streak() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_win_streak() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_win_streak() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_win_streak() {
  win_streak_ = 0u;
  clear_has_win_streak();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::win_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.win_streak)
  return win_streak_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_win_streak(::google::protobuf::uint32 value) {
  set_has_win_streak();
  win_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.win_streak)
}

// optional uint32 best_win_streak = 12;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_win_streak() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_best_win_streak() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_best_win_streak() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_win_streak() {
  best_win_streak_ = 0u;
  clear_has_best_win_streak();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::best_win_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_win_streak)
  return best_win_streak_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_win_streak(::google::protobuf::uint32 value) {
  set_has_best_win_streak();
  best_win_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.best_win_streak)
}

// optional uint32 games_played = 13;
bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_games_played() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_has_games_played() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_has_games_played() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_games_played() {
  games_played_ = 0u;
  clear_has_games_played();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse_PlayerMetadata::games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.games_played)
  return games_played_;
}
void CMsgGameMatchSignoutResponse_PlayerMetadata::set_games_played(::google::protobuf::uint32 value) {
  set_has_games_played();
  games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata.games_played)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignoutResponse::kMatchIdFieldNumber;
const int CMsgGameMatchSignoutResponse::kReplaySaltFieldNumber;
const int CMsgGameMatchSignoutResponse::kTimedRewardDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kXpRewardDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kLeagueidFieldNumber;
const int CMsgGameMatchSignoutResponse::kMetadataPrivateKeyFieldNumber;
const int CMsgGameMatchSignoutResponse::kMatchDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kPlayersMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignoutResponse)
}
CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(const CMsgGameMatchSignoutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      timed_reward_details_(from.timed_reward_details_),
      xp_reward_details_(from.xp_reward_details_),
      players_metadata_(from.players_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match_details()) {
    match_details_ = new ::proto::dota::CMsgDOTAMatch(*from.match_details_);
  } else {
    match_details_ = NULL;
  }
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&metadata_private_key_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(metadata_private_key_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignoutResponse)
}

void CMsgGameMatchSignoutResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_details_, 0, reinterpret_cast<char*>(&metadata_private_key_) -
    reinterpret_cast<char*>(&match_details_) + sizeof(metadata_private_key_));
}

CMsgGameMatchSignoutResponse::~CMsgGameMatchSignoutResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignoutResponse)
  SharedDtor();
}

void CMsgGameMatchSignoutResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete match_details_;
  }
}

void CMsgGameMatchSignoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignoutResponse& CMsgGameMatchSignoutResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignoutResponse* CMsgGameMatchSignoutResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignoutResponse* n = new CMsgGameMatchSignoutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignoutResponse)
  timed_reward_details_.Clear();
  xp_reward_details_.Clear();
  players_metadata_.Clear();
  if (has_match_details()) {
    GOOGLE_DCHECK(match_details_ != NULL);
    match_details_->::proto::dota::CMsgDOTAMatch::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&metadata_private_key_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(metadata_private_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 replay_salt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_replay_salt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &replay_salt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timed_reward_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_reward_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_leagueid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 metadata_private_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_metadata_private_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &metadata_private_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatch match_details = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignoutResponse)
  return false;
#undef DO_
}

void CMsgGameMatchSignoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional fixed32 replay_salt = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->replay_salt(), output);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
  for (unsigned int i = 0, n = this->timed_reward_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timed_reward_details(i), output);
  }

  // repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
  for (unsigned int i = 0, n = this->xp_reward_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->xp_reward_details(i), output);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leagueid(), output);
  }

  // optional fixed32 metadata_private_key = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->metadata_private_key(), output);
  }

  // optional .proto.dota.CMsgDOTAMatch match_details = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->match_details_, output);
  }

  // repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  for (unsigned int i = 0, n = this->players_metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->players_metadata(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignoutResponse)
}

::google::protobuf::uint8* CMsgGameMatchSignoutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional fixed32 replay_salt = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->replay_salt(), target);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
  for (unsigned int i = 0, n = this->timed_reward_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->timed_reward_details(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
  for (unsigned int i = 0, n = this->xp_reward_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->xp_reward_details(i), deterministic, target);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leagueid(), target);
  }

  // optional fixed32 metadata_private_key = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->metadata_private_key(), target);
  }

  // optional .proto.dota.CMsgDOTAMatch match_details = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->match_details_, deterministic, target);
  }

  // repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  for (unsigned int i = 0, n = this->players_metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->players_metadata(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignoutResponse)
  return target;
}

size_t CMsgGameMatchSignoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignoutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
  {
    unsigned int count = this->timed_reward_details_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timed_reward_details(i));
    }
  }

  // repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
  {
    unsigned int count = this->xp_reward_details_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xp_reward_details(i));
    }
  }

  // repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  {
    unsigned int count = this->players_metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players_metadata(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgDOTAMatch match_details = 8;
    if (has_match_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->match_details_);
    }

    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed32 replay_salt = 2;
    if (has_replay_salt()) {
      total_size += 1 + 4;
    }

    // optional uint32 leagueid = 5;
    if (has_leagueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional fixed32 metadata_private_key = 7;
    if (has_metadata_private_key()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignoutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignoutResponse)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse::MergeFrom(const CMsgGameMatchSignoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  xp_reward_details_.MergeFrom(from.xp_reward_details_);
  players_metadata_.MergeFrom(from.players_metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_match_details()->::proto::dota::CMsgDOTAMatch::MergeFrom(from.match_details());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      replay_salt_ = from.replay_salt_;
    }
    if (cached_has_bits & 0x00000008u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00000010u) {
      metadata_private_key_ = from.metadata_private_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse::CopyFrom(const CMsgGameMatchSignoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignoutResponse::Swap(CMsgGameMatchSignoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignoutResponse::InternalSwap(CMsgGameMatchSignoutResponse* other) {
  timed_reward_details_.InternalSwap(&other->timed_reward_details_);
  xp_reward_details_.InternalSwap(&other->xp_reward_details_);
  players_metadata_.InternalSwap(&other->players_metadata_);
  std::swap(match_details_, other->match_details_);
  std::swap(match_id_, other->match_id_);
  std::swap(replay_salt_, other->replay_salt_);
  std::swap(leagueid_, other->leagueid_);
  std::swap(metadata_private_key_, other->metadata_private_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignoutResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignoutResponse

// optional uint64 match_id = 1;
bool CMsgGameMatchSignoutResponse::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignoutResponse::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignoutResponse::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignoutResponse::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgGameMatchSignoutResponse::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.match_id)
  return match_id_;
}
void CMsgGameMatchSignoutResponse::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.match_id)
}

// optional fixed32 replay_salt = 2;
bool CMsgGameMatchSignoutResponse::has_replay_salt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameMatchSignoutResponse::set_has_replay_salt() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameMatchSignoutResponse::clear_has_replay_salt() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameMatchSignoutResponse::clear_replay_salt() {
  replay_salt_ = 0u;
  clear_has_replay_salt();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse::replay_salt() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.replay_salt)
  return replay_salt_;
}
void CMsgGameMatchSignoutResponse::set_replay_salt(::google::protobuf::uint32 value) {
  set_has_replay_salt();
  replay_salt_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.replay_salt)
}

// repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 3;
int CMsgGameMatchSignoutResponse::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
void CMsgGameMatchSignoutResponse::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
const ::proto::dota::CLobbyTimedRewardDetails& CMsgGameMatchSignoutResponse::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.timed_reward_details)
  return timed_reward_details_.Get(index);
}
::proto::dota::CLobbyTimedRewardDetails* CMsgGameMatchSignoutResponse::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignoutResponse.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
::proto::dota::CLobbyTimedRewardDetails* CMsgGameMatchSignoutResponse::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignoutResponse.timed_reward_details)
  return timed_reward_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >*
CMsgGameMatchSignoutResponse::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignoutResponse.timed_reward_details)
  return &timed_reward_details_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >&
CMsgGameMatchSignoutResponse::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignoutResponse.timed_reward_details)
  return timed_reward_details_;
}

// repeated .proto.dota.CDOTALobbyMember xp_reward_details = 4;
int CMsgGameMatchSignoutResponse::xp_reward_details_size() const {
  return xp_reward_details_.size();
}
void CMsgGameMatchSignoutResponse::clear_xp_reward_details() {
  xp_reward_details_.Clear();
}
const ::proto::dota::CDOTALobbyMember& CMsgGameMatchSignoutResponse::xp_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.xp_reward_details)
  return xp_reward_details_.Get(index);
}
::proto::dota::CDOTALobbyMember* CMsgGameMatchSignoutResponse::mutable_xp_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignoutResponse.xp_reward_details)
  return xp_reward_details_.Mutable(index);
}
::proto::dota::CDOTALobbyMember* CMsgGameMatchSignoutResponse::add_xp_reward_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignoutResponse.xp_reward_details)
  return xp_reward_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >*
CMsgGameMatchSignoutResponse::mutable_xp_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignoutResponse.xp_reward_details)
  return &xp_reward_details_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >&
CMsgGameMatchSignoutResponse::xp_reward_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignoutResponse.xp_reward_details)
  return xp_reward_details_;
}

// optional uint32 leagueid = 5;
bool CMsgGameMatchSignoutResponse::has_leagueid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameMatchSignoutResponse::set_has_leagueid() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameMatchSignoutResponse::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameMatchSignoutResponse::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse::leagueid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.leagueid)
  return leagueid_;
}
void CMsgGameMatchSignoutResponse::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.leagueid)
}

// optional fixed32 metadata_private_key = 7;
bool CMsgGameMatchSignoutResponse::has_metadata_private_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGameMatchSignoutResponse::set_has_metadata_private_key() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGameMatchSignoutResponse::clear_has_metadata_private_key() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGameMatchSignoutResponse::clear_metadata_private_key() {
  metadata_private_key_ = 0u;
  clear_has_metadata_private_key();
}
::google::protobuf::uint32 CMsgGameMatchSignoutResponse::metadata_private_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.metadata_private_key)
  return metadata_private_key_;
}
void CMsgGameMatchSignoutResponse::set_metadata_private_key(::google::protobuf::uint32 value) {
  set_has_metadata_private_key();
  metadata_private_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignoutResponse.metadata_private_key)
}

// optional .proto.dota.CMsgDOTAMatch match_details = 8;
bool CMsgGameMatchSignoutResponse::has_match_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignoutResponse::set_has_match_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignoutResponse::clear_has_match_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignoutResponse::clear_match_details() {
  if (match_details_ != NULL) match_details_->::proto::dota::CMsgDOTAMatch::Clear();
  clear_has_match_details();
}
const ::proto::dota::CMsgDOTAMatch& CMsgGameMatchSignoutResponse::match_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.match_details)
  return match_details_ != NULL ? *match_details_
                         : *::proto::dota::CMsgDOTAMatch::internal_default_instance();
}
::proto::dota::CMsgDOTAMatch* CMsgGameMatchSignoutResponse::mutable_match_details() {
  set_has_match_details();
  if (match_details_ == NULL) {
    match_details_ = new ::proto::dota::CMsgDOTAMatch;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignoutResponse.match_details)
  return match_details_;
}
::proto::dota::CMsgDOTAMatch* CMsgGameMatchSignoutResponse::release_match_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignoutResponse.match_details)
  clear_has_match_details();
  ::proto::dota::CMsgDOTAMatch* temp = match_details_;
  match_details_ = NULL;
  return temp;
}
void CMsgGameMatchSignoutResponse::set_allocated_match_details(::proto::dota::CMsgDOTAMatch* match_details) {
  delete match_details_;
  match_details_ = match_details;
  if (match_details) {
    set_has_match_details();
  } else {
    clear_has_match_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignoutResponse.match_details)
}

// repeated .proto.dota.CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
int CMsgGameMatchSignoutResponse::players_metadata_size() const {
  return players_metadata_.size();
}
void CMsgGameMatchSignoutResponse::clear_players_metadata() {
  players_metadata_.Clear();
}
const ::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata& CMsgGameMatchSignoutResponse::players_metadata(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignoutResponse.players_metadata)
  return players_metadata_.Get(index);
}
::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata* CMsgGameMatchSignoutResponse::mutable_players_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignoutResponse.players_metadata)
  return players_metadata_.Mutable(index);
}
::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata* CMsgGameMatchSignoutResponse::add_players_metadata() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameMatchSignoutResponse.players_metadata)
  return players_metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata >*
CMsgGameMatchSignoutResponse::mutable_players_metadata() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameMatchSignoutResponse.players_metadata)
  return &players_metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGameMatchSignoutResponse_PlayerMetadata >&
CMsgGameMatchSignoutResponse::players_metadata() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameMatchSignoutResponse.players_metadata)
  return players_metadata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTimedRewardContainer::kTimedRewardDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTimedRewardContainer::CMsgTimedRewardContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTimedRewardContainer)
}
CMsgTimedRewardContainer::CMsgTimedRewardContainer(const CMsgTimedRewardContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      timed_reward_details_(from.timed_reward_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTimedRewardContainer)
}

void CMsgTimedRewardContainer::SharedCtor() {
  _cached_size_ = 0;
}

CMsgTimedRewardContainer::~CMsgTimedRewardContainer() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTimedRewardContainer)
  SharedDtor();
}

void CMsgTimedRewardContainer::SharedDtor() {
}

void CMsgTimedRewardContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTimedRewardContainer::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTimedRewardContainer& CMsgTimedRewardContainer::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTimedRewardContainer* CMsgTimedRewardContainer::New(::google::protobuf::Arena* arena) const {
  CMsgTimedRewardContainer* n = new CMsgTimedRewardContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTimedRewardContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTimedRewardContainer)
  timed_reward_details_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTimedRewardContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTimedRewardContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timed_reward_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTimedRewardContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTimedRewardContainer)
  return false;
#undef DO_
}

void CMsgTimedRewardContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTimedRewardContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
  for (unsigned int i = 0, n = this->timed_reward_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timed_reward_details(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTimedRewardContainer)
}

::google::protobuf::uint8* CMsgTimedRewardContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTimedRewardContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
  for (unsigned int i = 0, n = this->timed_reward_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->timed_reward_details(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTimedRewardContainer)
  return target;
}

size_t CMsgTimedRewardContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTimedRewardContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
  {
    unsigned int count = this->timed_reward_details_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timed_reward_details(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTimedRewardContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTimedRewardContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTimedRewardContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTimedRewardContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTimedRewardContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTimedRewardContainer)
    MergeFrom(*source);
  }
}

void CMsgTimedRewardContainer::MergeFrom(const CMsgTimedRewardContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTimedRewardContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timed_reward_details_.MergeFrom(from.timed_reward_details_);
}

void CMsgTimedRewardContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTimedRewardContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTimedRewardContainer::CopyFrom(const CMsgTimedRewardContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTimedRewardContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTimedRewardContainer::IsInitialized() const {
  return true;
}

void CMsgTimedRewardContainer::Swap(CMsgTimedRewardContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTimedRewardContainer::InternalSwap(CMsgTimedRewardContainer* other) {
  timed_reward_details_.InternalSwap(&other->timed_reward_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTimedRewardContainer::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTimedRewardContainer

// repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 1;
int CMsgTimedRewardContainer::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
void CMsgTimedRewardContainer::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
const ::proto::dota::CLobbyTimedRewardDetails& CMsgTimedRewardContainer::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTimedRewardContainer.timed_reward_details)
  return timed_reward_details_.Get(index);
}
::proto::dota::CLobbyTimedRewardDetails* CMsgTimedRewardContainer::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTimedRewardContainer.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
::proto::dota::CLobbyTimedRewardDetails* CMsgTimedRewardContainer::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgTimedRewardContainer.timed_reward_details)
  return timed_reward_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >*
CMsgTimedRewardContainer::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgTimedRewardContainer.timed_reward_details)
  return &timed_reward_details_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >&
CMsgTimedRewardContainer::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgTimedRewardContainer.timed_reward_details)
  return timed_reward_details_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOutPermissionRequest::kServerVersionFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kLocalAttemptFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kTotalAttemptFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kSecondsWaitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOutPermissionRequest)
}
CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(const CMsgGameMatchSignOutPermissionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_version_, &from.server_version_,
    reinterpret_cast<char*>(&seconds_waited_) -
    reinterpret_cast<char*>(&server_version_) + sizeof(seconds_waited_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOutPermissionRequest)
}

void CMsgGameMatchSignOutPermissionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_version_, 0, reinterpret_cast<char*>(&seconds_waited_) -
    reinterpret_cast<char*>(&server_version_) + sizeof(seconds_waited_));
}

CMsgGameMatchSignOutPermissionRequest::~CMsgGameMatchSignOutPermissionRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  SharedDtor();
}

void CMsgGameMatchSignOutPermissionRequest::SharedDtor() {
}

void CMsgGameMatchSignOutPermissionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOutPermissionRequest& CMsgGameMatchSignOutPermissionRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOutPermissionRequest* CMsgGameMatchSignOutPermissionRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOutPermissionRequest* n = new CMsgGameMatchSignOutPermissionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOutPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&server_version_, 0, reinterpret_cast<char*>(&seconds_waited_) -
      reinterpret_cast<char*>(&server_version_) + sizeof(seconds_waited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOutPermissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_attempt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_local_attempt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_attempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_attempt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_total_attempt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_attempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_waited = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_seconds_waited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_waited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  return false;
#undef DO_
}

void CMsgGameMatchSignOutPermissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_version(), output);
  }

  // optional uint32 local_attempt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_attempt(), output);
  }

  // optional uint32 total_attempt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_attempt(), output);
  }

  // optional uint32 seconds_waited = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_waited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOutPermissionRequest)
}

::google::protobuf::uint8* CMsgGameMatchSignOutPermissionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_version(), target);
  }

  // optional uint32 local_attempt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->local_attempt(), target);
  }

  // optional uint32 total_attempt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_attempt(), target);
  }

  // optional uint32 seconds_waited = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_waited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  return target;
}

size_t CMsgGameMatchSignOutPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 server_version = 1;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint32 local_attempt = 2;
    if (has_local_attempt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_attempt());
    }

    // optional uint32 total_attempt = 3;
    if (has_total_attempt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_attempt());
    }

    // optional uint32 seconds_waited = 4;
    if (has_seconds_waited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_waited());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOutPermissionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOutPermissionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOutPermissionRequest)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      local_attempt_ = from.local_attempt_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_attempt_ = from.total_attempt_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_waited_ = from.seconds_waited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOutPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionRequest::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPermissionRequest::Swap(CMsgGameMatchSignOutPermissionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOutPermissionRequest::InternalSwap(CMsgGameMatchSignOutPermissionRequest* other) {
  std::swap(server_version_, other->server_version_);
  std::swap(local_attempt_, other->local_attempt_);
  std::swap(total_attempt_, other->total_attempt_);
  std::swap(seconds_waited_, other->seconds_waited_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOutPermissionRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOutPermissionRequest

// optional uint32 server_version = 1;
bool CMsgGameMatchSignOutPermissionRequest::has_server_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOutPermissionRequest::set_has_server_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOutPermissionRequest::clear_has_server_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOutPermissionRequest::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
::google::protobuf::uint32 CMsgGameMatchSignOutPermissionRequest::server_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutPermissionRequest.server_version)
  return server_version_;
}
void CMsgGameMatchSignOutPermissionRequest::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutPermissionRequest.server_version)
}

// optional uint32 local_attempt = 2;
bool CMsgGameMatchSignOutPermissionRequest::has_local_attempt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOutPermissionRequest::set_has_local_attempt() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignOutPermissionRequest::clear_has_local_attempt() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignOutPermissionRequest::clear_local_attempt() {
  local_attempt_ = 0u;
  clear_has_local_attempt();
}
::google::protobuf::uint32 CMsgGameMatchSignOutPermissionRequest::local_attempt() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutPermissionRequest.local_attempt)
  return local_attempt_;
}
void CMsgGameMatchSignOutPermissionRequest::set_local_attempt(::google::protobuf::uint32 value) {
  set_has_local_attempt();
  local_attempt_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutPermissionRequest.local_attempt)
}

// optional uint32 total_attempt = 3;
bool CMsgGameMatchSignOutPermissionRequest::has_total_attempt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameMatchSignOutPermissionRequest::set_has_total_attempt() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameMatchSignOutPermissionRequest::clear_has_total_attempt() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameMatchSignOutPermissionRequest::clear_total_attempt() {
  total_attempt_ = 0u;
  clear_has_total_attempt();
}
::google::protobuf::uint32 CMsgGameMatchSignOutPermissionRequest::total_attempt() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutPermissionRequest.total_attempt)
  return total_attempt_;
}
void CMsgGameMatchSignOutPermissionRequest::set_total_attempt(::google::protobuf::uint32 value) {
  set_has_total_attempt();
  total_attempt_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutPermissionRequest.total_attempt)
}

// optional uint32 seconds_waited = 4;
bool CMsgGameMatchSignOutPermissionRequest::has_seconds_waited() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameMatchSignOutPermissionRequest::set_has_seconds_waited() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameMatchSignOutPermissionRequest::clear_has_seconds_waited() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameMatchSignOutPermissionRequest::clear_seconds_waited() {
  seconds_waited_ = 0u;
  clear_has_seconds_waited();
}
::google::protobuf::uint32 CMsgGameMatchSignOutPermissionRequest::seconds_waited() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutPermissionRequest.seconds_waited)
  return seconds_waited_;
}
void CMsgGameMatchSignOutPermissionRequest::set_seconds_waited(::google::protobuf::uint32 value) {
  set_has_seconds_waited();
  seconds_waited_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutPermissionRequest.seconds_waited)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOutPermissionResponse::kPermissionGrantedFieldNumber;
const int CMsgGameMatchSignOutPermissionResponse::kAbandonSignoutFieldNumber;
const int CMsgGameMatchSignOutPermissionResponse::kRetryDelaySecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOutPermissionResponse)
}
CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(const CMsgGameMatchSignOutPermissionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&permission_granted_, &from.permission_granted_,
    reinterpret_cast<char*>(&retry_delay_seconds_) -
    reinterpret_cast<char*>(&permission_granted_) + sizeof(retry_delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOutPermissionResponse)
}

void CMsgGameMatchSignOutPermissionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&permission_granted_, 0, reinterpret_cast<char*>(&retry_delay_seconds_) -
    reinterpret_cast<char*>(&permission_granted_) + sizeof(retry_delay_seconds_));
}

CMsgGameMatchSignOutPermissionResponse::~CMsgGameMatchSignOutPermissionResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  SharedDtor();
}

void CMsgGameMatchSignOutPermissionResponse::SharedDtor() {
}

void CMsgGameMatchSignOutPermissionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOutPermissionResponse& CMsgGameMatchSignOutPermissionResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOutPermissionResponse* CMsgGameMatchSignOutPermissionResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOutPermissionResponse* n = new CMsgGameMatchSignOutPermissionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOutPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&permission_granted_, 0, reinterpret_cast<char*>(&retry_delay_seconds_) -
      reinterpret_cast<char*>(&permission_granted_) + sizeof(retry_delay_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOutPermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool permission_granted = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_permission_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permission_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool abandon_signout = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_abandon_signout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &abandon_signout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 retry_delay_seconds = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_retry_delay_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  return false;
#undef DO_
}

void CMsgGameMatchSignOutPermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool permission_granted = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->permission_granted(), output);
  }

  // optional bool abandon_signout = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->abandon_signout(), output);
  }

  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retry_delay_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOutPermissionResponse)
}

::google::protobuf::uint8* CMsgGameMatchSignOutPermissionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool permission_granted = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->permission_granted(), target);
  }

  // optional bool abandon_signout = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->abandon_signout(), target);
  }

  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retry_delay_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  return target;
}

size_t CMsgGameMatchSignOutPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool permission_granted = 1 [default = false];
    if (has_permission_granted()) {
      total_size += 1 + 1;
    }

    // optional bool abandon_signout = 2 [default = false];
    if (has_abandon_signout()) {
      total_size += 1 + 1;
    }

    // optional uint32 retry_delay_seconds = 3 [default = 0];
    if (has_retry_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retry_delay_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOutPermissionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOutPermissionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOutPermissionResponse)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      permission_granted_ = from.permission_granted_;
    }
    if (cached_has_bits & 0x00000002u) {
      abandon_signout_ = from.abandon_signout_;
    }
    if (cached_has_bits & 0x00000004u) {
      retry_delay_seconds_ = from.retry_delay_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOutPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionResponse::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPermissionResponse::Swap(CMsgGameMatchSignOutPermissionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOutPermissionResponse::InternalSwap(CMsgGameMatchSignOutPermissionResponse* other) {
  std::swap(permission_granted_, other->permission_granted_);
  std::swap(abandon_signout_, other->abandon_signout_);
  std::swap(retry_delay_seconds_, other->retry_delay_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOutPermissionResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOutPermissionResponse

// optional bool permission_granted = 1 [default = false];
bool CMsgGameMatchSignOutPermissionResponse::has_permission_granted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOutPermissionResponse::set_has_permission_granted() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOutPermissionResponse::clear_has_permission_granted() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOutPermissionResponse::clear_permission_granted() {
  permission_granted_ = false;
  clear_has_permission_granted();
}
bool CMsgGameMatchSignOutPermissionResponse::permission_granted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutPermissionResponse.permission_granted)
  return permission_granted_;
}
void CMsgGameMatchSignOutPermissionResponse::set_permission_granted(bool value) {
  set_has_permission_granted();
  permission_granted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutPermissionResponse.permission_granted)
}

// optional bool abandon_signout = 2 [default = false];
bool CMsgGameMatchSignOutPermissionResponse::has_abandon_signout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOutPermissionResponse::set_has_abandon_signout() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignOutPermissionResponse::clear_has_abandon_signout() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignOutPermissionResponse::clear_abandon_signout() {
  abandon_signout_ = false;
  clear_has_abandon_signout();
}
bool CMsgGameMatchSignOutPermissionResponse::abandon_signout() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutPermissionResponse.abandon_signout)
  return abandon_signout_;
}
void CMsgGameMatchSignOutPermissionResponse::set_abandon_signout(bool value) {
  set_has_abandon_signout();
  abandon_signout_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutPermissionResponse.abandon_signout)
}

// optional uint32 retry_delay_seconds = 3 [default = 0];
bool CMsgGameMatchSignOutPermissionResponse::has_retry_delay_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameMatchSignOutPermissionResponse::set_has_retry_delay_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameMatchSignOutPermissionResponse::clear_has_retry_delay_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameMatchSignOutPermissionResponse::clear_retry_delay_seconds() {
  retry_delay_seconds_ = 0u;
  clear_has_retry_delay_seconds();
}
::google::protobuf::uint32 CMsgGameMatchSignOutPermissionResponse::retry_delay_seconds() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutPermissionResponse.retry_delay_seconds)
  return retry_delay_seconds_;
}
void CMsgGameMatchSignOutPermissionResponse::set_retry_delay_seconds(::google::protobuf::uint32 value) {
  set_has_retry_delay_seconds();
  retry_delay_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutPermissionResponse.retry_delay_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameMatchSignOutEventGameData::kEventIdFieldNumber;
const int CMsgGameMatchSignOutEventGameData::kGameNameFieldNumber;
const int CMsgGameMatchSignOutEventGameData::kMapNameFieldNumber;
const int CMsgGameMatchSignOutEventGameData::kEventGameDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameMatchSignOutEventGameData)
}
CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData(const CMsgGameMatchSignOutEventGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  event_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_game_data()) {
    event_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_game_data_);
  }
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameMatchSignOutEventGameData)
}

void CMsgGameMatchSignOutEventGameData::SharedCtor() {
  _cached_size_ = 0;
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_id_ = 0;
}

CMsgGameMatchSignOutEventGameData::~CMsgGameMatchSignOutEventGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameMatchSignOutEventGameData)
  SharedDtor();
}

void CMsgGameMatchSignOutEventGameData::SharedDtor() {
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_game_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameMatchSignOutEventGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutEventGameData::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameMatchSignOutEventGameData& CMsgGameMatchSignOutEventGameData::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameMatchSignOutEventGameData* CMsgGameMatchSignOutEventGameData::New(::google::protobuf::Arena* arena) const {
  CMsgGameMatchSignOutEventGameData* n = new CMsgGameMatchSignOutEventGameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameMatchSignOutEventGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_game_name()) {
      GOOGLE_DCHECK(!game_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_map_name()) {
      GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_event_game_data()) {
      GOOGLE_DCHECK(!event_game_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*event_game_data_.UnsafeRawStringPointer())->clear();
    }
  }
  event_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameMatchSignOutEventGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameMatchSignOutEventGameData.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGameMatchSignOutEventGameData.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes event_game_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameMatchSignOutEventGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameMatchSignOutEventGameData)
  return false;
#undef DO_
}

void CMsgGameMatchSignOutEventGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOutEventGameData.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOutEventGameData.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map_name(), output);
  }

  // optional bytes event_game_data = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->event_game_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameMatchSignOutEventGameData)
}

::google::protobuf::uint8* CMsgGameMatchSignOutEventGameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOutEventGameData.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGameMatchSignOutEventGameData.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map_name(), target);
  }

  // optional bytes event_game_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->event_game_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameMatchSignOutEventGameData)
  return target;
}

size_t CMsgGameMatchSignOutEventGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string game_name = 2;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional string map_name = 3;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional bytes event_game_data = 4;
    if (has_event_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_game_data());
    }

    // optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOutEventGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameMatchSignOutEventGameData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameMatchSignOutEventGameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameMatchSignOutEventGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameMatchSignOutEventGameData)
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutEventGameData::MergeFrom(const CMsgGameMatchSignOutEventGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_name();
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_event_game_data();
      event_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_game_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameMatchSignOutEventGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutEventGameData::CopyFrom(const CMsgGameMatchSignOutEventGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameMatchSignOutEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutEventGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutEventGameData::Swap(CMsgGameMatchSignOutEventGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameMatchSignOutEventGameData::InternalSwap(CMsgGameMatchSignOutEventGameData* other) {
  game_name_.Swap(&other->game_name_);
  map_name_.Swap(&other->map_name_);
  event_game_data_.Swap(&other->event_game_data_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameMatchSignOutEventGameData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameMatchSignOutEventGameData

// optional .proto.dota.EEvent event_id = 1 [default = EVENT_ID_NONE];
bool CMsgGameMatchSignOutEventGameData::has_event_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGameMatchSignOutEventGameData::set_has_event_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGameMatchSignOutEventGameData::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGameMatchSignOutEventGameData::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
::proto::dota::EEvent CMsgGameMatchSignOutEventGameData::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutEventGameData.event_id)
  return static_cast< ::proto::dota::EEvent >(event_id_);
}
void CMsgGameMatchSignOutEventGameData::set_event_id(::proto::dota::EEvent value) {
  assert(::proto::dota::EEvent_IsValid(value));
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutEventGameData.event_id)
}

// optional string game_name = 2;
bool CMsgGameMatchSignOutEventGameData::has_game_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameMatchSignOutEventGameData::set_has_game_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameMatchSignOutEventGameData::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignOutEventGameData::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
const ::std::string& CMsgGameMatchSignOutEventGameData::game_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutEventGameData.game_name)
  return game_name_.GetNoArena();
}
void CMsgGameMatchSignOutEventGameData::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutEventGameData.game_name)
}
#if LANG_CXX11
void CMsgGameMatchSignOutEventGameData::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGameMatchSignOutEventGameData.game_name)
}
#endif
void CMsgGameMatchSignOutEventGameData::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGameMatchSignOutEventGameData.game_name)
}
void CMsgGameMatchSignOutEventGameData::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGameMatchSignOutEventGameData.game_name)
}
::std::string* CMsgGameMatchSignOutEventGameData::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOutEventGameData.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGameMatchSignOutEventGameData::release_game_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignOutEventGameData.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGameMatchSignOutEventGameData::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignOutEventGameData.game_name)
}

// optional string map_name = 3;
bool CMsgGameMatchSignOutEventGameData::has_map_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameMatchSignOutEventGameData::set_has_map_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameMatchSignOutEventGameData::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameMatchSignOutEventGameData::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
const ::std::string& CMsgGameMatchSignOutEventGameData::map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutEventGameData.map_name)
  return map_name_.GetNoArena();
}
void CMsgGameMatchSignOutEventGameData::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutEventGameData.map_name)
}
#if LANG_CXX11
void CMsgGameMatchSignOutEventGameData::set_map_name(::std::string&& value) {
  set_has_map_name();
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGameMatchSignOutEventGameData.map_name)
}
#endif
void CMsgGameMatchSignOutEventGameData::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGameMatchSignOutEventGameData.map_name)
}
void CMsgGameMatchSignOutEventGameData::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGameMatchSignOutEventGameData.map_name)
}
::std::string* CMsgGameMatchSignOutEventGameData::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOutEventGameData.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGameMatchSignOutEventGameData::release_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignOutEventGameData.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGameMatchSignOutEventGameData::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignOutEventGameData.map_name)
}

// optional bytes event_game_data = 4;
bool CMsgGameMatchSignOutEventGameData::has_event_game_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameMatchSignOutEventGameData::set_has_event_game_data() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameMatchSignOutEventGameData::clear_has_event_game_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameMatchSignOutEventGameData::clear_event_game_data() {
  event_game_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_game_data();
}
const ::std::string& CMsgGameMatchSignOutEventGameData::event_game_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameMatchSignOutEventGameData.event_game_data)
  return event_game_data_.GetNoArena();
}
void CMsgGameMatchSignOutEventGameData::set_event_game_data(const ::std::string& value) {
  set_has_event_game_data();
  event_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameMatchSignOutEventGameData.event_game_data)
}
#if LANG_CXX11
void CMsgGameMatchSignOutEventGameData::set_event_game_data(::std::string&& value) {
  set_has_event_game_data();
  event_game_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGameMatchSignOutEventGameData.event_game_data)
}
#endif
void CMsgGameMatchSignOutEventGameData::set_event_game_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_game_data();
  event_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGameMatchSignOutEventGameData.event_game_data)
}
void CMsgGameMatchSignOutEventGameData::set_event_game_data(const void* value, size_t size) {
  set_has_event_game_data();
  event_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGameMatchSignOutEventGameData.event_game_data)
}
::std::string* CMsgGameMatchSignOutEventGameData::mutable_event_game_data() {
  set_has_event_game_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameMatchSignOutEventGameData.event_game_data)
  return event_game_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGameMatchSignOutEventGameData::release_event_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameMatchSignOutEventGameData.event_game_data)
  clear_has_event_game_data();
  return event_game_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGameMatchSignOutEventGameData::set_allocated_event_game_data(::std::string* event_game_data) {
  if (event_game_data != NULL) {
    set_has_event_game_data();
  } else {
    clear_has_event_game_data();
  }
  event_game_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_game_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameMatchSignOutEventGameData.event_game_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::kAbilityIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::kAbilityLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}
CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    reinterpret_cast<char*>(&ability_level_) -
    reinterpret_cast<char*>(&ability_id_) + sizeof(ability_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ability_id_, 0, reinterpret_cast<char*>(&ability_level_) -
    reinterpret_cast<char*>(&ability_id_) + sizeof(ability_level_));
}

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::~CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedDtor() {
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::New(::google::protobuf::Arena* arena) const {
  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* n = new CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ability_id_, 0, reinterpret_cast<char*>(&ability_level_) -
      reinterpret_cast<char*>(&ability_id_) + sizeof(ability_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ability_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return false;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // optional uint32 ability_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ability_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // optional uint32 ability_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ability_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 ability_level = 2;
    if (has_ability_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_level_ = from.ability_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::Swap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other) {
  std::swap(ability_id_, other->ability_id_);
  std::swap(ability_level_, other->ability_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility

// optional uint32 ability_id = 1;
bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility.ability_id)
  return ability_id_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility.ability_id)
}

// optional uint32 ability_level = 2;
bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::has_ability_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::set_has_ability_level() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::clear_has_ability_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::clear_ability_level() {
  ability_level_ = 0u;
  clear_has_ability_level();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ability_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility.ability_level)
  return ability_level_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::set_ability_level(::google::protobuf::uint32 value) {
  set_has_ability_level();
  ability_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility.ability_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPlayerSlotFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPlayerNameFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kHeroNameFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kHeroIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kKillsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kDeathsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAssistsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kLastHitsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kDeniesFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kGoldFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kLevelFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kGoldPerMinFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kXpPerMinFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kUltimateStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kUltimateCooldownFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem0FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem1FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem2FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem3FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem4FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem5FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kRespawnTimerFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAccountIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPositionXFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPositionYFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kNetWorthFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAbilitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
}
CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(const CMsgDOTALiveScoreboardUpdate_Team_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      abilities_(from.abilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_name()) {
    hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
  }
  ::memcpy(&player_slot_, &from.player_slot_,
    reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&player_slot_) + sizeof(net_worth_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedCtor() {
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_slot_, 0, reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&player_slot_) + sizeof(net_worth_));
}

CMsgDOTALiveScoreboardUpdate_Team_Player::~CMsgDOTALiveScoreboardUpdate_Team_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTALiveScoreboardUpdate_Team_Player& CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team_Player::New(::google::protobuf::Arena* arena) const {
  CMsgDOTALiveScoreboardUpdate_Team_Player* n = new CMsgDOTALiveScoreboardUpdate_Team_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  abilities_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_player_name()) {
      GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*player_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_hero_name()) {
      GOOGLE_DCHECK(!hero_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hero_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&player_slot_, 0, reinterpret_cast<char*>(&last_hits_) -
      reinterpret_cast<char*>(&player_slot_) + sizeof(last_hits_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&denies_, 0, reinterpret_cast<char*>(&item0_) -
      reinterpret_cast<char*>(&denies_) + sizeof(item0_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&item1_, 0, reinterpret_cast<char*>(&position_x_) -
      reinterpret_cast<char*>(&item1_) + sizeof(position_x_));
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    ::memset(&position_y_, 0, reinterpret_cast<char*>(&net_worth_) -
      reinterpret_cast<char*>(&position_y_) + sizeof(net_worth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_denies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gold_per_min = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_gold_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gold_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xp_per_min = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_xp_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xp_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value)) {
            set_ultimate_state(static_cast< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ultimate_cooldown = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_ultimate_cooldown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ultimate_cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item0 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_item0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item1 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_item1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item2 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_item2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item3 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_item3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item4 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_item4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item5 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_item5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 respawn_timer = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_respawn_timer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &respawn_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float position_x = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          set_has_position_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float position_y = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u)) {
          set_has_position_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_net_worth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  return false;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_slot(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hero_name(), output);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kills(), output);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deaths(), output);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->assists(), output);
  }

  // optional uint32 last_hits = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_hits(), output);
  }

  // optional uint32 denies = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->denies(), output);
  }

  // optional uint32 gold = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gold(), output);
  }

  // optional uint32 level = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->level(), output);
  }

  // optional float gold_per_min = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->gold_per_min(), output);
  }

  // optional float xp_per_min = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->xp_per_min(), output);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->ultimate_state(), output);
  }

  // optional float ultimate_cooldown = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->ultimate_cooldown(), output);
  }

  // optional uint32 item0 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->item0(), output);
  }

  // optional uint32 item1 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->item1(), output);
  }

  // optional uint32 item2 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->item2(), output);
  }

  // optional uint32 item3 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->item3(), output);
  }

  // optional uint32 item4 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->item4(), output);
  }

  // optional uint32 item5 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->item5(), output);
  }

  // optional uint32 respawn_timer = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->respawn_timer(), output);
  }

  // optional uint32 account_id = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->account_id(), output);
  }

  // optional float position_x = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->position_x(), output);
  }

  // optional float position_y = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->position_y(), output);
  }

  // optional uint32 net_worth = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->net_worth(), output);
  }

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->abilities(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_slot(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero_name(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kills(), target);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deaths(), target);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->assists(), target);
  }

  // optional uint32 last_hits = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_hits(), target);
  }

  // optional uint32 denies = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->denies(), target);
  }

  // optional uint32 gold = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gold(), target);
  }

  // optional uint32 level = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->level(), target);
  }

  // optional float gold_per_min = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->gold_per_min(), target);
  }

  // optional float xp_per_min = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->xp_per_min(), target);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->ultimate_state(), target);
  }

  // optional float ultimate_cooldown = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->ultimate_cooldown(), target);
  }

  // optional uint32 item0 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->item0(), target);
  }

  // optional uint32 item1 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->item1(), target);
  }

  // optional uint32 item2 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->item2(), target);
  }

  // optional uint32 item3 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->item3(), target);
  }

  // optional uint32 item4 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->item4(), target);
  }

  // optional uint32 item5 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->item5(), target);
  }

  // optional uint32 respawn_timer = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->respawn_timer(), target);
  }

  // optional uint32 account_id = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->account_id(), target);
  }

  // optional float position_x = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->position_x(), target);
  }

  // optional float position_y = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->position_y(), target);
  }

  // optional uint32 net_worth = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->net_worth(), target);
  }

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->abilities(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  {
    unsigned int count = this->abilities_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->abilities(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional string hero_name = 3;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional uint32 player_slot = 1;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 kills = 5;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 6;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 7;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 last_hits = 8;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 denies = 9;
    if (has_denies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional uint32 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional float gold_per_min = 12;
    if (has_gold_per_min()) {
      total_size += 1 + 4;
    }

    // optional float xp_per_min = 13;
    if (has_xp_per_min()) {
      total_size += 1 + 4;
    }

    // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
    if (has_ultimate_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ultimate_state());
    }

    // optional float ultimate_cooldown = 15;
    if (has_ultimate_cooldown()) {
      total_size += 1 + 4;
    }

    // optional uint32 item0 = 16;
    if (has_item0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item0());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 item1 = 17;
    if (has_item1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item1());
    }

    // optional uint32 item2 = 18;
    if (has_item2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item2());
    }

    // optional uint32 item3 = 19;
    if (has_item3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item3());
    }

    // optional uint32 item4 = 20;
    if (has_item4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item4());
    }

    // optional uint32 item5 = 21;
    if (has_item5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item5());
    }

    // optional uint32 respawn_timer = 22;
    if (has_respawn_timer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->respawn_timer());
    }

    // optional uint32 account_id = 23;
    if (has_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float position_x = 24;
    if (has_position_x()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional float position_y = 25;
    if (has_position_y()) {
      total_size += 2 + 4;
    }

    // optional uint32 net_worth = 26;
    if (has_net_worth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTALiveScoreboardUpdate_Team_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hero_name();
      hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_hits_ = from.last_hits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000200u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000400u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000800u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00001000u) {
      xp_per_min_ = from.xp_per_min_;
    }
    if (cached_has_bits & 0x00002000u) {
      ultimate_state_ = from.ultimate_state_;
    }
    if (cached_has_bits & 0x00004000u) {
      ultimate_cooldown_ = from.ultimate_cooldown_;
    }
    if (cached_has_bits & 0x00008000u) {
      item0_ = from.item0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      item1_ = from.item1_;
    }
    if (cached_has_bits & 0x00020000u) {
      item2_ = from.item2_;
    }
    if (cached_has_bits & 0x00040000u) {
      item3_ = from.item3_;
    }
    if (cached_has_bits & 0x00080000u) {
      item4_ = from.item4_;
    }
    if (cached_has_bits & 0x00100000u) {
      item5_ = from.item5_;
    }
    if (cached_has_bits & 0x00200000u) {
      respawn_timer_ = from.respawn_timer_;
    }
    if (cached_has_bits & 0x00400000u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      position_x_ = from.position_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      position_y_ = from.position_y_;
    }
    if (cached_has_bits & 0x02000000u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::Swap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
  abilities_.InternalSwap(&other->abilities_);
  player_name_.Swap(&other->player_name_);
  hero_name_.Swap(&other->hero_name_);
  std::swap(player_slot_, other->player_slot_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(denies_, other->denies_);
  std::swap(gold_, other->gold_);
  std::swap(level_, other->level_);
  std::swap(gold_per_min_, other->gold_per_min_);
  std::swap(xp_per_min_, other->xp_per_min_);
  std::swap(ultimate_state_, other->ultimate_state_);
  std::swap(ultimate_cooldown_, other->ultimate_cooldown_);
  std::swap(item0_, other->item0_);
  std::swap(item1_, other->item1_);
  std::swap(item2_, other->item2_);
  std::swap(item3_, other->item3_);
  std::swap(item4_, other->item4_);
  std::swap(item5_, other->item5_);
  std::swap(respawn_timer_, other->respawn_timer_);
  std::swap(account_id_, other->account_id_);
  std::swap(position_x_, other->position_x_);
  std::swap(position_y_, other->position_y_);
  std::swap(net_worth_, other->net_worth_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTALiveScoreboardUpdate_Team_Player

// optional uint32 player_slot = 1;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_slot)
  return player_slot_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_slot)
}

// optional string player_name = 2;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::player_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
  return player_name_.GetNoArena();
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}
#if LANG_CXX11
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}
#endif
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}
::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}

// optional string hero_name = 3;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_hero_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_hero_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_hero_name() {
  hero_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero_name();
}
const ::std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::hero_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
  return hero_name_.GetNoArena();
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}
#if LANG_CXX11
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(::std::string&& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}
#endif
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(const char* value, size_t size) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}
::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_hero_name() {
  set_has_hero_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
  return hero_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::release_hero_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
  clear_has_hero_name();
  return hero_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_allocated_hero_name(::std::string* hero_name) {
  if (hero_name != NULL) {
    set_has_hero_name();
  } else {
    clear_has_hero_name();
  }
  hero_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}

// optional uint32 hero_id = 4;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_id)
  return hero_id_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.hero_id)
}

// optional uint32 kills = 5;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.kills)
  return kills_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.kills)
}

// optional uint32 deaths = 6;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.deaths)
  return deaths_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.deaths)
}

// optional uint32 assists = 7;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_assists() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_assists() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.assists)
  return assists_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.assists)
}

// optional uint32 last_hits = 8;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_last_hits() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_last_hits() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.last_hits)
  return last_hits_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.last_hits)
}

// optional uint32 denies = 9;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_denies() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_denies() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_denies() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.denies)
  return denies_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.denies)
}

// optional uint32 gold = 10;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_gold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_gold() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_gold() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.gold)
  return gold_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.gold)
}

// optional uint32 level = 11;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.level)
  return level_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.level)
}

// optional float gold_per_min = 12;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_gold_per_min() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_gold_per_min() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_gold_per_min() {
  gold_per_min_ = 0;
  clear_has_gold_per_min();
}
float CMsgDOTALiveScoreboardUpdate_Team_Player::gold_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.gold_per_min)
  return gold_per_min_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_gold_per_min(float value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.gold_per_min)
}

// optional float xp_per_min = 13;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_xp_per_min() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_xp_per_min() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_xp_per_min() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_xp_per_min() {
  xp_per_min_ = 0;
  clear_has_xp_per_min();
}
float CMsgDOTALiveScoreboardUpdate_Team_Player::xp_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.xp_per_min)
  return xp_per_min_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_xp_per_min(float value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.xp_per_min)
}

// optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_ultimate_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_ultimate_state() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_ultimate_state() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_ultimate_state() {
  ultimate_state_ = 0;
  clear_has_ultimate_state();
}
::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::ultimate_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_state)
  return static_cast< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState >(ultimate_state_);
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_ultimate_state(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value) {
  assert(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value));
  set_has_ultimate_state();
  ultimate_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_state)
}

// optional float ultimate_cooldown = 15;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_ultimate_cooldown() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_ultimate_cooldown() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_ultimate_cooldown() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_ultimate_cooldown() {
  ultimate_cooldown_ = 0;
  clear_has_ultimate_cooldown();
}
float CMsgDOTALiveScoreboardUpdate_Team_Player::ultimate_cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_cooldown)
  return ultimate_cooldown_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_ultimate_cooldown(float value) {
  set_has_ultimate_cooldown();
  ultimate_cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_cooldown)
}

// optional uint32 item0 = 16;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item0() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item0() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item0() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item0() {
  item0_ = 0u;
  clear_has_item0();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item0() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item0)
  return item0_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item0(::google::protobuf::uint32 value) {
  set_has_item0();
  item0_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item0)
}

// optional uint32 item1 = 17;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item1() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item1() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item1() {
  item1_ = 0u;
  clear_has_item1();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item1)
  return item1_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item1(::google::protobuf::uint32 value) {
  set_has_item1();
  item1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item1)
}

// optional uint32 item2 = 18;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item2() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item2() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item2() {
  item2_ = 0u;
  clear_has_item2();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item2)
  return item2_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item2(::google::protobuf::uint32 value) {
  set_has_item2();
  item2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item2)
}

// optional uint32 item3 = 19;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item3() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item3() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item3() {
  item3_ = 0u;
  clear_has_item3();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item3)
  return item3_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item3(::google::protobuf::uint32 value) {
  set_has_item3();
  item3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item3)
}

// optional uint32 item4 = 20;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item4() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item4() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item4() {
  item4_ = 0u;
  clear_has_item4();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item4() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item4)
  return item4_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item4(::google::protobuf::uint32 value) {
  set_has_item4();
  item4_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item4)
}

// optional uint32 item5 = 21;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item5() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item5() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item5() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item5() {
  item5_ = 0u;
  clear_has_item5();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item5() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item5)
  return item5_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item5(::google::protobuf::uint32 value) {
  set_has_item5();
  item5_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.item5)
}

// optional uint32 respawn_timer = 22;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_respawn_timer() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_respawn_timer() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_respawn_timer() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_respawn_timer() {
  respawn_timer_ = 0u;
  clear_has_respawn_timer();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::respawn_timer() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.respawn_timer)
  return respawn_timer_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_respawn_timer(::google::protobuf::uint32 value) {
  set_has_respawn_timer();
  respawn_timer_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.respawn_timer)
}

// optional uint32 account_id = 23;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.account_id)
  return account_id_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.account_id)
}

// optional float position_x = 24;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_position_x() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_position_x() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_position_x() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
float CMsgDOTALiveScoreboardUpdate_Team_Player::position_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.position_x)
  return position_x_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_position_x(float value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.position_x)
}

// optional float position_y = 25;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_position_y() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_position_y() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_position_y() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
float CMsgDOTALiveScoreboardUpdate_Team_Player::position_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.position_y)
  return position_y_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_position_y(float value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.position_y)
}

// optional uint32 net_worth = 26;
bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_net_worth() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_net_worth() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_net_worth() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_net_worth() {
  net_worth_ = 0u;
  clear_has_net_worth();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.net_worth)
  return net_worth_;
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_net_worth(::google::protobuf::uint32 value) {
  set_has_net_worth();
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.net_worth)
}

// repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
int CMsgDOTALiveScoreboardUpdate_Team_Player::abilities_size() const {
  return abilities_.size();
}
void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_abilities() {
  abilities_.Clear();
}
const ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& CMsgDOTALiveScoreboardUpdate_Team_Player::abilities(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return abilities_.Get(index);
}
::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return abilities_.Mutable(index);
}
::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* CMsgDOTALiveScoreboardUpdate_Team_Player::add_abilities() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >*
CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >&
CMsgDOTALiveScoreboardUpdate_Team_Player::abilities() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return abilities_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALiveScoreboardUpdate_Team::kPlayersFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kScoreFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kTowerStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kBarracksStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kHeroPicksFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kHeroBansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
}
CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(const CMsgDOTALiveScoreboardUpdate_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_),
      hero_picks_(from.hero_picks_),
      hero_bans_(from.hero_bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&barracks_state_) -
    reinterpret_cast<char*>(&score_) + sizeof(barracks_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_, 0, reinterpret_cast<char*>(&barracks_state_) -
    reinterpret_cast<char*>(&score_) + sizeof(barracks_state_));
}

CMsgDOTALiveScoreboardUpdate_Team::~CMsgDOTALiveScoreboardUpdate_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedDtor() {
}

void CMsgDOTALiveScoreboardUpdate_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate_Team::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate_Team::New(::google::protobuf::Arena* arena) const {
  CMsgDOTALiveScoreboardUpdate_Team* n = new CMsgDOTALiveScoreboardUpdate_Team;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTALiveScoreboardUpdate_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  players_.Clear();
  hero_picks_.Clear();
  hero_bans_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&barracks_state_) -
      reinterpret_cast<char*>(&score_) + sizeof(barracks_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTALiveScoreboardUpdate_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tower_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 barracks_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_barracks_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barracks_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hero_picks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_hero_picks())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_picks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hero_bans = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_hero_bans())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_bans())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  return false;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 tower_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tower_state(), output);
  }

  // optional uint32 barracks_state = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->barracks_state(), output);
  }

  // repeated uint32 hero_picks = 5;
  for (int i = 0, n = this->hero_picks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hero_picks(i), output);
  }

  // repeated uint32 hero_bans = 6;
  for (int i = 0, n = this->hero_bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->hero_bans(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 tower_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tower_state(), target);
  }

  // optional uint32 barracks_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->barracks_state(), target);
  }

  // repeated uint32 hero_picks = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->hero_picks_, target);

  // repeated uint32 hero_bans = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->hero_bans_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // repeated uint32 hero_picks = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hero_picks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hero_picks_size());
    total_size += data_size;
  }

  // repeated uint32 hero_bans = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hero_bans_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hero_bans_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 tower_state = 3;
    if (has_tower_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_state());
    }

    // optional uint32 barracks_state = 4;
    if (has_barracks_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barracks_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTALiveScoreboardUpdate_Team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  hero_picks_.MergeFrom(from.hero_picks_);
  hero_bans_.MergeFrom(from.hero_bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      tower_state_ = from.tower_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      barracks_state_ = from.barracks_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team::Swap(CMsgDOTALiveScoreboardUpdate_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALiveScoreboardUpdate_Team::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team* other) {
  players_.InternalSwap(&other->players_);
  hero_picks_.InternalSwap(&other->hero_picks_);
  hero_bans_.InternalSwap(&other->hero_bans_);
  std::swap(score_, other->score_);
  std::swap(tower_state_, other->tower_state_);
  std::swap(barracks_state_, other->barracks_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTALiveScoreboardUpdate_Team

// repeated .proto.dota.CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
int CMsgDOTALiveScoreboardUpdate_Team::players_size() const {
  return players_.size();
}
void CMsgDOTALiveScoreboardUpdate_Team::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player& CMsgDOTALiveScoreboardUpdate_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.players)
  return players_.Get(index);
}
::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player >*
CMsgDOTALiveScoreboardUpdate_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team_Player >&
CMsgDOTALiveScoreboardUpdate_Team::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.players)
  return players_;
}

// optional uint32 score = 2;
bool CMsgDOTALiveScoreboardUpdate_Team::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTALiveScoreboardUpdate_Team::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTALiveScoreboardUpdate_Team::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.score)
  return score_;
}
void CMsgDOTALiveScoreboardUpdate_Team::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.score)
}

// optional uint32 tower_state = 3;
bool CMsgDOTALiveScoreboardUpdate_Team::has_tower_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team::set_has_tower_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTALiveScoreboardUpdate_Team::clear_has_tower_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTALiveScoreboardUpdate_Team::clear_tower_state() {
  tower_state_ = 0u;
  clear_has_tower_state();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team::tower_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.tower_state)
  return tower_state_;
}
void CMsgDOTALiveScoreboardUpdate_Team::set_tower_state(::google::protobuf::uint32 value) {
  set_has_tower_state();
  tower_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.tower_state)
}

// optional uint32 barracks_state = 4;
bool CMsgDOTALiveScoreboardUpdate_Team::has_barracks_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTALiveScoreboardUpdate_Team::set_has_barracks_state() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTALiveScoreboardUpdate_Team::clear_has_barracks_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTALiveScoreboardUpdate_Team::clear_barracks_state() {
  barracks_state_ = 0u;
  clear_has_barracks_state();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team::barracks_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.barracks_state)
  return barracks_state_;
}
void CMsgDOTALiveScoreboardUpdate_Team::set_barracks_state(::google::protobuf::uint32 value) {
  set_has_barracks_state();
  barracks_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.barracks_state)
}

// repeated uint32 hero_picks = 5;
int CMsgDOTALiveScoreboardUpdate_Team::hero_picks_size() const {
  return hero_picks_.size();
}
void CMsgDOTALiveScoreboardUpdate_Team::clear_hero_picks() {
  hero_picks_.Clear();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team::hero_picks(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
  return hero_picks_.Get(index);
}
void CMsgDOTALiveScoreboardUpdate_Team::set_hero_picks(int index, ::google::protobuf::uint32 value) {
  hero_picks_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
}
void CMsgDOTALiveScoreboardUpdate_Team::add_hero_picks(::google::protobuf::uint32 value) {
  hero_picks_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTALiveScoreboardUpdate_Team::hero_picks() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
  return hero_picks_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTALiveScoreboardUpdate_Team::mutable_hero_picks() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
  return &hero_picks_;
}

// repeated uint32 hero_bans = 6;
int CMsgDOTALiveScoreboardUpdate_Team::hero_bans_size() const {
  return hero_bans_.size();
}
void CMsgDOTALiveScoreboardUpdate_Team::clear_hero_bans() {
  hero_bans_.Clear();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team::hero_bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
  return hero_bans_.Get(index);
}
void CMsgDOTALiveScoreboardUpdate_Team::set_hero_bans(int index, ::google::protobuf::uint32 value) {
  hero_bans_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
}
void CMsgDOTALiveScoreboardUpdate_Team::add_hero_bans(::google::protobuf::uint32 value) {
  hero_bans_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTALiveScoreboardUpdate_Team::hero_bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
  return hero_bans_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTALiveScoreboardUpdate_Team::mutable_hero_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
  return &hero_bans_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALiveScoreboardUpdate::kTournamentIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTournamentGameIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kDurationFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kHltvDelayFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTeamGoodFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTeamBadFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kRoshanRespawnTimerFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kLeagueIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALiveScoreboardUpdate)
}
CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(const CMsgDOTALiveScoreboardUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_good()) {
    team_good_ = new ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team(*from.team_good_);
  } else {
    team_good_ = NULL;
  }
  if (from.has_team_bad()) {
    team_bad_ = new ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team(*from.team_bad_);
  } else {
    team_bad_ = NULL;
  }
  ::memcpy(&tournament_id_, &from.tournament_id_,
    reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&tournament_id_) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALiveScoreboardUpdate)
}

void CMsgDOTALiveScoreboardUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_good_, 0, reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&team_good_) + sizeof(match_id_));
}

CMsgDOTALiveScoreboardUpdate::~CMsgDOTALiveScoreboardUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALiveScoreboardUpdate)
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete team_good_;
  }
  if (this != internal_default_instance()) {
    delete team_bad_;
  }
}

void CMsgDOTALiveScoreboardUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTALiveScoreboardUpdate& CMsgDOTALiveScoreboardUpdate::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTALiveScoreboardUpdate* CMsgDOTALiveScoreboardUpdate::New(::google::protobuf::Arena* arena) const {
  CMsgDOTALiveScoreboardUpdate* n = new CMsgDOTALiveScoreboardUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTALiveScoreboardUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_team_good()) {
      GOOGLE_DCHECK(team_good_ != NULL);
      team_good_->::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::Clear();
    }
    if (has_team_bad()) {
      GOOGLE_DCHECK(team_bad_ != NULL);
      team_bad_->::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&tournament_id_, 0, reinterpret_cast<char*>(&league_id_) -
      reinterpret_cast<char*>(&tournament_id_) + sizeof(league_id_));
  }
  match_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTALiveScoreboardUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tournament_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hltv_delay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_hltv_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hltv_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_good()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_bad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roshan_respawn_timer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_roshan_respawn_timer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roshan_respawn_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALiveScoreboardUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALiveScoreboardUpdate)
  return false;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tournament_game_id(), output);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  // optional int32 hltv_delay = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hltv_delay(), output);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->team_good_, output);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->team_bad_, output);
  }

  // optional uint32 roshan_respawn_timer = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->roshan_respawn_timer(), output);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->league_id(), output);
  }

  // optional uint64 match_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALiveScoreboardUpdate)
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tournament_game_id(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  // optional int32 hltv_delay = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hltv_delay(), target);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->team_good_, deterministic, target);
  }

  // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->team_bad_, deterministic, target);
  }

  // optional uint32 roshan_respawn_timer = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->roshan_respawn_timer(), target);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->league_id(), target);
  }

  // optional uint64 match_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALiveScoreboardUpdate)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
    if (has_team_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->team_good_);
    }

    // optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
    if (has_team_bad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->team_bad_);
    }

    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 2;
    if (has_tournament_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional float duration = 3;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional int32 hltv_delay = 4;
    if (has_hltv_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hltv_delay());
    }

    // optional uint32 roshan_respawn_timer = 7;
    if (has_roshan_respawn_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roshan_respawn_timer());
    }

    // optional uint32 league_id = 8;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  // optional uint64 match_id = 9;
  if (has_match_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTALiveScoreboardUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALiveScoreboardUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALiveScoreboardUpdate)
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const CMsgDOTALiveScoreboardUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_good()->::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from.team_good());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_team_bad()->::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from.team_bad());
    }
    if (cached_has_bits & 0x00000004u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      hltv_delay_ = from.hltv_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      roshan_respawn_timer_ = from.roshan_respawn_timer_;
    }
    if (cached_has_bits & 0x00000080u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_match_id(from.match_id());
  }
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const CMsgDOTALiveScoreboardUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALiveScoreboardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate::Swap(CMsgDOTALiveScoreboardUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALiveScoreboardUpdate::InternalSwap(CMsgDOTALiveScoreboardUpdate* other) {
  std::swap(team_good_, other->team_good_);
  std::swap(team_bad_, other->team_bad_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(tournament_game_id_, other->tournament_game_id_);
  std::swap(duration_, other->duration_);
  std::swap(hltv_delay_, other->hltv_delay_);
  std::swap(roshan_respawn_timer_, other->roshan_respawn_timer_);
  std::swap(league_id_, other->league_id_);
  std::swap(match_id_, other->match_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTALiveScoreboardUpdate

// optional uint32 tournament_id = 1;
bool CMsgDOTALiveScoreboardUpdate::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTALiveScoreboardUpdate::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTALiveScoreboardUpdate::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTALiveScoreboardUpdate::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.tournament_id)
  return tournament_id_;
}
void CMsgDOTALiveScoreboardUpdate::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.tournament_id)
}

// optional uint32 tournament_game_id = 2;
bool CMsgDOTALiveScoreboardUpdate::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTALiveScoreboardUpdate::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTALiveScoreboardUpdate::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTALiveScoreboardUpdate::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.tournament_game_id)
  return tournament_game_id_;
}
void CMsgDOTALiveScoreboardUpdate::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.tournament_game_id)
}

// optional float duration = 3;
bool CMsgDOTALiveScoreboardUpdate::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTALiveScoreboardUpdate::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTALiveScoreboardUpdate::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTALiveScoreboardUpdate::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CMsgDOTALiveScoreboardUpdate::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.duration)
  return duration_;
}
void CMsgDOTALiveScoreboardUpdate::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.duration)
}

// optional int32 hltv_delay = 4;
bool CMsgDOTALiveScoreboardUpdate::has_hltv_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTALiveScoreboardUpdate::set_has_hltv_delay() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTALiveScoreboardUpdate::clear_has_hltv_delay() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTALiveScoreboardUpdate::clear_hltv_delay() {
  hltv_delay_ = 0;
  clear_has_hltv_delay();
}
::google::protobuf::int32 CMsgDOTALiveScoreboardUpdate::hltv_delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.hltv_delay)
  return hltv_delay_;
}
void CMsgDOTALiveScoreboardUpdate::set_hltv_delay(::google::protobuf::int32 value) {
  set_has_hltv_delay();
  hltv_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.hltv_delay)
}

// optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
bool CMsgDOTALiveScoreboardUpdate::has_team_good() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTALiveScoreboardUpdate::set_has_team_good() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTALiveScoreboardUpdate::clear_has_team_good() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTALiveScoreboardUpdate::clear_team_good() {
  if (team_good_ != NULL) team_good_->::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::Clear();
  clear_has_team_good();
}
const ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::team_good() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.team_good)
  return team_good_ != NULL ? *team_good_
                         : *::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::internal_default_instance();
}
::proto::dota::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::mutable_team_good() {
  set_has_team_good();
  if (team_good_ == NULL) {
    team_good_ = new ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTALiveScoreboardUpdate.team_good)
  return team_good_;
}
::proto::dota::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::release_team_good() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTALiveScoreboardUpdate.team_good)
  clear_has_team_good();
  ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team* temp = team_good_;
  team_good_ = NULL;
  return temp;
}
void CMsgDOTALiveScoreboardUpdate::set_allocated_team_good(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team* team_good) {
  delete team_good_;
  team_good_ = team_good;
  if (team_good) {
    set_has_team_good();
  } else {
    clear_has_team_good();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTALiveScoreboardUpdate.team_good)
}

// optional .proto.dota.CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
bool CMsgDOTALiveScoreboardUpdate::has_team_bad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTALiveScoreboardUpdate::set_has_team_bad() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTALiveScoreboardUpdate::clear_has_team_bad() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTALiveScoreboardUpdate::clear_team_bad() {
  if (team_bad_ != NULL) team_bad_->::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::Clear();
  clear_has_team_bad();
}
const ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::team_bad() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.team_bad)
  return team_bad_ != NULL ? *team_bad_
                         : *::proto::dota::CMsgDOTALiveScoreboardUpdate_Team::internal_default_instance();
}
::proto::dota::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::mutable_team_bad() {
  set_has_team_bad();
  if (team_bad_ == NULL) {
    team_bad_ = new ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTALiveScoreboardUpdate.team_bad)
  return team_bad_;
}
::proto::dota::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::release_team_bad() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTALiveScoreboardUpdate.team_bad)
  clear_has_team_bad();
  ::proto::dota::CMsgDOTALiveScoreboardUpdate_Team* temp = team_bad_;
  team_bad_ = NULL;
  return temp;
}
void CMsgDOTALiveScoreboardUpdate::set_allocated_team_bad(::proto::dota::CMsgDOTALiveScoreboardUpdate_Team* team_bad) {
  delete team_bad_;
  team_bad_ = team_bad;
  if (team_bad) {
    set_has_team_bad();
  } else {
    clear_has_team_bad();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTALiveScoreboardUpdate.team_bad)
}

// optional uint32 roshan_respawn_timer = 7;
bool CMsgDOTALiveScoreboardUpdate::has_roshan_respawn_timer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTALiveScoreboardUpdate::set_has_roshan_respawn_timer() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTALiveScoreboardUpdate::clear_has_roshan_respawn_timer() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTALiveScoreboardUpdate::clear_roshan_respawn_timer() {
  roshan_respawn_timer_ = 0u;
  clear_has_roshan_respawn_timer();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::roshan_respawn_timer() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.roshan_respawn_timer)
  return roshan_respawn_timer_;
}
void CMsgDOTALiveScoreboardUpdate::set_roshan_respawn_timer(::google::protobuf::uint32 value) {
  set_has_roshan_respawn_timer();
  roshan_respawn_timer_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.roshan_respawn_timer)
}

// optional uint32 league_id = 8;
bool CMsgDOTALiveScoreboardUpdate::has_league_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTALiveScoreboardUpdate::set_has_league_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTALiveScoreboardUpdate::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTALiveScoreboardUpdate::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.league_id)
  return league_id_;
}
void CMsgDOTALiveScoreboardUpdate::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.league_id)
}

// optional uint64 match_id = 9;
bool CMsgDOTALiveScoreboardUpdate::has_match_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTALiveScoreboardUpdate::set_has_match_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTALiveScoreboardUpdate::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTALiveScoreboardUpdate::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTALiveScoreboardUpdate::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALiveScoreboardUpdate.match_id)
  return match_id_;
}
void CMsgDOTALiveScoreboardUpdate::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALiveScoreboardUpdate.match_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestPlayerResources::kSteamIdFieldNumber;
const int CMsgDOTARequestPlayerResources::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestPlayerResources::CMsgDOTARequestPlayerResources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestPlayerResources)
}
CMsgDOTARequestPlayerResources::CMsgDOTARequestPlayerResources(const CMsgDOTARequestPlayerResources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestPlayerResources)
}

void CMsgDOTARequestPlayerResources::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(player_id_));
}

CMsgDOTARequestPlayerResources::~CMsgDOTARequestPlayerResources() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestPlayerResources)
  SharedDtor();
}

void CMsgDOTARequestPlayerResources::SharedDtor() {
}

void CMsgDOTARequestPlayerResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResources::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARequestPlayerResources& CMsgDOTARequestPlayerResources::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARequestPlayerResources* CMsgDOTARequestPlayerResources::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARequestPlayerResources* n = new CMsgDOTARequestPlayerResources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARequestPlayerResources::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestPlayerResources)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARequestPlayerResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestPlayerResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestPlayerResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestPlayerResources)
  return false;
#undef DO_
}

void CMsgDOTARequestPlayerResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestPlayerResources)
}

::google::protobuf::uint8* CMsgDOTARequestPlayerResources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestPlayerResources)
  return target;
}

size_t CMsgDOTARequestPlayerResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestPlayerResources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestPlayerResources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestPlayerResources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARequestPlayerResources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestPlayerResources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestPlayerResources)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestPlayerResources::MergeFrom(const CMsgDOTARequestPlayerResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARequestPlayerResources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResources::CopyFrom(const CMsgDOTARequestPlayerResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestPlayerResources::IsInitialized() const {
  return true;
}

void CMsgDOTARequestPlayerResources::Swap(CMsgDOTARequestPlayerResources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestPlayerResources::InternalSwap(CMsgDOTARequestPlayerResources* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARequestPlayerResources::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARequestPlayerResources

// optional fixed64 steam_id = 1;
bool CMsgDOTARequestPlayerResources::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARequestPlayerResources::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARequestPlayerResources::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARequestPlayerResources::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgDOTARequestPlayerResources::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestPlayerResources.steam_id)
  return steam_id_;
}
void CMsgDOTARequestPlayerResources::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestPlayerResources.steam_id)
}

// optional uint32 player_id = 2;
bool CMsgDOTARequestPlayerResources::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARequestPlayerResources::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARequestPlayerResources::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARequestPlayerResources::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CMsgDOTARequestPlayerResources::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestPlayerResources.player_id)
  return player_id_;
}
void CMsgDOTARequestPlayerResources::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestPlayerResources.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestPlayerResourcesResponse::kSteamIdFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kRankFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPlayerIdFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPreventTextChatFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPreventVoiceChatFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kLowPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestPlayerResourcesResponse::CMsgDOTARequestPlayerResourcesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
}
CMsgDOTARequestPlayerResourcesResponse::CMsgDOTARequestPlayerResourcesResponse(const CMsgDOTARequestPlayerResourcesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
}

void CMsgDOTARequestPlayerResourcesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(low_priority_));
}

CMsgDOTARequestPlayerResourcesResponse::~CMsgDOTARequestPlayerResourcesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  SharedDtor();
}

void CMsgDOTARequestPlayerResourcesResponse::SharedDtor() {
}

void CMsgDOTARequestPlayerResourcesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResourcesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARequestPlayerResourcesResponse& CMsgDOTARequestPlayerResourcesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARequestPlayerResourcesResponse* CMsgDOTARequestPlayerResourcesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARequestPlayerResourcesResponse* n = new CMsgDOTARequestPlayerResourcesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARequestPlayerResourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&low_priority_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(low_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARequestPlayerResourcesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prevent_text_chat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_prevent_text_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_text_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prevent_voice_chat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_prevent_voice_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_voice_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_low_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  return false;
#undef DO_
}

void CMsgDOTARequestPlayerResourcesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_id(), output);
  }

  // optional bool prevent_text_chat = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prevent_text_chat(), output);
  }

  // optional bool prevent_voice_chat = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->prevent_voice_chat(), output);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
}

::google::protobuf::uint8* CMsgDOTARequestPlayerResourcesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_id(), target);
  }

  // optional bool prevent_text_chat = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prevent_text_chat(), target);
  }

  // optional bool prevent_voice_chat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->prevent_voice_chat(), target);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  return target;
}

size_t CMsgDOTARequestPlayerResourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional bool prevent_text_chat = 4;
    if (has_prevent_text_chat()) {
      total_size += 1 + 1;
    }

    // optional bool prevent_voice_chat = 5;
    if (has_prevent_voice_chat()) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestPlayerResourcesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestPlayerResourcesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARequestPlayerResourcesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestPlayerResourcesResponse::MergeFrom(const CMsgDOTARequestPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      prevent_text_chat_ = from.prevent_text_chat_;
    }
    if (cached_has_bits & 0x00000010u) {
      prevent_voice_chat_ = from.prevent_voice_chat_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_priority_ = from.low_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARequestPlayerResourcesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResourcesResponse::CopyFrom(const CMsgDOTARequestPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestPlayerResourcesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTARequestPlayerResourcesResponse::Swap(CMsgDOTARequestPlayerResourcesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestPlayerResourcesResponse::InternalSwap(CMsgDOTARequestPlayerResourcesResponse* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(rank_, other->rank_);
  std::swap(player_id_, other->player_id_);
  std::swap(prevent_text_chat_, other->prevent_text_chat_);
  std::swap(prevent_voice_chat_, other->prevent_voice_chat_);
  std::swap(low_priority_, other->low_priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARequestPlayerResourcesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARequestPlayerResourcesResponse

// optional fixed64 steam_id = 1;
bool CMsgDOTARequestPlayerResourcesResponse::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARequestPlayerResourcesResponse::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgDOTARequestPlayerResourcesResponse::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestPlayerResourcesResponse.steam_id)
  return steam_id_;
}
void CMsgDOTARequestPlayerResourcesResponse::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestPlayerResourcesResponse.steam_id)
}

// optional uint32 rank = 2;
bool CMsgDOTARequestPlayerResourcesResponse::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARequestPlayerResourcesResponse::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
::google::protobuf::uint32 CMsgDOTARequestPlayerResourcesResponse::rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestPlayerResourcesResponse.rank)
  return rank_;
}
void CMsgDOTARequestPlayerResourcesResponse::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestPlayerResourcesResponse.rank)
}

// optional uint32 player_id = 3;
bool CMsgDOTARequestPlayerResourcesResponse::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARequestPlayerResourcesResponse::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CMsgDOTARequestPlayerResourcesResponse::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestPlayerResourcesResponse.player_id)
  return player_id_;
}
void CMsgDOTARequestPlayerResourcesResponse::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestPlayerResourcesResponse.player_id)
}

// optional bool prevent_text_chat = 4;
bool CMsgDOTARequestPlayerResourcesResponse::has_prevent_text_chat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARequestPlayerResourcesResponse::set_has_prevent_text_chat() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_has_prevent_text_chat() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_prevent_text_chat() {
  prevent_text_chat_ = false;
  clear_has_prevent_text_chat();
}
bool CMsgDOTARequestPlayerResourcesResponse::prevent_text_chat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestPlayerResourcesResponse.prevent_text_chat)
  return prevent_text_chat_;
}
void CMsgDOTARequestPlayerResourcesResponse::set_prevent_text_chat(bool value) {
  set_has_prevent_text_chat();
  prevent_text_chat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestPlayerResourcesResponse.prevent_text_chat)
}

// optional bool prevent_voice_chat = 5;
bool CMsgDOTARequestPlayerResourcesResponse::has_prevent_voice_chat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARequestPlayerResourcesResponse::set_has_prevent_voice_chat() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_has_prevent_voice_chat() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_prevent_voice_chat() {
  prevent_voice_chat_ = false;
  clear_has_prevent_voice_chat();
}
bool CMsgDOTARequestPlayerResourcesResponse::prevent_voice_chat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestPlayerResourcesResponse.prevent_voice_chat)
  return prevent_voice_chat_;
}
void CMsgDOTARequestPlayerResourcesResponse::set_prevent_voice_chat(bool value) {
  set_has_prevent_voice_chat();
  prevent_voice_chat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestPlayerResourcesResponse.prevent_voice_chat)
}

// optional bool low_priority = 6;
bool CMsgDOTARequestPlayerResourcesResponse::has_low_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARequestPlayerResourcesResponse::set_has_low_priority() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_has_low_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARequestPlayerResourcesResponse::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
bool CMsgDOTARequestPlayerResourcesResponse::low_priority() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestPlayerResourcesResponse.low_priority)
  return low_priority_;
}
void CMsgDOTARequestPlayerResourcesResponse::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestPlayerResourcesResponse.low_priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestBatchPlayerResources::kAccountIdsFieldNumber;
const int CMsgDOTARequestBatchPlayerResources::kRankTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestBatchPlayerResources::CMsgDOTARequestBatchPlayerResources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestBatchPlayerResources)
}
CMsgDOTARequestBatchPlayerResources::CMsgDOTARequestBatchPlayerResources(const CMsgDOTARequestBatchPlayerResources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_ids_(from.account_ids_),
      rank_types_(from.rank_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestBatchPlayerResources)
}

void CMsgDOTARequestBatchPlayerResources::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARequestBatchPlayerResources::~CMsgDOTARequestBatchPlayerResources() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestBatchPlayerResources)
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResources::SharedDtor() {
}

void CMsgDOTARequestBatchPlayerResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResources::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARequestBatchPlayerResources& CMsgDOTARequestBatchPlayerResources::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARequestBatchPlayerResources* CMsgDOTARequestBatchPlayerResources::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARequestBatchPlayerResources* n = new CMsgDOTARequestBatchPlayerResources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARequestBatchPlayerResources::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  account_ids_.Clear();
  rank_types_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARequestBatchPlayerResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rank_types = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rank_types())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_rank_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestBatchPlayerResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestBatchPlayerResources)
  return false;
#undef DO_
}

void CMsgDOTARequestBatchPlayerResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1 [packed = true];
  if (this->account_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_account_ids_cached_byte_size_);
  }
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->account_ids(i), output);
  }

  // repeated uint32 rank_types = 4 [packed = true];
  if (this->rank_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rank_types_cached_byte_size_);
  }
  for (int i = 0, n = this->rank_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->rank_types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestBatchPlayerResources)
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1 [packed = true];
  if (this->account_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _account_ids_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->account_ids_, target);
  }

  // repeated uint32 rank_types = 4 [packed = true];
  if (this->rank_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rank_types_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->rank_types_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestBatchPlayerResources)
  return target;
}

size_t CMsgDOTARequestBatchPlayerResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 account_ids = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _account_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 rank_types = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rank_types_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rank_types_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestBatchPlayerResources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARequestBatchPlayerResources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestBatchPlayerResources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestBatchPlayerResources)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResources::MergeFrom(const CMsgDOTARequestBatchPlayerResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  rank_types_.MergeFrom(from.rank_types_);
}

void CMsgDOTARequestBatchPlayerResources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResources::CopyFrom(const CMsgDOTARequestBatchPlayerResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResources::IsInitialized() const {
  return true;
}

void CMsgDOTARequestBatchPlayerResources::Swap(CMsgDOTARequestBatchPlayerResources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestBatchPlayerResources::InternalSwap(CMsgDOTARequestBatchPlayerResources* other) {
  account_ids_.InternalSwap(&other->account_ids_);
  rank_types_.InternalSwap(&other->rank_types_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResources::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARequestBatchPlayerResources

// repeated uint32 account_ids = 1 [packed = true];
int CMsgDOTARequestBatchPlayerResources::account_ids_size() const {
  return account_ids_.size();
}
void CMsgDOTARequestBatchPlayerResources::clear_account_ids() {
  account_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTARequestBatchPlayerResources::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestBatchPlayerResources.account_ids)
  return account_ids_.Get(index);
}
void CMsgDOTARequestBatchPlayerResources::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestBatchPlayerResources.account_ids)
}
void CMsgDOTARequestBatchPlayerResources::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARequestBatchPlayerResources.account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARequestBatchPlayerResources::account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARequestBatchPlayerResources.account_ids)
  return account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARequestBatchPlayerResources::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARequestBatchPlayerResources.account_ids)
  return &account_ids_;
}

// repeated uint32 rank_types = 4 [packed = true];
int CMsgDOTARequestBatchPlayerResources::rank_types_size() const {
  return rank_types_.size();
}
void CMsgDOTARequestBatchPlayerResources::clear_rank_types() {
  rank_types_.Clear();
}
::google::protobuf::uint32 CMsgDOTARequestBatchPlayerResources::rank_types(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestBatchPlayerResources.rank_types)
  return rank_types_.Get(index);
}
void CMsgDOTARequestBatchPlayerResources::set_rank_types(int index, ::google::protobuf::uint32 value) {
  rank_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestBatchPlayerResources.rank_types)
}
void CMsgDOTARequestBatchPlayerResources::add_rank_types(::google::protobuf::uint32 value) {
  rank_types_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARequestBatchPlayerResources.rank_types)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARequestBatchPlayerResources::rank_types() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARequestBatchPlayerResources.rank_types)
  return rank_types_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARequestBatchPlayerResources::mutable_rank_types() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARequestBatchPlayerResources.rank_types)
  return &rank_types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kAccountIdFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kPreventTextChatFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kPreventVoiceChatFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kRankFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kRankCalibratedFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kLowPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestBatchPlayerResourcesResponse_Result::CMsgDOTARequestBatchPlayerResourcesResponse_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
}
CMsgDOTARequestBatchPlayerResourcesResponse_Result::CMsgDOTARequestBatchPlayerResourcesResponse_Result(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(low_priority_));
}

CMsgDOTARequestBatchPlayerResourcesResponse_Result::~CMsgDOTARequestBatchPlayerResourcesResponse_Result() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SharedDtor() {
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse_Result::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARequestBatchPlayerResourcesResponse_Result& CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARequestBatchPlayerResourcesResponse_Result* CMsgDOTARequestBatchPlayerResourcesResponse_Result::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARequestBatchPlayerResourcesResponse_Result* n = new CMsgDOTARequestBatchPlayerResourcesResponse_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&low_priority_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(low_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prevent_text_chat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_prevent_text_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_text_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prevent_voice_chat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_prevent_voice_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_voice_chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rank_calibrated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_rank_calibrated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rank_calibrated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_low_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  return false;
#undef DO_
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional bool prevent_text_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->prevent_text_chat(), output);
  }

  // optional bool prevent_voice_chat = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prevent_voice_chat(), output);
  }

  // optional uint32 rank = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

  // optional bool rank_calibrated = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->rank_calibrated(), output);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResourcesResponse_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional bool prevent_text_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->prevent_text_chat(), target);
  }

  // optional bool prevent_voice_chat = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prevent_voice_chat(), target);
  }

  // optional uint32 rank = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank(), target);
  }

  // optional bool rank_calibrated = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->rank_calibrated(), target);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  return target;
}

size_t CMsgDOTARequestBatchPlayerResourcesResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional bool prevent_text_chat = 2;
    if (has_prevent_text_chat()) {
      total_size += 1 + 1;
    }

    // optional bool prevent_voice_chat = 3;
    if (has_prevent_voice_chat()) {
      total_size += 1 + 1;
    }

    // optional bool rank_calibrated = 5;
    if (has_rank_calibrated()) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResourcesResponse_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARequestBatchPlayerResourcesResponse_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      prevent_text_chat_ = from.prevent_text_chat_;
    }
    if (cached_has_bits & 0x00000008u) {
      prevent_voice_chat_ = from.prevent_voice_chat_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_calibrated_ = from.rank_calibrated_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_priority_ = from.low_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::IsInitialized() const {
  return true;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::Swap(CMsgDOTARequestBatchPlayerResourcesResponse_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::InternalSwap(CMsgDOTARequestBatchPlayerResourcesResponse_Result* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(rank_, other->rank_);
  std::swap(prevent_text_chat_, other->prevent_text_chat_);
  std::swap(prevent_voice_chat_, other->prevent_voice_chat_);
  std::swap(rank_calibrated_, other->rank_calibrated_);
  std::swap(low_priority_, other->low_priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResourcesResponse_Result::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARequestBatchPlayerResourcesResponse_Result

// optional uint32 account_id = 1;
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTARequestBatchPlayerResourcesResponse_Result::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.account_id)
  return account_id_;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.account_id)
}

// optional bool prevent_text_chat = 2;
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_prevent_text_chat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_prevent_text_chat() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_prevent_text_chat() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_prevent_text_chat() {
  prevent_text_chat_ = false;
  clear_has_prevent_text_chat();
}
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::prevent_text_chat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.prevent_text_chat)
  return prevent_text_chat_;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_prevent_text_chat(bool value) {
  set_has_prevent_text_chat();
  prevent_text_chat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.prevent_text_chat)
}

// optional bool prevent_voice_chat = 3;
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_prevent_voice_chat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_prevent_voice_chat() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_prevent_voice_chat() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_prevent_voice_chat() {
  prevent_voice_chat_ = false;
  clear_has_prevent_voice_chat();
}
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::prevent_voice_chat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.prevent_voice_chat)
  return prevent_voice_chat_;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_prevent_voice_chat(bool value) {
  set_has_prevent_voice_chat();
  prevent_voice_chat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.prevent_voice_chat)
}

// optional uint32 rank = 4;
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
::google::protobuf::uint32 CMsgDOTARequestBatchPlayerResourcesResponse_Result::rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.rank)
  return rank_;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.rank)
}

// optional bool rank_calibrated = 5;
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_rank_calibrated() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_rank_calibrated() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_rank_calibrated() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_rank_calibrated() {
  rank_calibrated_ = false;
  clear_has_rank_calibrated();
}
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::rank_calibrated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.rank_calibrated)
  return rank_calibrated_;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_rank_calibrated(bool value) {
  set_has_rank_calibrated();
  rank_calibrated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.rank_calibrated)
}

// optional bool low_priority = 6;
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_low_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_low_priority() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_low_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::low_priority() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.low_priority)
  return low_priority_;
}
void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result.low_priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestBatchPlayerResourcesResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestBatchPlayerResourcesResponse::CMsgDOTARequestBatchPlayerResourcesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
}
CMsgDOTARequestBatchPlayerResourcesResponse::CMsgDOTARequestBatchPlayerResourcesResponse(const CMsgDOTARequestBatchPlayerResourcesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARequestBatchPlayerResourcesResponse::~CMsgDOTARequestBatchPlayerResourcesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SharedDtor() {
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARequestBatchPlayerResourcesResponse& CMsgDOTARequestBatchPlayerResourcesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARequestBatchPlayerResourcesResponse* CMsgDOTARequestBatchPlayerResourcesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARequestBatchPlayerResourcesResponse* n = new CMsgDOTARequestBatchPlayerResourcesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARequestBatchPlayerResourcesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  return false;
#undef DO_
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->results(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResourcesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->results(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  return target;
}

size_t CMsgDOTARequestBatchPlayerResourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResourcesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARequestBatchPlayerResourcesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse::MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CMsgDOTARequestBatchPlayerResourcesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse::CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResourcesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::Swap(CMsgDOTARequestBatchPlayerResourcesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestBatchPlayerResourcesResponse::InternalSwap(CMsgDOTARequestBatchPlayerResourcesResponse* other) {
  results_.InternalSwap(&other->results_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResourcesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARequestBatchPlayerResourcesResponse

// repeated .proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
int CMsgDOTARequestBatchPlayerResourcesResponse::results_size() const {
  return results_.size();
}
void CMsgDOTARequestBatchPlayerResourcesResponse::clear_results() {
  results_.Clear();
}
const ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result& CMsgDOTARequestBatchPlayerResourcesResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.results)
  return results_.Get(index);
}
::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result* CMsgDOTARequestBatchPlayerResourcesResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.results)
  return results_.Mutable(index);
}
::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result* CMsgDOTARequestBatchPlayerResourcesResponse::add_results() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result >*
CMsgDOTARequestBatchPlayerResourcesResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARequestBatchPlayerResourcesResponse_Result >&
CMsgDOTARequestBatchPlayerResourcesResponse::results() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARequestBatchPlayerResourcesResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPlayerFailedToConnect::kFailedLoadersFieldNumber;
const int CMsgDOTAPlayerFailedToConnect::kAbandonedLoadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPlayerFailedToConnect)
}
CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(const CMsgDOTAPlayerFailedToConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      failed_loaders_(from.failed_loaders_),
      abandoned_loaders_(from.abandoned_loaders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPlayerFailedToConnect)
}

void CMsgDOTAPlayerFailedToConnect::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAPlayerFailedToConnect::~CMsgDOTAPlayerFailedToConnect() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPlayerFailedToConnect)
  SharedDtor();
}

void CMsgDOTAPlayerFailedToConnect::SharedDtor() {
}

void CMsgDOTAPlayerFailedToConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPlayerFailedToConnect::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAPlayerFailedToConnect& CMsgDOTAPlayerFailedToConnect::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAPlayerFailedToConnect* CMsgDOTAPlayerFailedToConnect::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPlayerFailedToConnect* n = new CMsgDOTAPlayerFailedToConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPlayerFailedToConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  failed_loaders_.Clear();
  abandoned_loaders_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAPlayerFailedToConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 failed_loaders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_failed_loaders())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_failed_loaders())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 abandoned_loaders = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_abandoned_loaders())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_abandoned_loaders())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPlayerFailedToConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPlayerFailedToConnect)
  return false;
#undef DO_
}

void CMsgDOTAPlayerFailedToConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 failed_loaders = 1;
  for (int i = 0, n = this->failed_loaders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->failed_loaders(i), output);
  }

  // repeated fixed64 abandoned_loaders = 2;
  for (int i = 0, n = this->abandoned_loaders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->abandoned_loaders(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPlayerFailedToConnect)
}

::google::protobuf::uint8* CMsgDOTAPlayerFailedToConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 failed_loaders = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->failed_loaders_, target);

  // repeated fixed64 abandoned_loaders = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->abandoned_loaders_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPlayerFailedToConnect)
  return target;
}

size_t CMsgDOTAPlayerFailedToConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 failed_loaders = 1;
  {
    unsigned int count = this->failed_loaders_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->failed_loaders_size());
    total_size += data_size;
  }

  // repeated fixed64 abandoned_loaders = 2;
  {
    unsigned int count = this->abandoned_loaders_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->abandoned_loaders_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPlayerFailedToConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPlayerFailedToConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPlayerFailedToConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPlayerFailedToConnect)
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const CMsgDOTAPlayerFailedToConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failed_loaders_.MergeFrom(from.failed_loaders_);
  abandoned_loaders_.MergeFrom(from.abandoned_loaders_);
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const CMsgDOTAPlayerFailedToConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPlayerFailedToConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerFailedToConnect::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerFailedToConnect::Swap(CMsgDOTAPlayerFailedToConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPlayerFailedToConnect::InternalSwap(CMsgDOTAPlayerFailedToConnect* other) {
  failed_loaders_.InternalSwap(&other->failed_loaders_);
  abandoned_loaders_.InternalSwap(&other->abandoned_loaders_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPlayerFailedToConnect::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPlayerFailedToConnect

// repeated fixed64 failed_loaders = 1;
int CMsgDOTAPlayerFailedToConnect::failed_loaders_size() const {
  return failed_loaders_.size();
}
void CMsgDOTAPlayerFailedToConnect::clear_failed_loaders() {
  failed_loaders_.Clear();
}
::google::protobuf::uint64 CMsgDOTAPlayerFailedToConnect::failed_loaders(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPlayerFailedToConnect.failed_loaders)
  return failed_loaders_.Get(index);
}
void CMsgDOTAPlayerFailedToConnect::set_failed_loaders(int index, ::google::protobuf::uint64 value) {
  failed_loaders_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPlayerFailedToConnect.failed_loaders)
}
void CMsgDOTAPlayerFailedToConnect::add_failed_loaders(::google::protobuf::uint64 value) {
  failed_loaders_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAPlayerFailedToConnect.failed_loaders)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAPlayerFailedToConnect::failed_loaders() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAPlayerFailedToConnect.failed_loaders)
  return failed_loaders_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAPlayerFailedToConnect::mutable_failed_loaders() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAPlayerFailedToConnect.failed_loaders)
  return &failed_loaders_;
}

// repeated fixed64 abandoned_loaders = 2;
int CMsgDOTAPlayerFailedToConnect::abandoned_loaders_size() const {
  return abandoned_loaders_.size();
}
void CMsgDOTAPlayerFailedToConnect::clear_abandoned_loaders() {
  abandoned_loaders_.Clear();
}
::google::protobuf::uint64 CMsgDOTAPlayerFailedToConnect::abandoned_loaders(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
  return abandoned_loaders_.Get(index);
}
void CMsgDOTAPlayerFailedToConnect::set_abandoned_loaders(int index, ::google::protobuf::uint64 value) {
  abandoned_loaders_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
}
void CMsgDOTAPlayerFailedToConnect::add_abandoned_loaders(::google::protobuf::uint64 value) {
  abandoned_loaders_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAPlayerFailedToConnect::abandoned_loaders() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
  return abandoned_loaders_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAPlayerFailedToConnect::mutable_abandoned_loaders() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
  return &abandoned_loaders_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToRelayConnect::kSourceTvPublicAddrFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvPrivateAddrFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvPortFieldNumber;
const int CMsgGCToRelayConnect::kGameServerSteamIdFieldNumber;
const int CMsgGCToRelayConnect::kParentCountFieldNumber;
const int CMsgGCToRelayConnect::kTvUniqueSecretCodeFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToRelayConnect::CMsgGCToRelayConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToRelayConnect)
}
CMsgGCToRelayConnect::CMsgGCToRelayConnect(const CMsgGCToRelayConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_tv_public_addr_, &from.source_tv_public_addr_,
    reinterpret_cast<char*>(&source_tv_steamid_) -
    reinterpret_cast<char*>(&source_tv_public_addr_) + sizeof(source_tv_steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToRelayConnect)
}

void CMsgGCToRelayConnect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_tv_public_addr_, 0, reinterpret_cast<char*>(&source_tv_steamid_) -
    reinterpret_cast<char*>(&source_tv_public_addr_) + sizeof(source_tv_steamid_));
}

CMsgGCToRelayConnect::~CMsgGCToRelayConnect() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToRelayConnect)
  SharedDtor();
}

void CMsgGCToRelayConnect::SharedDtor() {
}

void CMsgGCToRelayConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToRelayConnect::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToRelayConnect& CMsgGCToRelayConnect::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToRelayConnect* CMsgGCToRelayConnect::New(::google::protobuf::Arena* arena) const {
  CMsgGCToRelayConnect* n = new CMsgGCToRelayConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToRelayConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToRelayConnect)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&source_tv_public_addr_, 0, reinterpret_cast<char*>(&source_tv_steamid_) -
      reinterpret_cast<char*>(&source_tv_public_addr_) + sizeof(source_tv_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToRelayConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToRelayConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_tv_public_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_source_tv_public_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_public_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_private_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_source_tv_private_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_private_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_source_tv_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 game_server_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parent_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_parent_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 tv_unique_secret_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_tv_unique_secret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tv_unique_secret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 source_tv_steamid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_source_tv_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_tv_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToRelayConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToRelayConnect)
  return false;
#undef DO_
}

void CMsgGCToRelayConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_tv_public_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_tv_public_addr(), output);
  }

  // optional uint32 source_tv_private_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_tv_private_addr(), output);
  }

  // optional uint32 source_tv_port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_tv_port(), output);
  }

  // optional uint64 game_server_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_server_steam_id(), output);
  }

  // optional uint32 parent_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parent_count(), output);
  }

  // optional fixed64 tv_unique_secret_code = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->tv_unique_secret_code(), output);
  }

  // optional fixed64 source_tv_steamid = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->source_tv_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToRelayConnect)
}

::google::protobuf::uint8* CMsgGCToRelayConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_tv_public_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_tv_port(), target);
  }

  // optional uint64 game_server_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_server_steam_id(), target);
  }

  // optional uint32 parent_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parent_count(), target);
  }

  // optional fixed64 tv_unique_secret_code = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->tv_unique_secret_code(), target);
  }

  // optional fixed64 source_tv_steamid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->source_tv_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToRelayConnect)
  return target;
}

size_t CMsgGCToRelayConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToRelayConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 source_tv_public_addr = 1;
    if (has_source_tv_public_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 2;
    if (has_source_tv_private_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_private_addr());
    }

    // optional uint64 game_server_steam_id = 4;
    if (has_game_server_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_server_steam_id());
    }

    // optional uint32 source_tv_port = 3;
    if (has_source_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_port());
    }

    // optional uint32 parent_count = 5;
    if (has_parent_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_count());
    }

    // optional fixed64 tv_unique_secret_code = 6;
    if (has_tv_unique_secret_code()) {
      total_size += 1 + 8;
    }

    // optional fixed64 source_tv_steamid = 7;
    if (has_source_tv_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToRelayConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToRelayConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToRelayConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToRelayConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToRelayConnect)
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnect::MergeFrom(const CMsgGCToRelayConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      source_tv_public_addr_ = from.source_tv_public_addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_tv_private_addr_ = from.source_tv_private_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_steam_id_ = from.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_tv_port_ = from.source_tv_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      parent_count_ = from.parent_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      tv_unique_secret_code_ = from.tv_unique_secret_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      source_tv_steamid_ = from.source_tv_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToRelayConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnect::CopyFrom(const CMsgGCToRelayConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnect::IsInitialized() const {
  return true;
}

void CMsgGCToRelayConnect::Swap(CMsgGCToRelayConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToRelayConnect::InternalSwap(CMsgGCToRelayConnect* other) {
  std::swap(source_tv_public_addr_, other->source_tv_public_addr_);
  std::swap(source_tv_private_addr_, other->source_tv_private_addr_);
  std::swap(game_server_steam_id_, other->game_server_steam_id_);
  std::swap(source_tv_port_, other->source_tv_port_);
  std::swap(parent_count_, other->parent_count_);
  std::swap(tv_unique_secret_code_, other->tv_unique_secret_code_);
  std::swap(source_tv_steamid_, other->source_tv_steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToRelayConnect::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToRelayConnect

// optional uint32 source_tv_public_addr = 1;
bool CMsgGCToRelayConnect::has_source_tv_public_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToRelayConnect::set_has_source_tv_public_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToRelayConnect::clear_has_source_tv_public_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToRelayConnect::clear_source_tv_public_addr() {
  source_tv_public_addr_ = 0u;
  clear_has_source_tv_public_addr();
}
::google::protobuf::uint32 CMsgGCToRelayConnect::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToRelayConnect.source_tv_public_addr)
  return source_tv_public_addr_;
}
void CMsgGCToRelayConnect::set_source_tv_public_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_public_addr();
  source_tv_public_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToRelayConnect.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 2;
bool CMsgGCToRelayConnect::has_source_tv_private_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToRelayConnect::set_has_source_tv_private_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToRelayConnect::clear_has_source_tv_private_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToRelayConnect::clear_source_tv_private_addr() {
  source_tv_private_addr_ = 0u;
  clear_has_source_tv_private_addr();
}
::google::protobuf::uint32 CMsgGCToRelayConnect::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToRelayConnect.source_tv_private_addr)
  return source_tv_private_addr_;
}
void CMsgGCToRelayConnect::set_source_tv_private_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_private_addr();
  source_tv_private_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToRelayConnect.source_tv_private_addr)
}

// optional uint32 source_tv_port = 3;
bool CMsgGCToRelayConnect::has_source_tv_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCToRelayConnect::set_has_source_tv_port() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCToRelayConnect::clear_has_source_tv_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCToRelayConnect::clear_source_tv_port() {
  source_tv_port_ = 0u;
  clear_has_source_tv_port();
}
::google::protobuf::uint32 CMsgGCToRelayConnect::source_tv_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToRelayConnect.source_tv_port)
  return source_tv_port_;
}
void CMsgGCToRelayConnect::set_source_tv_port(::google::protobuf::uint32 value) {
  set_has_source_tv_port();
  source_tv_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToRelayConnect.source_tv_port)
}

// optional uint64 game_server_steam_id = 4;
bool CMsgGCToRelayConnect::has_game_server_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToRelayConnect::set_has_game_server_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToRelayConnect::clear_has_game_server_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToRelayConnect::clear_game_server_steam_id() {
  game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steam_id();
}
::google::protobuf::uint64 CMsgGCToRelayConnect::game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToRelayConnect.game_server_steam_id)
  return game_server_steam_id_;
}
void CMsgGCToRelayConnect::set_game_server_steam_id(::google::protobuf::uint64 value) {
  set_has_game_server_steam_id();
  game_server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToRelayConnect.game_server_steam_id)
}

// optional uint32 parent_count = 5;
bool CMsgGCToRelayConnect::has_parent_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCToRelayConnect::set_has_parent_count() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCToRelayConnect::clear_has_parent_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCToRelayConnect::clear_parent_count() {
  parent_count_ = 0u;
  clear_has_parent_count();
}
::google::protobuf::uint32 CMsgGCToRelayConnect::parent_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToRelayConnect.parent_count)
  return parent_count_;
}
void CMsgGCToRelayConnect::set_parent_count(::google::protobuf::uint32 value) {
  set_has_parent_count();
  parent_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToRelayConnect.parent_count)
}

// optional fixed64 tv_unique_secret_code = 6;
bool CMsgGCToRelayConnect::has_tv_unique_secret_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGCToRelayConnect::set_has_tv_unique_secret_code() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGCToRelayConnect::clear_has_tv_unique_secret_code() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGCToRelayConnect::clear_tv_unique_secret_code() {
  tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_unique_secret_code();
}
::google::protobuf::uint64 CMsgGCToRelayConnect::tv_unique_secret_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToRelayConnect.tv_unique_secret_code)
  return tv_unique_secret_code_;
}
void CMsgGCToRelayConnect::set_tv_unique_secret_code(::google::protobuf::uint64 value) {
  set_has_tv_unique_secret_code();
  tv_unique_secret_code_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToRelayConnect.tv_unique_secret_code)
}

// optional fixed64 source_tv_steamid = 7;
bool CMsgGCToRelayConnect::has_source_tv_steamid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGCToRelayConnect::set_has_source_tv_steamid() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGCToRelayConnect::clear_has_source_tv_steamid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGCToRelayConnect::clear_source_tv_steamid() {
  source_tv_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_source_tv_steamid();
}
::google::protobuf::uint64 CMsgGCToRelayConnect::source_tv_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToRelayConnect.source_tv_steamid)
  return source_tv_steamid_;
}
void CMsgGCToRelayConnect::set_source_tv_steamid(::google::protobuf::uint64 value) {
  set_has_source_tv_steamid();
  source_tv_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToRelayConnect.source_tv_steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGCToLANServerRelayConnect::kRelaySteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGCToLANServerRelayConnect)
}
CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect(const CMsgGCGCToLANServerRelayConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relay_steamid_ = from.relay_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGCToLANServerRelayConnect)
}

void CMsgGCGCToLANServerRelayConnect::SharedCtor() {
  _cached_size_ = 0;
  relay_steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgGCGCToLANServerRelayConnect::~CMsgGCGCToLANServerRelayConnect() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGCToLANServerRelayConnect)
  SharedDtor();
}

void CMsgGCGCToLANServerRelayConnect::SharedDtor() {
}

void CMsgGCGCToLANServerRelayConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGCToLANServerRelayConnect::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGCToLANServerRelayConnect& CMsgGCGCToLANServerRelayConnect::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGCToLANServerRelayConnect* CMsgGCGCToLANServerRelayConnect::New(::google::protobuf::Arena* arena) const {
  CMsgGCGCToLANServerRelayConnect* n = new CMsgGCGCToLANServerRelayConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGCToLANServerRelayConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  relay_steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGCToLANServerRelayConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 relay_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_relay_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relay_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGCToLANServerRelayConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGCToLANServerRelayConnect)
  return false;
#undef DO_
}

void CMsgGCGCToLANServerRelayConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 relay_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->relay_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGCToLANServerRelayConnect)
}

::google::protobuf::uint8* CMsgGCGCToLANServerRelayConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 relay_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->relay_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGCToLANServerRelayConnect)
  return target;
}

size_t CMsgGCGCToLANServerRelayConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 relay_steamid = 1;
  if (has_relay_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGCToLANServerRelayConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGCToLANServerRelayConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGCToLANServerRelayConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGCToLANServerRelayConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGCToLANServerRelayConnect)
    MergeFrom(*source);
  }
}

void CMsgGCGCToLANServerRelayConnect::MergeFrom(const CMsgGCGCToLANServerRelayConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relay_steamid()) {
    set_relay_steamid(from.relay_steamid());
  }
}

void CMsgGCGCToLANServerRelayConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGCToLANServerRelayConnect::CopyFrom(const CMsgGCGCToLANServerRelayConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGCToLANServerRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGCToLANServerRelayConnect::IsInitialized() const {
  return true;
}

void CMsgGCGCToLANServerRelayConnect::Swap(CMsgGCGCToLANServerRelayConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGCToLANServerRelayConnect::InternalSwap(CMsgGCGCToLANServerRelayConnect* other) {
  std::swap(relay_steamid_, other->relay_steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGCToLANServerRelayConnect::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGCToLANServerRelayConnect

// optional fixed64 relay_steamid = 1;
bool CMsgGCGCToLANServerRelayConnect::has_relay_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGCToLANServerRelayConnect::set_has_relay_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGCToLANServerRelayConnect::clear_has_relay_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGCToLANServerRelayConnect::clear_relay_steamid() {
  relay_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_relay_steamid();
}
::google::protobuf::uint64 CMsgGCGCToLANServerRelayConnect::relay_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGCToLANServerRelayConnect.relay_steamid)
  return relay_steamid_;
}
void CMsgGCGCToLANServerRelayConnect::set_relay_steamid(::google::protobuf::uint64 value) {
  set_has_relay_steamid();
  relay_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGCToLANServerRelayConnect.relay_steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToRelayConnectResponse)
}
CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse(const CMsgGCToRelayConnectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToRelayConnectResponse)
}

void CMsgGCToRelayConnectResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCToRelayConnectResponse::~CMsgGCToRelayConnectResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToRelayConnectResponse)
  SharedDtor();
}

void CMsgGCToRelayConnectResponse::SharedDtor() {
}

void CMsgGCToRelayConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToRelayConnectResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToRelayConnectResponse& CMsgGCToRelayConnectResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToRelayConnectResponse* CMsgGCToRelayConnectResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToRelayConnectResponse* n = new CMsgGCToRelayConnectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToRelayConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToRelayConnectResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToRelayConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToRelayConnectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToRelayConnectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToRelayConnectResponse)
  return false;
#undef DO_
}

void CMsgGCToRelayConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToRelayConnectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToRelayConnectResponse)
}

::google::protobuf::uint8* CMsgGCToRelayConnectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToRelayConnectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToRelayConnectResponse)
  return target;
}

size_t CMsgGCToRelayConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToRelayConnectResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToRelayConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToRelayConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToRelayConnectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToRelayConnectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToRelayConnectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToRelayConnectResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnectResponse::MergeFrom(const CMsgGCToRelayConnectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToRelayConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToRelayConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToRelayConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnectResponse::CopyFrom(const CMsgGCToRelayConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToRelayConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnectResponse::IsInitialized() const {
  return true;
}

void CMsgGCToRelayConnectResponse::Swap(CMsgGCToRelayConnectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToRelayConnectResponse::InternalSwap(CMsgGCToRelayConnectResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToRelayConnectResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToRelayConnectResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCBanStatusRequest::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCBanStatusRequest::CMsgGCBanStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCBanStatusRequest)
}
CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(const CMsgGCBanStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCBanStatusRequest)
}

void CMsgGCBanStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgGCBanStatusRequest::~CMsgGCBanStatusRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCBanStatusRequest)
  SharedDtor();
}

void CMsgGCBanStatusRequest::SharedDtor() {
}

void CMsgGCBanStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBanStatusRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCBanStatusRequest& CMsgGCBanStatusRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCBanStatusRequest* CMsgGCBanStatusRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGCBanStatusRequest* n = new CMsgGCBanStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCBanStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCBanStatusRequest)
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCBanStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCBanStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCBanStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCBanStatusRequest)
  return false;
#undef DO_
}

void CMsgGCBanStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCBanStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCBanStatusRequest)
}

::google::protobuf::uint8* CMsgGCBanStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCBanStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCBanStatusRequest)
  return target;
}

size_t CMsgGCBanStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCBanStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBanStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCBanStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCBanStatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCBanStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCBanStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCBanStatusRequest)
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusRequest::MergeFrom(const CMsgGCBanStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCBanStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgGCBanStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCBanStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusRequest::CopyFrom(const CMsgGCBanStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCBanStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusRequest::IsInitialized() const {
  return true;
}

void CMsgGCBanStatusRequest::Swap(CMsgGCBanStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCBanStatusRequest::InternalSwap(CMsgGCBanStatusRequest* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCBanStatusRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCBanStatusRequest

// optional uint32 account_id = 1;
bool CMsgGCBanStatusRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCBanStatusRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCBanStatusRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCBanStatusRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgGCBanStatusRequest::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBanStatusRequest.account_id)
  return account_id_;
}
void CMsgGCBanStatusRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBanStatusRequest.account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCBanStatusResponse::kResultFieldNumber;
const int CMsgGCBanStatusResponse::kLowPriorityFieldNumber;
const int CMsgGCBanStatusResponse::kTextChatBannedFieldNumber;
const int CMsgGCBanStatusResponse::kVoiceChatBannedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCBanStatusResponse::CMsgGCBanStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCBanStatusResponse)
}
CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(const CMsgGCBanStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&voice_chat_banned_) -
    reinterpret_cast<char*>(&result_) + sizeof(voice_chat_banned_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCBanStatusResponse)
}

void CMsgGCBanStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&voice_chat_banned_) -
    reinterpret_cast<char*>(&result_) + sizeof(voice_chat_banned_));
}

CMsgGCBanStatusResponse::~CMsgGCBanStatusResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCBanStatusResponse)
  SharedDtor();
}

void CMsgGCBanStatusResponse::SharedDtor() {
}

void CMsgGCBanStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBanStatusResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCBanStatusResponse& CMsgGCBanStatusResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCBanStatusResponse* CMsgGCBanStatusResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCBanStatusResponse* n = new CMsgGCBanStatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCBanStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCBanStatusResponse)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&voice_chat_banned_) -
      reinterpret_cast<char*>(&result_) + sizeof(voice_chat_banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCBanStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCBanStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_low_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool text_chat_banned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_text_chat_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &text_chat_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_chat_banned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_voice_chat_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_chat_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCBanStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCBanStatusResponse)
  return false;
#undef DO_
}

void CMsgGCBanStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCBanStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional bool low_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->low_priority(), output);
  }

  // optional bool text_chat_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->text_chat_banned(), output);
  }

  // optional bool voice_chat_banned = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->voice_chat_banned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCBanStatusResponse)
}

::google::protobuf::uint8* CMsgGCBanStatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCBanStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional bool low_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->low_priority(), target);
  }

  // optional bool text_chat_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->text_chat_banned(), target);
  }

  // optional bool voice_chat_banned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->voice_chat_banned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCBanStatusResponse)
  return target;
}

size_t CMsgGCBanStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCBanStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bool low_priority = 2;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }

    // optional bool text_chat_banned = 3;
    if (has_text_chat_banned()) {
      total_size += 1 + 1;
    }

    // optional bool voice_chat_banned = 4;
    if (has_voice_chat_banned()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBanStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCBanStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCBanStatusResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCBanStatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCBanStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCBanStatusResponse)
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusResponse::MergeFrom(const CMsgGCBanStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCBanStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_priority_ = from.low_priority_;
    }
    if (cached_has_bits & 0x00000004u) {
      text_chat_banned_ = from.text_chat_banned_;
    }
    if (cached_has_bits & 0x00000008u) {
      voice_chat_banned_ = from.voice_chat_banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCBanStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCBanStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusResponse::CopyFrom(const CMsgGCBanStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCBanStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusResponse::IsInitialized() const {
  return true;
}

void CMsgGCBanStatusResponse::Swap(CMsgGCBanStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCBanStatusResponse::InternalSwap(CMsgGCBanStatusResponse* other) {
  std::swap(result_, other->result_);
  std::swap(low_priority_, other->low_priority_);
  std::swap(text_chat_banned_, other->text_chat_banned_);
  std::swap(voice_chat_banned_, other->voice_chat_banned_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCBanStatusResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCBanStatusResponse

// optional uint32 result = 1;
bool CMsgGCBanStatusResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCBanStatusResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCBanStatusResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCBanStatusResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgGCBanStatusResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBanStatusResponse.result)
  return result_;
}
void CMsgGCBanStatusResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBanStatusResponse.result)
}

// optional bool low_priority = 2;
bool CMsgGCBanStatusResponse::has_low_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCBanStatusResponse::set_has_low_priority() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCBanStatusResponse::clear_has_low_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCBanStatusResponse::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
bool CMsgGCBanStatusResponse::low_priority() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBanStatusResponse.low_priority)
  return low_priority_;
}
void CMsgGCBanStatusResponse::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBanStatusResponse.low_priority)
}

// optional bool text_chat_banned = 3;
bool CMsgGCBanStatusResponse::has_text_chat_banned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCBanStatusResponse::set_has_text_chat_banned() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCBanStatusResponse::clear_has_text_chat_banned() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCBanStatusResponse::clear_text_chat_banned() {
  text_chat_banned_ = false;
  clear_has_text_chat_banned();
}
bool CMsgGCBanStatusResponse::text_chat_banned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBanStatusResponse.text_chat_banned)
  return text_chat_banned_;
}
void CMsgGCBanStatusResponse::set_text_chat_banned(bool value) {
  set_has_text_chat_banned();
  text_chat_banned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBanStatusResponse.text_chat_banned)
}

// optional bool voice_chat_banned = 4;
bool CMsgGCBanStatusResponse::has_voice_chat_banned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCBanStatusResponse::set_has_voice_chat_banned() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCBanStatusResponse::clear_has_voice_chat_banned() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCBanStatusResponse::clear_voice_chat_banned() {
  voice_chat_banned_ = false;
  clear_has_voice_chat_banned();
}
bool CMsgGCBanStatusResponse::voice_chat_banned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCBanStatusResponse.voice_chat_banned)
  return voice_chat_banned_;
}
void CMsgGCBanStatusResponse::set_voice_chat_banned(bool value) {
  set_has_voice_chat_banned();
  voice_chat_banned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCBanStatusResponse.voice_chat_banned)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTournamentItemEvent::kKillerAccountIdFieldNumber;
const int CMsgTournamentItemEvent::kVictimAccountIdFieldNumber;
const int CMsgTournamentItemEvent::kEventTypeFieldNumber;
const int CMsgTournamentItemEvent::kTvDelayFieldNumber;
const int CMsgTournamentItemEvent::kDotaTimeFieldNumber;
const int CMsgTournamentItemEvent::kReplayTimeFieldNumber;
const int CMsgTournamentItemEvent::kLootListFieldNumber;
const int CMsgTournamentItemEvent::kEventTeamFieldNumber;
const int CMsgTournamentItemEvent::kMultiKillCountFieldNumber;
const int CMsgTournamentItemEvent::kWinnerScoreFieldNumber;
const int CMsgTournamentItemEvent::kLoserScoreFieldNumber;
const int CMsgTournamentItemEvent::kHeroStatuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTournamentItemEvent::CMsgTournamentItemEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTournamentItemEvent)
}
CMsgTournamentItemEvent::CMsgTournamentItemEvent(const CMsgTournamentItemEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hero_statues_(from.hero_statues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loot_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loot_list()) {
    loot_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loot_list_);
  }
  ::memcpy(&killer_account_id_, &from.killer_account_id_,
    reinterpret_cast<char*>(&loser_score_) -
    reinterpret_cast<char*>(&killer_account_id_) + sizeof(loser_score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTournamentItemEvent)
}

void CMsgTournamentItemEvent::SharedCtor() {
  _cached_size_ = 0;
  loot_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&killer_account_id_, 0, reinterpret_cast<char*>(&loser_score_) -
    reinterpret_cast<char*>(&killer_account_id_) + sizeof(loser_score_));
}

CMsgTournamentItemEvent::~CMsgTournamentItemEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTournamentItemEvent)
  SharedDtor();
}

void CMsgTournamentItemEvent::SharedDtor() {
  loot_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTournamentItemEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTournamentItemEvent::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTournamentItemEvent& CMsgTournamentItemEvent::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTournamentItemEvent* CMsgTournamentItemEvent::New(::google::protobuf::Arena* arena) const {
  CMsgTournamentItemEvent* n = new CMsgTournamentItemEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTournamentItemEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTournamentItemEvent)
  hero_statues_.Clear();
  if (has_loot_list()) {
    GOOGLE_DCHECK(!loot_list_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*loot_list_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&killer_account_id_, 0, reinterpret_cast<char*>(&event_team_) -
      reinterpret_cast<char*>(&killer_account_id_) + sizeof(event_team_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&multi_kill_count_, 0, reinterpret_cast<char*>(&loser_score_) -
      reinterpret_cast<char*>(&multi_kill_count_) + sizeof(loser_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTournamentItemEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTournamentItemEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 killer_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_killer_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &killer_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 victim_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_victim_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &victim_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_TournamentEvents_IsValid(value)) {
            set_event_type(static_cast< ::proto::dota::DOTA_TournamentEvents >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tv_delay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tv_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tv_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_dota_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float replay_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_replay_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replay_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string loot_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loot_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loot_list().data(), this->loot_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgTournamentItemEvent.loot_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_team = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_event_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 multi_kill_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_multi_kill_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multi_kill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winner_score = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_winner_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loser_score = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_loser_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loser_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_statues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTournamentItemEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTournamentItemEvent)
  return false;
#undef DO_
}

void CMsgTournamentItemEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTournamentItemEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 killer_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->killer_account_id(), output);
  }

  // optional fixed32 victim_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->victim_account_id(), output);
  }

  // optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->event_type(), output);
  }

  // optional int32 tv_delay = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tv_delay(), output);
  }

  // optional int32 dota_time = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dota_time(), output);
  }

  // optional float replay_time = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->replay_time(), output);
  }

  // optional string loot_list = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgTournamentItemEvent.loot_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->loot_list(), output);
  }

  // optional uint32 event_team = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->event_team(), output);
  }

  // optional uint32 multi_kill_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->multi_kill_count(), output);
  }

  // optional uint32 winner_score = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->winner_score(), output);
  }

  // optional uint32 loser_score = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->loser_score(), output);
  }

  // repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
  for (unsigned int i = 0, n = this->hero_statues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->hero_statues(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTournamentItemEvent)
}

::google::protobuf::uint8* CMsgTournamentItemEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTournamentItemEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 killer_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->killer_account_id(), target);
  }

  // optional fixed32 victim_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->victim_account_id(), target);
  }

  // optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->event_type(), target);
  }

  // optional int32 tv_delay = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tv_delay(), target);
  }

  // optional int32 dota_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dota_time(), target);
  }

  // optional float replay_time = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->replay_time(), target);
  }

  // optional string loot_list = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgTournamentItemEvent.loot_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->loot_list(), target);
  }

  // optional uint32 event_team = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->event_team(), target);
  }

  // optional uint32 multi_kill_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->multi_kill_count(), target);
  }

  // optional uint32 winner_score = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->winner_score(), target);
  }

  // optional uint32 loser_score = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->loser_score(), target);
  }

  // repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
  for (unsigned int i = 0, n = this->hero_statues_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->hero_statues(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTournamentItemEvent)
  return target;
}

size_t CMsgTournamentItemEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTournamentItemEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
  {
    unsigned int count = this->hero_statues_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_statues(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string loot_list = 7;
    if (has_loot_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loot_list());
    }

    // optional fixed32 killer_account_id = 1;
    if (has_killer_account_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 victim_account_id = 2;
    if (has_victim_account_id()) {
      total_size += 1 + 4;
    }

    // optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional int32 tv_delay = 4;
    if (has_tv_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tv_delay());
    }

    // optional int32 dota_time = 5;
    if (has_dota_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_time());
    }

    // optional float replay_time = 6;
    if (has_replay_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 event_team = 8;
    if (has_event_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_team());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 multi_kill_count = 9;
    if (has_multi_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multi_kill_count());
    }

    // optional uint32 winner_score = 10;
    if (has_winner_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner_score());
    }

    // optional uint32 loser_score = 11;
    if (has_loser_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loser_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTournamentItemEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTournamentItemEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTournamentItemEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTournamentItemEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTournamentItemEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTournamentItemEvent)
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEvent::MergeFrom(const CMsgTournamentItemEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTournamentItemEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_statues_.MergeFrom(from.hero_statues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_loot_list();
      loot_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loot_list_);
    }
    if (cached_has_bits & 0x00000002u) {
      killer_account_id_ = from.killer_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      victim_account_id_ = from.victim_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      tv_delay_ = from.tv_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      dota_time_ = from.dota_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      replay_time_ = from.replay_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      event_team_ = from.event_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      multi_kill_count_ = from.multi_kill_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      winner_score_ = from.winner_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      loser_score_ = from.loser_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTournamentItemEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTournamentItemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEvent::CopyFrom(const CMsgTournamentItemEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTournamentItemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEvent::IsInitialized() const {
  return true;
}

void CMsgTournamentItemEvent::Swap(CMsgTournamentItemEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTournamentItemEvent::InternalSwap(CMsgTournamentItemEvent* other) {
  hero_statues_.InternalSwap(&other->hero_statues_);
  loot_list_.Swap(&other->loot_list_);
  std::swap(killer_account_id_, other->killer_account_id_);
  std::swap(victim_account_id_, other->victim_account_id_);
  std::swap(event_type_, other->event_type_);
  std::swap(tv_delay_, other->tv_delay_);
  std::swap(dota_time_, other->dota_time_);
  std::swap(replay_time_, other->replay_time_);
  std::swap(event_team_, other->event_team_);
  std::swap(multi_kill_count_, other->multi_kill_count_);
  std::swap(winner_score_, other->winner_score_);
  std::swap(loser_score_, other->loser_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTournamentItemEvent::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTournamentItemEvent

// optional fixed32 killer_account_id = 1;
bool CMsgTournamentItemEvent::has_killer_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTournamentItemEvent::set_has_killer_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTournamentItemEvent::clear_has_killer_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTournamentItemEvent::clear_killer_account_id() {
  killer_account_id_ = 0u;
  clear_has_killer_account_id();
}
::google::protobuf::uint32 CMsgTournamentItemEvent::killer_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.killer_account_id)
  return killer_account_id_;
}
void CMsgTournamentItemEvent::set_killer_account_id(::google::protobuf::uint32 value) {
  set_has_killer_account_id();
  killer_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.killer_account_id)
}

// optional fixed32 victim_account_id = 2;
bool CMsgTournamentItemEvent::has_victim_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTournamentItemEvent::set_has_victim_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTournamentItemEvent::clear_has_victim_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTournamentItemEvent::clear_victim_account_id() {
  victim_account_id_ = 0u;
  clear_has_victim_account_id();
}
::google::protobuf::uint32 CMsgTournamentItemEvent::victim_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.victim_account_id)
  return victim_account_id_;
}
void CMsgTournamentItemEvent::set_victim_account_id(::google::protobuf::uint32 value) {
  set_has_victim_account_id();
  victim_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.victim_account_id)
}

// optional .proto.dota.DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
bool CMsgTournamentItemEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTournamentItemEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTournamentItemEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTournamentItemEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
::proto::dota::DOTA_TournamentEvents CMsgTournamentItemEvent::event_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.event_type)
  return static_cast< ::proto::dota::DOTA_TournamentEvents >(event_type_);
}
void CMsgTournamentItemEvent::set_event_type(::proto::dota::DOTA_TournamentEvents value) {
  assert(::proto::dota::DOTA_TournamentEvents_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.event_type)
}

// optional int32 tv_delay = 4;
bool CMsgTournamentItemEvent::has_tv_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTournamentItemEvent::set_has_tv_delay() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTournamentItemEvent::clear_has_tv_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTournamentItemEvent::clear_tv_delay() {
  tv_delay_ = 0;
  clear_has_tv_delay();
}
::google::protobuf::int32 CMsgTournamentItemEvent::tv_delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.tv_delay)
  return tv_delay_;
}
void CMsgTournamentItemEvent::set_tv_delay(::google::protobuf::int32 value) {
  set_has_tv_delay();
  tv_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.tv_delay)
}

// optional int32 dota_time = 5;
bool CMsgTournamentItemEvent::has_dota_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgTournamentItemEvent::set_has_dota_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgTournamentItemEvent::clear_has_dota_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgTournamentItemEvent::clear_dota_time() {
  dota_time_ = 0;
  clear_has_dota_time();
}
::google::protobuf::int32 CMsgTournamentItemEvent::dota_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.dota_time)
  return dota_time_;
}
void CMsgTournamentItemEvent::set_dota_time(::google::protobuf::int32 value) {
  set_has_dota_time();
  dota_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.dota_time)
}

// optional float replay_time = 6;
bool CMsgTournamentItemEvent::has_replay_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgTournamentItemEvent::set_has_replay_time() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgTournamentItemEvent::clear_has_replay_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgTournamentItemEvent::clear_replay_time() {
  replay_time_ = 0;
  clear_has_replay_time();
}
float CMsgTournamentItemEvent::replay_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.replay_time)
  return replay_time_;
}
void CMsgTournamentItemEvent::set_replay_time(float value) {
  set_has_replay_time();
  replay_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.replay_time)
}

// optional string loot_list = 7;
bool CMsgTournamentItemEvent::has_loot_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTournamentItemEvent::set_has_loot_list() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTournamentItemEvent::clear_has_loot_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTournamentItemEvent::clear_loot_list() {
  loot_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loot_list();
}
const ::std::string& CMsgTournamentItemEvent::loot_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.loot_list)
  return loot_list_.GetNoArena();
}
void CMsgTournamentItemEvent::set_loot_list(const ::std::string& value) {
  set_has_loot_list();
  loot_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.loot_list)
}
#if LANG_CXX11
void CMsgTournamentItemEvent::set_loot_list(::std::string&& value) {
  set_has_loot_list();
  loot_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgTournamentItemEvent.loot_list)
}
#endif
void CMsgTournamentItemEvent::set_loot_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loot_list();
  loot_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgTournamentItemEvent.loot_list)
}
void CMsgTournamentItemEvent::set_loot_list(const char* value, size_t size) {
  set_has_loot_list();
  loot_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgTournamentItemEvent.loot_list)
}
::std::string* CMsgTournamentItemEvent::mutable_loot_list() {
  set_has_loot_list();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTournamentItemEvent.loot_list)
  return loot_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgTournamentItemEvent::release_loot_list() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTournamentItemEvent.loot_list)
  clear_has_loot_list();
  return loot_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgTournamentItemEvent::set_allocated_loot_list(::std::string* loot_list) {
  if (loot_list != NULL) {
    set_has_loot_list();
  } else {
    clear_has_loot_list();
  }
  loot_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loot_list);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTournamentItemEvent.loot_list)
}

// optional uint32 event_team = 8;
bool CMsgTournamentItemEvent::has_event_team() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgTournamentItemEvent::set_has_event_team() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgTournamentItemEvent::clear_has_event_team() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgTournamentItemEvent::clear_event_team() {
  event_team_ = 0u;
  clear_has_event_team();
}
::google::protobuf::uint32 CMsgTournamentItemEvent::event_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.event_team)
  return event_team_;
}
void CMsgTournamentItemEvent::set_event_team(::google::protobuf::uint32 value) {
  set_has_event_team();
  event_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.event_team)
}

// optional uint32 multi_kill_count = 9;
bool CMsgTournamentItemEvent::has_multi_kill_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgTournamentItemEvent::set_has_multi_kill_count() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgTournamentItemEvent::clear_has_multi_kill_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgTournamentItemEvent::clear_multi_kill_count() {
  multi_kill_count_ = 0u;
  clear_has_multi_kill_count();
}
::google::protobuf::uint32 CMsgTournamentItemEvent::multi_kill_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.multi_kill_count)
  return multi_kill_count_;
}
void CMsgTournamentItemEvent::set_multi_kill_count(::google::protobuf::uint32 value) {
  set_has_multi_kill_count();
  multi_kill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.multi_kill_count)
}

// optional uint32 winner_score = 10;
bool CMsgTournamentItemEvent::has_winner_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgTournamentItemEvent::set_has_winner_score() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgTournamentItemEvent::clear_has_winner_score() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgTournamentItemEvent::clear_winner_score() {
  winner_score_ = 0u;
  clear_has_winner_score();
}
::google::protobuf::uint32 CMsgTournamentItemEvent::winner_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.winner_score)
  return winner_score_;
}
void CMsgTournamentItemEvent::set_winner_score(::google::protobuf::uint32 value) {
  set_has_winner_score();
  winner_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.winner_score)
}

// optional uint32 loser_score = 11;
bool CMsgTournamentItemEvent::has_loser_score() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgTournamentItemEvent::set_has_loser_score() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgTournamentItemEvent::clear_has_loser_score() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgTournamentItemEvent::clear_loser_score() {
  loser_score_ = 0u;
  clear_has_loser_score();
}
::google::protobuf::uint32 CMsgTournamentItemEvent::loser_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.loser_score)
  return loser_score_;
}
void CMsgTournamentItemEvent::set_loser_score(::google::protobuf::uint32 value) {
  set_has_loser_score();
  loser_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEvent.loser_score)
}

// repeated .proto.dota.CProtoItemHeroStatue hero_statues = 12;
int CMsgTournamentItemEvent::hero_statues_size() const {
  return hero_statues_.size();
}
void CMsgTournamentItemEvent::clear_hero_statues() {
  hero_statues_.Clear();
}
const ::proto::dota::CProtoItemHeroStatue& CMsgTournamentItemEvent::hero_statues(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEvent.hero_statues)
  return hero_statues_.Get(index);
}
::proto::dota::CProtoItemHeroStatue* CMsgTournamentItemEvent::mutable_hero_statues(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTournamentItemEvent.hero_statues)
  return hero_statues_.Mutable(index);
}
::proto::dota::CProtoItemHeroStatue* CMsgTournamentItemEvent::add_hero_statues() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgTournamentItemEvent.hero_statues)
  return hero_statues_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CProtoItemHeroStatue >*
CMsgTournamentItemEvent::mutable_hero_statues() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgTournamentItemEvent.hero_statues)
  return &hero_statues_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CProtoItemHeroStatue >&
CMsgTournamentItemEvent::hero_statues() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgTournamentItemEvent.hero_statues)
  return hero_statues_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTournamentItemEventResponse::kEventTypeFieldNumber;
const int CMsgTournamentItemEventResponse::kViewersGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTournamentItemEventResponse)
}
CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(const CMsgTournamentItemEventResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_type_, &from.event_type_,
    reinterpret_cast<char*>(&viewers_granted_) -
    reinterpret_cast<char*>(&event_type_) + sizeof(viewers_granted_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTournamentItemEventResponse)
}

void CMsgTournamentItemEventResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_type_, 0, reinterpret_cast<char*>(&viewers_granted_) -
    reinterpret_cast<char*>(&event_type_) + sizeof(viewers_granted_));
}

CMsgTournamentItemEventResponse::~CMsgTournamentItemEventResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTournamentItemEventResponse)
  SharedDtor();
}

void CMsgTournamentItemEventResponse::SharedDtor() {
}

void CMsgTournamentItemEventResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTournamentItemEventResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTournamentItemEventResponse& CMsgTournamentItemEventResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTournamentItemEventResponse* CMsgTournamentItemEventResponse::New(::google::protobuf::Arena* arena) const {
  CMsgTournamentItemEventResponse* n = new CMsgTournamentItemEventResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTournamentItemEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTournamentItemEventResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&event_type_, 0, reinterpret_cast<char*>(&viewers_granted_) -
      reinterpret_cast<char*>(&event_type_) + sizeof(viewers_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTournamentItemEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTournamentItemEventResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_TournamentEvents_IsValid(value)) {
            set_event_type(static_cast< ::proto::dota::DOTA_TournamentEvents >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 viewers_granted = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_viewers_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewers_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTournamentItemEventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTournamentItemEventResponse)
  return false;
#undef DO_
}

void CMsgTournamentItemEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTournamentItemEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // optional uint32 viewers_granted = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viewers_granted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTournamentItemEventResponse)
}

::google::protobuf::uint8* CMsgTournamentItemEventResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTournamentItemEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // optional uint32 viewers_granted = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viewers_granted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTournamentItemEventResponse)
  return target;
}

size_t CMsgTournamentItemEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTournamentItemEventResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional uint32 viewers_granted = 6;
    if (has_viewers_granted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewers_granted());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTournamentItemEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTournamentItemEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTournamentItemEventResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTournamentItemEventResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTournamentItemEventResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTournamentItemEventResponse)
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEventResponse::MergeFrom(const CMsgTournamentItemEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTournamentItemEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      viewers_granted_ = from.viewers_granted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTournamentItemEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTournamentItemEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEventResponse::CopyFrom(const CMsgTournamentItemEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTournamentItemEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEventResponse::IsInitialized() const {
  return true;
}

void CMsgTournamentItemEventResponse::Swap(CMsgTournamentItemEventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTournamentItemEventResponse::InternalSwap(CMsgTournamentItemEventResponse* other) {
  std::swap(event_type_, other->event_type_);
  std::swap(viewers_granted_, other->viewers_granted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTournamentItemEventResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTournamentItemEventResponse

// optional .proto.dota.DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
bool CMsgTournamentItemEventResponse::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTournamentItemEventResponse::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTournamentItemEventResponse::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTournamentItemEventResponse::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
::proto::dota::DOTA_TournamentEvents CMsgTournamentItemEventResponse::event_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEventResponse.event_type)
  return static_cast< ::proto::dota::DOTA_TournamentEvents >(event_type_);
}
void CMsgTournamentItemEventResponse::set_event_type(::proto::dota::DOTA_TournamentEvents value) {
  assert(::proto::dota::DOTA_TournamentEvents_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEventResponse.event_type)
}

// optional uint32 viewers_granted = 6;
bool CMsgTournamentItemEventResponse::has_viewers_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTournamentItemEventResponse::set_has_viewers_granted() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTournamentItemEventResponse::clear_has_viewers_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTournamentItemEventResponse::clear_viewers_granted() {
  viewers_granted_ = 0u;
  clear_has_viewers_granted();
}
::google::protobuf::uint32 CMsgTournamentItemEventResponse::viewers_granted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTournamentItemEventResponse.viewers_granted)
  return viewers_granted_;
}
void CMsgTournamentItemEventResponse::set_viewers_granted(::google::protobuf::uint32 value) {
  set_has_viewers_granted();
  viewers_granted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTournamentItemEventResponse.viewers_granted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTeamFanfare::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTeamFanfare::CMsgTeamFanfare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTeamFanfare)
}
CMsgTeamFanfare::CMsgTeamFanfare(const CMsgTeamFanfare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTeamFanfare)
}

void CMsgTeamFanfare::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
}

CMsgTeamFanfare::~CMsgTeamFanfare() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTeamFanfare)
  SharedDtor();
}

void CMsgTeamFanfare::SharedDtor() {
}

void CMsgTeamFanfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTeamFanfare::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTeamFanfare& CMsgTeamFanfare::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTeamFanfare* CMsgTeamFanfare::New(::google::protobuf::Arena* arena) const {
  CMsgTeamFanfare* n = new CMsgTeamFanfare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTeamFanfare::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTeamFanfare)
  match_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTeamFanfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTeamFanfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTeamFanfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTeamFanfare)
  return false;
#undef DO_
}

void CMsgTeamFanfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTeamFanfare)
}

::google::protobuf::uint8* CMsgTeamFanfare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTeamFanfare)
  return target;
}

size_t CMsgTeamFanfare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTeamFanfare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTeamFanfare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTeamFanfare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTeamFanfare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTeamFanfare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTeamFanfare)
    MergeFrom(*source);
  }
}

void CMsgTeamFanfare::MergeFrom(const CMsgTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_match_id()) {
    set_match_id(from.match_id());
  }
}

void CMsgTeamFanfare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTeamFanfare::CopyFrom(const CMsgTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTeamFanfare::IsInitialized() const {
  return true;
}

void CMsgTeamFanfare::Swap(CMsgTeamFanfare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTeamFanfare::InternalSwap(CMsgTeamFanfare* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTeamFanfare::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTeamFanfare

// optional uint64 match_id = 1;
bool CMsgTeamFanfare::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTeamFanfare::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTeamFanfare::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTeamFanfare::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgTeamFanfare::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTeamFanfare.match_id)
  return match_id_;
}
void CMsgTeamFanfare::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTeamFanfare.match_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgResponseTeamFanfare::kFanfareGoodguysFieldNumber;
const int CMsgResponseTeamFanfare::kFanfareBadguysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgResponseTeamFanfare::CMsgResponseTeamFanfare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgResponseTeamFanfare)
}
CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(const CMsgResponseTeamFanfare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fanfare_goodguys_, &from.fanfare_goodguys_,
    reinterpret_cast<char*>(&fanfare_badguys_) -
    reinterpret_cast<char*>(&fanfare_goodguys_) + sizeof(fanfare_badguys_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgResponseTeamFanfare)
}

void CMsgResponseTeamFanfare::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fanfare_goodguys_, 0, reinterpret_cast<char*>(&fanfare_badguys_) -
    reinterpret_cast<char*>(&fanfare_goodguys_) + sizeof(fanfare_badguys_));
}

CMsgResponseTeamFanfare::~CMsgResponseTeamFanfare() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgResponseTeamFanfare)
  SharedDtor();
}

void CMsgResponseTeamFanfare::SharedDtor() {
}

void CMsgResponseTeamFanfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgResponseTeamFanfare::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgResponseTeamFanfare& CMsgResponseTeamFanfare::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgResponseTeamFanfare* CMsgResponseTeamFanfare::New(::google::protobuf::Arena* arena) const {
  CMsgResponseTeamFanfare* n = new CMsgResponseTeamFanfare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgResponseTeamFanfare::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgResponseTeamFanfare)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&fanfare_goodguys_, 0, reinterpret_cast<char*>(&fanfare_badguys_) -
      reinterpret_cast<char*>(&fanfare_goodguys_) + sizeof(fanfare_badguys_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgResponseTeamFanfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgResponseTeamFanfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fanfare_goodguys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fanfare_goodguys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanfare_goodguys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fanfare_badguys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fanfare_badguys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanfare_badguys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgResponseTeamFanfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgResponseTeamFanfare)
  return false;
#undef DO_
}

void CMsgResponseTeamFanfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgResponseTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fanfare_goodguys = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fanfare_goodguys(), output);
  }

  // optional uint32 fanfare_badguys = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fanfare_badguys(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgResponseTeamFanfare)
}

::google::protobuf::uint8* CMsgResponseTeamFanfare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgResponseTeamFanfare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fanfare_goodguys = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fanfare_goodguys(), target);
  }

  // optional uint32 fanfare_badguys = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fanfare_badguys(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgResponseTeamFanfare)
  return target;
}

size_t CMsgResponseTeamFanfare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgResponseTeamFanfare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 fanfare_goodguys = 1;
    if (has_fanfare_goodguys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanfare_goodguys());
    }

    // optional uint32 fanfare_badguys = 2;
    if (has_fanfare_badguys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanfare_badguys());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgResponseTeamFanfare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgResponseTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResponseTeamFanfare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgResponseTeamFanfare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgResponseTeamFanfare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgResponseTeamFanfare)
    MergeFrom(*source);
  }
}

void CMsgResponseTeamFanfare::MergeFrom(const CMsgResponseTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgResponseTeamFanfare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      fanfare_goodguys_ = from.fanfare_goodguys_;
    }
    if (cached_has_bits & 0x00000002u) {
      fanfare_badguys_ = from.fanfare_badguys_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgResponseTeamFanfare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgResponseTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResponseTeamFanfare::CopyFrom(const CMsgResponseTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgResponseTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResponseTeamFanfare::IsInitialized() const {
  return true;
}

void CMsgResponseTeamFanfare::Swap(CMsgResponseTeamFanfare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgResponseTeamFanfare::InternalSwap(CMsgResponseTeamFanfare* other) {
  std::swap(fanfare_goodguys_, other->fanfare_goodguys_);
  std::swap(fanfare_badguys_, other->fanfare_badguys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgResponseTeamFanfare::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgResponseTeamFanfare

// optional uint32 fanfare_goodguys = 1;
bool CMsgResponseTeamFanfare::has_fanfare_goodguys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgResponseTeamFanfare::set_has_fanfare_goodguys() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgResponseTeamFanfare::clear_has_fanfare_goodguys() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgResponseTeamFanfare::clear_fanfare_goodguys() {
  fanfare_goodguys_ = 0u;
  clear_has_fanfare_goodguys();
}
::google::protobuf::uint32 CMsgResponseTeamFanfare::fanfare_goodguys() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgResponseTeamFanfare.fanfare_goodguys)
  return fanfare_goodguys_;
}
void CMsgResponseTeamFanfare::set_fanfare_goodguys(::google::protobuf::uint32 value) {
  set_has_fanfare_goodguys();
  fanfare_goodguys_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgResponseTeamFanfare.fanfare_goodguys)
}

// optional uint32 fanfare_badguys = 2;
bool CMsgResponseTeamFanfare::has_fanfare_badguys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgResponseTeamFanfare::set_has_fanfare_badguys() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgResponseTeamFanfare::clear_has_fanfare_badguys() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgResponseTeamFanfare::clear_fanfare_badguys() {
  fanfare_badguys_ = 0u;
  clear_has_fanfare_badguys();
}
::google::protobuf::uint32 CMsgResponseTeamFanfare::fanfare_badguys() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgResponseTeamFanfare.fanfare_badguys)
  return fanfare_badguys_;
}
void CMsgResponseTeamFanfare::set_fanfare_badguys(::google::protobuf::uint32 value) {
  set_has_fanfare_badguys();
  fanfare_badguys_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgResponseTeamFanfare.fanfare_badguys)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerUploadSaveGame::kGameTimeFieldNumber;
const int CMsgGameServerUploadSaveGame::kSaveGameDataFieldNumber;
const int CMsgGameServerUploadSaveGame::kLobbyIdFieldNumber;
const int CMsgGameServerUploadSaveGame::kPlayerSteamIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerUploadSaveGame)
}
CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(const CMsgGameServerUploadSaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_steam_ids_(from.player_steam_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  save_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_game_data()) {
    save_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_data_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerUploadSaveGame)
}

void CMsgGameServerUploadSaveGame::SharedCtor() {
  _cached_size_ = 0;
  save_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(game_time_));
}

CMsgGameServerUploadSaveGame::~CMsgGameServerUploadSaveGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerUploadSaveGame)
  SharedDtor();
}

void CMsgGameServerUploadSaveGame::SharedDtor() {
  save_game_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerUploadSaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerUploadSaveGame::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameServerUploadSaveGame& CMsgGameServerUploadSaveGame::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameServerUploadSaveGame* CMsgGameServerUploadSaveGame::New(::google::protobuf::Arena* arena) const {
  CMsgGameServerUploadSaveGame* n = new CMsgGameServerUploadSaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameServerUploadSaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerUploadSaveGame)
  player_steam_ids_.Clear();
  if (has_save_game_data()) {
    GOOGLE_DCHECK(!save_game_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*save_game_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&game_time_) -
      reinterpret_cast<char*>(&lobby_id_) + sizeof(game_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameServerUploadSaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerUploadSaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes save_game_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 player_steam_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_player_steam_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_steam_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerUploadSaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerUploadSaveGame)
  return false;
#undef DO_
}

void CMsgGameServerUploadSaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerUploadSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_time(), output);
  }

  // optional bytes save_game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->save_game_data(), output);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }

  // repeated uint64 player_steam_ids = 4;
  for (int i = 0, n = this->player_steam_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->player_steam_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerUploadSaveGame)
}

::google::protobuf::uint8* CMsgGameServerUploadSaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerUploadSaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_time(), target);
  }

  // optional bytes save_game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->save_game_data(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }

  // repeated uint64 player_steam_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->player_steam_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerUploadSaveGame)
  return target;
}

size_t CMsgGameServerUploadSaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerUploadSaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 player_steam_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->player_steam_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_steam_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes save_game_data = 2;
    if (has_save_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_data());
    }

    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 game_time = 1;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerUploadSaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerUploadSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerUploadSaveGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameServerUploadSaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerUploadSaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerUploadSaveGame)
    MergeFrom(*source);
  }
}

void CMsgGameServerUploadSaveGame::MergeFrom(const CMsgGameServerUploadSaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerUploadSaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_steam_ids_.MergeFrom(from.player_steam_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_save_game_data();
      save_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerUploadSaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerUploadSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerUploadSaveGame::CopyFrom(const CMsgGameServerUploadSaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerUploadSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerUploadSaveGame::IsInitialized() const {
  return true;
}

void CMsgGameServerUploadSaveGame::Swap(CMsgGameServerUploadSaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerUploadSaveGame::InternalSwap(CMsgGameServerUploadSaveGame* other) {
  player_steam_ids_.InternalSwap(&other->player_steam_ids_);
  save_game_data_.Swap(&other->save_game_data_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(game_time_, other->game_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameServerUploadSaveGame::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameServerUploadSaveGame

// optional uint32 game_time = 1;
bool CMsgGameServerUploadSaveGame::has_game_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGameServerUploadSaveGame::set_has_game_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGameServerUploadSaveGame::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGameServerUploadSaveGame::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
::google::protobuf::uint32 CMsgGameServerUploadSaveGame::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerUploadSaveGame.game_time)
  return game_time_;
}
void CMsgGameServerUploadSaveGame::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerUploadSaveGame.game_time)
}

// optional bytes save_game_data = 2;
bool CMsgGameServerUploadSaveGame::has_save_game_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameServerUploadSaveGame::set_has_save_game_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameServerUploadSaveGame::clear_has_save_game_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameServerUploadSaveGame::clear_save_game_data() {
  save_game_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_game_data();
}
const ::std::string& CMsgGameServerUploadSaveGame::save_game_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerUploadSaveGame.save_game_data)
  return save_game_data_.GetNoArena();
}
void CMsgGameServerUploadSaveGame::set_save_game_data(const ::std::string& value) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerUploadSaveGame.save_game_data)
}
#if LANG_CXX11
void CMsgGameServerUploadSaveGame::set_save_game_data(::std::string&& value) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGameServerUploadSaveGame.save_game_data)
}
#endif
void CMsgGameServerUploadSaveGame::set_save_game_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGameServerUploadSaveGame.save_game_data)
}
void CMsgGameServerUploadSaveGame::set_save_game_data(const void* value, size_t size) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGameServerUploadSaveGame.save_game_data)
}
::std::string* CMsgGameServerUploadSaveGame::mutable_save_game_data() {
  set_has_save_game_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameServerUploadSaveGame.save_game_data)
  return save_game_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGameServerUploadSaveGame::release_save_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameServerUploadSaveGame.save_game_data)
  clear_has_save_game_data();
  return save_game_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGameServerUploadSaveGame::set_allocated_save_game_data(::std::string* save_game_data) {
  if (save_game_data != NULL) {
    set_has_save_game_data();
  } else {
    clear_has_save_game_data();
  }
  save_game_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_game_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameServerUploadSaveGame.save_game_data)
}

// optional uint64 lobby_id = 3;
bool CMsgGameServerUploadSaveGame::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGameServerUploadSaveGame::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGameServerUploadSaveGame::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGameServerUploadSaveGame::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgGameServerUploadSaveGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerUploadSaveGame.lobby_id)
  return lobby_id_;
}
void CMsgGameServerUploadSaveGame::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerUploadSaveGame.lobby_id)
}

// repeated uint64 player_steam_ids = 4;
int CMsgGameServerUploadSaveGame::player_steam_ids_size() const {
  return player_steam_ids_.size();
}
void CMsgGameServerUploadSaveGame::clear_player_steam_ids() {
  player_steam_ids_.Clear();
}
::google::protobuf::uint64 CMsgGameServerUploadSaveGame::player_steam_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerUploadSaveGame.player_steam_ids)
  return player_steam_ids_.Get(index);
}
void CMsgGameServerUploadSaveGame::set_player_steam_ids(int index, ::google::protobuf::uint64 value) {
  player_steam_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerUploadSaveGame.player_steam_ids)
}
void CMsgGameServerUploadSaveGame::add_player_steam_ids(::google::protobuf::uint64 value) {
  player_steam_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGameServerUploadSaveGame.player_steam_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGameServerUploadSaveGame::player_steam_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGameServerUploadSaveGame.player_steam_ids)
  return player_steam_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGameServerUploadSaveGame::mutable_player_steam_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGameServerUploadSaveGame.player_steam_ids)
  return &player_steam_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerSaveGameResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerSaveGameResult)
}
CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(const CMsgGameServerSaveGameResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerSaveGameResult)
}

void CMsgGameServerSaveGameResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgGameServerSaveGameResult::~CMsgGameServerSaveGameResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerSaveGameResult)
  SharedDtor();
}

void CMsgGameServerSaveGameResult::SharedDtor() {
}

void CMsgGameServerSaveGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerSaveGameResult::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameServerSaveGameResult& CMsgGameServerSaveGameResult::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameServerSaveGameResult* CMsgGameServerSaveGameResult::New(::google::protobuf::Arena* arena) const {
  CMsgGameServerSaveGameResult* n = new CMsgGameServerSaveGameResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameServerSaveGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerSaveGameResult)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameServerSaveGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerSaveGameResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGameServerSaveGameResult_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgGameServerSaveGameResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerSaveGameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerSaveGameResult)
  return false;
#undef DO_
}

void CMsgGameServerSaveGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerSaveGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerSaveGameResult)
}

::google::protobuf::uint8* CMsgGameServerSaveGameResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerSaveGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerSaveGameResult)
  return target;
}

size_t CMsgGameServerSaveGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerSaveGameResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerSaveGameResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerSaveGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerSaveGameResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameServerSaveGameResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerSaveGameResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerSaveGameResult)
    MergeFrom(*source);
  }
}

void CMsgGameServerSaveGameResult::MergeFrom(const CMsgGameServerSaveGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerSaveGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgGameServerSaveGameResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerSaveGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerSaveGameResult::CopyFrom(const CMsgGameServerSaveGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerSaveGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerSaveGameResult::IsInitialized() const {
  return true;
}

void CMsgGameServerSaveGameResult::Swap(CMsgGameServerSaveGameResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerSaveGameResult::InternalSwap(CMsgGameServerSaveGameResult* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameServerSaveGameResult::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameServerSaveGameResult

// optional .proto.dota.CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
bool CMsgGameServerSaveGameResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameServerSaveGameResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameServerSaveGameResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameServerSaveGameResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerSaveGameResult.result)
  return static_cast< ::proto::dota::CMsgGameServerSaveGameResult_Result >(result_);
}
void CMsgGameServerSaveGameResult::set_result(::proto::dota::CMsgGameServerSaveGameResult_Result value) {
  assert(::proto::dota::CMsgGameServerSaveGameResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerSaveGameResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerGetLoadGame::kSaveIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerGetLoadGame)
}
CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(const CMsgGameServerGetLoadGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  save_id_ = from.save_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerGetLoadGame)
}

void CMsgGameServerGetLoadGame::SharedCtor() {
  _cached_size_ = 0;
  save_id_ = 0u;
}

CMsgGameServerGetLoadGame::~CMsgGameServerGetLoadGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerGetLoadGame)
  SharedDtor();
}

void CMsgGameServerGetLoadGame::SharedDtor() {
}

void CMsgGameServerGetLoadGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGame::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameServerGetLoadGame& CMsgGameServerGetLoadGame::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameServerGetLoadGame* CMsgGameServerGetLoadGame::New(::google::protobuf::Arena* arena) const {
  CMsgGameServerGetLoadGame* n = new CMsgGameServerGetLoadGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameServerGetLoadGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerGetLoadGame)
  save_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameServerGetLoadGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerGetLoadGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 save_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_save_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerGetLoadGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerGetLoadGame)
  return false;
#undef DO_
}

void CMsgGameServerGetLoadGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerGetLoadGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 save_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->save_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerGetLoadGame)
}

::google::protobuf::uint8* CMsgGameServerGetLoadGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerGetLoadGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 save_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->save_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerGetLoadGame)
  return target;
}

size_t CMsgGameServerGetLoadGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerGetLoadGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 save_id = 1;
  if (has_save_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->save_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerGetLoadGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerGetLoadGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerGetLoadGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameServerGetLoadGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerGetLoadGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerGetLoadGame)
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGame::MergeFrom(const CMsgGameServerGetLoadGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerGetLoadGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_save_id()) {
    set_save_id(from.save_id());
  }
}

void CMsgGameServerGetLoadGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerGetLoadGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGame::CopyFrom(const CMsgGameServerGetLoadGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerGetLoadGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGame::IsInitialized() const {
  return true;
}

void CMsgGameServerGetLoadGame::Swap(CMsgGameServerGetLoadGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerGetLoadGame::InternalSwap(CMsgGameServerGetLoadGame* other) {
  std::swap(save_id_, other->save_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameServerGetLoadGame::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameServerGetLoadGame

// optional uint32 save_id = 1;
bool CMsgGameServerGetLoadGame::has_save_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameServerGetLoadGame::set_has_save_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameServerGetLoadGame::clear_has_save_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameServerGetLoadGame::clear_save_id() {
  save_id_ = 0u;
  clear_has_save_id();
}
::google::protobuf::uint32 CMsgGameServerGetLoadGame::save_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerGetLoadGame.save_id)
  return save_id_;
}
void CMsgGameServerGetLoadGame::set_save_id(::google::protobuf::uint32 value) {
  set_has_save_id();
  save_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerGetLoadGame.save_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameServerGetLoadGameResult::kSaveGameDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGameServerGetLoadGameResult)
}
CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(const CMsgGameServerGetLoadGameResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  save_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_game_data()) {
    save_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGameServerGetLoadGameResult)
}

void CMsgGameServerGetLoadGameResult::SharedCtor() {
  _cached_size_ = 0;
  save_game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGameServerGetLoadGameResult::~CMsgGameServerGetLoadGameResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGameServerGetLoadGameResult)
  SharedDtor();
}

void CMsgGameServerGetLoadGameResult::SharedDtor() {
  save_game_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerGetLoadGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGameResult::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGameServerGetLoadGameResult& CMsgGameServerGetLoadGameResult::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGameServerGetLoadGameResult* CMsgGameServerGetLoadGameResult::New(::google::protobuf::Arena* arena) const {
  CMsgGameServerGetLoadGameResult* n = new CMsgGameServerGetLoadGameResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGameServerGetLoadGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGameServerGetLoadGameResult)
  if (has_save_game_data()) {
    GOOGLE_DCHECK(!save_game_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*save_game_data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGameServerGetLoadGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGameServerGetLoadGameResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes save_game_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGameServerGetLoadGameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGameServerGetLoadGameResult)
  return false;
#undef DO_
}

void CMsgGameServerGetLoadGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGameServerGetLoadGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes save_game_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->save_game_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGameServerGetLoadGameResult)
}

::google::protobuf::uint8* CMsgGameServerGetLoadGameResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGameServerGetLoadGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes save_game_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->save_game_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGameServerGetLoadGameResult)
  return target;
}

size_t CMsgGameServerGetLoadGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGameServerGetLoadGameResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes save_game_data = 1;
  if (has_save_game_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->save_game_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGameServerGetLoadGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerGetLoadGameResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGameServerGetLoadGameResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGameServerGetLoadGameResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGameServerGetLoadGameResult)
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const CMsgGameServerGetLoadGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGameServerGetLoadGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_save_game_data()) {
    set_has_save_game_data();
    save_game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_data_);
  }
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGameServerGetLoadGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const CMsgGameServerGetLoadGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGameServerGetLoadGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGameResult::IsInitialized() const {
  return true;
}

void CMsgGameServerGetLoadGameResult::Swap(CMsgGameServerGetLoadGameResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameServerGetLoadGameResult::InternalSwap(CMsgGameServerGetLoadGameResult* other) {
  save_game_data_.Swap(&other->save_game_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGameServerGetLoadGameResult::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGameServerGetLoadGameResult

// optional bytes save_game_data = 1;
bool CMsgGameServerGetLoadGameResult::has_save_game_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGameServerGetLoadGameResult::set_has_save_game_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGameServerGetLoadGameResult::clear_has_save_game_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGameServerGetLoadGameResult::clear_save_game_data() {
  save_game_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_game_data();
}
const ::std::string& CMsgGameServerGetLoadGameResult::save_game_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGameServerGetLoadGameResult.save_game_data)
  return save_game_data_.GetNoArena();
}
void CMsgGameServerGetLoadGameResult::set_save_game_data(const ::std::string& value) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGameServerGetLoadGameResult.save_game_data)
}
#if LANG_CXX11
void CMsgGameServerGetLoadGameResult::set_save_game_data(::std::string&& value) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGameServerGetLoadGameResult.save_game_data)
}
#endif
void CMsgGameServerGetLoadGameResult::set_save_game_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGameServerGetLoadGameResult.save_game_data)
}
void CMsgGameServerGetLoadGameResult::set_save_game_data(const void* value, size_t size) {
  set_has_save_game_data();
  save_game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGameServerGetLoadGameResult.save_game_data)
}
::std::string* CMsgGameServerGetLoadGameResult::mutable_save_game_data() {
  set_has_save_game_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGameServerGetLoadGameResult.save_game_data)
  return save_game_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGameServerGetLoadGameResult::release_save_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGameServerGetLoadGameResult.save_game_data)
  clear_has_save_game_data();
  return save_game_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGameServerGetLoadGameResult::set_allocated_save_game_data(::std::string* save_game_data) {
  if (save_game_data != NULL) {
    set_has_save_game_data();
  } else {
    clear_has_save_game_data();
  }
  save_game_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_game_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGameServerGetLoadGameResult.save_game_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGenerateDiretidePrizeList::kPrizeListFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeList::kHighestRoshanLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
}
CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList(const CMsgDOTAGenerateDiretidePrizeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prize_list_, &from.prize_list_,
    reinterpret_cast<char*>(&highest_roshan_level_) -
    reinterpret_cast<char*>(&prize_list_) + sizeof(highest_roshan_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
}

void CMsgDOTAGenerateDiretidePrizeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&prize_list_, 0, reinterpret_cast<char*>(&highest_roshan_level_) -
    reinterpret_cast<char*>(&prize_list_) + sizeof(highest_roshan_level_));
}

CMsgDOTAGenerateDiretidePrizeList::~CMsgDOTAGenerateDiretidePrizeList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  SharedDtor();
}

void CMsgDOTAGenerateDiretidePrizeList::SharedDtor() {
}

void CMsgDOTAGenerateDiretidePrizeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeList::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGenerateDiretidePrizeList& CMsgDOTAGenerateDiretidePrizeList::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGenerateDiretidePrizeList* CMsgDOTAGenerateDiretidePrizeList::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGenerateDiretidePrizeList* n = new CMsgDOTAGenerateDiretidePrizeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGenerateDiretidePrizeList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&prize_list_, 0, reinterpret_cast<char*>(&highest_roshan_level_) -
      reinterpret_cast<char*>(&prize_list_) + sizeof(highest_roshan_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGenerateDiretidePrizeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_prize_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 highest_roshan_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_highest_roshan_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_roshan_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  return false;
#undef DO_
}

void CMsgDOTAGenerateDiretidePrizeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prize_list(), output);
  }

  // optional uint32 highest_roshan_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->highest_roshan_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
}

::google::protobuf::uint8* CMsgDOTAGenerateDiretidePrizeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prize_list(), target);
  }

  // optional uint32 highest_roshan_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->highest_roshan_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  return target;
}

size_t CMsgDOTAGenerateDiretidePrizeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 prize_list = 1;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }

    // optional uint32 highest_roshan_level = 2;
    if (has_highest_roshan_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_roshan_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGenerateDiretidePrizeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      prize_list_ = from.prize_list_;
    }
    if (cached_has_bits & 0x00000002u) {
      highest_roshan_level_ = from.highest_roshan_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeList::IsInitialized() const {
  return true;
}

void CMsgDOTAGenerateDiretidePrizeList::Swap(CMsgDOTAGenerateDiretidePrizeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGenerateDiretidePrizeList::InternalSwap(CMsgDOTAGenerateDiretidePrizeList* other) {
  std::swap(prize_list_, other->prize_list_);
  std::swap(highest_roshan_level_, other->highest_roshan_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGenerateDiretidePrizeList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGenerateDiretidePrizeList

// optional uint32 prize_list = 1;
bool CMsgDOTAGenerateDiretidePrizeList::has_prize_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGenerateDiretidePrizeList::set_has_prize_list() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGenerateDiretidePrizeList::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGenerateDiretidePrizeList::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeList::prize_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGenerateDiretidePrizeList.prize_list)
  return prize_list_;
}
void CMsgDOTAGenerateDiretidePrizeList::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGenerateDiretidePrizeList.prize_list)
}

// optional uint32 highest_roshan_level = 2;
bool CMsgDOTAGenerateDiretidePrizeList::has_highest_roshan_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGenerateDiretidePrizeList::set_has_highest_roshan_level() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGenerateDiretidePrizeList::clear_has_highest_roshan_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGenerateDiretidePrizeList::clear_highest_roshan_level() {
  highest_roshan_level_ = 0u;
  clear_has_highest_roshan_level();
}
::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeList::highest_roshan_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGenerateDiretidePrizeList.highest_roshan_level)
  return highest_roshan_level_;
}
void CMsgDOTAGenerateDiretidePrizeList::set_highest_roshan_level(::google::protobuf::uint32 value) {
  set_has_highest_roshan_level();
  highest_roshan_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGenerateDiretidePrizeList.highest_roshan_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGenerateDiretidePrizeListResponse::kItemDefsFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeListResponse::kSteamIdsFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeListResponse::kPrizeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
}
CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse(const CMsgDOTAGenerateDiretidePrizeListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_defs_(from.item_defs_),
      steam_ids_(from.steam_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prize_list_ = from.prize_list_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
}

CMsgDOTAGenerateDiretidePrizeListResponse::~CMsgDOTAGenerateDiretidePrizeListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  SharedDtor();
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedDtor() {
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeListResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGenerateDiretidePrizeListResponse& CMsgDOTAGenerateDiretidePrizeListResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGenerateDiretidePrizeListResponse* CMsgDOTAGenerateDiretidePrizeListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGenerateDiretidePrizeListResponse* n = new CMsgDOTAGenerateDiretidePrizeListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  item_defs_.Clear();
  steam_ids_.Clear();
  prize_list_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGenerateDiretidePrizeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 item_defs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_item_defs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steam_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_steam_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prize_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_prize_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  return false;
#undef DO_
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  for (int i = 0, n = this->item_defs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->item_defs(i), output);
  }

  // repeated fixed64 steam_ids = 2;
  for (int i = 0, n = this->steam_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steam_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prize_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
}

::google::protobuf::uint8* CMsgDOTAGenerateDiretidePrizeListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->item_defs_, target);

  // repeated fixed64 steam_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->steam_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prize_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  return target;
}

size_t CMsgDOTAGenerateDiretidePrizeListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 item_defs = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_defs_size());
    total_size += data_size;
  }

  // repeated fixed64 steam_ids = 2;
  {
    unsigned int count = this->steam_ids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steam_ids_size());
    total_size += data_size;
  }

  // optional uint32 prize_list = 3;
  if (has_prize_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prize_list());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGenerateDiretidePrizeListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_defs_.MergeFrom(from.item_defs_);
  steam_ids_.MergeFrom(from.steam_ids_);
  if (from.has_prize_list()) {
    set_prize_list(from.prize_list());
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::Swap(CMsgDOTAGenerateDiretidePrizeListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGenerateDiretidePrizeListResponse::InternalSwap(CMsgDOTAGenerateDiretidePrizeListResponse* other) {
  item_defs_.InternalSwap(&other->item_defs_);
  steam_ids_.InternalSwap(&other->steam_ids_);
  std::swap(prize_list_, other->prize_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGenerateDiretidePrizeListResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGenerateDiretidePrizeListResponse

// repeated uint32 item_defs = 1;
int CMsgDOTAGenerateDiretidePrizeListResponse::item_defs_size() const {
  return item_defs_.size();
}
void CMsgDOTAGenerateDiretidePrizeListResponse::clear_item_defs() {
  item_defs_.Clear();
}
::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeListResponse::item_defs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
  return item_defs_.Get(index);
}
void CMsgDOTAGenerateDiretidePrizeListResponse::set_item_defs(int index, ::google::protobuf::uint32 value) {
  item_defs_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
}
void CMsgDOTAGenerateDiretidePrizeListResponse::add_item_defs(::google::protobuf::uint32 value) {
  item_defs_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAGenerateDiretidePrizeListResponse::item_defs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
  return item_defs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAGenerateDiretidePrizeListResponse::mutable_item_defs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.item_defs)
  return &item_defs_;
}

// repeated fixed64 steam_ids = 2;
int CMsgDOTAGenerateDiretidePrizeListResponse::steam_ids_size() const {
  return steam_ids_.size();
}
void CMsgDOTAGenerateDiretidePrizeListResponse::clear_steam_ids() {
  steam_ids_.Clear();
}
::google::protobuf::uint64 CMsgDOTAGenerateDiretidePrizeListResponse::steam_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
  return steam_ids_.Get(index);
}
void CMsgDOTAGenerateDiretidePrizeListResponse::set_steam_ids(int index, ::google::protobuf::uint64 value) {
  steam_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
}
void CMsgDOTAGenerateDiretidePrizeListResponse::add_steam_ids(::google::protobuf::uint64 value) {
  steam_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAGenerateDiretidePrizeListResponse::steam_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
  return steam_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAGenerateDiretidePrizeListResponse::mutable_steam_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.steam_ids)
  return &steam_ids_;
}

// optional uint32 prize_list = 3;
bool CMsgDOTAGenerateDiretidePrizeListResponse::has_prize_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGenerateDiretidePrizeListResponse::set_has_prize_list() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGenerateDiretidePrizeListResponse::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGenerateDiretidePrizeListResponse::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeListResponse::prize_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.prize_list)
  return prize_list_;
}
void CMsgDOTAGenerateDiretidePrizeListResponse::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGenerateDiretidePrizeListResponse.prize_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARewardDiretidePrizes::kTeamFieldNumber;
const int CMsgDOTARewardDiretidePrizes::kPrizeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARewardDiretidePrizes)
}
CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes(const CMsgDOTARewardDiretidePrizes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    reinterpret_cast<char*>(&prize_list_) -
    reinterpret_cast<char*>(&team_) + sizeof(prize_list_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARewardDiretidePrizes)
}

void CMsgDOTARewardDiretidePrizes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_, 0, reinterpret_cast<char*>(&prize_list_) -
    reinterpret_cast<char*>(&team_) + sizeof(prize_list_));
}

CMsgDOTARewardDiretidePrizes::~CMsgDOTARewardDiretidePrizes() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARewardDiretidePrizes)
  SharedDtor();
}

void CMsgDOTARewardDiretidePrizes::SharedDtor() {
}

void CMsgDOTARewardDiretidePrizes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARewardDiretidePrizes::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARewardDiretidePrizes& CMsgDOTARewardDiretidePrizes::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARewardDiretidePrizes* CMsgDOTARewardDiretidePrizes::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARewardDiretidePrizes* n = new CMsgDOTARewardDiretidePrizes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARewardDiretidePrizes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&team_, 0, reinterpret_cast<char*>(&prize_list_) -
      reinterpret_cast<char*>(&team_) + sizeof(prize_list_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARewardDiretidePrizes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prize_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_prize_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARewardDiretidePrizes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARewardDiretidePrizes)
  return false;
#undef DO_
}

void CMsgDOTARewardDiretidePrizes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional uint32 prize_list = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prize_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARewardDiretidePrizes)
}

::google::protobuf::uint8* CMsgDOTARewardDiretidePrizes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional uint32 prize_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prize_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARewardDiretidePrizes)
  return target;
}

size_t CMsgDOTARewardDiretidePrizes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 prize_list = 2;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARewardDiretidePrizes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARewardDiretidePrizes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARewardDiretidePrizes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARewardDiretidePrizes)
    MergeFrom(*source);
  }
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const CMsgDOTARewardDiretidePrizes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      prize_list_ = from.prize_list_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const CMsgDOTARewardDiretidePrizes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARewardDiretidePrizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARewardDiretidePrizes::IsInitialized() const {
  return true;
}

void CMsgDOTARewardDiretidePrizes::Swap(CMsgDOTARewardDiretidePrizes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARewardDiretidePrizes::InternalSwap(CMsgDOTARewardDiretidePrizes* other) {
  std::swap(team_, other->team_);
  std::swap(prize_list_, other->prize_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARewardDiretidePrizes::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARewardDiretidePrizes

// optional uint32 team = 1;
bool CMsgDOTARewardDiretidePrizes::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARewardDiretidePrizes::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARewardDiretidePrizes::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARewardDiretidePrizes::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CMsgDOTARewardDiretidePrizes::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARewardDiretidePrizes.team)
  return team_;
}
void CMsgDOTARewardDiretidePrizes::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARewardDiretidePrizes.team)
}

// optional uint32 prize_list = 2;
bool CMsgDOTARewardDiretidePrizes::has_prize_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARewardDiretidePrizes::set_has_prize_list() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARewardDiretidePrizes::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARewardDiretidePrizes::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
::google::protobuf::uint32 CMsgDOTARewardDiretidePrizes::prize_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARewardDiretidePrizes.prize_list)
  return prize_list_;
}
void CMsgDOTARewardDiretidePrizes::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARewardDiretidePrizes.prize_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTADiretidePrizesRewardedResponse::kPrizeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
}
CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse(const CMsgDOTADiretidePrizesRewardedResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prize_list_ = from.prize_list_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
}

CMsgDOTADiretidePrizesRewardedResponse::~CMsgDOTADiretidePrizesRewardedResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  SharedDtor();
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedDtor() {
}

void CMsgDOTADiretidePrizesRewardedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTADiretidePrizesRewardedResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTADiretidePrizesRewardedResponse& CMsgDOTADiretidePrizesRewardedResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTADiretidePrizesRewardedResponse* CMsgDOTADiretidePrizesRewardedResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTADiretidePrizesRewardedResponse* n = new CMsgDOTADiretidePrizesRewardedResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTADiretidePrizesRewardedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  prize_list_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTADiretidePrizesRewardedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_prize_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  return false;
#undef DO_
}

void CMsgDOTADiretidePrizesRewardedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prize_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
}

::google::protobuf::uint8* CMsgDOTADiretidePrizesRewardedResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prize_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  return target;
}

size_t CMsgDOTADiretidePrizesRewardedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 prize_list = 1;
  if (has_prize_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prize_list());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADiretidePrizesRewardedResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTADiretidePrizesRewardedResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prize_list()) {
    set_prize_list(from.prize_list());
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTADiretidePrizesRewardedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADiretidePrizesRewardedResponse::IsInitialized() const {
  return true;
}

void CMsgDOTADiretidePrizesRewardedResponse::Swap(CMsgDOTADiretidePrizesRewardedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTADiretidePrizesRewardedResponse::InternalSwap(CMsgDOTADiretidePrizesRewardedResponse* other) {
  std::swap(prize_list_, other->prize_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTADiretidePrizesRewardedResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTADiretidePrizesRewardedResponse

// optional uint32 prize_list = 1;
bool CMsgDOTADiretidePrizesRewardedResponse::has_prize_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTADiretidePrizesRewardedResponse::set_has_prize_list() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTADiretidePrizesRewardedResponse::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTADiretidePrizesRewardedResponse::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
::google::protobuf::uint32 CMsgDOTADiretidePrizesRewardedResponse::prize_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTADiretidePrizesRewardedResponse.prize_list)
  return prize_list_;
}
void CMsgDOTADiretidePrizesRewardedResponse::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTADiretidePrizesRewardedResponse.prize_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAAwardEventPoints_AwardPoints::kAccountIdFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kPointsFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kPremiumPointsFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kTradeBanTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
}
CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(const CMsgDOTAAwardEventPoints_AwardPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&trade_ban_time_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(trade_ban_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&trade_ban_time_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(trade_ban_time_));
}

CMsgDOTAAwardEventPoints_AwardPoints::~CMsgDOTAAwardEventPoints_AwardPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  SharedDtor();
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedDtor() {
}

void CMsgDOTAAwardEventPoints_AwardPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints_AwardPoints::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAAwardEventPoints_AwardPoints& CMsgDOTAAwardEventPoints_AwardPoints::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints_AwardPoints::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAAwardEventPoints_AwardPoints* n = new CMsgDOTAAwardEventPoints_AwardPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAAwardEventPoints_AwardPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&trade_ban_time_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(trade_ban_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAAwardEventPoints_AwardPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 premium_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_premium_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &premium_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trade_ban_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_trade_ban_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_ban_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  return false;
#undef DO_
}

void CMsgDOTAAwardEventPoints_AwardPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional int32 points = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // optional int32 premium_points = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->premium_points(), output);
  }

  // optional uint32 trade_ban_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trade_ban_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
}

::google::protobuf::uint8* CMsgDOTAAwardEventPoints_AwardPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // optional int32 premium_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->premium_points(), target);
  }

  // optional uint32 trade_ban_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->trade_ban_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  return target;
}

size_t CMsgDOTAAwardEventPoints_AwardPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional int32 premium_points = 3;
    if (has_premium_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->premium_points());
    }

    // optional uint32 trade_ban_time = 5;
    if (has_trade_ban_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_ban_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints_AwardPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAAwardEventPoints_AwardPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000004u) {
      premium_points_ = from.premium_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      trade_ban_time_ = from.trade_ban_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints_AwardPoints::IsInitialized() const {
  return true;
}

void CMsgDOTAAwardEventPoints_AwardPoints::Swap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAAwardEventPoints_AwardPoints::InternalSwap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(points_, other->points_);
  std::swap(premium_points_, other->premium_points_);
  std::swap(trade_ban_time_, other->trade_ban_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAAwardEventPoints_AwardPoints::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAAwardEventPoints_AwardPoints

// optional uint32 account_id = 1;
bool CMsgDOTAAwardEventPoints_AwardPoints::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAAwardEventPoints_AwardPoints::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAAwardEventPoints_AwardPoints::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAAwardEventPoints_AwardPoints::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAAwardEventPoints_AwardPoints::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints.account_id)
  return account_id_;
}
void CMsgDOTAAwardEventPoints_AwardPoints::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints.account_id)
}

// optional int32 points = 2;
bool CMsgDOTAAwardEventPoints_AwardPoints::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAAwardEventPoints_AwardPoints::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAAwardEventPoints_AwardPoints::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAAwardEventPoints_AwardPoints::clear_points() {
  points_ = 0;
  clear_has_points();
}
::google::protobuf::int32 CMsgDOTAAwardEventPoints_AwardPoints::points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints.points)
  return points_;
}
void CMsgDOTAAwardEventPoints_AwardPoints::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints.points)
}

// optional int32 premium_points = 3;
bool CMsgDOTAAwardEventPoints_AwardPoints::has_premium_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAAwardEventPoints_AwardPoints::set_has_premium_points() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAAwardEventPoints_AwardPoints::clear_has_premium_points() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAAwardEventPoints_AwardPoints::clear_premium_points() {
  premium_points_ = 0;
  clear_has_premium_points();
}
::google::protobuf::int32 CMsgDOTAAwardEventPoints_AwardPoints::premium_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints.premium_points)
  return premium_points_;
}
void CMsgDOTAAwardEventPoints_AwardPoints::set_premium_points(::google::protobuf::int32 value) {
  set_has_premium_points();
  premium_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints.premium_points)
}

// optional uint32 trade_ban_time = 5;
bool CMsgDOTAAwardEventPoints_AwardPoints::has_trade_ban_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAAwardEventPoints_AwardPoints::set_has_trade_ban_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAAwardEventPoints_AwardPoints::clear_has_trade_ban_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAAwardEventPoints_AwardPoints::clear_trade_ban_time() {
  trade_ban_time_ = 0u;
  clear_has_trade_ban_time();
}
::google::protobuf::uint32 CMsgDOTAAwardEventPoints_AwardPoints::trade_ban_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints.trade_ban_time)
  return trade_ban_time_;
}
void CMsgDOTAAwardEventPoints_AwardPoints::set_trade_ban_time(::google::protobuf::uint32 value) {
  set_has_trade_ban_time();
  trade_ban_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAwardEventPoints.AwardPoints.trade_ban_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAAwardEventPoints::kAwardPointsFieldNumber;
const int CMsgDOTAAwardEventPoints::kMatchIdFieldNumber;
const int CMsgDOTAAwardEventPoints::kEventIdFieldNumber;
const int CMsgDOTAAwardEventPoints::kTimestampFieldNumber;
const int CMsgDOTAAwardEventPoints::kAuditActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAAwardEventPoints)
}
CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(const CMsgDOTAAwardEventPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      award_points_(from.award_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&audit_action_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(audit_action_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAAwardEventPoints)
}

void CMsgDOTAAwardEventPoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&audit_action_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(audit_action_));
}

CMsgDOTAAwardEventPoints::~CMsgDOTAAwardEventPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAAwardEventPoints)
  SharedDtor();
}

void CMsgDOTAAwardEventPoints::SharedDtor() {
}

void CMsgDOTAAwardEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAAwardEventPoints& CMsgDOTAAwardEventPoints::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAAwardEventPoints* CMsgDOTAAwardEventPoints::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAAwardEventPoints* n = new CMsgDOTAAwardEventPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAAwardEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAAwardEventPoints)
  award_points_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&audit_action_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(audit_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAAwardEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAAwardEventPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audit_action = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_audit_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audit_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAAwardEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAAwardEventPoints)
  return false;
#undef DO_
}

void CMsgDOTAAwardEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAAwardEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (unsigned int i = 0, n = this->award_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->award_points(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional uint32 event_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_id(), output);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  // optional uint32 audit_action = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->audit_action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAAwardEventPoints)
}

::google::protobuf::uint8* CMsgDOTAAwardEventPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAAwardEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (unsigned int i = 0, n = this->award_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->award_points(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional uint32 event_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_id(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  // optional uint32 audit_action = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->audit_action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAAwardEventPoints)
  return target;
}

size_t CMsgDOTAAwardEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAAwardEventPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  {
    unsigned int count = this->award_points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award_points(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 event_id = 4;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 audit_action = 6;
    if (has_audit_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audit_action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAwardEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAAwardEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAAwardEventPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAAwardEventPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAAwardEventPoints)
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints::MergeFrom(const CMsgDOTAAwardEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAAwardEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  award_points_.MergeFrom(from.award_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      audit_action_ = from.audit_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAAwardEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAAwardEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints::CopyFrom(const CMsgDOTAAwardEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAAwardEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints::IsInitialized() const {
  return true;
}

void CMsgDOTAAwardEventPoints::Swap(CMsgDOTAAwardEventPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAAwardEventPoints::InternalSwap(CMsgDOTAAwardEventPoints* other) {
  award_points_.InternalSwap(&other->award_points_);
  std::swap(match_id_, other->match_id_);
  std::swap(event_id_, other->event_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(audit_action_, other->audit_action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAAwardEventPoints::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAAwardEventPoints

// repeated .proto.dota.CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
int CMsgDOTAAwardEventPoints::award_points_size() const {
  return award_points_.size();
}
void CMsgDOTAAwardEventPoints::clear_award_points() {
  award_points_.Clear();
}
const ::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints& CMsgDOTAAwardEventPoints::award_points(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAwardEventPoints.award_points)
  return award_points_.Get(index);
}
::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints::mutable_award_points(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAAwardEventPoints.award_points)
  return award_points_.Mutable(index);
}
::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints::add_award_points() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAAwardEventPoints.award_points)
  return award_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints >*
CMsgDOTAAwardEventPoints::mutable_award_points() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAAwardEventPoints.award_points)
  return &award_points_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAAwardEventPoints_AwardPoints >&
CMsgDOTAAwardEventPoints::award_points() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAAwardEventPoints.award_points)
  return award_points_;
}

// optional uint64 match_id = 2;
bool CMsgDOTAAwardEventPoints::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAAwardEventPoints::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAAwardEventPoints::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAAwardEventPoints::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTAAwardEventPoints::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAwardEventPoints.match_id)
  return match_id_;
}
void CMsgDOTAAwardEventPoints::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAwardEventPoints.match_id)
}

// optional uint32 event_id = 4;
bool CMsgDOTAAwardEventPoints::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAAwardEventPoints::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAAwardEventPoints::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAAwardEventPoints::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgDOTAAwardEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAwardEventPoints.event_id)
  return event_id_;
}
void CMsgDOTAAwardEventPoints::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAwardEventPoints.event_id)
}

// optional uint32 timestamp = 5;
bool CMsgDOTAAwardEventPoints::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAAwardEventPoints::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAAwardEventPoints::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAAwardEventPoints::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTAAwardEventPoints::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAwardEventPoints.timestamp)
  return timestamp_;
}
void CMsgDOTAAwardEventPoints::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAwardEventPoints.timestamp)
}

// optional uint32 audit_action = 6;
bool CMsgDOTAAwardEventPoints::has_audit_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAAwardEventPoints::set_has_audit_action() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAAwardEventPoints::clear_has_audit_action() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAAwardEventPoints::clear_audit_action() {
  audit_action_ = 0u;
  clear_has_audit_action();
}
::google::protobuf::uint32 CMsgDOTAAwardEventPoints::audit_action() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAwardEventPoints.audit_action)
  return audit_action_;
}
void CMsgDOTAAwardEventPoints::set_audit_action(::google::protobuf::uint32 value) {
  set_has_audit_action();
  audit_action_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAwardEventPoints.audit_action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kLootListFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kPlayerAccountIdsFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kNoTradeFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::kRandomizeRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}
CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_account_ids_(from.player_account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loot_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loot_list()) {
    loot_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loot_list_);
  }
  ::memcpy(&no_trade_, &from.no_trade_,
    reinterpret_cast<char*>(&randomize_reward_) -
    reinterpret_cast<char*>(&no_trade_) + sizeof(randomize_reward_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SharedCtor() {
  _cached_size_ = 0;
  loot_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&no_trade_, 0, reinterpret_cast<char*>(&randomize_reward_) -
    reinterpret_cast<char*>(&no_trade_) + sizeof(randomize_reward_));
}

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::~CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  SharedDtor();
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SharedDtor() {
  loot_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* n = new CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  player_account_ids_.Clear();
  if (has_loot_list()) {
    GOOGLE_DCHECK(!loot_list_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*loot_list_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&no_trade_, 0, reinterpret_cast<char*>(&randomize_reward_) -
      reinterpret_cast<char*>(&no_trade_) + sizeof(randomize_reward_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string loot_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loot_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loot_list().data(), this->loot_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_player_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_trade = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_no_trade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_trade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool randomize_reward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_randomize_reward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return false;
#undef DO_
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loot_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->loot_list(), output);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0, n = this->player_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->player_account_ids(i), output);
  }

  // optional bool no_trade = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->no_trade(), output);
  }

  // optional bool randomize_reward = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->randomize_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
}

::google::protobuf::uint8* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loot_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loot_list(), target);
  }

  // repeated uint32 player_account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->player_account_ids_, target);

  // optional bool no_trade = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->no_trade(), target);
  }

  // optional bool randomize_reward = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->randomize_reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  return target;
}

size_t CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 player_account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_account_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string loot_list = 1;
    if (has_loot_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loot_list());
    }

    // optional bool no_trade = 3;
    if (has_no_trade()) {
      total_size += 1 + 1;
    }

    // optional bool randomize_reward = 4;
    if (has_randomize_reward()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
    MergeFrom(*source);
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::MergeFrom(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_account_ids_.MergeFrom(from.player_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_loot_list();
      loot_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loot_list_);
    }
    if (cached_has_bits & 0x00000002u) {
      no_trade_ = from.no_trade_;
    }
    if (cached_has_bits & 0x00000004u) {
      randomize_reward_ = from.randomize_reward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::CopyFrom(const CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::IsInitialized() const {
  return true;
}

void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::Swap(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::InternalSwap(CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* other) {
  player_account_ids_.InternalSwap(&other->player_account_ids_);
  loot_list_.Swap(&other->loot_list_);
  std::swap(no_trade_, other->no_trade_);
  std::swap(randomize_reward_, other->randomize_reward_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops

// optional string loot_list = 1;
bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::has_loot_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_has_loot_list() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::clear_has_loot_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::clear_loot_list() {
  loot_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loot_list();
}
const ::std::string& CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::loot_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list)
  return loot_list_.GetNoArena();
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_loot_list(const ::std::string& value) {
  set_has_loot_list();
  loot_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list)
}
#if LANG_CXX11
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_loot_list(::std::string&& value) {
  set_has_loot_list();
  loot_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list)
}
#endif
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_loot_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loot_list();
  loot_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list)
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_loot_list(const char* value, size_t size) {
  set_has_loot_list();
  loot_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list)
}
::std::string* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::mutable_loot_list() {
  set_has_loot_list();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list)
  return loot_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::release_loot_list() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list)
  clear_has_loot_list();
  return loot_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_allocated_loot_list(::std::string* loot_list) {
  if (loot_list != NULL) {
    set_has_loot_list();
  } else {
    clear_has_loot_list();
  }
  loot_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loot_list);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.loot_list)
}

// repeated uint32 player_account_ids = 2;
int CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::player_account_ids_size() const {
  return player_account_ids_.size();
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::clear_player_account_ids() {
  player_account_ids_.Clear();
}
::google::protobuf::uint32 CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::player_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.player_account_ids)
  return player_account_ids_.Get(index);
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_player_account_ids(int index, ::google::protobuf::uint32 value) {
  player_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.player_account_ids)
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::add_player_account_ids(::google::protobuf::uint32 value) {
  player_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.player_account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::player_account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.player_account_ids)
  return player_account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::mutable_player_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.player_account_ids)
  return &player_account_ids_;
}

// optional bool no_trade = 3;
bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::has_no_trade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_has_no_trade() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::clear_has_no_trade() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::clear_no_trade() {
  no_trade_ = false;
  clear_has_no_trade();
}
bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::no_trade() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.no_trade)
  return no_trade_;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_no_trade(bool value) {
  set_has_no_trade();
  no_trade_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.no_trade)
}

// optional bool randomize_reward = 4;
bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::has_randomize_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_has_randomize_reward() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::clear_has_randomize_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::clear_randomize_reward() {
  randomize_reward_ = false;
  clear_has_randomize_reward();
}
bool CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::randomize_reward() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.randomize_reward)
  return randomize_reward_;
}
void CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops::set_randomize_reward(bool value) {
  set_has_randomize_reward();
  randomize_reward_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops.randomize_reward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCSignoutAwardAdditionalDrops::kDropsFieldNumber;
const int CMsgServerToGCSignoutAwardAdditionalDrops::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCSignoutAwardAdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
}
CMsgServerToGCSignoutAwardAdditionalDrops::CMsgServerToGCSignoutAwardAdditionalDrops(const CMsgServerToGCSignoutAwardAdditionalDrops& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      drops_(from.drops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
}

CMsgServerToGCSignoutAwardAdditionalDrops::~CMsgServerToGCSignoutAwardAdditionalDrops() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  SharedDtor();
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SharedDtor() {
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCSignoutAwardAdditionalDrops::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCSignoutAwardAdditionalDrops& CMsgServerToGCSignoutAwardAdditionalDrops::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCSignoutAwardAdditionalDrops* CMsgServerToGCSignoutAwardAdditionalDrops::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCSignoutAwardAdditionalDrops* n = new CMsgServerToGCSignoutAwardAdditionalDrops;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  drops_.Clear();
  match_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCSignoutAwardAdditionalDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  return false;
#undef DO_
}

void CMsgServerToGCSignoutAwardAdditionalDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  for (unsigned int i = 0, n = this->drops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drops(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
}

::google::protobuf::uint8* CMsgServerToGCSignoutAwardAdditionalDrops::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  for (unsigned int i = 0, n = this->drops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->drops(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  return target;
}

size_t CMsgServerToGCSignoutAwardAdditionalDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
  {
    unsigned int count = this->drops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drops(i));
    }
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCSignoutAwardAdditionalDrops* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCSignoutAwardAdditionalDrops>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
    MergeFrom(*source);
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops::MergeFrom(const CMsgServerToGCSignoutAwardAdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drops_.MergeFrom(from.drops_);
  if (from.has_match_id()) {
    set_match_id(from.match_id());
  }
}

void CMsgServerToGCSignoutAwardAdditionalDrops::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCSignoutAwardAdditionalDrops::CopyFrom(const CMsgServerToGCSignoutAwardAdditionalDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCSignoutAwardAdditionalDrops::IsInitialized() const {
  return true;
}

void CMsgServerToGCSignoutAwardAdditionalDrops::Swap(CMsgServerToGCSignoutAwardAdditionalDrops* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCSignoutAwardAdditionalDrops::InternalSwap(CMsgServerToGCSignoutAwardAdditionalDrops* other) {
  drops_.InternalSwap(&other->drops_);
  std::swap(match_id_, other->match_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCSignoutAwardAdditionalDrops::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCSignoutAwardAdditionalDrops

// repeated .proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops drops = 1;
int CMsgServerToGCSignoutAwardAdditionalDrops::drops_size() const {
  return drops_.size();
}
void CMsgServerToGCSignoutAwardAdditionalDrops::clear_drops() {
  drops_.Clear();
}
const ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops& CMsgServerToGCSignoutAwardAdditionalDrops::drops(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.drops)
  return drops_.Get(index);
}
::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* CMsgServerToGCSignoutAwardAdditionalDrops::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.drops)
  return drops_.Mutable(index);
}
::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops* CMsgServerToGCSignoutAwardAdditionalDrops::add_drops() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.drops)
  return drops_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops >*
CMsgServerToGCSignoutAwardAdditionalDrops::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.drops)
  return &drops_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops >&
CMsgServerToGCSignoutAwardAdditionalDrops::drops() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.drops)
  return drops_;
}

// optional uint64 match_id = 2;
bool CMsgServerToGCSignoutAwardAdditionalDrops::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCSignoutAwardAdditionalDrops::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCSignoutAwardAdditionalDrops::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCSignoutAwardAdditionalDrops::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgServerToGCSignoutAwardAdditionalDrops::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.match_id)
  return match_id_;
}
void CMsgServerToGCSignoutAwardAdditionalDrops::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCSignoutAwardAdditionalDrops.match_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFrostivusTimeElapsed_User::kAccountIdFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed_User::kTimeElapsedSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
}
CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User(const CMsgDOTAFrostivusTimeElapsed_User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&time_elapsed_s_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(time_elapsed_s_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&time_elapsed_s_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(time_elapsed_s_));
}

CMsgDOTAFrostivusTimeElapsed_User::~CMsgDOTAFrostivusTimeElapsed_User() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  SharedDtor();
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedDtor() {
}

void CMsgDOTAFrostivusTimeElapsed_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed_User::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFrostivusTimeElapsed_User& CMsgDOTAFrostivusTimeElapsed_User::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFrostivusTimeElapsed_User* CMsgDOTAFrostivusTimeElapsed_User::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFrostivusTimeElapsed_User* n = new CMsgDOTAFrostivusTimeElapsed_User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFrostivusTimeElapsed_User::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&time_elapsed_s_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(time_elapsed_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFrostivusTimeElapsed_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_elapsed_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_elapsed_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_elapsed_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  return false;
#undef DO_
}

void CMsgDOTAFrostivusTimeElapsed_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_elapsed_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_elapsed_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
}

::google::protobuf::uint8* CMsgDOTAFrostivusTimeElapsed_User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_elapsed_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_elapsed_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  return target;
}

size_t CMsgDOTAFrostivusTimeElapsed_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_elapsed_s = 2;
    if (has_time_elapsed_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_elapsed_s());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed_User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFrostivusTimeElapsed_User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_elapsed_s_ = from.time_elapsed_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed_User::IsInitialized() const {
  return true;
}

void CMsgDOTAFrostivusTimeElapsed_User::Swap(CMsgDOTAFrostivusTimeElapsed_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFrostivusTimeElapsed_User::InternalSwap(CMsgDOTAFrostivusTimeElapsed_User* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(time_elapsed_s_, other->time_elapsed_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFrostivusTimeElapsed_User::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFrostivusTimeElapsed_User

// optional uint32 account_id = 1;
bool CMsgDOTAFrostivusTimeElapsed_User::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFrostivusTimeElapsed_User::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFrostivusTimeElapsed_User::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFrostivusTimeElapsed_User::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAFrostivusTimeElapsed_User::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFrostivusTimeElapsed.User.account_id)
  return account_id_;
}
void CMsgDOTAFrostivusTimeElapsed_User::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFrostivusTimeElapsed.User.account_id)
}

// optional uint32 time_elapsed_s = 2;
bool CMsgDOTAFrostivusTimeElapsed_User::has_time_elapsed_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFrostivusTimeElapsed_User::set_has_time_elapsed_s() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFrostivusTimeElapsed_User::clear_has_time_elapsed_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFrostivusTimeElapsed_User::clear_time_elapsed_s() {
  time_elapsed_s_ = 0u;
  clear_has_time_elapsed_s();
}
::google::protobuf::uint32 CMsgDOTAFrostivusTimeElapsed_User::time_elapsed_s() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFrostivusTimeElapsed.User.time_elapsed_s)
  return time_elapsed_s_;
}
void CMsgDOTAFrostivusTimeElapsed_User::set_time_elapsed_s(::google::protobuf::uint32 value) {
  set_has_time_elapsed_s();
  time_elapsed_s_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFrostivusTimeElapsed.User.time_elapsed_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFrostivusTimeElapsed::kSecondsFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed::kUsersFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFrostivusTimeElapsed)
}
CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed(const CMsgDOTAFrostivusTimeElapsed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFrostivusTimeElapsed)
}

void CMsgDOTAFrostivusTimeElapsed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(seconds_));
}

CMsgDOTAFrostivusTimeElapsed::~CMsgDOTAFrostivusTimeElapsed() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  SharedDtor();
}

void CMsgDOTAFrostivusTimeElapsed::SharedDtor() {
}

void CMsgDOTAFrostivusTimeElapsed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFrostivusTimeElapsed& CMsgDOTAFrostivusTimeElapsed::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFrostivusTimeElapsed* CMsgDOTAFrostivusTimeElapsed::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFrostivusTimeElapsed* n = new CMsgDOTAFrostivusTimeElapsed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFrostivusTimeElapsed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  users_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFrostivusTimeElapsed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  return false;
#undef DO_
}

void CMsgDOTAFrostivusTimeElapsed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seconds = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seconds(), output);
  }

  // repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(i), output);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFrostivusTimeElapsed)
}

::google::protobuf::uint8* CMsgDOTAFrostivusTimeElapsed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seconds = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seconds(), target);
  }

  // repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->users(i), deterministic, target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  return target;
}

size_t CMsgDOTAFrostivusTimeElapsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFrostivusTimeElapsed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFrostivusTimeElapsed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFrostivusTimeElapsed)
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFrostivusTimeElapsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed::IsInitialized() const {
  return true;
}

void CMsgDOTAFrostivusTimeElapsed::Swap(CMsgDOTAFrostivusTimeElapsed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFrostivusTimeElapsed::InternalSwap(CMsgDOTAFrostivusTimeElapsed* other) {
  users_.InternalSwap(&other->users_);
  std::swap(match_id_, other->match_id_);
  std::swap(seconds_, other->seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFrostivusTimeElapsed::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFrostivusTimeElapsed

// optional uint32 seconds = 1;
bool CMsgDOTAFrostivusTimeElapsed::has_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFrostivusTimeElapsed::set_has_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFrostivusTimeElapsed::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFrostivusTimeElapsed::clear_seconds() {
  seconds_ = 0u;
  clear_has_seconds();
}
::google::protobuf::uint32 CMsgDOTAFrostivusTimeElapsed::seconds() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFrostivusTimeElapsed.seconds)
  return seconds_;
}
void CMsgDOTAFrostivusTimeElapsed::set_seconds(::google::protobuf::uint32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFrostivusTimeElapsed.seconds)
}

// repeated .proto.dota.CMsgDOTAFrostivusTimeElapsed.User users = 2;
int CMsgDOTAFrostivusTimeElapsed::users_size() const {
  return users_.size();
}
void CMsgDOTAFrostivusTimeElapsed::clear_users() {
  users_.Clear();
}
const ::proto::dota::CMsgDOTAFrostivusTimeElapsed_User& CMsgDOTAFrostivusTimeElapsed::users(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFrostivusTimeElapsed.users)
  return users_.Get(index);
}
::proto::dota::CMsgDOTAFrostivusTimeElapsed_User* CMsgDOTAFrostivusTimeElapsed::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFrostivusTimeElapsed.users)
  return users_.Mutable(index);
}
::proto::dota::CMsgDOTAFrostivusTimeElapsed_User* CMsgDOTAFrostivusTimeElapsed::add_users() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFrostivusTimeElapsed.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFrostivusTimeElapsed_User >*
CMsgDOTAFrostivusTimeElapsed::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFrostivusTimeElapsed.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFrostivusTimeElapsed_User >&
CMsgDOTAFrostivusTimeElapsed::users() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFrostivusTimeElapsed.users)
  return users_;
}

// optional uint64 match_id = 3;
bool CMsgDOTAFrostivusTimeElapsed::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFrostivusTimeElapsed::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFrostivusTimeElapsed::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFrostivusTimeElapsed::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTAFrostivusTimeElapsed::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFrostivusTimeElapsed.match_id)
  return match_id_;
}
void CMsgDOTAFrostivusTimeElapsed::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFrostivusTimeElapsed.match_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerPingRequest::kRequestIdFieldNumber;
const int CMsgGCToServerPingRequest::kRequestTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerPingRequest::CMsgGCToServerPingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerPingRequest)
}
CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(const CMsgGCToServerPingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&request_time_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(request_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerPingRequest)
}

void CMsgGCToServerPingRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&request_time_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(request_time_));
}

CMsgGCToServerPingRequest::~CMsgGCToServerPingRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerPingRequest)
  SharedDtor();
}

void CMsgGCToServerPingRequest::SharedDtor() {
}

void CMsgGCToServerPingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPingRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToServerPingRequest& CMsgGCToServerPingRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToServerPingRequest* CMsgGCToServerPingRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGCToServerPingRequest* n = new CMsgGCToServerPingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToServerPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerPingRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&request_time_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(request_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToServerPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerPingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 request_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerPingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerPingRequest)
  return false;
#undef DO_
}

void CMsgGCToServerPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerPingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerPingRequest)
}

::google::protobuf::uint8* CMsgGCToServerPingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerPingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerPingRequest)
  return target;
}

size_t CMsgGCToServerPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerPingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToServerPingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerPingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerPingRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingRequest::MergeFrom(const CMsgGCToServerPingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_time_ = from.request_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingRequest::CopyFrom(const CMsgGCToServerPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingRequest::IsInitialized() const {
  return true;
}

void CMsgGCToServerPingRequest::Swap(CMsgGCToServerPingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerPingRequest::InternalSwap(CMsgGCToServerPingRequest* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(request_time_, other->request_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToServerPingRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToServerPingRequest

// optional fixed64 request_id = 1;
bool CMsgGCToServerPingRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToServerPingRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToServerPingRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToServerPingRequest::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_request_id();
}
::google::protobuf::uint64 CMsgGCToServerPingRequest::request_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPingRequest.request_id)
  return request_id_;
}
void CMsgGCToServerPingRequest::set_request_id(::google::protobuf::uint64 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPingRequest.request_id)
}

// optional uint64 request_time = 2;
bool CMsgGCToServerPingRequest::has_request_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToServerPingRequest::set_has_request_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToServerPingRequest::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToServerPingRequest::clear_request_time() {
  request_time_ = GOOGLE_ULONGLONG(0);
  clear_has_request_time();
}
::google::protobuf::uint64 CMsgGCToServerPingRequest::request_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPingRequest.request_time)
  return request_time_;
}
void CMsgGCToServerPingRequest::set_request_time(::google::protobuf::uint64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPingRequest.request_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerPingResponse::kRequestIdFieldNumber;
const int CMsgGCToServerPingResponse::kRequestTimeFieldNumber;
const int CMsgGCToServerPingResponse::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerPingResponse::CMsgGCToServerPingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerPingResponse)
}
CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(const CMsgGCToServerPingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&cluster_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(cluster_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerPingResponse)
}

void CMsgGCToServerPingResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&cluster_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(cluster_));
}

CMsgGCToServerPingResponse::~CMsgGCToServerPingResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerPingResponse)
  SharedDtor();
}

void CMsgGCToServerPingResponse::SharedDtor() {
}

void CMsgGCToServerPingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPingResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToServerPingResponse& CMsgGCToServerPingResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToServerPingResponse* CMsgGCToServerPingResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToServerPingResponse* n = new CMsgGCToServerPingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToServerPingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerPingResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&cluster_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(cluster_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToServerPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerPingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 request_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cluster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerPingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerPingResponse)
  return false;
#undef DO_
}

void CMsgGCToServerPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // optional uint32 cluster = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cluster(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerPingResponse)
}

::google::protobuf::uint8* CMsgGCToServerPingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // optional uint32 cluster = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cluster(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerPingResponse)
  return target;
}

size_t CMsgGCToServerPingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerPingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_time());
    }

    // optional uint32 cluster = 3;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToServerPingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerPingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerPingResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingResponse::MergeFrom(const CMsgGCToServerPingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_time_ = from.request_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      cluster_ = from.cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingResponse::CopyFrom(const CMsgGCToServerPingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingResponse::IsInitialized() const {
  return true;
}

void CMsgGCToServerPingResponse::Swap(CMsgGCToServerPingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerPingResponse::InternalSwap(CMsgGCToServerPingResponse* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(request_time_, other->request_time_);
  std::swap(cluster_, other->cluster_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToServerPingResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToServerPingResponse

// optional fixed64 request_id = 1;
bool CMsgGCToServerPingResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToServerPingResponse::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToServerPingResponse::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToServerPingResponse::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_request_id();
}
::google::protobuf::uint64 CMsgGCToServerPingResponse::request_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPingResponse.request_id)
  return request_id_;
}
void CMsgGCToServerPingResponse::set_request_id(::google::protobuf::uint64 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPingResponse.request_id)
}

// optional uint64 request_time = 2;
bool CMsgGCToServerPingResponse::has_request_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToServerPingResponse::set_has_request_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToServerPingResponse::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToServerPingResponse::clear_request_time() {
  request_time_ = GOOGLE_ULONGLONG(0);
  clear_has_request_time();
}
::google::protobuf::uint64 CMsgGCToServerPingResponse::request_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPingResponse.request_time)
  return request_time_;
}
void CMsgGCToServerPingResponse::set_request_time(::google::protobuf::uint64 value) {
  set_has_request_time();
  request_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPingResponse.request_time)
}

// optional uint32 cluster = 3;
bool CMsgGCToServerPingResponse::has_cluster() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToServerPingResponse::set_has_cluster() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToServerPingResponse::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToServerPingResponse::clear_cluster() {
  cluster_ = 0u;
  clear_has_cluster();
}
::google::protobuf::uint32 CMsgGCToServerPingResponse::cluster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPingResponse.cluster)
  return cluster_;
}
void CMsgGCToServerPingResponse::set_cluster(::google::protobuf::uint32 value) {
  set_has_cluster();
  cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPingResponse.cluster)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerConsoleCommand::kConsoleCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerConsoleCommand)
}
CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand(const CMsgGCToServerConsoleCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  console_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_console_command()) {
    console_command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.console_command_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerConsoleCommand)
}

void CMsgGCToServerConsoleCommand::SharedCtor() {
  _cached_size_ = 0;
  console_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCToServerConsoleCommand::~CMsgGCToServerConsoleCommand() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerConsoleCommand)
  SharedDtor();
}

void CMsgGCToServerConsoleCommand::SharedDtor() {
  console_command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToServerConsoleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerConsoleCommand::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToServerConsoleCommand& CMsgGCToServerConsoleCommand::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToServerConsoleCommand* CMsgGCToServerConsoleCommand::New(::google::protobuf::Arena* arena) const {
  CMsgGCToServerConsoleCommand* n = new CMsgGCToServerConsoleCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToServerConsoleCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerConsoleCommand)
  if (has_console_command()) {
    GOOGLE_DCHECK(!console_command_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*console_command_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToServerConsoleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerConsoleCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string console_command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_console_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->console_command().data(), this->console_command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToServerConsoleCommand.console_command");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerConsoleCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerConsoleCommand)
  return false;
#undef DO_
}

void CMsgGCToServerConsoleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerConsoleCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string console_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->console_command().data(), this->console_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToServerConsoleCommand.console_command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->console_command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerConsoleCommand)
}

::google::protobuf::uint8* CMsgGCToServerConsoleCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerConsoleCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string console_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->console_command().data(), this->console_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToServerConsoleCommand.console_command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->console_command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerConsoleCommand)
  return target;
}

size_t CMsgGCToServerConsoleCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerConsoleCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string console_command = 1;
  if (has_console_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->console_command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerConsoleCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerConsoleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerConsoleCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToServerConsoleCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerConsoleCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerConsoleCommand)
    MergeFrom(*source);
  }
}

void CMsgGCToServerConsoleCommand::MergeFrom(const CMsgGCToServerConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerConsoleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_command()) {
    set_has_console_command();
    console_command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.console_command_);
  }
}

void CMsgGCToServerConsoleCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerConsoleCommand::CopyFrom(const CMsgGCToServerConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerConsoleCommand::IsInitialized() const {
  return true;
}

void CMsgGCToServerConsoleCommand::Swap(CMsgGCToServerConsoleCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerConsoleCommand::InternalSwap(CMsgGCToServerConsoleCommand* other) {
  console_command_.Swap(&other->console_command_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToServerConsoleCommand::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToServerConsoleCommand

// optional string console_command = 1;
bool CMsgGCToServerConsoleCommand::has_console_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToServerConsoleCommand::set_has_console_command() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToServerConsoleCommand::clear_has_console_command() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToServerConsoleCommand::clear_console_command() {
  console_command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_console_command();
}
const ::std::string& CMsgGCToServerConsoleCommand::console_command() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerConsoleCommand.console_command)
  return console_command_.GetNoArena();
}
void CMsgGCToServerConsoleCommand::set_console_command(const ::std::string& value) {
  set_has_console_command();
  console_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerConsoleCommand.console_command)
}
#if LANG_CXX11
void CMsgGCToServerConsoleCommand::set_console_command(::std::string&& value) {
  set_has_console_command();
  console_command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToServerConsoleCommand.console_command)
}
#endif
void CMsgGCToServerConsoleCommand::set_console_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_console_command();
  console_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToServerConsoleCommand.console_command)
}
void CMsgGCToServerConsoleCommand::set_console_command(const char* value, size_t size) {
  set_has_console_command();
  console_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToServerConsoleCommand.console_command)
}
::std::string* CMsgGCToServerConsoleCommand::mutable_console_command() {
  set_has_console_command();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToServerConsoleCommand.console_command)
  return console_command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToServerConsoleCommand::release_console_command() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToServerConsoleCommand.console_command)
  clear_has_console_command();
  return console_command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToServerConsoleCommand::set_allocated_console_command(::std::string* console_command) {
  if (console_command != NULL) {
    set_has_console_command();
  } else {
    clear_has_console_command();
  }
  console_command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), console_command);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToServerConsoleCommand.console_command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGetEventPoints::kEventIdFieldNumber;
const int CMsgServerGetEventPoints::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGetEventPoints::CMsgServerGetEventPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGetEventPoints)
}
CMsgServerGetEventPoints::CMsgServerGetEventPoints(const CMsgServerGetEventPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_id_(from.account_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGetEventPoints)
}

void CMsgServerGetEventPoints::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
}

CMsgServerGetEventPoints::~CMsgServerGetEventPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGetEventPoints)
  SharedDtor();
}

void CMsgServerGetEventPoints::SharedDtor() {
}

void CMsgServerGetEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGetEventPoints::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerGetEventPoints& CMsgServerGetEventPoints::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerGetEventPoints* CMsgServerGetEventPoints::New(::google::protobuf::Arena* arena) const {
  CMsgServerGetEventPoints* n = new CMsgServerGetEventPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerGetEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGetEventPoints)
  account_id_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerGetEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGetEventPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_account_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGetEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGetEventPoints)
  return false;
#undef DO_
}

void CMsgServerGetEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGetEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated uint32 account_id = 2;
  for (int i = 0, n = this->account_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGetEventPoints)
}

::google::protobuf::uint8* CMsgServerGetEventPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGetEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated uint32 account_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->account_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGetEventPoints)
  return target;
}

size_t CMsgServerGetEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGetEventPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 account_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_id_size());
    total_size += data_size;
  }

  // optional uint32 event_id = 1;
  if (has_event_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGetEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGetEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGetEventPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerGetEventPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGetEventPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGetEventPoints)
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPoints::MergeFrom(const CMsgServerGetEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGetEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_id_.MergeFrom(from.account_id_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgServerGetEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGetEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPoints::CopyFrom(const CMsgServerGetEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGetEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPoints::IsInitialized() const {
  return true;
}

void CMsgServerGetEventPoints::Swap(CMsgServerGetEventPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGetEventPoints::InternalSwap(CMsgServerGetEventPoints* other) {
  account_id_.InternalSwap(&other->account_id_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerGetEventPoints::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerGetEventPoints

// optional uint32 event_id = 1;
bool CMsgServerGetEventPoints::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerGetEventPoints::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerGetEventPoints::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerGetEventPoints::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgServerGetEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGetEventPoints.event_id)
  return event_id_;
}
void CMsgServerGetEventPoints::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGetEventPoints.event_id)
}

// repeated uint32 account_id = 2;
int CMsgServerGetEventPoints::account_id_size() const {
  return account_id_.size();
}
void CMsgServerGetEventPoints::clear_account_id() {
  account_id_.Clear();
}
::google::protobuf::uint32 CMsgServerGetEventPoints::account_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGetEventPoints.account_id)
  return account_id_.Get(index);
}
void CMsgServerGetEventPoints::set_account_id(int index, ::google::protobuf::uint32 value) {
  account_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGetEventPoints.account_id)
}
void CMsgServerGetEventPoints::add_account_id(::google::protobuf::uint32 value) {
  account_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerGetEventPoints.account_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgServerGetEventPoints::account_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerGetEventPoints.account_id)
  return account_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgServerGetEventPoints::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerGetEventPoints.account_id)
  return &account_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGetEventPointsResponse_Points::kAccountIdFieldNumber;
const int CMsgServerGetEventPointsResponse_Points::kPointsTotalFieldNumber;
const int CMsgServerGetEventPointsResponse_Points::kOwnedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGetEventPointsResponse_Points::CMsgServerGetEventPointsResponse_Points()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGetEventPointsResponse.Points)
}
CMsgServerGetEventPointsResponse_Points::CMsgServerGetEventPointsResponse_Points(const CMsgServerGetEventPointsResponse_Points& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&owned_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(owned_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGetEventPointsResponse.Points)
}

void CMsgServerGetEventPointsResponse_Points::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&owned_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(owned_));
}

CMsgServerGetEventPointsResponse_Points::~CMsgServerGetEventPointsResponse_Points() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGetEventPointsResponse.Points)
  SharedDtor();
}

void CMsgServerGetEventPointsResponse_Points::SharedDtor() {
}

void CMsgServerGetEventPointsResponse_Points::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGetEventPointsResponse_Points::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerGetEventPointsResponse_Points& CMsgServerGetEventPointsResponse_Points::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerGetEventPointsResponse_Points* CMsgServerGetEventPointsResponse_Points::New(::google::protobuf::Arena* arena) const {
  CMsgServerGetEventPointsResponse_Points* n = new CMsgServerGetEventPointsResponse_Points;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerGetEventPointsResponse_Points::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&owned_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(owned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerGetEventPointsResponse_Points::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_points_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool owned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_owned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGetEventPointsResponse.Points)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGetEventPointsResponse.Points)
  return false;
#undef DO_
}

void CMsgServerGetEventPointsResponse_Points::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 points_total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points_total(), output);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->owned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGetEventPointsResponse.Points)
}

::google::protobuf::uint8* CMsgServerGetEventPointsResponse_Points::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 points_total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points_total(), target);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->owned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGetEventPointsResponse.Points)
  return target;
}

size_t CMsgServerGetEventPointsResponse_Points::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 points_total = 2;
    if (has_points_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_total());
    }

    // optional bool owned = 4;
    if (has_owned()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGetEventPointsResponse_Points::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGetEventPointsResponse_Points* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerGetEventPointsResponse_Points>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGetEventPointsResponse.Points)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGetEventPointsResponse.Points)
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPointsResponse_Points::MergeFrom(const CMsgServerGetEventPointsResponse_Points& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_total_ = from.points_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      owned_ = from.owned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerGetEventPointsResponse_Points::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPointsResponse_Points::CopyFrom(const CMsgServerGetEventPointsResponse_Points& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGetEventPointsResponse.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPointsResponse_Points::IsInitialized() const {
  return true;
}

void CMsgServerGetEventPointsResponse_Points::Swap(CMsgServerGetEventPointsResponse_Points* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGetEventPointsResponse_Points::InternalSwap(CMsgServerGetEventPointsResponse_Points* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(points_total_, other->points_total_);
  std::swap(owned_, other->owned_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerGetEventPointsResponse_Points::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerGetEventPointsResponse_Points

// optional uint32 account_id = 1;
bool CMsgServerGetEventPointsResponse_Points::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerGetEventPointsResponse_Points::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerGetEventPointsResponse_Points::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerGetEventPointsResponse_Points::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgServerGetEventPointsResponse_Points::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGetEventPointsResponse.Points.account_id)
  return account_id_;
}
void CMsgServerGetEventPointsResponse_Points::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGetEventPointsResponse.Points.account_id)
}

// optional uint32 points_total = 2;
bool CMsgServerGetEventPointsResponse_Points::has_points_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerGetEventPointsResponse_Points::set_has_points_total() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerGetEventPointsResponse_Points::clear_has_points_total() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerGetEventPointsResponse_Points::clear_points_total() {
  points_total_ = 0u;
  clear_has_points_total();
}
::google::protobuf::uint32 CMsgServerGetEventPointsResponse_Points::points_total() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGetEventPointsResponse.Points.points_total)
  return points_total_;
}
void CMsgServerGetEventPointsResponse_Points::set_points_total(::google::protobuf::uint32 value) {
  set_has_points_total();
  points_total_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGetEventPointsResponse.Points.points_total)
}

// optional bool owned = 4;
bool CMsgServerGetEventPointsResponse_Points::has_owned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerGetEventPointsResponse_Points::set_has_owned() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerGetEventPointsResponse_Points::clear_has_owned() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerGetEventPointsResponse_Points::clear_owned() {
  owned_ = false;
  clear_has_owned();
}
bool CMsgServerGetEventPointsResponse_Points::owned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGetEventPointsResponse.Points.owned)
  return owned_;
}
void CMsgServerGetEventPointsResponse_Points::set_owned(bool value) {
  set_has_owned();
  owned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGetEventPointsResponse.Points.owned)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGetEventPointsResponse::kEventIdFieldNumber;
const int CMsgServerGetEventPointsResponse::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGetEventPointsResponse::CMsgServerGetEventPointsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGetEventPointsResponse)
}
CMsgServerGetEventPointsResponse::CMsgServerGetEventPointsResponse(const CMsgServerGetEventPointsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGetEventPointsResponse)
}

void CMsgServerGetEventPointsResponse::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
}

CMsgServerGetEventPointsResponse::~CMsgServerGetEventPointsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGetEventPointsResponse)
  SharedDtor();
}

void CMsgServerGetEventPointsResponse::SharedDtor() {
}

void CMsgServerGetEventPointsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGetEventPointsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerGetEventPointsResponse& CMsgServerGetEventPointsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerGetEventPointsResponse* CMsgServerGetEventPointsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgServerGetEventPointsResponse* n = new CMsgServerGetEventPointsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerGetEventPointsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGetEventPointsResponse)
  points_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerGetEventPointsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGetEventPointsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGetEventPointsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGetEventPointsResponse)
  return false;
#undef DO_
}

void CMsgServerGetEventPointsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGetEventPointsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->points(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGetEventPointsResponse)
}

::google::protobuf::uint8* CMsgServerGetEventPointsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGetEventPointsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->points(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGetEventPointsResponse)
  return target;
}

size_t CMsgServerGetEventPointsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGetEventPointsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  // optional uint32 event_id = 1;
  if (has_event_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGetEventPointsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGetEventPointsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGetEventPointsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerGetEventPointsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGetEventPointsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGetEventPointsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerGetEventPointsResponse::MergeFrom(const CMsgServerGetEventPointsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGetEventPointsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgServerGetEventPointsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGetEventPointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGetEventPointsResponse::CopyFrom(const CMsgServerGetEventPointsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGetEventPointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGetEventPointsResponse::IsInitialized() const {
  return true;
}

void CMsgServerGetEventPointsResponse::Swap(CMsgServerGetEventPointsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGetEventPointsResponse::InternalSwap(CMsgServerGetEventPointsResponse* other) {
  points_.InternalSwap(&other->points_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerGetEventPointsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerGetEventPointsResponse

// optional uint32 event_id = 1;
bool CMsgServerGetEventPointsResponse::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerGetEventPointsResponse::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerGetEventPointsResponse::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerGetEventPointsResponse::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgServerGetEventPointsResponse::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGetEventPointsResponse.event_id)
  return event_id_;
}
void CMsgServerGetEventPointsResponse::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGetEventPointsResponse.event_id)
}

// repeated .proto.dota.CMsgServerGetEventPointsResponse.Points points = 2;
int CMsgServerGetEventPointsResponse::points_size() const {
  return points_.size();
}
void CMsgServerGetEventPointsResponse::clear_points() {
  points_.Clear();
}
const ::proto::dota::CMsgServerGetEventPointsResponse_Points& CMsgServerGetEventPointsResponse::points(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGetEventPointsResponse.points)
  return points_.Get(index);
}
::proto::dota::CMsgServerGetEventPointsResponse_Points* CMsgServerGetEventPointsResponse::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerGetEventPointsResponse.points)
  return points_.Mutable(index);
}
::proto::dota::CMsgServerGetEventPointsResponse_Points* CMsgServerGetEventPointsResponse::add_points() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerGetEventPointsResponse.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerGetEventPointsResponse_Points >*
CMsgServerGetEventPointsResponse::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerGetEventPointsResponse.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerGetEventPointsResponse_Points >&
CMsgServerGetEventPointsResponse::points() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerGetEventPointsResponse.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGrantSurveyPermission_Survey::kAccountIdFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kQuestionIdFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kExpireTimeFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kSurveyKeyFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kExtraDataFieldNumber;
const int CMsgServerGrantSurveyPermission_Survey::kExtraData32FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGrantSurveyPermission_Survey::CMsgServerGrantSurveyPermission_Survey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGrantSurveyPermission.Survey)
}
CMsgServerGrantSurveyPermission_Survey::CMsgServerGrantSurveyPermission_Survey(const CMsgServerGrantSurveyPermission_Survey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(expire_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGrantSurveyPermission.Survey)
}

void CMsgServerGrantSurveyPermission_Survey::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(expire_time_));
}

CMsgServerGrantSurveyPermission_Survey::~CMsgServerGrantSurveyPermission_Survey() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  SharedDtor();
}

void CMsgServerGrantSurveyPermission_Survey::SharedDtor() {
}

void CMsgServerGrantSurveyPermission_Survey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGrantSurveyPermission_Survey::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerGrantSurveyPermission_Survey& CMsgServerGrantSurveyPermission_Survey::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerGrantSurveyPermission_Survey* CMsgServerGrantSurveyPermission_Survey::New(::google::protobuf::Arena* arena) const {
  CMsgServerGrantSurveyPermission_Survey* n = new CMsgServerGrantSurveyPermission_Survey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerGrantSurveyPermission_Survey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(expire_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerGrantSurveyPermission_Survey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 question_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_question_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expire_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_expire_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 survey_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_survey_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &survey_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 extra_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_extra_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extra_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 extra_data_32 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_extra_data_32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extra_data_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  return false;
#undef DO_
}

void CMsgServerGrantSurveyPermission_Survey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 question_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_id(), output);
  }

  // optional uint32 expire_time = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expire_time(), output);
  }

  // optional uint64 survey_key = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->survey_key(), output);
  }

  // optional uint64 extra_data = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->extra_data(), output);
  }

  // optional uint64 extra_data_32 = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->extra_data_32(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGrantSurveyPermission.Survey)
}

::google::protobuf::uint8* CMsgServerGrantSurveyPermission_Survey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 question_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_id(), target);
  }

  // optional uint32 expire_time = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expire_time(), target);
  }

  // optional uint64 survey_key = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->survey_key(), target);
  }

  // optional uint64 extra_data = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->extra_data(), target);
  }

  // optional uint64 extra_data_32 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->extra_data_32(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  return target;
}

size_t CMsgServerGrantSurveyPermission_Survey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 question_id = 2;
    if (has_question_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

    // optional uint64 survey_key = 4;
    if (has_survey_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->survey_key());
    }

    // optional uint64 extra_data = 5;
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extra_data());
    }

    // optional uint64 extra_data_32 = 6;
    if (has_extra_data_32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extra_data_32());
    }

    // optional uint32 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGrantSurveyPermission_Survey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermission_Survey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerGrantSurveyPermission_Survey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGrantSurveyPermission.Survey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGrantSurveyPermission.Survey)
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermission_Survey::MergeFrom(const CMsgServerGrantSurveyPermission_Survey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      question_id_ = from.question_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      survey_key_ = from.survey_key_;
    }
    if (cached_has_bits & 0x00000008u) {
      extra_data_ = from.extra_data_;
    }
    if (cached_has_bits & 0x00000010u) {
      extra_data_32_ = from.extra_data_32_;
    }
    if (cached_has_bits & 0x00000020u) {
      expire_time_ = from.expire_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerGrantSurveyPermission_Survey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermission_Survey::CopyFrom(const CMsgServerGrantSurveyPermission_Survey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGrantSurveyPermission.Survey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermission_Survey::IsInitialized() const {
  return true;
}

void CMsgServerGrantSurveyPermission_Survey::Swap(CMsgServerGrantSurveyPermission_Survey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGrantSurveyPermission_Survey::InternalSwap(CMsgServerGrantSurveyPermission_Survey* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(question_id_, other->question_id_);
  std::swap(survey_key_, other->survey_key_);
  std::swap(extra_data_, other->extra_data_);
  std::swap(extra_data_32_, other->extra_data_32_);
  std::swap(expire_time_, other->expire_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerGrantSurveyPermission_Survey::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerGrantSurveyPermission_Survey

// optional uint32 account_id = 1;
bool CMsgServerGrantSurveyPermission_Survey::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerGrantSurveyPermission_Survey::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgServerGrantSurveyPermission_Survey::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGrantSurveyPermission.Survey.account_id)
  return account_id_;
}
void CMsgServerGrantSurveyPermission_Survey::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGrantSurveyPermission.Survey.account_id)
}

// optional uint32 question_id = 2;
bool CMsgServerGrantSurveyPermission_Survey::has_question_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerGrantSurveyPermission_Survey::set_has_question_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_has_question_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_question_id() {
  question_id_ = 0u;
  clear_has_question_id();
}
::google::protobuf::uint32 CMsgServerGrantSurveyPermission_Survey::question_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGrantSurveyPermission.Survey.question_id)
  return question_id_;
}
void CMsgServerGrantSurveyPermission_Survey::set_question_id(::google::protobuf::uint32 value) {
  set_has_question_id();
  question_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGrantSurveyPermission.Survey.question_id)
}

// optional uint32 expire_time = 3;
bool CMsgServerGrantSurveyPermission_Survey::has_expire_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgServerGrantSurveyPermission_Survey::set_has_expire_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
::google::protobuf::uint32 CMsgServerGrantSurveyPermission_Survey::expire_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGrantSurveyPermission.Survey.expire_time)
  return expire_time_;
}
void CMsgServerGrantSurveyPermission_Survey::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGrantSurveyPermission.Survey.expire_time)
}

// optional uint64 survey_key = 4;
bool CMsgServerGrantSurveyPermission_Survey::has_survey_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerGrantSurveyPermission_Survey::set_has_survey_key() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_has_survey_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_survey_key() {
  survey_key_ = GOOGLE_ULONGLONG(0);
  clear_has_survey_key();
}
::google::protobuf::uint64 CMsgServerGrantSurveyPermission_Survey::survey_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGrantSurveyPermission.Survey.survey_key)
  return survey_key_;
}
void CMsgServerGrantSurveyPermission_Survey::set_survey_key(::google::protobuf::uint64 value) {
  set_has_survey_key();
  survey_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGrantSurveyPermission.Survey.survey_key)
}

// optional uint64 extra_data = 5;
bool CMsgServerGrantSurveyPermission_Survey::has_extra_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgServerGrantSurveyPermission_Survey::set_has_extra_data() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_has_extra_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_extra_data() {
  extra_data_ = GOOGLE_ULONGLONG(0);
  clear_has_extra_data();
}
::google::protobuf::uint64 CMsgServerGrantSurveyPermission_Survey::extra_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGrantSurveyPermission.Survey.extra_data)
  return extra_data_;
}
void CMsgServerGrantSurveyPermission_Survey::set_extra_data(::google::protobuf::uint64 value) {
  set_has_extra_data();
  extra_data_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGrantSurveyPermission.Survey.extra_data)
}

// optional uint64 extra_data_32 = 6;
bool CMsgServerGrantSurveyPermission_Survey::has_extra_data_32() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgServerGrantSurveyPermission_Survey::set_has_extra_data_32() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_has_extra_data_32() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgServerGrantSurveyPermission_Survey::clear_extra_data_32() {
  extra_data_32_ = GOOGLE_ULONGLONG(0);
  clear_has_extra_data_32();
}
::google::protobuf::uint64 CMsgServerGrantSurveyPermission_Survey::extra_data_32() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGrantSurveyPermission.Survey.extra_data_32)
  return extra_data_32_;
}
void CMsgServerGrantSurveyPermission_Survey::set_extra_data_32(::google::protobuf::uint64 value) {
  set_has_extra_data_32();
  extra_data_32_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGrantSurveyPermission.Survey.extra_data_32)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGrantSurveyPermission::kSurveysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGrantSurveyPermission::CMsgServerGrantSurveyPermission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGrantSurveyPermission)
}
CMsgServerGrantSurveyPermission::CMsgServerGrantSurveyPermission(const CMsgServerGrantSurveyPermission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      surveys_(from.surveys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGrantSurveyPermission)
}

void CMsgServerGrantSurveyPermission::SharedCtor() {
  _cached_size_ = 0;
}

CMsgServerGrantSurveyPermission::~CMsgServerGrantSurveyPermission() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGrantSurveyPermission)
  SharedDtor();
}

void CMsgServerGrantSurveyPermission::SharedDtor() {
}

void CMsgServerGrantSurveyPermission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGrantSurveyPermission::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerGrantSurveyPermission& CMsgServerGrantSurveyPermission::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerGrantSurveyPermission* CMsgServerGrantSurveyPermission::New(::google::protobuf::Arena* arena) const {
  CMsgServerGrantSurveyPermission* n = new CMsgServerGrantSurveyPermission;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerGrantSurveyPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGrantSurveyPermission)
  surveys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerGrantSurveyPermission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGrantSurveyPermission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_surveys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGrantSurveyPermission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGrantSurveyPermission)
  return false;
#undef DO_
}

void CMsgServerGrantSurveyPermission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGrantSurveyPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
  for (unsigned int i = 0, n = this->surveys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->surveys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGrantSurveyPermission)
}

::google::protobuf::uint8* CMsgServerGrantSurveyPermission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGrantSurveyPermission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
  for (unsigned int i = 0, n = this->surveys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->surveys(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGrantSurveyPermission)
  return target;
}

size_t CMsgServerGrantSurveyPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGrantSurveyPermission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
  {
    unsigned int count = this->surveys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surveys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGrantSurveyPermission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGrantSurveyPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerGrantSurveyPermission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGrantSurveyPermission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGrantSurveyPermission)
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermission::MergeFrom(const CMsgServerGrantSurveyPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGrantSurveyPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  surveys_.MergeFrom(from.surveys_);
}

void CMsgServerGrantSurveyPermission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGrantSurveyPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermission::CopyFrom(const CMsgServerGrantSurveyPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGrantSurveyPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermission::IsInitialized() const {
  return true;
}

void CMsgServerGrantSurveyPermission::Swap(CMsgServerGrantSurveyPermission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGrantSurveyPermission::InternalSwap(CMsgServerGrantSurveyPermission* other) {
  surveys_.InternalSwap(&other->surveys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerGrantSurveyPermission::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerGrantSurveyPermission

// repeated .proto.dota.CMsgServerGrantSurveyPermission.Survey surveys = 1;
int CMsgServerGrantSurveyPermission::surveys_size() const {
  return surveys_.size();
}
void CMsgServerGrantSurveyPermission::clear_surveys() {
  surveys_.Clear();
}
const ::proto::dota::CMsgServerGrantSurveyPermission_Survey& CMsgServerGrantSurveyPermission::surveys(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGrantSurveyPermission.surveys)
  return surveys_.Get(index);
}
::proto::dota::CMsgServerGrantSurveyPermission_Survey* CMsgServerGrantSurveyPermission::mutable_surveys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerGrantSurveyPermission.surveys)
  return surveys_.Mutable(index);
}
::proto::dota::CMsgServerGrantSurveyPermission_Survey* CMsgServerGrantSurveyPermission::add_surveys() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerGrantSurveyPermission.surveys)
  return surveys_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerGrantSurveyPermission_Survey >*
CMsgServerGrantSurveyPermission::mutable_surveys() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerGrantSurveyPermission.surveys)
  return &surveys_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerGrantSurveyPermission_Survey >&
CMsgServerGrantSurveyPermission::surveys() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerGrantSurveyPermission.surveys)
  return surveys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGrantSurveyPermissionResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGrantSurveyPermissionResponse::CMsgServerGrantSurveyPermissionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGrantSurveyPermissionResponse)
}
CMsgServerGrantSurveyPermissionResponse::CMsgServerGrantSurveyPermissionResponse(const CMsgServerGrantSurveyPermissionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGrantSurveyPermissionResponse)
}

void CMsgServerGrantSurveyPermissionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

CMsgServerGrantSurveyPermissionResponse::~CMsgServerGrantSurveyPermissionResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  SharedDtor();
}

void CMsgServerGrantSurveyPermissionResponse::SharedDtor() {
}

void CMsgServerGrantSurveyPermissionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGrantSurveyPermissionResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerGrantSurveyPermissionResponse& CMsgServerGrantSurveyPermissionResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerGrantSurveyPermissionResponse* CMsgServerGrantSurveyPermissionResponse::New(::google::protobuf::Arena* arena) const {
  CMsgServerGrantSurveyPermissionResponse* n = new CMsgServerGrantSurveyPermissionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerGrantSurveyPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerGrantSurveyPermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  return false;
#undef DO_
}

void CMsgServerGrantSurveyPermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGrantSurveyPermissionResponse)
}

::google::protobuf::uint8* CMsgServerGrantSurveyPermissionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  return target;
}

size_t CMsgServerGrantSurveyPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGrantSurveyPermissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGrantSurveyPermissionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerGrantSurveyPermissionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGrantSurveyPermissionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGrantSurveyPermissionResponse)
    MergeFrom(*source);
  }
}

void CMsgServerGrantSurveyPermissionResponse::MergeFrom(const CMsgServerGrantSurveyPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgServerGrantSurveyPermissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGrantSurveyPermissionResponse::CopyFrom(const CMsgServerGrantSurveyPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGrantSurveyPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGrantSurveyPermissionResponse::IsInitialized() const {
  return true;
}

void CMsgServerGrantSurveyPermissionResponse::Swap(CMsgServerGrantSurveyPermissionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGrantSurveyPermissionResponse::InternalSwap(CMsgServerGrantSurveyPermissionResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerGrantSurveyPermissionResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerGrantSurveyPermissionResponse

// optional uint32 result = 1;
bool CMsgServerGrantSurveyPermissionResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerGrantSurveyPermissionResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerGrantSurveyPermissionResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerGrantSurveyPermissionResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgServerGrantSurveyPermissionResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGrantSurveyPermissionResponse.result)
  return result_;
}
void CMsgServerGrantSurveyPermissionResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGrantSurveyPermissionResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchConnectionStats_Player::kAccountIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kIpFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kAvgPingMsFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kPacketLossFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kPingDeviationFieldNumber;
const int CMsgServerToGCMatchConnectionStats_Player::kFullResendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
}
CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player(const CMsgServerToGCMatchConnectionStats_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&full_resends_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(full_resends_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
}

void CMsgServerToGCMatchConnectionStats_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&full_resends_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(full_resends_));
}

CMsgServerToGCMatchConnectionStats_Player::~CMsgServerToGCMatchConnectionStats_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  SharedDtor();
}

void CMsgServerToGCMatchConnectionStats_Player::SharedDtor() {
}

void CMsgServerToGCMatchConnectionStats_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCMatchConnectionStats_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCMatchConnectionStats_Player& CMsgServerToGCMatchConnectionStats_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCMatchConnectionStats_Player* CMsgServerToGCMatchConnectionStats_Player::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCMatchConnectionStats_Player* n = new CMsgServerToGCMatchConnectionStats_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCMatchConnectionStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&full_resends_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(full_resends_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCMatchConnectionStats_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_ping_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_avg_ping_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float packet_loss = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_packet_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &packet_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ping_deviation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_ping_deviation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ping_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 full_resends = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_full_resends();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &full_resends_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  return false;
#undef DO_
}

void CMsgServerToGCMatchConnectionStats_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  // optional uint32 avg_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avg_ping_ms(), output);
  }

  // optional float packet_loss = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->packet_loss(), output);
  }

  // optional float ping_deviation = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ping_deviation(), output);
  }

  // optional uint32 full_resends = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->full_resends(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
}

::google::protobuf::uint8* CMsgServerToGCMatchConnectionStats_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  // optional uint32 avg_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avg_ping_ms(), target);
  }

  // optional float packet_loss = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->packet_loss(), target);
  }

  // optional float ping_deviation = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ping_deviation(), target);
  }

  // optional uint32 full_resends = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->full_resends(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  return target;
}

size_t CMsgServerToGCMatchConnectionStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional fixed32 ip = 2;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 avg_ping_ms = 3;
    if (has_avg_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_ping_ms());
    }

    // optional float packet_loss = 5;
    if (has_packet_loss()) {
      total_size += 1 + 4;
    }

    // optional float ping_deviation = 6;
    if (has_ping_deviation()) {
      total_size += 1 + 4;
    }

    // optional uint32 full_resends = 7;
    if (has_full_resends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->full_resends());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCMatchConnectionStats_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchConnectionStats_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCMatchConnectionStats_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchConnectionStats_Player::MergeFrom(const CMsgServerToGCMatchConnectionStats_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_ping_ms_ = from.avg_ping_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      packet_loss_ = from.packet_loss_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_deviation_ = from.ping_deviation_;
    }
    if (cached_has_bits & 0x00000020u) {
      full_resends_ = from.full_resends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchConnectionStats_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchConnectionStats_Player::CopyFrom(const CMsgServerToGCMatchConnectionStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchConnectionStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchConnectionStats_Player::Swap(CMsgServerToGCMatchConnectionStats_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchConnectionStats_Player::InternalSwap(CMsgServerToGCMatchConnectionStats_Player* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(ip_, other->ip_);
  std::swap(avg_ping_ms_, other->avg_ping_ms_);
  std::swap(packet_loss_, other->packet_loss_);
  std::swap(ping_deviation_, other->ping_deviation_);
  std::swap(full_resends_, other->full_resends_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCMatchConnectionStats_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCMatchConnectionStats_Player

// optional uint32 account_id = 1;
bool CMsgServerToGCMatchConnectionStats_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCMatchConnectionStats_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgServerToGCMatchConnectionStats_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.Player.account_id)
  return account_id_;
}
void CMsgServerToGCMatchConnectionStats_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.Player.account_id)
}

// optional fixed32 ip = 2;
bool CMsgServerToGCMatchConnectionStats_Player::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCMatchConnectionStats_Player::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 CMsgServerToGCMatchConnectionStats_Player::ip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.Player.ip)
  return ip_;
}
void CMsgServerToGCMatchConnectionStats_Player::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.Player.ip)
}

// optional uint32 avg_ping_ms = 3;
bool CMsgServerToGCMatchConnectionStats_Player::has_avg_ping_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCMatchConnectionStats_Player::set_has_avg_ping_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_has_avg_ping_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_avg_ping_ms() {
  avg_ping_ms_ = 0u;
  clear_has_avg_ping_ms();
}
::google::protobuf::uint32 CMsgServerToGCMatchConnectionStats_Player::avg_ping_ms() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.Player.avg_ping_ms)
  return avg_ping_ms_;
}
void CMsgServerToGCMatchConnectionStats_Player::set_avg_ping_ms(::google::protobuf::uint32 value) {
  set_has_avg_ping_ms();
  avg_ping_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.Player.avg_ping_ms)
}

// optional float packet_loss = 5;
bool CMsgServerToGCMatchConnectionStats_Player::has_packet_loss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgServerToGCMatchConnectionStats_Player::set_has_packet_loss() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_has_packet_loss() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_packet_loss() {
  packet_loss_ = 0;
  clear_has_packet_loss();
}
float CMsgServerToGCMatchConnectionStats_Player::packet_loss() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.Player.packet_loss)
  return packet_loss_;
}
void CMsgServerToGCMatchConnectionStats_Player::set_packet_loss(float value) {
  set_has_packet_loss();
  packet_loss_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.Player.packet_loss)
}

// optional float ping_deviation = 6;
bool CMsgServerToGCMatchConnectionStats_Player::has_ping_deviation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgServerToGCMatchConnectionStats_Player::set_has_ping_deviation() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_has_ping_deviation() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_ping_deviation() {
  ping_deviation_ = 0;
  clear_has_ping_deviation();
}
float CMsgServerToGCMatchConnectionStats_Player::ping_deviation() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.Player.ping_deviation)
  return ping_deviation_;
}
void CMsgServerToGCMatchConnectionStats_Player::set_ping_deviation(float value) {
  set_has_ping_deviation();
  ping_deviation_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.Player.ping_deviation)
}

// optional uint32 full_resends = 7;
bool CMsgServerToGCMatchConnectionStats_Player::has_full_resends() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgServerToGCMatchConnectionStats_Player::set_has_full_resends() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_has_full_resends() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgServerToGCMatchConnectionStats_Player::clear_full_resends() {
  full_resends_ = 0u;
  clear_has_full_resends();
}
::google::protobuf::uint32 CMsgServerToGCMatchConnectionStats_Player::full_resends() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.Player.full_resends)
  return full_resends_;
}
void CMsgServerToGCMatchConnectionStats_Player::set_full_resends(::google::protobuf::uint32 value) {
  set_has_full_resends();
  full_resends_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.Player.full_resends)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchConnectionStats::kMatchIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kRegionIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kLeagueIdFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kPlayersFieldNumber;
const int CMsgServerToGCMatchConnectionStats::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchConnectionStats)
}
CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats(const CMsgServerToGCMatchConnectionStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&cluster_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(cluster_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchConnectionStats)
}

void CMsgServerToGCMatchConnectionStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&cluster_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(cluster_id_));
}

CMsgServerToGCMatchConnectionStats::~CMsgServerToGCMatchConnectionStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchConnectionStats)
  SharedDtor();
}

void CMsgServerToGCMatchConnectionStats::SharedDtor() {
}

void CMsgServerToGCMatchConnectionStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCMatchConnectionStats::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCMatchConnectionStats& CMsgServerToGCMatchConnectionStats::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCMatchConnectionStats* CMsgServerToGCMatchConnectionStats::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCMatchConnectionStats* n = new CMsgServerToGCMatchConnectionStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCMatchConnectionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  players_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(cluster_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCMatchConnectionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchConnectionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchConnectionStats)
  return false;
#undef DO_
}

void CMsgServerToGCMatchConnectionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region_id(), output);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->league_id(), output);
  }

  // repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  // optional uint32 cluster_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cluster_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchConnectionStats)
}

::google::protobuf::uint8* CMsgServerToGCMatchConnectionStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region_id(), target);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->league_id(), target);
  }

  // repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->players(i), deterministic, target);
  }

  // optional uint32 cluster_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cluster_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchConnectionStats)
  return target;
}

size_t CMsgServerToGCMatchConnectionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional uint32 league_id = 3;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 cluster_id = 5;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCMatchConnectionStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchConnectionStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCMatchConnectionStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchConnectionStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchConnectionStats)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchConnectionStats::MergeFrom(const CMsgServerToGCMatchConnectionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cluster_id_ = from.cluster_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchConnectionStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchConnectionStats::CopyFrom(const CMsgServerToGCMatchConnectionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchConnectionStats::Swap(CMsgServerToGCMatchConnectionStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchConnectionStats::InternalSwap(CMsgServerToGCMatchConnectionStats* other) {
  players_.InternalSwap(&other->players_);
  std::swap(match_id_, other->match_id_);
  std::swap(region_id_, other->region_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(cluster_id_, other->cluster_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCMatchConnectionStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCMatchConnectionStats

// optional uint64 match_id = 1;
bool CMsgServerToGCMatchConnectionStats::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCMatchConnectionStats::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCMatchConnectionStats::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCMatchConnectionStats::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgServerToGCMatchConnectionStats::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.match_id)
  return match_id_;
}
void CMsgServerToGCMatchConnectionStats::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.match_id)
}

// optional uint32 region_id = 2;
bool CMsgServerToGCMatchConnectionStats::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCMatchConnectionStats::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCMatchConnectionStats::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCMatchConnectionStats::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
::google::protobuf::uint32 CMsgServerToGCMatchConnectionStats::region_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.region_id)
  return region_id_;
}
void CMsgServerToGCMatchConnectionStats::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.region_id)
}

// optional uint32 league_id = 3;
bool CMsgServerToGCMatchConnectionStats::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCMatchConnectionStats::set_has_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCMatchConnectionStats::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCMatchConnectionStats::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgServerToGCMatchConnectionStats::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.league_id)
  return league_id_;
}
void CMsgServerToGCMatchConnectionStats::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.league_id)
}

// repeated .proto.dota.CMsgServerToGCMatchConnectionStats.Player players = 4;
int CMsgServerToGCMatchConnectionStats::players_size() const {
  return players_.size();
}
void CMsgServerToGCMatchConnectionStats::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgServerToGCMatchConnectionStats_Player& CMsgServerToGCMatchConnectionStats::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.players)
  return players_.Get(index);
}
::proto::dota::CMsgServerToGCMatchConnectionStats_Player* CMsgServerToGCMatchConnectionStats::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCMatchConnectionStats.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgServerToGCMatchConnectionStats_Player* CMsgServerToGCMatchConnectionStats::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCMatchConnectionStats.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCMatchConnectionStats_Player >*
CMsgServerToGCMatchConnectionStats::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCMatchConnectionStats.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCMatchConnectionStats_Player >&
CMsgServerToGCMatchConnectionStats::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCMatchConnectionStats.players)
  return players_;
}

// optional uint32 cluster_id = 5;
bool CMsgServerToGCMatchConnectionStats::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgServerToGCMatchConnectionStats::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgServerToGCMatchConnectionStats::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgServerToGCMatchConnectionStats::clear_cluster_id() {
  cluster_id_ = 0u;
  clear_has_cluster_id();
}
::google::protobuf::uint32 CMsgServerToGCMatchConnectionStats::cluster_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchConnectionStats.cluster_id)
  return cluster_id_;
}
void CMsgServerToGCMatchConnectionStats::set_cluster_id(::google::protobuf::uint32 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchConnectionStats.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerGCUpdateSpectatorCount::kSpectatorCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerGCUpdateSpectatorCount)
}
CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount(const CMsgServerGCUpdateSpectatorCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spectator_count_ = from.spectator_count_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerGCUpdateSpectatorCount)
}

void CMsgServerGCUpdateSpectatorCount::SharedCtor() {
  _cached_size_ = 0;
  spectator_count_ = 0u;
}

CMsgServerGCUpdateSpectatorCount::~CMsgServerGCUpdateSpectatorCount() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerGCUpdateSpectatorCount)
  SharedDtor();
}

void CMsgServerGCUpdateSpectatorCount::SharedDtor() {
}

void CMsgServerGCUpdateSpectatorCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGCUpdateSpectatorCount::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerGCUpdateSpectatorCount& CMsgServerGCUpdateSpectatorCount::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerGCUpdateSpectatorCount* CMsgServerGCUpdateSpectatorCount::New(::google::protobuf::Arena* arena) const {
  CMsgServerGCUpdateSpectatorCount* n = new CMsgServerGCUpdateSpectatorCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerGCUpdateSpectatorCount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  spectator_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerGCUpdateSpectatorCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spectator_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_spectator_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectator_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerGCUpdateSpectatorCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerGCUpdateSpectatorCount)
  return false;
#undef DO_
}

void CMsgServerGCUpdateSpectatorCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spectator_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spectator_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerGCUpdateSpectatorCount)
}

::google::protobuf::uint8* CMsgServerGCUpdateSpectatorCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spectator_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spectator_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerGCUpdateSpectatorCount)
  return target;
}

size_t CMsgServerGCUpdateSpectatorCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 spectator_count = 1;
  if (has_spectator_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spectator_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGCUpdateSpectatorCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerGCUpdateSpectatorCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerGCUpdateSpectatorCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerGCUpdateSpectatorCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerGCUpdateSpectatorCount)
    MergeFrom(*source);
  }
}

void CMsgServerGCUpdateSpectatorCount::MergeFrom(const CMsgServerGCUpdateSpectatorCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spectator_count()) {
    set_spectator_count(from.spectator_count());
  }
}

void CMsgServerGCUpdateSpectatorCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGCUpdateSpectatorCount::CopyFrom(const CMsgServerGCUpdateSpectatorCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerGCUpdateSpectatorCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGCUpdateSpectatorCount::IsInitialized() const {
  return true;
}

void CMsgServerGCUpdateSpectatorCount::Swap(CMsgServerGCUpdateSpectatorCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerGCUpdateSpectatorCount::InternalSwap(CMsgServerGCUpdateSpectatorCount* other) {
  std::swap(spectator_count_, other->spectator_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerGCUpdateSpectatorCount::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerGCUpdateSpectatorCount

// optional uint32 spectator_count = 1;
bool CMsgServerGCUpdateSpectatorCount::has_spectator_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerGCUpdateSpectatorCount::set_has_spectator_count() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerGCUpdateSpectatorCount::clear_has_spectator_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerGCUpdateSpectatorCount::clear_spectator_count() {
  spectator_count_ = 0u;
  clear_has_spectator_count();
}
::google::protobuf::uint32 CMsgServerGCUpdateSpectatorCount::spectator_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerGCUpdateSpectatorCount.spectator_count)
  return spectator_count_;
}
void CMsgServerGCUpdateSpectatorCount::set_spectator_count(::google::protobuf::uint32 value) {
  set_has_spectator_count();
  spectator_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerGCUpdateSpectatorCount.spectator_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSerializedCombatLog_Dictionary_DictString::kIdFieldNumber;
const int CSerializedCombatLog_Dictionary_DictString::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSerializedCombatLog.Dictionary.DictString)
}
CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString(const CSerializedCombatLog_Dictionary_DictString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSerializedCombatLog.Dictionary.DictString)
}

void CSerializedCombatLog_Dictionary_DictString::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

CSerializedCombatLog_Dictionary_DictString::~CSerializedCombatLog_Dictionary_DictString() {
  // @@protoc_insertion_point(destructor:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  SharedDtor();
}

void CSerializedCombatLog_Dictionary_DictString::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSerializedCombatLog_Dictionary_DictString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSerializedCombatLog_Dictionary_DictString::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSerializedCombatLog_Dictionary_DictString& CSerializedCombatLog_Dictionary_DictString::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSerializedCombatLog_Dictionary_DictString* CSerializedCombatLog_Dictionary_DictString::New(::google::protobuf::Arena* arena) const {
  CSerializedCombatLog_Dictionary_DictString* n = new CSerializedCombatLog_Dictionary_DictString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSerializedCombatLog_Dictionary_DictString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSerializedCombatLog_Dictionary_DictString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSerializedCombatLog.Dictionary.DictString.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  return false;
#undef DO_
}

void CSerializedCombatLog_Dictionary_DictString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSerializedCombatLog.Dictionary.DictString.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSerializedCombatLog.Dictionary.DictString)
}

::google::protobuf::uint8* CSerializedCombatLog_Dictionary_DictString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSerializedCombatLog.Dictionary.DictString.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  return target;
}

size_t CSerializedCombatLog_Dictionary_DictString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  size_t total_size = 0;

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t CSerializedCombatLog_Dictionary_DictString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSerializedCombatLog_Dictionary_DictString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  GOOGLE_DCHECK_NE(&from, this);
  const CSerializedCombatLog_Dictionary_DictString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSerializedCombatLog_Dictionary_DictString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSerializedCombatLog.Dictionary.DictString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSerializedCombatLog.Dictionary.DictString)
    MergeFrom(*source);
  }
}

void CSerializedCombatLog_Dictionary_DictString::MergeFrom(const CSerializedCombatLog_Dictionary_DictString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSerializedCombatLog_Dictionary_DictString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog_Dictionary_DictString::CopyFrom(const CSerializedCombatLog_Dictionary_DictString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSerializedCombatLog.Dictionary.DictString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary_DictString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CSerializedCombatLog_Dictionary_DictString::Swap(CSerializedCombatLog_Dictionary_DictString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSerializedCombatLog_Dictionary_DictString::InternalSwap(CSerializedCombatLog_Dictionary_DictString* other) {
  value_.Swap(&other->value_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSerializedCombatLog_Dictionary_DictString::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSerializedCombatLog_Dictionary_DictString

// required uint32 id = 1;
bool CSerializedCombatLog_Dictionary_DictString::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSerializedCombatLog_Dictionary_DictString::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSerializedCombatLog_Dictionary_DictString::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSerializedCombatLog_Dictionary_DictString::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CSerializedCombatLog_Dictionary_DictString::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSerializedCombatLog.Dictionary.DictString.id)
  return id_;
}
void CSerializedCombatLog_Dictionary_DictString::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSerializedCombatLog.Dictionary.DictString.id)
}

// required string value = 2;
bool CSerializedCombatLog_Dictionary_DictString::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSerializedCombatLog_Dictionary_DictString::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CSerializedCombatLog_Dictionary_DictString::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSerializedCombatLog_Dictionary_DictString::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CSerializedCombatLog_Dictionary_DictString::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSerializedCombatLog.Dictionary.DictString.value)
  return value_.GetNoArena();
}
void CSerializedCombatLog_Dictionary_DictString::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSerializedCombatLog.Dictionary.DictString.value)
}
#if LANG_CXX11
void CSerializedCombatLog_Dictionary_DictString::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSerializedCombatLog.Dictionary.DictString.value)
}
#endif
void CSerializedCombatLog_Dictionary_DictString::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSerializedCombatLog.Dictionary.DictString.value)
}
void CSerializedCombatLog_Dictionary_DictString::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSerializedCombatLog.Dictionary.DictString.value)
}
::std::string* CSerializedCombatLog_Dictionary_DictString::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSerializedCombatLog.Dictionary.DictString.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSerializedCombatLog_Dictionary_DictString::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CSerializedCombatLog.Dictionary.DictString.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSerializedCombatLog_Dictionary_DictString::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSerializedCombatLog.Dictionary.DictString.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSerializedCombatLog_Dictionary::kStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSerializedCombatLog.Dictionary)
}
CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary(const CSerializedCombatLog_Dictionary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      strings_(from.strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSerializedCombatLog.Dictionary)
}

void CSerializedCombatLog_Dictionary::SharedCtor() {
  _cached_size_ = 0;
}

CSerializedCombatLog_Dictionary::~CSerializedCombatLog_Dictionary() {
  // @@protoc_insertion_point(destructor:proto.dota.CSerializedCombatLog.Dictionary)
  SharedDtor();
}

void CSerializedCombatLog_Dictionary::SharedDtor() {
}

void CSerializedCombatLog_Dictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSerializedCombatLog_Dictionary::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSerializedCombatLog_Dictionary& CSerializedCombatLog_Dictionary::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSerializedCombatLog_Dictionary* CSerializedCombatLog_Dictionary::New(::google::protobuf::Arena* arena) const {
  CSerializedCombatLog_Dictionary* n = new CSerializedCombatLog_Dictionary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSerializedCombatLog_Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSerializedCombatLog.Dictionary)
  strings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSerializedCombatLog_Dictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSerializedCombatLog.Dictionary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSerializedCombatLog.Dictionary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSerializedCombatLog.Dictionary)
  return false;
#undef DO_
}

void CSerializedCombatLog_Dictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSerializedCombatLog.Dictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
  for (unsigned int i = 0, n = this->strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSerializedCombatLog.Dictionary)
}

::google::protobuf::uint8* CSerializedCombatLog_Dictionary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSerializedCombatLog.Dictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
  for (unsigned int i = 0, n = this->strings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->strings(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSerializedCombatLog.Dictionary)
  return target;
}

size_t CSerializedCombatLog_Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSerializedCombatLog.Dictionary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
  {
    unsigned int count = this->strings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strings(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSerializedCombatLog_Dictionary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSerializedCombatLog.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const CSerializedCombatLog_Dictionary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSerializedCombatLog_Dictionary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSerializedCombatLog.Dictionary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSerializedCombatLog.Dictionary)
    MergeFrom(*source);
  }
}

void CSerializedCombatLog_Dictionary::MergeFrom(const CSerializedCombatLog_Dictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSerializedCombatLog.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strings_.MergeFrom(from.strings_);
}

void CSerializedCombatLog_Dictionary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSerializedCombatLog.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog_Dictionary::CopyFrom(const CSerializedCombatLog_Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSerializedCombatLog.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->strings())) return false;
  return true;
}

void CSerializedCombatLog_Dictionary::Swap(CSerializedCombatLog_Dictionary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSerializedCombatLog_Dictionary::InternalSwap(CSerializedCombatLog_Dictionary* other) {
  strings_.InternalSwap(&other->strings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSerializedCombatLog_Dictionary::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSerializedCombatLog_Dictionary

// repeated .proto.dota.CSerializedCombatLog.Dictionary.DictString strings = 1;
int CSerializedCombatLog_Dictionary::strings_size() const {
  return strings_.size();
}
void CSerializedCombatLog_Dictionary::clear_strings() {
  strings_.Clear();
}
const ::proto::dota::CSerializedCombatLog_Dictionary_DictString& CSerializedCombatLog_Dictionary::strings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSerializedCombatLog.Dictionary.strings)
  return strings_.Get(index);
}
::proto::dota::CSerializedCombatLog_Dictionary_DictString* CSerializedCombatLog_Dictionary::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSerializedCombatLog.Dictionary.strings)
  return strings_.Mutable(index);
}
::proto::dota::CSerializedCombatLog_Dictionary_DictString* CSerializedCombatLog_Dictionary::add_strings() {
  // @@protoc_insertion_point(field_add:proto.dota.CSerializedCombatLog.Dictionary.strings)
  return strings_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSerializedCombatLog_Dictionary_DictString >*
CSerializedCombatLog_Dictionary::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSerializedCombatLog.Dictionary.strings)
  return &strings_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSerializedCombatLog_Dictionary_DictString >&
CSerializedCombatLog_Dictionary::strings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSerializedCombatLog.Dictionary.strings)
  return strings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSerializedCombatLog::kVersionFieldNumber;
const int CSerializedCombatLog::kDictionaryFieldNumber;
const int CSerializedCombatLog::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSerializedCombatLog::CSerializedCombatLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSerializedCombatLog)
}
CSerializedCombatLog::CSerializedCombatLog(const CSerializedCombatLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dictionary()) {
    dictionary_ = new ::proto::dota::CSerializedCombatLog_Dictionary(*from.dictionary_);
  } else {
    dictionary_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSerializedCombatLog)
}

void CSerializedCombatLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dictionary_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&dictionary_) + sizeof(version_));
}

CSerializedCombatLog::~CSerializedCombatLog() {
  // @@protoc_insertion_point(destructor:proto.dota.CSerializedCombatLog)
  SharedDtor();
}

void CSerializedCombatLog::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dictionary_;
  }
}

void CSerializedCombatLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSerializedCombatLog::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSerializedCombatLog& CSerializedCombatLog::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSerializedCombatLog* CSerializedCombatLog::New(::google::protobuf::Arena* arena) const {
  CSerializedCombatLog* n = new CSerializedCombatLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSerializedCombatLog::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSerializedCombatLog)
  entries_.Clear();
  if (has_dictionary()) {
    GOOGLE_DCHECK(dictionary_ != NULL);
    dictionary_->::proto::dota::CSerializedCombatLog_Dictionary::Clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSerializedCombatLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSerializedCombatLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSerializedCombatLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSerializedCombatLog)
  return false;
#undef DO_
}

void CSerializedCombatLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSerializedCombatLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dictionary_, output);
  }

  // repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSerializedCombatLog)
}

::google::protobuf::uint8* CSerializedCombatLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSerializedCombatLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dictionary_, deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->entries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSerializedCombatLog)
  return target;
}

size_t CSerializedCombatLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSerializedCombatLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
    if (has_dictionary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dictionary_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSerializedCombatLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSerializedCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CSerializedCombatLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSerializedCombatLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSerializedCombatLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSerializedCombatLog)
    MergeFrom(*source);
  }
}

void CSerializedCombatLog::MergeFrom(const CSerializedCombatLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSerializedCombatLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dictionary()->::proto::dota::CSerializedCombatLog_Dictionary::MergeFrom(from.dictionary());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSerializedCombatLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSerializedCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSerializedCombatLog::CopyFrom(const CSerializedCombatLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSerializedCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog::IsInitialized() const {
  if (has_dictionary()) {
    if (!this->dictionary_->IsInitialized()) return false;
  }
  return true;
}

void CSerializedCombatLog::Swap(CSerializedCombatLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSerializedCombatLog::InternalSwap(CSerializedCombatLog* other) {
  entries_.InternalSwap(&other->entries_);
  std::swap(dictionary_, other->dictionary_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSerializedCombatLog::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSerializedCombatLog

// optional uint32 version = 1;
bool CSerializedCombatLog::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSerializedCombatLog::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CSerializedCombatLog::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSerializedCombatLog::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 CSerializedCombatLog::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSerializedCombatLog.version)
  return version_;
}
void CSerializedCombatLog::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSerializedCombatLog.version)
}

// optional .proto.dota.CSerializedCombatLog.Dictionary dictionary = 2;
bool CSerializedCombatLog::has_dictionary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSerializedCombatLog::set_has_dictionary() {
  _has_bits_[0] |= 0x00000001u;
}
void CSerializedCombatLog::clear_has_dictionary() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSerializedCombatLog::clear_dictionary() {
  if (dictionary_ != NULL) dictionary_->::proto::dota::CSerializedCombatLog_Dictionary::Clear();
  clear_has_dictionary();
}
const ::proto::dota::CSerializedCombatLog_Dictionary& CSerializedCombatLog::dictionary() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSerializedCombatLog.dictionary)
  return dictionary_ != NULL ? *dictionary_
                         : *::proto::dota::CSerializedCombatLog_Dictionary::internal_default_instance();
}
::proto::dota::CSerializedCombatLog_Dictionary* CSerializedCombatLog::mutable_dictionary() {
  set_has_dictionary();
  if (dictionary_ == NULL) {
    dictionary_ = new ::proto::dota::CSerializedCombatLog_Dictionary;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CSerializedCombatLog.dictionary)
  return dictionary_;
}
::proto::dota::CSerializedCombatLog_Dictionary* CSerializedCombatLog::release_dictionary() {
  // @@protoc_insertion_point(field_release:proto.dota.CSerializedCombatLog.dictionary)
  clear_has_dictionary();
  ::proto::dota::CSerializedCombatLog_Dictionary* temp = dictionary_;
  dictionary_ = NULL;
  return temp;
}
void CSerializedCombatLog::set_allocated_dictionary(::proto::dota::CSerializedCombatLog_Dictionary* dictionary) {
  delete dictionary_;
  dictionary_ = dictionary;
  if (dictionary) {
    set_has_dictionary();
  } else {
    clear_has_dictionary();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSerializedCombatLog.dictionary)
}

// repeated .proto.dota.CMsgDOTACombatLogEntry entries = 3;
int CSerializedCombatLog::entries_size() const {
  return entries_.size();
}
void CSerializedCombatLog::clear_entries() {
  entries_.Clear();
}
const ::proto::dota::CMsgDOTACombatLogEntry& CSerializedCombatLog::entries(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSerializedCombatLog.entries)
  return entries_.Get(index);
}
::proto::dota::CMsgDOTACombatLogEntry* CSerializedCombatLog::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSerializedCombatLog.entries)
  return entries_.Mutable(index);
}
::proto::dota::CMsgDOTACombatLogEntry* CSerializedCombatLog::add_entries() {
  // @@protoc_insertion_point(field_add:proto.dota.CSerializedCombatLog.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTACombatLogEntry >*
CSerializedCombatLog::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSerializedCombatLog.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTACombatLogEntry >&
CSerializedCombatLog::entries() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSerializedCombatLog.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetAdditionalEquips::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetAdditionalEquips::CMsgServerToGCGetAdditionalEquips()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetAdditionalEquips)
}
CMsgServerToGCGetAdditionalEquips::CMsgServerToGCGetAdditionalEquips(const CMsgServerToGCGetAdditionalEquips& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetAdditionalEquips)
}

void CMsgServerToGCGetAdditionalEquips::SharedCtor() {
  _cached_size_ = 0;
}

CMsgServerToGCGetAdditionalEquips::~CMsgServerToGCGetAdditionalEquips() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetAdditionalEquips)
  SharedDtor();
}

void CMsgServerToGCGetAdditionalEquips::SharedDtor() {
}

void CMsgServerToGCGetAdditionalEquips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetAdditionalEquips::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCGetAdditionalEquips& CMsgServerToGCGetAdditionalEquips::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCGetAdditionalEquips* CMsgServerToGCGetAdditionalEquips::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCGetAdditionalEquips* n = new CMsgServerToGCGetAdditionalEquips;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCGetAdditionalEquips::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  account_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCGetAdditionalEquips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetAdditionalEquips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetAdditionalEquips)
  return false;
#undef DO_
}

void CMsgServerToGCGetAdditionalEquips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetAdditionalEquips)
}

::google::protobuf::uint8* CMsgServerToGCGetAdditionalEquips::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetAdditionalEquips)
  return target;
}

size_t CMsgServerToGCGetAdditionalEquips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetAdditionalEquips::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquips* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCGetAdditionalEquips>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetAdditionalEquips)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetAdditionalEquips)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquips::MergeFrom(const CMsgServerToGCGetAdditionalEquips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgServerToGCGetAdditionalEquips::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquips::CopyFrom(const CMsgServerToGCGetAdditionalEquips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquips::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetAdditionalEquips::Swap(CMsgServerToGCGetAdditionalEquips* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetAdditionalEquips::InternalSwap(CMsgServerToGCGetAdditionalEquips* other) {
  account_ids_.InternalSwap(&other->account_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCGetAdditionalEquips::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCGetAdditionalEquips

// repeated uint32 account_ids = 1;
int CMsgServerToGCGetAdditionalEquips::account_ids_size() const {
  return account_ids_.size();
}
void CMsgServerToGCGetAdditionalEquips::clear_account_ids() {
  account_ids_.Clear();
}
::google::protobuf::uint32 CMsgServerToGCGetAdditionalEquips::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCGetAdditionalEquips.account_ids)
  return account_ids_.Get(index);
}
void CMsgServerToGCGetAdditionalEquips::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCGetAdditionalEquips.account_ids)
}
void CMsgServerToGCGetAdditionalEquips::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCGetAdditionalEquips.account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgServerToGCGetAdditionalEquips::account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCGetAdditionalEquips.account_ids)
  return account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgServerToGCGetAdditionalEquips::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCGetAdditionalEquips.account_ids)
  return &account_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::kAccountIdFieldNumber;
const int CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::kEquipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}
CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::~CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  SharedDtor();
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SharedDtor() {
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* n = new CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  equips_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CAdditionalEquipSlot equips = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return false;
#undef DO_
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CAdditionalEquipSlot equips = 2;
  for (unsigned int i = 0, n = this->equips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
}

::google::protobuf::uint8* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CAdditionalEquipSlot equips = 2;
  for (unsigned int i = 0, n = this->equips_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->equips(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  return target;
}

size_t CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CAdditionalEquipSlot equips = 2;
  {
    unsigned int count = this->equips_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips(i));
    }
  }

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::MergeFrom(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::CopyFrom(const CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::Swap(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::InternalSwap(CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* other) {
  equips_.InternalSwap(&other->equips_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips

// optional uint32 account_id = 1;
bool CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips.account_id)
  return account_id_;
}
void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips.account_id)
}

// repeated .proto.dota.CAdditionalEquipSlot equips = 2;
int CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::equips_size() const {
  return equips_.size();
}
void CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::clear_equips() {
  equips_.Clear();
}
const ::proto::dota::CAdditionalEquipSlot& CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::equips(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips.equips)
  return equips_.Get(index);
}
::proto::dota::CAdditionalEquipSlot* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::mutable_equips(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips.equips)
  return equips_.Mutable(index);
}
::proto::dota::CAdditionalEquipSlot* CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::add_equips() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips.equips)
  return equips_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CAdditionalEquipSlot >*
CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips.equips)
  return &equips_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CAdditionalEquipSlot >&
CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips::equips() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips.equips)
  return equips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetAdditionalEquipsResponse::kEquipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetAdditionalEquipsResponse::CMsgServerToGCGetAdditionalEquipsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
}
CMsgServerToGCGetAdditionalEquipsResponse::CMsgServerToGCGetAdditionalEquipsResponse(const CMsgServerToGCGetAdditionalEquipsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
}

void CMsgServerToGCGetAdditionalEquipsResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgServerToGCGetAdditionalEquipsResponse::~CMsgServerToGCGetAdditionalEquipsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  SharedDtor();
}

void CMsgServerToGCGetAdditionalEquipsResponse::SharedDtor() {
}

void CMsgServerToGCGetAdditionalEquipsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetAdditionalEquipsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCGetAdditionalEquipsResponse& CMsgServerToGCGetAdditionalEquipsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCGetAdditionalEquipsResponse* CMsgServerToGCGetAdditionalEquipsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCGetAdditionalEquipsResponse* n = new CMsgServerToGCGetAdditionalEquipsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCGetAdditionalEquipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  equips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCGetAdditionalEquipsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  return false;
#undef DO_
}

void CMsgServerToGCGetAdditionalEquipsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  for (unsigned int i = 0, n = this->equips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
}

::google::protobuf::uint8* CMsgServerToGCGetAdditionalEquipsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  for (unsigned int i = 0, n = this->equips_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->equips(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  return target;
}

size_t CMsgServerToGCGetAdditionalEquipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
  {
    unsigned int count = this->equips_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetAdditionalEquipsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetAdditionalEquipsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCGetAdditionalEquipsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetAdditionalEquipsResponse::MergeFrom(const CMsgServerToGCGetAdditionalEquipsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
}

void CMsgServerToGCGetAdditionalEquipsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetAdditionalEquipsResponse::CopyFrom(const CMsgServerToGCGetAdditionalEquipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetAdditionalEquipsResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetAdditionalEquipsResponse::Swap(CMsgServerToGCGetAdditionalEquipsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetAdditionalEquipsResponse::InternalSwap(CMsgServerToGCGetAdditionalEquipsResponse* other) {
  equips_.InternalSwap(&other->equips_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCGetAdditionalEquipsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCGetAdditionalEquipsResponse

// repeated .proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips equips = 1;
int CMsgServerToGCGetAdditionalEquipsResponse::equips_size() const {
  return equips_.size();
}
void CMsgServerToGCGetAdditionalEquipsResponse::clear_equips() {
  equips_.Clear();
}
const ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips& CMsgServerToGCGetAdditionalEquipsResponse::equips(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.equips)
  return equips_.Get(index);
}
::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* CMsgServerToGCGetAdditionalEquipsResponse::mutable_equips(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.equips)
  return equips_.Mutable(index);
}
::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips* CMsgServerToGCGetAdditionalEquipsResponse::add_equips() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.equips)
  return equips_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips >*
CMsgServerToGCGetAdditionalEquipsResponse::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.equips)
  return &equips_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips >&
CMsgServerToGCGetAdditionalEquipsResponse::equips() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCGetAdditionalEquipsResponse.equips)
  return equips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetProfileCard::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetProfileCard::CMsgServerToGCGetProfileCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetProfileCard)
}
CMsgServerToGCGetProfileCard::CMsgServerToGCGetProfileCard(const CMsgServerToGCGetProfileCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetProfileCard)
}

void CMsgServerToGCGetProfileCard::SharedCtor() {
  _cached_size_ = 0;
}

CMsgServerToGCGetProfileCard::~CMsgServerToGCGetProfileCard() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetProfileCard)
  SharedDtor();
}

void CMsgServerToGCGetProfileCard::SharedDtor() {
}

void CMsgServerToGCGetProfileCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetProfileCard::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCGetProfileCard& CMsgServerToGCGetProfileCard::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCGetProfileCard* CMsgServerToGCGetProfileCard::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCGetProfileCard* n = new CMsgServerToGCGetProfileCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCGetProfileCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetProfileCard)
  account_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCGetProfileCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetProfileCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetProfileCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetProfileCard)
  return false;
#undef DO_
}

void CMsgServerToGCGetProfileCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetProfileCard)
}

::google::protobuf::uint8* CMsgServerToGCGetProfileCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetProfileCard)
  return target;
}

size_t CMsgServerToGCGetProfileCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetProfileCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetProfileCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetProfileCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCGetProfileCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetProfileCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetProfileCard)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetProfileCard::MergeFrom(const CMsgServerToGCGetProfileCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgServerToGCGetProfileCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetProfileCard::CopyFrom(const CMsgServerToGCGetProfileCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetProfileCard::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetProfileCard::Swap(CMsgServerToGCGetProfileCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetProfileCard::InternalSwap(CMsgServerToGCGetProfileCard* other) {
  account_ids_.InternalSwap(&other->account_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCGetProfileCard::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCGetProfileCard

// repeated uint32 account_ids = 1;
int CMsgServerToGCGetProfileCard::account_ids_size() const {
  return account_ids_.size();
}
void CMsgServerToGCGetProfileCard::clear_account_ids() {
  account_ids_.Clear();
}
::google::protobuf::uint32 CMsgServerToGCGetProfileCard::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCGetProfileCard.account_ids)
  return account_ids_.Get(index);
}
void CMsgServerToGCGetProfileCard::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCGetProfileCard.account_ids)
}
void CMsgServerToGCGetProfileCard::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCGetProfileCard.account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgServerToGCGetProfileCard::account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCGetProfileCard.account_ids)
  return account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgServerToGCGetProfileCard::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCGetProfileCard.account_ids)
  return &account_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetProfileCardResponse::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetProfileCardResponse::CMsgServerToGCGetProfileCardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetProfileCardResponse)
}
CMsgServerToGCGetProfileCardResponse::CMsgServerToGCGetProfileCardResponse(const CMsgServerToGCGetProfileCardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetProfileCardResponse)
}

void CMsgServerToGCGetProfileCardResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgServerToGCGetProfileCardResponse::~CMsgServerToGCGetProfileCardResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetProfileCardResponse)
  SharedDtor();
}

void CMsgServerToGCGetProfileCardResponse::SharedDtor() {
}

void CMsgServerToGCGetProfileCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetProfileCardResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCGetProfileCardResponse& CMsgServerToGCGetProfileCardResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCGetProfileCardResponse* CMsgServerToGCGetProfileCardResponse::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCGetProfileCardResponse* n = new CMsgServerToGCGetProfileCardResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCGetProfileCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  cards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCGetProfileCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetProfileCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetProfileCardResponse)
  return false;
#undef DO_
}

void CMsgServerToGCGetProfileCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetProfileCardResponse)
}

::google::protobuf::uint8* CMsgServerToGCGetProfileCardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cards(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetProfileCardResponse)
  return target;
}

size_t CMsgServerToGCGetProfileCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
  {
    unsigned int count = this->cards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetProfileCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetProfileCardResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCGetProfileCardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetProfileCardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetProfileCardResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetProfileCardResponse::MergeFrom(const CMsgServerToGCGetProfileCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
}

void CMsgServerToGCGetProfileCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetProfileCardResponse::CopyFrom(const CMsgServerToGCGetProfileCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetProfileCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetProfileCardResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetProfileCardResponse::Swap(CMsgServerToGCGetProfileCardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetProfileCardResponse::InternalSwap(CMsgServerToGCGetProfileCardResponse* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCGetProfileCardResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCGetProfileCardResponse

// repeated .proto.dota.CMsgDOTAProfileCard cards = 1;
int CMsgServerToGCGetProfileCardResponse::cards_size() const {
  return cards_.size();
}
void CMsgServerToGCGetProfileCardResponse::clear_cards() {
  cards_.Clear();
}
const ::proto::dota::CMsgDOTAProfileCard& CMsgServerToGCGetProfileCardResponse::cards(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCGetProfileCardResponse.cards)
  return cards_.Get(index);
}
::proto::dota::CMsgDOTAProfileCard* CMsgServerToGCGetProfileCardResponse::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCGetProfileCardResponse.cards)
  return cards_.Mutable(index);
}
::proto::dota::CMsgDOTAProfileCard* CMsgServerToGCGetProfileCardResponse::add_cards() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCGetProfileCardResponse.cards)
  return cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProfileCard >*
CMsgServerToGCGetProfileCardResponse::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCGetProfileCardResponse.cards)
  return &cards_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProfileCard >&
CMsgServerToGCGetProfileCardResponse::cards() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCGetProfileCardResponse.cards)
  return cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCVictoryPredictions_Record::kAccountIdFieldNumber;
const int CMsgServerToGCVictoryPredictions_Record::kItemIdFieldNumber;
const int CMsgServerToGCVictoryPredictions_Record::kItemIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCVictoryPredictions.Record)
}
CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record(const CMsgServerToGCVictoryPredictions_Record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCVictoryPredictions.Record)
}

void CMsgServerToGCVictoryPredictions_Record::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_id_, 0, reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(account_id_));
}

CMsgServerToGCVictoryPredictions_Record::~CMsgServerToGCVictoryPredictions_Record() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  SharedDtor();
}

void CMsgServerToGCVictoryPredictions_Record::SharedDtor() {
}

void CMsgServerToGCVictoryPredictions_Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCVictoryPredictions_Record::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCVictoryPredictions_Record& CMsgServerToGCVictoryPredictions_Record::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCVictoryPredictions_Record* CMsgServerToGCVictoryPredictions_Record::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCVictoryPredictions_Record* n = new CMsgServerToGCVictoryPredictions_Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCVictoryPredictions_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  item_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_id_, 0, reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&item_id_) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCVictoryPredictions_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 item_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40u, input, this->mutable_item_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  return false;
#undef DO_
}

void CMsgServerToGCVictoryPredictions_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  // repeated uint64 item_ids = 5;
  for (int i = 0, n = this->item_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->item_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCVictoryPredictions.Record)
}

::google::protobuf::uint8* CMsgServerToGCVictoryPredictions_Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  // repeated uint64 item_ids = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(5, this->item_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  return target;
}

size_t CMsgServerToGCVictoryPredictions_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 item_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCVictoryPredictions_Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCVictoryPredictions_Record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCVictoryPredictions_Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCVictoryPredictions.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCVictoryPredictions.Record)
    MergeFrom(*source);
  }
}

void CMsgServerToGCVictoryPredictions_Record::MergeFrom(const CMsgServerToGCVictoryPredictions_Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCVictoryPredictions_Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCVictoryPredictions_Record::CopyFrom(const CMsgServerToGCVictoryPredictions_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCVictoryPredictions.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions_Record::IsInitialized() const {
  return true;
}

void CMsgServerToGCVictoryPredictions_Record::Swap(CMsgServerToGCVictoryPredictions_Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCVictoryPredictions_Record::InternalSwap(CMsgServerToGCVictoryPredictions_Record* other) {
  item_ids_.InternalSwap(&other->item_ids_);
  std::swap(item_id_, other->item_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCVictoryPredictions_Record::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCVictoryPredictions_Record

// optional uint32 account_id = 1;
bool CMsgServerToGCVictoryPredictions_Record::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCVictoryPredictions_Record::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCVictoryPredictions_Record::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCVictoryPredictions_Record::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgServerToGCVictoryPredictions_Record::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCVictoryPredictions.Record.account_id)
  return account_id_;
}
void CMsgServerToGCVictoryPredictions_Record::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCVictoryPredictions.Record.account_id)
}

// optional uint64 item_id = 2;
bool CMsgServerToGCVictoryPredictions_Record::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCVictoryPredictions_Record::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCVictoryPredictions_Record::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCVictoryPredictions_Record::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CMsgServerToGCVictoryPredictions_Record::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCVictoryPredictions.Record.item_id)
  return item_id_;
}
void CMsgServerToGCVictoryPredictions_Record::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCVictoryPredictions.Record.item_id)
}

// repeated uint64 item_ids = 5;
int CMsgServerToGCVictoryPredictions_Record::item_ids_size() const {
  return item_ids_.size();
}
void CMsgServerToGCVictoryPredictions_Record::clear_item_ids() {
  item_ids_.Clear();
}
::google::protobuf::uint64 CMsgServerToGCVictoryPredictions_Record::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCVictoryPredictions.Record.item_ids)
  return item_ids_.Get(index);
}
void CMsgServerToGCVictoryPredictions_Record::set_item_ids(int index, ::google::protobuf::uint64 value) {
  item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCVictoryPredictions.Record.item_ids)
}
void CMsgServerToGCVictoryPredictions_Record::add_item_ids(::google::protobuf::uint64 value) {
  item_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCVictoryPredictions.Record.item_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgServerToGCVictoryPredictions_Record::item_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCVictoryPredictions.Record.item_ids)
  return item_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgServerToGCVictoryPredictions_Record::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCVictoryPredictions.Record.item_ids)
  return &item_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCVictoryPredictions::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCVictoryPredictions)
}
CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions(const CMsgServerToGCVictoryPredictions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      records_(from.records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCVictoryPredictions)
}

void CMsgServerToGCVictoryPredictions::SharedCtor() {
  _cached_size_ = 0;
}

CMsgServerToGCVictoryPredictions::~CMsgServerToGCVictoryPredictions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCVictoryPredictions)
  SharedDtor();
}

void CMsgServerToGCVictoryPredictions::SharedDtor() {
}

void CMsgServerToGCVictoryPredictions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCVictoryPredictions::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCVictoryPredictions& CMsgServerToGCVictoryPredictions::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCVictoryPredictions* CMsgServerToGCVictoryPredictions::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCVictoryPredictions* n = new CMsgServerToGCVictoryPredictions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCVictoryPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCVictoryPredictions)
  records_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCVictoryPredictions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCVictoryPredictions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCVictoryPredictions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCVictoryPredictions)
  return false;
#undef DO_
}

void CMsgServerToGCVictoryPredictions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCVictoryPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCVictoryPredictions)
}

::google::protobuf::uint8* CMsgServerToGCVictoryPredictions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCVictoryPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->records(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCVictoryPredictions)
  return target;
}

size_t CMsgServerToGCVictoryPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCVictoryPredictions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
  {
    unsigned int count = this->records_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCVictoryPredictions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCVictoryPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCVictoryPredictions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCVictoryPredictions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCVictoryPredictions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCVictoryPredictions)
    MergeFrom(*source);
  }
}

void CMsgServerToGCVictoryPredictions::MergeFrom(const CMsgServerToGCVictoryPredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCVictoryPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void CMsgServerToGCVictoryPredictions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCVictoryPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCVictoryPredictions::CopyFrom(const CMsgServerToGCVictoryPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCVictoryPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions::IsInitialized() const {
  return true;
}

void CMsgServerToGCVictoryPredictions::Swap(CMsgServerToGCVictoryPredictions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCVictoryPredictions::InternalSwap(CMsgServerToGCVictoryPredictions* other) {
  records_.InternalSwap(&other->records_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCVictoryPredictions::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCVictoryPredictions

// repeated .proto.dota.CMsgServerToGCVictoryPredictions.Record records = 1;
int CMsgServerToGCVictoryPredictions::records_size() const {
  return records_.size();
}
void CMsgServerToGCVictoryPredictions::clear_records() {
  records_.Clear();
}
const ::proto::dota::CMsgServerToGCVictoryPredictions_Record& CMsgServerToGCVictoryPredictions::records(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCVictoryPredictions.records)
  return records_.Get(index);
}
::proto::dota::CMsgServerToGCVictoryPredictions_Record* CMsgServerToGCVictoryPredictions::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCVictoryPredictions.records)
  return records_.Mutable(index);
}
::proto::dota::CMsgServerToGCVictoryPredictions_Record* CMsgServerToGCVictoryPredictions::add_records() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCVictoryPredictions.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCVictoryPredictions_Record >*
CMsgServerToGCVictoryPredictions::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCVictoryPredictions.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCVictoryPredictions_Record >&
CMsgServerToGCVictoryPredictions::records() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCVictoryPredictions.records)
  return records_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSuspiciousActivity::kAccountIdFieldNumber;
const int CMsgSuspiciousActivity::kActivityFieldNumber;
const int CMsgSuspiciousActivity::kIntdata1FieldNumber;
const int CMsgSuspiciousActivity::kIntdata2FieldNumber;
const int CMsgSuspiciousActivity::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSuspiciousActivity::CMsgSuspiciousActivity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSuspiciousActivity)
}
CMsgSuspiciousActivity::CMsgSuspiciousActivity(const CMsgSuspiciousActivity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&activity_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(activity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSuspiciousActivity)
}

void CMsgSuspiciousActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(time_));
  activity_ = 1;
}

CMsgSuspiciousActivity::~CMsgSuspiciousActivity() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSuspiciousActivity)
  SharedDtor();
}

void CMsgSuspiciousActivity::SharedDtor() {
}

void CMsgSuspiciousActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSuspiciousActivity::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSuspiciousActivity& CMsgSuspiciousActivity::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSuspiciousActivity* CMsgSuspiciousActivity::New(::google::protobuf::Arena* arena) const {
  CMsgSuspiciousActivity* n = new CMsgSuspiciousActivity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSuspiciousActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSuspiciousActivity)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(time_));
    activity_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSuspiciousActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSuspiciousActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ESuspiciousActivity_IsValid(value)) {
            set_activity(static_cast< ::proto::dota::ESuspiciousActivity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 intdata1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_intdata1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intdata1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 intdata2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_intdata2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intdata2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSuspiciousActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSuspiciousActivity)
  return false;
#undef DO_
}

void CMsgSuspiciousActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->activity(), output);
  }

  // optional sint32 intdata1 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->intdata1(), output);
  }

  // optional sint32 intdata2 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->intdata2(), output);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSuspiciousActivity)
}

::google::protobuf::uint8* CMsgSuspiciousActivity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->activity(), target);
  }

  // optional sint32 intdata1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->intdata1(), target);
  }

  // optional sint32 intdata2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->intdata2(), target);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSuspiciousActivity)
  return target;
}

size_t CMsgSuspiciousActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSuspiciousActivity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional sint32 intdata1 = 3;
    if (has_intdata1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intdata1());
    }

    // optional sint32 intdata2 = 4;
    if (has_intdata2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intdata2());
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSuspiciousActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSuspiciousActivity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSuspiciousActivity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSuspiciousActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSuspiciousActivity)
    MergeFrom(*source);
  }
}

void CMsgSuspiciousActivity::MergeFrom(const CMsgSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      intdata1_ = from.intdata1_;
    }
    if (cached_has_bits & 0x00000004u) {
      intdata2_ = from.intdata2_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      activity_ = from.activity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSuspiciousActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSuspiciousActivity::CopyFrom(const CMsgSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSuspiciousActivity::IsInitialized() const {
  return true;
}

void CMsgSuspiciousActivity::Swap(CMsgSuspiciousActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSuspiciousActivity::InternalSwap(CMsgSuspiciousActivity* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(intdata1_, other->intdata1_);
  std::swap(intdata2_, other->intdata2_);
  std::swap(time_, other->time_);
  std::swap(activity_, other->activity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSuspiciousActivity::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSuspiciousActivity

// optional uint32 account_id = 1;
bool CMsgSuspiciousActivity::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSuspiciousActivity::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSuspiciousActivity::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSuspiciousActivity::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgSuspiciousActivity::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSuspiciousActivity.account_id)
  return account_id_;
}
void CMsgSuspiciousActivity::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSuspiciousActivity.account_id)
}

// optional .proto.dota.ESuspiciousActivity activity = 2 [default = k_ESuspiciousActivity_VAC_MultipleInstances];
bool CMsgSuspiciousActivity::has_activity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSuspiciousActivity::set_has_activity() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSuspiciousActivity::clear_has_activity() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSuspiciousActivity::clear_activity() {
  activity_ = 1;
  clear_has_activity();
}
::proto::dota::ESuspiciousActivity CMsgSuspiciousActivity::activity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSuspiciousActivity.activity)
  return static_cast< ::proto::dota::ESuspiciousActivity >(activity_);
}
void CMsgSuspiciousActivity::set_activity(::proto::dota::ESuspiciousActivity value) {
  assert(::proto::dota::ESuspiciousActivity_IsValid(value));
  set_has_activity();
  activity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSuspiciousActivity.activity)
}

// optional sint32 intdata1 = 3;
bool CMsgSuspiciousActivity::has_intdata1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSuspiciousActivity::set_has_intdata1() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSuspiciousActivity::clear_has_intdata1() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSuspiciousActivity::clear_intdata1() {
  intdata1_ = 0;
  clear_has_intdata1();
}
::google::protobuf::int32 CMsgSuspiciousActivity::intdata1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSuspiciousActivity.intdata1)
  return intdata1_;
}
void CMsgSuspiciousActivity::set_intdata1(::google::protobuf::int32 value) {
  set_has_intdata1();
  intdata1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSuspiciousActivity.intdata1)
}

// optional sint32 intdata2 = 4;
bool CMsgSuspiciousActivity::has_intdata2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSuspiciousActivity::set_has_intdata2() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSuspiciousActivity::clear_has_intdata2() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSuspiciousActivity::clear_intdata2() {
  intdata2_ = 0;
  clear_has_intdata2();
}
::google::protobuf::int32 CMsgSuspiciousActivity::intdata2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSuspiciousActivity.intdata2)
  return intdata2_;
}
void CMsgSuspiciousActivity::set_intdata2(::google::protobuf::int32 value) {
  set_has_intdata2();
  intdata2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSuspiciousActivity.intdata2)
}

// optional uint32 time = 5;
bool CMsgSuspiciousActivity::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSuspiciousActivity::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSuspiciousActivity::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSuspiciousActivity::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 CMsgSuspiciousActivity::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSuspiciousActivity.time)
  return time_;
}
void CMsgSuspiciousActivity::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSuspiciousActivity.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCRequestStatus)
}
CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus(const CMsgServerToGCRequestStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCRequestStatus)
}

void CMsgServerToGCRequestStatus::SharedCtor() {
  _cached_size_ = 0;
}

CMsgServerToGCRequestStatus::~CMsgServerToGCRequestStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCRequestStatus)
  SharedDtor();
}

void CMsgServerToGCRequestStatus::SharedDtor() {
}

void CMsgServerToGCRequestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCRequestStatus::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCRequestStatus& CMsgServerToGCRequestStatus::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCRequestStatus* CMsgServerToGCRequestStatus::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCRequestStatus* n = new CMsgServerToGCRequestStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCRequestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCRequestStatus)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCRequestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCRequestStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCRequestStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCRequestStatus)
  return false;
#undef DO_
}

void CMsgServerToGCRequestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCRequestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCRequestStatus)
}

::google::protobuf::uint8* CMsgServerToGCRequestStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCRequestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCRequestStatus)
  return target;
}

size_t CMsgServerToGCRequestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCRequestStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCRequestStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCRequestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCRequestStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCRequestStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCRequestStatus)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestStatus::MergeFrom(const CMsgServerToGCRequestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCRequestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgServerToGCRequestStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCRequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestStatus::CopyFrom(const CMsgServerToGCRequestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCRequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestStatus::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestStatus::Swap(CMsgServerToGCRequestStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCRequestStatus::InternalSwap(CMsgServerToGCRequestStatus* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCRequestStatus::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCRequestStatus

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCRequestStatus_Response::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCRequestStatus_Response)
}
CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response(const CMsgServerToGCRequestStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCRequestStatus_Response)
}

void CMsgServerToGCRequestStatus_Response::SharedCtor() {
  _cached_size_ = 0;
  response_ = 0u;
}

CMsgServerToGCRequestStatus_Response::~CMsgServerToGCRequestStatus_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCRequestStatus_Response)
  SharedDtor();
}

void CMsgServerToGCRequestStatus_Response::SharedDtor() {
}

void CMsgServerToGCRequestStatus_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCRequestStatus_Response::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCRequestStatus_Response& CMsgServerToGCRequestStatus_Response::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCRequestStatus_Response* CMsgServerToGCRequestStatus_Response::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCRequestStatus_Response* n = new CMsgServerToGCRequestStatus_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCRequestStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  response_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCRequestStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCRequestStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCRequestStatus_Response)
  return false;
#undef DO_
}

void CMsgServerToGCRequestStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCRequestStatus_Response)
}

::google::protobuf::uint8* CMsgServerToGCRequestStatus_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCRequestStatus_Response)
  return target;
}

size_t CMsgServerToGCRequestStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 response = 1;
  if (has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCRequestStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestStatus_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCRequestStatus_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCRequestStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCRequestStatus_Response)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestStatus_Response::MergeFrom(const CMsgServerToGCRequestStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    set_response(from.response());
  }
}

void CMsgServerToGCRequestStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestStatus_Response::CopyFrom(const CMsgServerToGCRequestStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCRequestStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestStatus_Response::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestStatus_Response::Swap(CMsgServerToGCRequestStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCRequestStatus_Response::InternalSwap(CMsgServerToGCRequestStatus_Response* other) {
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCRequestStatus_Response::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCRequestStatus_Response

// optional uint32 response = 1;
bool CMsgServerToGCRequestStatus_Response::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCRequestStatus_Response::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCRequestStatus_Response::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCRequestStatus_Response::clear_response() {
  response_ = 0u;
  clear_has_response();
}
::google::protobuf::uint32 CMsgServerToGCRequestStatus_Response::response() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCRequestStatus_Response.response)
  return response_;
}
void CMsgServerToGCRequestStatus_Response::set_response(::google::protobuf::uint32 value) {
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCRequestStatus_Response.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutAssassinMiniGameInfo::kWinningPlayersFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kLosingPlayersFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kArcanaOwnersFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kAssassinWonFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kTargetHeroIdFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kContractCompletedFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kContractCompleteTimeFieldNumber;
const int CMsgSignOutAssassinMiniGameInfo::kPaIsRadiantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutAssassinMiniGameInfo)
}
CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo(const CMsgSignOutAssassinMiniGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      winning_players_(from.winning_players_),
      losing_players_(from.losing_players_),
      arcana_owners_(from.arcana_owners_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_hero_id_, &from.target_hero_id_,
    reinterpret_cast<char*>(&contract_complete_time_) -
    reinterpret_cast<char*>(&target_hero_id_) + sizeof(contract_complete_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutAssassinMiniGameInfo)
}

void CMsgSignOutAssassinMiniGameInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_hero_id_, 0, reinterpret_cast<char*>(&contract_complete_time_) -
    reinterpret_cast<char*>(&target_hero_id_) + sizeof(contract_complete_time_));
}

CMsgSignOutAssassinMiniGameInfo::~CMsgSignOutAssassinMiniGameInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  SharedDtor();
}

void CMsgSignOutAssassinMiniGameInfo::SharedDtor() {
}

void CMsgSignOutAssassinMiniGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutAssassinMiniGameInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutAssassinMiniGameInfo& CMsgSignOutAssassinMiniGameInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutAssassinMiniGameInfo* CMsgSignOutAssassinMiniGameInfo::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutAssassinMiniGameInfo* n = new CMsgSignOutAssassinMiniGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutAssassinMiniGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  winning_players_.Clear();
  losing_players_.Clear();
  arcana_owners_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&target_hero_id_, 0, reinterpret_cast<char*>(&contract_complete_time_) -
      reinterpret_cast<char*>(&target_hero_id_) + sizeof(contract_complete_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutAssassinMiniGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 winning_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_winning_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_winning_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 losing_players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_losing_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_losing_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 arcana_owners = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_arcana_owners())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_arcana_owners())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool assassin_won = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_assassin_won();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assassin_won_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_hero_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_target_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool contract_completed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_contract_completed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contract_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float contract_complete_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_contract_complete_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contract_complete_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pa_is_radiant = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_pa_is_radiant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pa_is_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  return false;
#undef DO_
}

void CMsgSignOutAssassinMiniGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 winning_players = 1;
  for (int i = 0, n = this->winning_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->winning_players(i), output);
  }

  // repeated fixed64 losing_players = 2;
  for (int i = 0, n = this->losing_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->losing_players(i), output);
  }

  // repeated fixed64 arcana_owners = 3;
  for (int i = 0, n = this->arcana_owners_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->arcana_owners(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool assassin_won = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->assassin_won(), output);
  }

  // optional uint32 target_hero_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_hero_id(), output);
  }

  // optional bool contract_completed = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->contract_completed(), output);
  }

  // optional float contract_complete_time = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->contract_complete_time(), output);
  }

  // optional bool pa_is_radiant = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->pa_is_radiant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutAssassinMiniGameInfo)
}

::google::protobuf::uint8* CMsgSignOutAssassinMiniGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 winning_players = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->winning_players_, target);

  // repeated fixed64 losing_players = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->losing_players_, target);

  // repeated fixed64 arcana_owners = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->arcana_owners_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool assassin_won = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->assassin_won(), target);
  }

  // optional uint32 target_hero_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_hero_id(), target);
  }

  // optional bool contract_completed = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->contract_completed(), target);
  }

  // optional float contract_complete_time = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->contract_complete_time(), target);
  }

  // optional bool pa_is_radiant = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->pa_is_radiant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  return target;
}

size_t CMsgSignOutAssassinMiniGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 winning_players = 1;
  {
    unsigned int count = this->winning_players_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->winning_players_size());
    total_size += data_size;
  }

  // repeated fixed64 losing_players = 2;
  {
    unsigned int count = this->losing_players_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->losing_players_size());
    total_size += data_size;
  }

  // repeated fixed64 arcana_owners = 3;
  {
    unsigned int count = this->arcana_owners_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->arcana_owners_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 target_hero_id = 5;
    if (has_target_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_hero_id());
    }

    // optional bool assassin_won = 4;
    if (has_assassin_won()) {
      total_size += 1 + 1;
    }

    // optional bool contract_completed = 6;
    if (has_contract_completed()) {
      total_size += 1 + 1;
    }

    // optional bool pa_is_radiant = 8;
    if (has_pa_is_radiant()) {
      total_size += 1 + 1;
    }

    // optional float contract_complete_time = 7;
    if (has_contract_complete_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutAssassinMiniGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutAssassinMiniGameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutAssassinMiniGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutAssassinMiniGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutAssassinMiniGameInfo)
    MergeFrom(*source);
  }
}

void CMsgSignOutAssassinMiniGameInfo::MergeFrom(const CMsgSignOutAssassinMiniGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winning_players_.MergeFrom(from.winning_players_);
  losing_players_.MergeFrom(from.losing_players_);
  arcana_owners_.MergeFrom(from.arcana_owners_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      target_hero_id_ = from.target_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      assassin_won_ = from.assassin_won_;
    }
    if (cached_has_bits & 0x00000004u) {
      contract_completed_ = from.contract_completed_;
    }
    if (cached_has_bits & 0x00000008u) {
      pa_is_radiant_ = from.pa_is_radiant_;
    }
    if (cached_has_bits & 0x00000010u) {
      contract_complete_time_ = from.contract_complete_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutAssassinMiniGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutAssassinMiniGameInfo::CopyFrom(const CMsgSignOutAssassinMiniGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutAssassinMiniGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutAssassinMiniGameInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutAssassinMiniGameInfo::Swap(CMsgSignOutAssassinMiniGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutAssassinMiniGameInfo::InternalSwap(CMsgSignOutAssassinMiniGameInfo* other) {
  winning_players_.InternalSwap(&other->winning_players_);
  losing_players_.InternalSwap(&other->losing_players_);
  arcana_owners_.InternalSwap(&other->arcana_owners_);
  std::swap(target_hero_id_, other->target_hero_id_);
  std::swap(assassin_won_, other->assassin_won_);
  std::swap(contract_completed_, other->contract_completed_);
  std::swap(pa_is_radiant_, other->pa_is_radiant_);
  std::swap(contract_complete_time_, other->contract_complete_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutAssassinMiniGameInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutAssassinMiniGameInfo

// repeated fixed64 winning_players = 1;
int CMsgSignOutAssassinMiniGameInfo::winning_players_size() const {
  return winning_players_.size();
}
void CMsgSignOutAssassinMiniGameInfo::clear_winning_players() {
  winning_players_.Clear();
}
::google::protobuf::uint64 CMsgSignOutAssassinMiniGameInfo::winning_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutAssassinMiniGameInfo.winning_players)
  return winning_players_.Get(index);
}
void CMsgSignOutAssassinMiniGameInfo::set_winning_players(int index, ::google::protobuf::uint64 value) {
  winning_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutAssassinMiniGameInfo.winning_players)
}
void CMsgSignOutAssassinMiniGameInfo::add_winning_players(::google::protobuf::uint64 value) {
  winning_players_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutAssassinMiniGameInfo.winning_players)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgSignOutAssassinMiniGameInfo::winning_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutAssassinMiniGameInfo.winning_players)
  return winning_players_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgSignOutAssassinMiniGameInfo::mutable_winning_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutAssassinMiniGameInfo.winning_players)
  return &winning_players_;
}

// repeated fixed64 losing_players = 2;
int CMsgSignOutAssassinMiniGameInfo::losing_players_size() const {
  return losing_players_.size();
}
void CMsgSignOutAssassinMiniGameInfo::clear_losing_players() {
  losing_players_.Clear();
}
::google::protobuf::uint64 CMsgSignOutAssassinMiniGameInfo::losing_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutAssassinMiniGameInfo.losing_players)
  return losing_players_.Get(index);
}
void CMsgSignOutAssassinMiniGameInfo::set_losing_players(int index, ::google::protobuf::uint64 value) {
  losing_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutAssassinMiniGameInfo.losing_players)
}
void CMsgSignOutAssassinMiniGameInfo::add_losing_players(::google::protobuf::uint64 value) {
  losing_players_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutAssassinMiniGameInfo.losing_players)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgSignOutAssassinMiniGameInfo::losing_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutAssassinMiniGameInfo.losing_players)
  return losing_players_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgSignOutAssassinMiniGameInfo::mutable_losing_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutAssassinMiniGameInfo.losing_players)
  return &losing_players_;
}

// repeated fixed64 arcana_owners = 3;
int CMsgSignOutAssassinMiniGameInfo::arcana_owners_size() const {
  return arcana_owners_.size();
}
void CMsgSignOutAssassinMiniGameInfo::clear_arcana_owners() {
  arcana_owners_.Clear();
}
::google::protobuf::uint64 CMsgSignOutAssassinMiniGameInfo::arcana_owners(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutAssassinMiniGameInfo.arcana_owners)
  return arcana_owners_.Get(index);
}
void CMsgSignOutAssassinMiniGameInfo::set_arcana_owners(int index, ::google::protobuf::uint64 value) {
  arcana_owners_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutAssassinMiniGameInfo.arcana_owners)
}
void CMsgSignOutAssassinMiniGameInfo::add_arcana_owners(::google::protobuf::uint64 value) {
  arcana_owners_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutAssassinMiniGameInfo.arcana_owners)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgSignOutAssassinMiniGameInfo::arcana_owners() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutAssassinMiniGameInfo.arcana_owners)
  return arcana_owners_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgSignOutAssassinMiniGameInfo::mutable_arcana_owners() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutAssassinMiniGameInfo.arcana_owners)
  return &arcana_owners_;
}

// optional bool assassin_won = 4;
bool CMsgSignOutAssassinMiniGameInfo::has_assassin_won() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutAssassinMiniGameInfo::set_has_assassin_won() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_has_assassin_won() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_assassin_won() {
  assassin_won_ = false;
  clear_has_assassin_won();
}
bool CMsgSignOutAssassinMiniGameInfo::assassin_won() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutAssassinMiniGameInfo.assassin_won)
  return assassin_won_;
}
void CMsgSignOutAssassinMiniGameInfo::set_assassin_won(bool value) {
  set_has_assassin_won();
  assassin_won_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutAssassinMiniGameInfo.assassin_won)
}

// optional uint32 target_hero_id = 5;
bool CMsgSignOutAssassinMiniGameInfo::has_target_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutAssassinMiniGameInfo::set_has_target_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_has_target_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_target_hero_id() {
  target_hero_id_ = 0u;
  clear_has_target_hero_id();
}
::google::protobuf::uint32 CMsgSignOutAssassinMiniGameInfo::target_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutAssassinMiniGameInfo.target_hero_id)
  return target_hero_id_;
}
void CMsgSignOutAssassinMiniGameInfo::set_target_hero_id(::google::protobuf::uint32 value) {
  set_has_target_hero_id();
  target_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutAssassinMiniGameInfo.target_hero_id)
}

// optional bool contract_completed = 6;
bool CMsgSignOutAssassinMiniGameInfo::has_contract_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSignOutAssassinMiniGameInfo::set_has_contract_completed() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_has_contract_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_contract_completed() {
  contract_completed_ = false;
  clear_has_contract_completed();
}
bool CMsgSignOutAssassinMiniGameInfo::contract_completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutAssassinMiniGameInfo.contract_completed)
  return contract_completed_;
}
void CMsgSignOutAssassinMiniGameInfo::set_contract_completed(bool value) {
  set_has_contract_completed();
  contract_completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutAssassinMiniGameInfo.contract_completed)
}

// optional float contract_complete_time = 7;
bool CMsgSignOutAssassinMiniGameInfo::has_contract_complete_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSignOutAssassinMiniGameInfo::set_has_contract_complete_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_has_contract_complete_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_contract_complete_time() {
  contract_complete_time_ = 0;
  clear_has_contract_complete_time();
}
float CMsgSignOutAssassinMiniGameInfo::contract_complete_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutAssassinMiniGameInfo.contract_complete_time)
  return contract_complete_time_;
}
void CMsgSignOutAssassinMiniGameInfo::set_contract_complete_time(float value) {
  set_has_contract_complete_time();
  contract_complete_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutAssassinMiniGameInfo.contract_complete_time)
}

// optional bool pa_is_radiant = 8;
bool CMsgSignOutAssassinMiniGameInfo::has_pa_is_radiant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSignOutAssassinMiniGameInfo::set_has_pa_is_radiant() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_has_pa_is_radiant() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSignOutAssassinMiniGameInfo::clear_pa_is_radiant() {
  pa_is_radiant_ = false;
  clear_has_pa_is_radiant();
}
bool CMsgSignOutAssassinMiniGameInfo::pa_is_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutAssassinMiniGameInfo.pa_is_radiant)
  return pa_is_radiant_;
}
void CMsgSignOutAssassinMiniGameInfo::set_pa_is_radiant(bool value) {
  set_has_pa_is_radiant();
  pa_is_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutAssassinMiniGameInfo.pa_is_radiant)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCGetIngameEventData::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCGetIngameEventData::CMsgServerToGCGetIngameEventData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCGetIngameEventData)
}
CMsgServerToGCGetIngameEventData::CMsgServerToGCGetIngameEventData(const CMsgServerToGCGetIngameEventData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCGetIngameEventData)
}

void CMsgServerToGCGetIngameEventData::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0;
}

CMsgServerToGCGetIngameEventData::~CMsgServerToGCGetIngameEventData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCGetIngameEventData)
  SharedDtor();
}

void CMsgServerToGCGetIngameEventData::SharedDtor() {
}

void CMsgServerToGCGetIngameEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCGetIngameEventData::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCGetIngameEventData& CMsgServerToGCGetIngameEventData::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCGetIngameEventData* CMsgServerToGCGetIngameEventData::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCGetIngameEventData* n = new CMsgServerToGCGetIngameEventData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCGetIngameEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCGetIngameEventData)
  event_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCGetIngameEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCGetIngameEventData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EEvent_IsValid(value)) {
            set_event(static_cast< ::proto::dota::EEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCGetIngameEventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCGetIngameEventData)
  return false;
#undef DO_
}

void CMsgServerToGCGetIngameEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCGetIngameEventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCGetIngameEventData)
}

::google::protobuf::uint8* CMsgServerToGCGetIngameEventData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCGetIngameEventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCGetIngameEventData)
  return target;
}

size_t CMsgServerToGCGetIngameEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCGetIngameEventData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
  if (has_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCGetIngameEventData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCGetIngameEventData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCGetIngameEventData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCGetIngameEventData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCGetIngameEventData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCGetIngameEventData)
    MergeFrom(*source);
  }
}

void CMsgServerToGCGetIngameEventData::MergeFrom(const CMsgServerToGCGetIngameEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCGetIngameEventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event()) {
    set_event(from.event());
  }
}

void CMsgServerToGCGetIngameEventData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCGetIngameEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCGetIngameEventData::CopyFrom(const CMsgServerToGCGetIngameEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCGetIngameEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetIngameEventData::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetIngameEventData::Swap(CMsgServerToGCGetIngameEventData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCGetIngameEventData::InternalSwap(CMsgServerToGCGetIngameEventData* other) {
  std::swap(event_, other->event_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCGetIngameEventData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCGetIngameEventData

// optional .proto.dota.EEvent event = 1 [default = EVENT_ID_NONE];
bool CMsgServerToGCGetIngameEventData::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCGetIngameEventData::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCGetIngameEventData::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCGetIngameEventData::clear_event() {
  event_ = 0;
  clear_has_event();
}
::proto::dota::EEvent CMsgServerToGCGetIngameEventData::event() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCGetIngameEventData.event)
  return static_cast< ::proto::dota::EEvent >(event_);
}
void CMsgServerToGCGetIngameEventData::set_event(::proto::dota::EEvent value) {
  assert(::proto::dota::EEvent_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCGetIngameEventData.event)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerIngameEventDataOraclePA::kTargetHeroIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerIngameEventDataOraclePA::CMsgGCToServerIngameEventDataOraclePA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
}
CMsgGCToServerIngameEventDataOraclePA::CMsgGCToServerIngameEventDataOraclePA(const CMsgGCToServerIngameEventDataOraclePA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      target_hero_ids_(from.target_hero_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
}

void CMsgGCToServerIngameEventDataOraclePA::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCToServerIngameEventDataOraclePA::~CMsgGCToServerIngameEventDataOraclePA() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  SharedDtor();
}

void CMsgGCToServerIngameEventDataOraclePA::SharedDtor() {
}

void CMsgGCToServerIngameEventDataOraclePA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerIngameEventDataOraclePA::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToServerIngameEventDataOraclePA& CMsgGCToServerIngameEventDataOraclePA::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToServerIngameEventDataOraclePA* CMsgGCToServerIngameEventDataOraclePA::New(::google::protobuf::Arena* arena) const {
  CMsgGCToServerIngameEventDataOraclePA* n = new CMsgGCToServerIngameEventDataOraclePA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToServerIngameEventDataOraclePA::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  target_hero_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToServerIngameEventDataOraclePA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 target_hero_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_target_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_target_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  return false;
#undef DO_
}

void CMsgGCToServerIngameEventDataOraclePA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 target_hero_ids = 1;
  for (int i = 0, n = this->target_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->target_hero_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
}

::google::protobuf::uint8* CMsgGCToServerIngameEventDataOraclePA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 target_hero_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->target_hero_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  return target;
}

size_t CMsgGCToServerIngameEventDataOraclePA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 target_hero_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->target_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->target_hero_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerIngameEventDataOraclePA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerIngameEventDataOraclePA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToServerIngameEventDataOraclePA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
    MergeFrom(*source);
  }
}

void CMsgGCToServerIngameEventDataOraclePA::MergeFrom(const CMsgGCToServerIngameEventDataOraclePA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_hero_ids_.MergeFrom(from.target_hero_ids_);
}

void CMsgGCToServerIngameEventDataOraclePA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerIngameEventDataOraclePA::CopyFrom(const CMsgGCToServerIngameEventDataOraclePA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerIngameEventDataOraclePA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerIngameEventDataOraclePA::IsInitialized() const {
  return true;
}

void CMsgGCToServerIngameEventDataOraclePA::Swap(CMsgGCToServerIngameEventDataOraclePA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerIngameEventDataOraclePA::InternalSwap(CMsgGCToServerIngameEventDataOraclePA* other) {
  target_hero_ids_.InternalSwap(&other->target_hero_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToServerIngameEventDataOraclePA::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToServerIngameEventDataOraclePA

// repeated uint32 target_hero_ids = 1;
int CMsgGCToServerIngameEventDataOraclePA::target_hero_ids_size() const {
  return target_hero_ids_.size();
}
void CMsgGCToServerIngameEventDataOraclePA::clear_target_hero_ids() {
  target_hero_ids_.Clear();
}
::google::protobuf::uint32 CMsgGCToServerIngameEventDataOraclePA::target_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerIngameEventDataOraclePA.target_hero_ids)
  return target_hero_ids_.Get(index);
}
void CMsgGCToServerIngameEventDataOraclePA::set_target_hero_ids(int index, ::google::protobuf::uint32 value) {
  target_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerIngameEventDataOraclePA.target_hero_ids)
}
void CMsgGCToServerIngameEventDataOraclePA::add_target_hero_ids(::google::protobuf::uint32 value) {
  target_hero_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToServerIngameEventDataOraclePA.target_hero_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCToServerIngameEventDataOraclePA::target_hero_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToServerIngameEventDataOraclePA.target_hero_ids)
  return target_hero_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCToServerIngameEventDataOraclePA::mutable_target_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToServerIngameEventDataOraclePA.target_hero_ids)
  return &target_hero_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCKillSummaries_KillSummary::kKillerHeroIdFieldNumber;
const int CMsgServerToGCKillSummaries_KillSummary::kVictimHeroIdFieldNumber;
const int CMsgServerToGCKillSummaries_KillSummary::kKillCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
}
CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary(const CMsgServerToGCKillSummaries_KillSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&killer_hero_id_, &from.killer_hero_id_,
    reinterpret_cast<char*>(&kill_count_) -
    reinterpret_cast<char*>(&killer_hero_id_) + sizeof(kill_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
}

void CMsgServerToGCKillSummaries_KillSummary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&killer_hero_id_, 0, reinterpret_cast<char*>(&kill_count_) -
    reinterpret_cast<char*>(&killer_hero_id_) + sizeof(kill_count_));
}

CMsgServerToGCKillSummaries_KillSummary::~CMsgServerToGCKillSummaries_KillSummary() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  SharedDtor();
}

void CMsgServerToGCKillSummaries_KillSummary::SharedDtor() {
}

void CMsgServerToGCKillSummaries_KillSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCKillSummaries_KillSummary::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCKillSummaries_KillSummary& CMsgServerToGCKillSummaries_KillSummary::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCKillSummaries_KillSummary* CMsgServerToGCKillSummaries_KillSummary::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCKillSummaries_KillSummary* n = new CMsgServerToGCKillSummaries_KillSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCKillSummaries_KillSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&killer_hero_id_, 0, reinterpret_cast<char*>(&kill_count_) -
      reinterpret_cast<char*>(&killer_hero_id_) + sizeof(kill_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCKillSummaries_KillSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killer_hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_killer_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 victim_hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_victim_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kill_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_kill_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  return false;
#undef DO_
}

void CMsgServerToGCKillSummaries_KillSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killer_hero_id(), output);
  }

  // optional uint32 victim_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->victim_hero_id(), output);
  }

  // optional uint32 kill_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kill_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
}

::google::protobuf::uint8* CMsgServerToGCKillSummaries_KillSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killer_hero_id(), target);
  }

  // optional uint32 victim_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->victim_hero_id(), target);
  }

  // optional uint32 kill_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kill_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  return target;
}

size_t CMsgServerToGCKillSummaries_KillSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 killer_hero_id = 1;
    if (has_killer_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_hero_id());
    }

    // optional uint32 victim_hero_id = 2;
    if (has_victim_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_hero_id());
    }

    // optional uint32 kill_count = 3;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCKillSummaries_KillSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCKillSummaries_KillSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCKillSummaries_KillSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
    MergeFrom(*source);
  }
}

void CMsgServerToGCKillSummaries_KillSummary::MergeFrom(const CMsgServerToGCKillSummaries_KillSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      killer_hero_id_ = from.killer_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      victim_hero_id_ = from.victim_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      kill_count_ = from.kill_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCKillSummaries_KillSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCKillSummaries_KillSummary::CopyFrom(const CMsgServerToGCKillSummaries_KillSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCKillSummaries.KillSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries_KillSummary::IsInitialized() const {
  return true;
}

void CMsgServerToGCKillSummaries_KillSummary::Swap(CMsgServerToGCKillSummaries_KillSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCKillSummaries_KillSummary::InternalSwap(CMsgServerToGCKillSummaries_KillSummary* other) {
  std::swap(killer_hero_id_, other->killer_hero_id_);
  std::swap(victim_hero_id_, other->victim_hero_id_);
  std::swap(kill_count_, other->kill_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCKillSummaries_KillSummary::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCKillSummaries_KillSummary

// optional uint32 killer_hero_id = 1;
bool CMsgServerToGCKillSummaries_KillSummary::has_killer_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCKillSummaries_KillSummary::set_has_killer_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCKillSummaries_KillSummary::clear_has_killer_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCKillSummaries_KillSummary::clear_killer_hero_id() {
  killer_hero_id_ = 0u;
  clear_has_killer_hero_id();
}
::google::protobuf::uint32 CMsgServerToGCKillSummaries_KillSummary::killer_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCKillSummaries.KillSummary.killer_hero_id)
  return killer_hero_id_;
}
void CMsgServerToGCKillSummaries_KillSummary::set_killer_hero_id(::google::protobuf::uint32 value) {
  set_has_killer_hero_id();
  killer_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCKillSummaries.KillSummary.killer_hero_id)
}

// optional uint32 victim_hero_id = 2;
bool CMsgServerToGCKillSummaries_KillSummary::has_victim_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCKillSummaries_KillSummary::set_has_victim_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCKillSummaries_KillSummary::clear_has_victim_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCKillSummaries_KillSummary::clear_victim_hero_id() {
  victim_hero_id_ = 0u;
  clear_has_victim_hero_id();
}
::google::protobuf::uint32 CMsgServerToGCKillSummaries_KillSummary::victim_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCKillSummaries.KillSummary.victim_hero_id)
  return victim_hero_id_;
}
void CMsgServerToGCKillSummaries_KillSummary::set_victim_hero_id(::google::protobuf::uint32 value) {
  set_has_victim_hero_id();
  victim_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCKillSummaries.KillSummary.victim_hero_id)
}

// optional uint32 kill_count = 3;
bool CMsgServerToGCKillSummaries_KillSummary::has_kill_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCKillSummaries_KillSummary::set_has_kill_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCKillSummaries_KillSummary::clear_has_kill_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCKillSummaries_KillSummary::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
::google::protobuf::uint32 CMsgServerToGCKillSummaries_KillSummary::kill_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCKillSummaries.KillSummary.kill_count)
  return kill_count_;
}
void CMsgServerToGCKillSummaries_KillSummary::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCKillSummaries.KillSummary.kill_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCKillSummaries::kIngameeventIdFieldNumber;
const int CMsgServerToGCKillSummaries::kSummariesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCKillSummaries)
}
CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries(const CMsgServerToGCKillSummaries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      summaries_(from.summaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ingameevent_id_ = from.ingameevent_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCKillSummaries)
}

void CMsgServerToGCKillSummaries::SharedCtor() {
  _cached_size_ = 0;
  ingameevent_id_ = 0u;
}

CMsgServerToGCKillSummaries::~CMsgServerToGCKillSummaries() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCKillSummaries)
  SharedDtor();
}

void CMsgServerToGCKillSummaries::SharedDtor() {
}

void CMsgServerToGCKillSummaries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCKillSummaries::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCKillSummaries& CMsgServerToGCKillSummaries::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCKillSummaries* CMsgServerToGCKillSummaries::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCKillSummaries* n = new CMsgServerToGCKillSummaries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCKillSummaries::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCKillSummaries)
  summaries_.Clear();
  ingameevent_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCKillSummaries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCKillSummaries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ingameevent_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ingameevent_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingameevent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_summaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCKillSummaries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCKillSummaries)
  return false;
#undef DO_
}

void CMsgServerToGCKillSummaries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCKillSummaries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ingameevent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ingameevent_id(), output);
  }

  // repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  for (unsigned int i = 0, n = this->summaries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->summaries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCKillSummaries)
}

::google::protobuf::uint8* CMsgServerToGCKillSummaries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCKillSummaries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ingameevent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ingameevent_id(), target);
  }

  // repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  for (unsigned int i = 0, n = this->summaries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->summaries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCKillSummaries)
  return target;
}

size_t CMsgServerToGCKillSummaries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCKillSummaries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  {
    unsigned int count = this->summaries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summaries(i));
    }
  }

  // optional uint32 ingameevent_id = 1;
  if (has_ingameevent_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ingameevent_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCKillSummaries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCKillSummaries)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCKillSummaries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCKillSummaries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCKillSummaries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCKillSummaries)
    MergeFrom(*source);
  }
}

void CMsgServerToGCKillSummaries::MergeFrom(const CMsgServerToGCKillSummaries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCKillSummaries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  summaries_.MergeFrom(from.summaries_);
  if (from.has_ingameevent_id()) {
    set_ingameevent_id(from.ingameevent_id());
  }
}

void CMsgServerToGCKillSummaries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCKillSummaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCKillSummaries::CopyFrom(const CMsgServerToGCKillSummaries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCKillSummaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries::IsInitialized() const {
  return true;
}

void CMsgServerToGCKillSummaries::Swap(CMsgServerToGCKillSummaries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCKillSummaries::InternalSwap(CMsgServerToGCKillSummaries* other) {
  summaries_.InternalSwap(&other->summaries_);
  std::swap(ingameevent_id_, other->ingameevent_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCKillSummaries::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCKillSummaries

// optional uint32 ingameevent_id = 1;
bool CMsgServerToGCKillSummaries::has_ingameevent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCKillSummaries::set_has_ingameevent_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCKillSummaries::clear_has_ingameevent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCKillSummaries::clear_ingameevent_id() {
  ingameevent_id_ = 0u;
  clear_has_ingameevent_id();
}
::google::protobuf::uint32 CMsgServerToGCKillSummaries::ingameevent_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCKillSummaries.ingameevent_id)
  return ingameevent_id_;
}
void CMsgServerToGCKillSummaries::set_ingameevent_id(::google::protobuf::uint32 value) {
  set_has_ingameevent_id();
  ingameevent_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCKillSummaries.ingameevent_id)
}

// repeated .proto.dota.CMsgServerToGCKillSummaries.KillSummary summaries = 2;
int CMsgServerToGCKillSummaries::summaries_size() const {
  return summaries_.size();
}
void CMsgServerToGCKillSummaries::clear_summaries() {
  summaries_.Clear();
}
const ::proto::dota::CMsgServerToGCKillSummaries_KillSummary& CMsgServerToGCKillSummaries::summaries(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCKillSummaries.summaries)
  return summaries_.Get(index);
}
::proto::dota::CMsgServerToGCKillSummaries_KillSummary* CMsgServerToGCKillSummaries::mutable_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCKillSummaries.summaries)
  return summaries_.Mutable(index);
}
::proto::dota::CMsgServerToGCKillSummaries_KillSummary* CMsgServerToGCKillSummaries::add_summaries() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCKillSummaries.summaries)
  return summaries_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCKillSummaries_KillSummary >*
CMsgServerToGCKillSummaries::mutable_summaries() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCKillSummaries.summaries)
  return &summaries_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCKillSummaries_KillSummary >&
CMsgServerToGCKillSummaries::summaries() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCKillSummaries.summaries)
  return summaries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerPredictionResult_Prediction::kItemDefFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kNumCorrectFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kNumFailsFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kResultFieldNumber;
const int CMsgGCToServerPredictionResult_Prediction::kGrantedItemDefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerPredictionResult.Prediction)
}
CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction(const CMsgGCToServerPredictionResult_Prediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      granted_item_defs_(from.granted_item_defs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&item_def_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerPredictionResult.Prediction)
}

void CMsgGCToServerPredictionResult_Prediction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_def_, 0, reinterpret_cast<char*>(&num_fails_) -
    reinterpret_cast<char*>(&item_def_) + sizeof(num_fails_));
  result_ = 1;
}

CMsgGCToServerPredictionResult_Prediction::~CMsgGCToServerPredictionResult_Prediction() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  SharedDtor();
}

void CMsgGCToServerPredictionResult_Prediction::SharedDtor() {
}

void CMsgGCToServerPredictionResult_Prediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPredictionResult_Prediction::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToServerPredictionResult_Prediction& CMsgGCToServerPredictionResult_Prediction::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToServerPredictionResult_Prediction* CMsgGCToServerPredictionResult_Prediction::New(::google::protobuf::Arena* arena) const {
  CMsgGCToServerPredictionResult_Prediction* n = new CMsgGCToServerPredictionResult_Prediction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToServerPredictionResult_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  granted_item_defs_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&item_def_, 0, reinterpret_cast<char*>(&num_fails_) -
      reinterpret_cast<char*>(&item_def_) + sizeof(num_fails_));
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToServerPredictionResult_Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_def();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_correct = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_correct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_fails = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_fails();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 granted_item_defs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_granted_item_defs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_granted_item_defs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  return false;
#undef DO_
}

void CMsgGCToServerPredictionResult_Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_correct(), output);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_fails(), output);
  }

  // optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0, n = this->granted_item_defs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->granted_item_defs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerPredictionResult.Prediction)
}

::google::protobuf::uint8* CMsgGCToServerPredictionResult_Prediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_correct(), target);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_fails(), target);
  }

  // optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // repeated uint32 granted_item_defs = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->granted_item_defs_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  return target;
}

size_t CMsgGCToServerPredictionResult_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 granted_item_defs = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->granted_item_defs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->granted_item_defs_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 item_def = 1;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 num_correct = 2;
    if (has_num_correct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_correct());
    }

    // optional uint32 num_fails = 3;
    if (has_num_fails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fails());
    }

    // optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPredictionResult_Prediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPredictionResult_Prediction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToServerPredictionResult_Prediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerPredictionResult.Prediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerPredictionResult.Prediction)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPredictionResult_Prediction::MergeFrom(const CMsgGCToServerPredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  granted_item_defs_.MergeFrom(from.granted_item_defs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_correct_ = from.num_correct_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_fails_ = from.num_fails_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPredictionResult_Prediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPredictionResult_Prediction::CopyFrom(const CMsgGCToServerPredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerPredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult_Prediction::IsInitialized() const {
  return true;
}

void CMsgGCToServerPredictionResult_Prediction::Swap(CMsgGCToServerPredictionResult_Prediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerPredictionResult_Prediction::InternalSwap(CMsgGCToServerPredictionResult_Prediction* other) {
  granted_item_defs_.InternalSwap(&other->granted_item_defs_);
  std::swap(item_def_, other->item_def_);
  std::swap(num_correct_, other->num_correct_);
  std::swap(num_fails_, other->num_fails_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToServerPredictionResult_Prediction::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToServerPredictionResult_Prediction

// optional uint32 item_def = 1;
bool CMsgGCToServerPredictionResult_Prediction::has_item_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToServerPredictionResult_Prediction::set_has_item_def() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToServerPredictionResult_Prediction::clear_has_item_def() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToServerPredictionResult_Prediction::clear_item_def() {
  item_def_ = 0u;
  clear_has_item_def();
}
::google::protobuf::uint32 CMsgGCToServerPredictionResult_Prediction::item_def() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPredictionResult.Prediction.item_def)
  return item_def_;
}
void CMsgGCToServerPredictionResult_Prediction::set_item_def(::google::protobuf::uint32 value) {
  set_has_item_def();
  item_def_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPredictionResult.Prediction.item_def)
}

// optional uint32 num_correct = 2;
bool CMsgGCToServerPredictionResult_Prediction::has_num_correct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToServerPredictionResult_Prediction::set_has_num_correct() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToServerPredictionResult_Prediction::clear_has_num_correct() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToServerPredictionResult_Prediction::clear_num_correct() {
  num_correct_ = 0u;
  clear_has_num_correct();
}
::google::protobuf::uint32 CMsgGCToServerPredictionResult_Prediction::num_correct() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPredictionResult.Prediction.num_correct)
  return num_correct_;
}
void CMsgGCToServerPredictionResult_Prediction::set_num_correct(::google::protobuf::uint32 value) {
  set_has_num_correct();
  num_correct_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPredictionResult.Prediction.num_correct)
}

// optional uint32 num_fails = 3;
bool CMsgGCToServerPredictionResult_Prediction::has_num_fails() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToServerPredictionResult_Prediction::set_has_num_fails() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToServerPredictionResult_Prediction::clear_has_num_fails() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToServerPredictionResult_Prediction::clear_num_fails() {
  num_fails_ = 0u;
  clear_has_num_fails();
}
::google::protobuf::uint32 CMsgGCToServerPredictionResult_Prediction::num_fails() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPredictionResult.Prediction.num_fails)
  return num_fails_;
}
void CMsgGCToServerPredictionResult_Prediction::set_num_fails(::google::protobuf::uint32 value) {
  set_has_num_fails();
  num_fails_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPredictionResult.Prediction.num_fails)
}

// optional .proto.dota.CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
bool CMsgGCToServerPredictionResult_Prediction::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCToServerPredictionResult_Prediction::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCToServerPredictionResult_Prediction::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCToServerPredictionResult_Prediction::clear_result() {
  result_ = 1;
  clear_has_result();
}
::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPredictionResult.Prediction.result)
  return static_cast< ::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult >(result_);
}
void CMsgGCToServerPredictionResult_Prediction::set_result(::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult value) {
  assert(::proto::dota::CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPredictionResult.Prediction.result)
}

// repeated uint32 granted_item_defs = 6;
int CMsgGCToServerPredictionResult_Prediction::granted_item_defs_size() const {
  return granted_item_defs_.size();
}
void CMsgGCToServerPredictionResult_Prediction::clear_granted_item_defs() {
  granted_item_defs_.Clear();
}
::google::protobuf::uint32 CMsgGCToServerPredictionResult_Prediction::granted_item_defs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
  return granted_item_defs_.Get(index);
}
void CMsgGCToServerPredictionResult_Prediction::set_granted_item_defs(int index, ::google::protobuf::uint32 value) {
  granted_item_defs_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
}
void CMsgGCToServerPredictionResult_Prediction::add_granted_item_defs(::google::protobuf::uint32 value) {
  granted_item_defs_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCToServerPredictionResult_Prediction::granted_item_defs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
  return granted_item_defs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCToServerPredictionResult_Prediction::mutable_granted_item_defs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
  return &granted_item_defs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerPredictionResult::kAccountIdFieldNumber;
const int CMsgGCToServerPredictionResult::kMatchIdFieldNumber;
const int CMsgGCToServerPredictionResult::kCorrectFieldNumber;
const int CMsgGCToServerPredictionResult::kPredictionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerPredictionResult)
}
CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult(const CMsgGCToServerPredictionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(correct_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerPredictionResult)
}

void CMsgGCToServerPredictionResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(correct_));
}

CMsgGCToServerPredictionResult::~CMsgGCToServerPredictionResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerPredictionResult)
  SharedDtor();
}

void CMsgGCToServerPredictionResult::SharedDtor() {
}

void CMsgGCToServerPredictionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPredictionResult::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToServerPredictionResult& CMsgGCToServerPredictionResult::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToServerPredictionResult* CMsgGCToServerPredictionResult::New(::google::protobuf::Arena* arena) const {
  CMsgGCToServerPredictionResult* n = new CMsgGCToServerPredictionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToServerPredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerPredictionResult)
  predictions_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&correct_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(correct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToServerPredictionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerPredictionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool correct = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_correct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerPredictionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerPredictionResult)
  return false;
#undef DO_
}

void CMsgGCToServerPredictionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerPredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->correct(), output);
  }

  // repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
  for (unsigned int i = 0, n = this->predictions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->predictions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerPredictionResult)
}

::google::protobuf::uint8* CMsgGCToServerPredictionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerPredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->correct(), target);
  }

  // repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
  for (unsigned int i = 0, n = this->predictions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->predictions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerPredictionResult)
  return target;
}

size_t CMsgGCToServerPredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerPredictionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
  {
    unsigned int count = this->predictions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predictions(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool correct = 3;
    if (has_correct()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPredictionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerPredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerPredictionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToServerPredictionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerPredictionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerPredictionResult)
    MergeFrom(*source);
  }
}

void CMsgGCToServerPredictionResult::MergeFrom(const CMsgGCToServerPredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerPredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      correct_ = from.correct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerPredictionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerPredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPredictionResult::CopyFrom(const CMsgGCToServerPredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerPredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult::IsInitialized() const {
  return true;
}

void CMsgGCToServerPredictionResult::Swap(CMsgGCToServerPredictionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerPredictionResult::InternalSwap(CMsgGCToServerPredictionResult* other) {
  predictions_.InternalSwap(&other->predictions_);
  std::swap(match_id_, other->match_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(correct_, other->correct_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToServerPredictionResult::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToServerPredictionResult

// optional uint32 account_id = 1;
bool CMsgGCToServerPredictionResult::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToServerPredictionResult::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToServerPredictionResult::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToServerPredictionResult::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgGCToServerPredictionResult::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPredictionResult.account_id)
  return account_id_;
}
void CMsgGCToServerPredictionResult::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPredictionResult.account_id)
}

// optional uint64 match_id = 2;
bool CMsgGCToServerPredictionResult::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToServerPredictionResult::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToServerPredictionResult::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToServerPredictionResult::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgGCToServerPredictionResult::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPredictionResult.match_id)
  return match_id_;
}
void CMsgGCToServerPredictionResult::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPredictionResult.match_id)
}

// optional bool correct = 3;
bool CMsgGCToServerPredictionResult::has_correct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToServerPredictionResult::set_has_correct() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToServerPredictionResult::clear_has_correct() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToServerPredictionResult::clear_correct() {
  correct_ = false;
  clear_has_correct();
}
bool CMsgGCToServerPredictionResult::correct() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPredictionResult.correct)
  return correct_;
}
void CMsgGCToServerPredictionResult::set_correct(bool value) {
  set_has_correct();
  correct_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerPredictionResult.correct)
}

// repeated .proto.dota.CMsgGCToServerPredictionResult.Prediction predictions = 4;
int CMsgGCToServerPredictionResult::predictions_size() const {
  return predictions_.size();
}
void CMsgGCToServerPredictionResult::clear_predictions() {
  predictions_.Clear();
}
const ::proto::dota::CMsgGCToServerPredictionResult_Prediction& CMsgGCToServerPredictionResult::predictions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerPredictionResult.predictions)
  return predictions_.Get(index);
}
::proto::dota::CMsgGCToServerPredictionResult_Prediction* CMsgGCToServerPredictionResult::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToServerPredictionResult.predictions)
  return predictions_.Mutable(index);
}
::proto::dota::CMsgGCToServerPredictionResult_Prediction* CMsgGCToServerPredictionResult::add_predictions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToServerPredictionResult.predictions)
  return predictions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToServerPredictionResult_Prediction >*
CMsgGCToServerPredictionResult::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToServerPredictionResult.predictions)
  return &predictions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToServerPredictionResult_Prediction >&
CMsgGCToServerPredictionResult::predictions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToServerPredictionResult.predictions)
  return predictions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCLockCharmTrading::kAccountIdFieldNumber;
const int CMsgServerToGCLockCharmTrading::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCLockCharmTrading)
}
CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading(const CMsgServerToGCLockCharmTrading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCLockCharmTrading)
}

void CMsgServerToGCLockCharmTrading::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_id_, 0, reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(account_id_));
}

CMsgServerToGCLockCharmTrading::~CMsgServerToGCLockCharmTrading() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCLockCharmTrading)
  SharedDtor();
}

void CMsgServerToGCLockCharmTrading::SharedDtor() {
}

void CMsgServerToGCLockCharmTrading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCLockCharmTrading::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCLockCharmTrading& CMsgServerToGCLockCharmTrading::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCLockCharmTrading* CMsgServerToGCLockCharmTrading::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCLockCharmTrading* n = new CMsgServerToGCLockCharmTrading;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCLockCharmTrading::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCLockCharmTrading)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_id_, 0, reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&item_id_) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCLockCharmTrading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCLockCharmTrading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCLockCharmTrading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCLockCharmTrading)
  return false;
#undef DO_
}

void CMsgServerToGCLockCharmTrading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCLockCharmTrading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCLockCharmTrading)
}

::google::protobuf::uint8* CMsgServerToGCLockCharmTrading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCLockCharmTrading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCLockCharmTrading)
  return target;
}

size_t CMsgServerToGCLockCharmTrading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCLockCharmTrading)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCLockCharmTrading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCLockCharmTrading)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCLockCharmTrading* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCLockCharmTrading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCLockCharmTrading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCLockCharmTrading)
    MergeFrom(*source);
  }
}

void CMsgServerToGCLockCharmTrading::MergeFrom(const CMsgServerToGCLockCharmTrading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCLockCharmTrading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCLockCharmTrading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCLockCharmTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCLockCharmTrading::CopyFrom(const CMsgServerToGCLockCharmTrading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCLockCharmTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCLockCharmTrading::IsInitialized() const {
  return true;
}

void CMsgServerToGCLockCharmTrading::Swap(CMsgServerToGCLockCharmTrading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCLockCharmTrading::InternalSwap(CMsgServerToGCLockCharmTrading* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCLockCharmTrading::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCLockCharmTrading

// optional uint32 account_id = 1;
bool CMsgServerToGCLockCharmTrading::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCLockCharmTrading::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCLockCharmTrading::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCLockCharmTrading::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgServerToGCLockCharmTrading::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCLockCharmTrading.account_id)
  return account_id_;
}
void CMsgServerToGCLockCharmTrading::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCLockCharmTrading.account_id)
}

// optional uint64 item_id = 2;
bool CMsgServerToGCLockCharmTrading::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCLockCharmTrading::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCLockCharmTrading::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCLockCharmTrading::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CMsgServerToGCLockCharmTrading::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCLockCharmTrading.item_id)
  return item_id_;
}
void CMsgServerToGCLockCharmTrading::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCLockCharmTrading.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kEventIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kSequenceIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kProgressFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge_Challenge::kChallengeRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
}
CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge(const CMsgSignOutUpdatePlayerChallenge_Challenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    reinterpret_cast<char*>(&challenge_rank_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(challenge_rank_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&challenge_rank_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(challenge_rank_));
}

CMsgSignOutUpdatePlayerChallenge_Challenge::~CMsgSignOutUpdatePlayerChallenge_Challenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  SharedDtor();
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedDtor() {
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutUpdatePlayerChallenge_Challenge::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutUpdatePlayerChallenge_Challenge& CMsgSignOutUpdatePlayerChallenge_Challenge::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge_Challenge::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutUpdatePlayerChallenge_Challenge* n = new CMsgSignOutUpdatePlayerChallenge_Challenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&event_id_, 0, reinterpret_cast<char*>(&challenge_rank_) -
      reinterpret_cast<char*>(&event_id_) + sizeof(challenge_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutUpdatePlayerChallenge_Challenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_rank = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_challenge_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  return false;
#undef DO_
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->progress(), output);
  }

  // optional uint32 challenge_rank = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->challenge_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
}

::google::protobuf::uint8* CMsgSignOutUpdatePlayerChallenge_Challenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->progress(), target);
  }

  // optional uint32 challenge_rank = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->challenge_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  return target;
}

size_t CMsgSignOutUpdatePlayerChallenge_Challenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

    // optional uint32 progress = 4;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint32 challenge_rank = 5;
    if (has_challenge_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_rank());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutUpdatePlayerChallenge_Challenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutUpdatePlayerChallenge_Challenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
    MergeFrom(*source);
  }
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::MergeFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_rank_ = from.challenge_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge_Challenge::IsInitialized() const {
  return true;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::Swap(CMsgSignOutUpdatePlayerChallenge_Challenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::InternalSwap(CMsgSignOutUpdatePlayerChallenge_Challenge* other) {
  std::swap(event_id_, other->event_id_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(progress_, other->progress_);
  std::swap(challenge_rank_, other->challenge_rank_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutUpdatePlayerChallenge_Challenge::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutUpdatePlayerChallenge_Challenge

// optional uint32 event_id = 1;
bool CMsgSignOutUpdatePlayerChallenge_Challenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgSignOutUpdatePlayerChallenge_Challenge::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge.event_id)
  return event_id_;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge.event_id)
}

// optional uint32 sequence_id = 3;
bool CMsgSignOutUpdatePlayerChallenge_Challenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
::google::protobuf::uint32 CMsgSignOutUpdatePlayerChallenge_Challenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge.sequence_id)
  return sequence_id_;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge.sequence_id)
}

// optional uint32 progress = 4;
bool CMsgSignOutUpdatePlayerChallenge_Challenge::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
::google::protobuf::uint32 CMsgSignOutUpdatePlayerChallenge_Challenge::progress() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge.progress)
  return progress_;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge.progress)
}

// optional uint32 challenge_rank = 5;
bool CMsgSignOutUpdatePlayerChallenge_Challenge::has_challenge_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::set_has_challenge_rank() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_has_challenge_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_challenge_rank() {
  challenge_rank_ = 0u;
  clear_has_challenge_rank();
}
::google::protobuf::uint32 CMsgSignOutUpdatePlayerChallenge_Challenge::challenge_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge.challenge_rank)
  return challenge_rank_;
}
void CMsgSignOutUpdatePlayerChallenge_Challenge::set_challenge_rank(::google::protobuf::uint32 value) {
  set_has_challenge_rank();
  challenge_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge.challenge_rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutUpdatePlayerChallenge::kAccountIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kCompletedFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kRerolledFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kMatchIdFieldNumber;
const int CMsgSignOutUpdatePlayerChallenge::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutUpdatePlayerChallenge)
}
CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge(const CMsgSignOutUpdatePlayerChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      completed_(from.completed_),
      rerolled_(from.rerolled_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutUpdatePlayerChallenge)
}

void CMsgSignOutUpdatePlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(match_id_));
}

CMsgSignOutUpdatePlayerChallenge::~CMsgSignOutUpdatePlayerChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  SharedDtor();
}

void CMsgSignOutUpdatePlayerChallenge::SharedDtor() {
}

void CMsgSignOutUpdatePlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutUpdatePlayerChallenge::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutUpdatePlayerChallenge& CMsgSignOutUpdatePlayerChallenge::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutUpdatePlayerChallenge* CMsgSignOutUpdatePlayerChallenge::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutUpdatePlayerChallenge* n = new CMsgSignOutUpdatePlayerChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutUpdatePlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  completed_.Clear();
  rerolled_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutUpdatePlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rerolled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  return false;
#undef DO_
}

void CMsgSignOutUpdatePlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  for (unsigned int i = 0, n = this->completed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->completed(i), output);
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  for (unsigned int i = 0, n = this->rerolled_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rerolled(i), output);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->match_id(), output);
  }

  // optional uint32 hero_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutUpdatePlayerChallenge)
}

::google::protobuf::uint8* CMsgSignOutUpdatePlayerChallenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  for (unsigned int i = 0, n = this->completed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->completed(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  for (unsigned int i = 0, n = this->rerolled_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->rerolled(i), deterministic, target);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->match_id(), target);
  }

  // optional uint32 hero_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  return target;
}

size_t CMsgSignOutUpdatePlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  {
    unsigned int count = this->completed_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->completed(i));
    }
  }

  // repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  {
    unsigned int count = this->rerolled_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rerolled(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 5;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint64 match_id = 4;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutUpdatePlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutUpdatePlayerChallenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutUpdatePlayerChallenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutUpdatePlayerChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutUpdatePlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgSignOutUpdatePlayerChallenge::MergeFrom(const CMsgSignOutUpdatePlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  completed_.MergeFrom(from.completed_);
  rerolled_.MergeFrom(from.rerolled_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutUpdatePlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutUpdatePlayerChallenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutUpdatePlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgSignOutUpdatePlayerChallenge::Swap(CMsgSignOutUpdatePlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutUpdatePlayerChallenge::InternalSwap(CMsgSignOutUpdatePlayerChallenge* other) {
  completed_.InternalSwap(&other->completed_);
  rerolled_.InternalSwap(&other->rerolled_);
  std::swap(account_id_, other->account_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(match_id_, other->match_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutUpdatePlayerChallenge::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutUpdatePlayerChallenge

// optional uint32 account_id = 1;
bool CMsgSignOutUpdatePlayerChallenge::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutUpdatePlayerChallenge::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutUpdatePlayerChallenge::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutUpdatePlayerChallenge::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgSignOutUpdatePlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutUpdatePlayerChallenge.account_id)
  return account_id_;
}
void CMsgSignOutUpdatePlayerChallenge::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutUpdatePlayerChallenge.account_id)
}

// repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
int CMsgSignOutUpdatePlayerChallenge::completed_size() const {
  return completed_.size();
}
void CMsgSignOutUpdatePlayerChallenge::clear_completed() {
  completed_.Clear();
}
const ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge& CMsgSignOutUpdatePlayerChallenge::completed(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutUpdatePlayerChallenge.completed)
  return completed_.Get(index);
}
::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::mutable_completed(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSignOutUpdatePlayerChallenge.completed)
  return completed_.Mutable(index);
}
::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::add_completed() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutUpdatePlayerChallenge.completed)
  return completed_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge >*
CMsgSignOutUpdatePlayerChallenge::mutable_completed() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutUpdatePlayerChallenge.completed)
  return &completed_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge >&
CMsgSignOutUpdatePlayerChallenge::completed() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutUpdatePlayerChallenge.completed)
  return completed_;
}

// repeated .proto.dota.CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
int CMsgSignOutUpdatePlayerChallenge::rerolled_size() const {
  return rerolled_.size();
}
void CMsgSignOutUpdatePlayerChallenge::clear_rerolled() {
  rerolled_.Clear();
}
const ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge& CMsgSignOutUpdatePlayerChallenge::rerolled(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutUpdatePlayerChallenge.rerolled)
  return rerolled_.Get(index);
}
::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::mutable_rerolled(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSignOutUpdatePlayerChallenge.rerolled)
  return rerolled_.Mutable(index);
}
::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::add_rerolled() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutUpdatePlayerChallenge.rerolled)
  return rerolled_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge >*
CMsgSignOutUpdatePlayerChallenge::mutable_rerolled() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutUpdatePlayerChallenge.rerolled)
  return &rerolled_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutUpdatePlayerChallenge_Challenge >&
CMsgSignOutUpdatePlayerChallenge::rerolled() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutUpdatePlayerChallenge.rerolled)
  return rerolled_;
}

// optional uint64 match_id = 4;
bool CMsgSignOutUpdatePlayerChallenge::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSignOutUpdatePlayerChallenge::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSignOutUpdatePlayerChallenge::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSignOutUpdatePlayerChallenge::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgSignOutUpdatePlayerChallenge::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutUpdatePlayerChallenge.match_id)
  return match_id_;
}
void CMsgSignOutUpdatePlayerChallenge::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutUpdatePlayerChallenge.match_id)
}

// optional uint32 hero_id = 5;
bool CMsgSignOutUpdatePlayerChallenge::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutUpdatePlayerChallenge::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutUpdatePlayerChallenge::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutUpdatePlayerChallenge::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgSignOutUpdatePlayerChallenge::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutUpdatePlayerChallenge.hero_id)
  return hero_id_;
}
void CMsgSignOutUpdatePlayerChallenge::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutUpdatePlayerChallenge.hero_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCRerollPlayerChallenge::kAccountIdFieldNumber;
const int CMsgServerToGCRerollPlayerChallenge::kRerollMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCRerollPlayerChallenge)
}
CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge(const CMsgServerToGCRerollPlayerChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reroll_msg()) {
    reroll_msg_ = new ::proto::dota::CMsgClientToGCRerollPlayerChallenge(*from.reroll_msg_);
  } else {
    reroll_msg_ = NULL;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCRerollPlayerChallenge)
}

void CMsgServerToGCRerollPlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reroll_msg_, 0, reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&reroll_msg_) + sizeof(account_id_));
}

CMsgServerToGCRerollPlayerChallenge::~CMsgServerToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  SharedDtor();
}

void CMsgServerToGCRerollPlayerChallenge::SharedDtor() {
  if (this != internal_default_instance()) {
    delete reroll_msg_;
  }
}

void CMsgServerToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCRerollPlayerChallenge::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCRerollPlayerChallenge& CMsgServerToGCRerollPlayerChallenge::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCRerollPlayerChallenge* CMsgServerToGCRerollPlayerChallenge::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCRerollPlayerChallenge* n = new CMsgServerToGCRerollPlayerChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCRerollPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  if (has_reroll_msg()) {
    GOOGLE_DCHECK(reroll_msg_ != NULL);
    reroll_msg_->::proto::dota::CMsgClientToGCRerollPlayerChallenge::Clear();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCRerollPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reroll_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  return false;
#undef DO_
}

void CMsgServerToGCRerollPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reroll_msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCRerollPlayerChallenge)
}

::google::protobuf::uint8* CMsgServerToGCRerollPlayerChallenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reroll_msg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  return target;
}

size_t CMsgServerToGCRerollPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
    if (has_reroll_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reroll_msg_);
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCRerollPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRerollPlayerChallenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCRerollPlayerChallenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCRerollPlayerChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCRerollPlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRerollPlayerChallenge::MergeFrom(const CMsgServerToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reroll_msg()->::proto::dota::CMsgClientToGCRerollPlayerChallenge::MergeFrom(from.reroll_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCRerollPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRerollPlayerChallenge::CopyFrom(const CMsgServerToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRerollPlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgServerToGCRerollPlayerChallenge::Swap(CMsgServerToGCRerollPlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCRerollPlayerChallenge::InternalSwap(CMsgServerToGCRerollPlayerChallenge* other) {
  std::swap(reroll_msg_, other->reroll_msg_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCRerollPlayerChallenge::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCRerollPlayerChallenge

// optional uint32 account_id = 1;
bool CMsgServerToGCRerollPlayerChallenge::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCRerollPlayerChallenge::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCRerollPlayerChallenge::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCRerollPlayerChallenge::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgServerToGCRerollPlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCRerollPlayerChallenge.account_id)
  return account_id_;
}
void CMsgServerToGCRerollPlayerChallenge::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCRerollPlayerChallenge.account_id)
}

// optional .proto.dota.CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
bool CMsgServerToGCRerollPlayerChallenge::has_reroll_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCRerollPlayerChallenge::set_has_reroll_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCRerollPlayerChallenge::clear_has_reroll_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCRerollPlayerChallenge::clear_reroll_msg() {
  if (reroll_msg_ != NULL) reroll_msg_->::proto::dota::CMsgClientToGCRerollPlayerChallenge::Clear();
  clear_has_reroll_msg();
}
const ::proto::dota::CMsgClientToGCRerollPlayerChallenge& CMsgServerToGCRerollPlayerChallenge::reroll_msg() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCRerollPlayerChallenge.reroll_msg)
  return reroll_msg_ != NULL ? *reroll_msg_
                         : *::proto::dota::CMsgClientToGCRerollPlayerChallenge::internal_default_instance();
}
::proto::dota::CMsgClientToGCRerollPlayerChallenge* CMsgServerToGCRerollPlayerChallenge::mutable_reroll_msg() {
  set_has_reroll_msg();
  if (reroll_msg_ == NULL) {
    reroll_msg_ = new ::proto::dota::CMsgClientToGCRerollPlayerChallenge;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCRerollPlayerChallenge.reroll_msg)
  return reroll_msg_;
}
::proto::dota::CMsgClientToGCRerollPlayerChallenge* CMsgServerToGCRerollPlayerChallenge::release_reroll_msg() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgServerToGCRerollPlayerChallenge.reroll_msg)
  clear_has_reroll_msg();
  ::proto::dota::CMsgClientToGCRerollPlayerChallenge* temp = reroll_msg_;
  reroll_msg_ = NULL;
  return temp;
}
void CMsgServerToGCRerollPlayerChallenge::set_allocated_reroll_msg(::proto::dota::CMsgClientToGCRerollPlayerChallenge* reroll_msg) {
  delete reroll_msg_;
  reroll_msg_ = reroll_msg;
  if (reroll_msg) {
    set_has_reroll_msg();
  } else {
    clear_has_reroll_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgServerToGCRerollPlayerChallenge.reroll_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCHoldEventPoints_HoldRequest::kAccountIdFieldNumber;
const int CMsgServerToGCHoldEventPoints_HoldRequest::kPointsHeldFieldNumber;
const int CMsgServerToGCHoldEventPoints_HoldRequest::kPremiumHeldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCHoldEventPoints_HoldRequest::CMsgServerToGCHoldEventPoints_HoldRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
}
CMsgServerToGCHoldEventPoints_HoldRequest::CMsgServerToGCHoldEventPoints_HoldRequest(const CMsgServerToGCHoldEventPoints_HoldRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&premium_held_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(premium_held_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&premium_held_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(premium_held_));
}

CMsgServerToGCHoldEventPoints_HoldRequest::~CMsgServerToGCHoldEventPoints_HoldRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  SharedDtor();
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SharedDtor() {
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCHoldEventPoints_HoldRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCHoldEventPoints_HoldRequest& CMsgServerToGCHoldEventPoints_HoldRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCHoldEventPoints_HoldRequest* CMsgServerToGCHoldEventPoints_HoldRequest::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCHoldEventPoints_HoldRequest* n = new CMsgServerToGCHoldEventPoints_HoldRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCHoldEventPoints_HoldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&premium_held_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(premium_held_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCHoldEventPoints_HoldRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_held = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_points_held();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_held_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 premium_held = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_premium_held();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_held_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  return false;
#undef DO_
}

void CMsgServerToGCHoldEventPoints_HoldRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 points_held = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points_held(), output);
  }

  // optional uint32 premium_held = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->premium_held(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
}

::google::protobuf::uint8* CMsgServerToGCHoldEventPoints_HoldRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 points_held = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points_held(), target);
  }

  // optional uint32 premium_held = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->premium_held(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  return target;
}

size_t CMsgServerToGCHoldEventPoints_HoldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 points_held = 2;
    if (has_points_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_held());
    }

    // optional uint32 premium_held = 3;
    if (has_premium_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_held());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCHoldEventPoints_HoldRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCHoldEventPoints_HoldRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCHoldEventPoints_HoldRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
    MergeFrom(*source);
  }
}

void CMsgServerToGCHoldEventPoints_HoldRequest::MergeFrom(const CMsgServerToGCHoldEventPoints_HoldRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_held_ = from.points_held_;
    }
    if (cached_has_bits & 0x00000004u) {
      premium_held_ = from.premium_held_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCHoldEventPoints_HoldRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCHoldEventPoints_HoldRequest::CopyFrom(const CMsgServerToGCHoldEventPoints_HoldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCHoldEventPoints_HoldRequest::IsInitialized() const {
  return true;
}

void CMsgServerToGCHoldEventPoints_HoldRequest::Swap(CMsgServerToGCHoldEventPoints_HoldRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCHoldEventPoints_HoldRequest::InternalSwap(CMsgServerToGCHoldEventPoints_HoldRequest* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(points_held_, other->points_held_);
  std::swap(premium_held_, other->premium_held_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCHoldEventPoints_HoldRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCHoldEventPoints_HoldRequest

// optional uint32 account_id = 1;
bool CMsgServerToGCHoldEventPoints_HoldRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgServerToGCHoldEventPoints_HoldRequest::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest.account_id)
  return account_id_;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest.account_id)
}

// optional uint32 points_held = 2;
bool CMsgServerToGCHoldEventPoints_HoldRequest::has_points_held() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::set_has_points_held() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::clear_has_points_held() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::clear_points_held() {
  points_held_ = 0u;
  clear_has_points_held();
}
::google::protobuf::uint32 CMsgServerToGCHoldEventPoints_HoldRequest::points_held() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest.points_held)
  return points_held_;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::set_points_held(::google::protobuf::uint32 value) {
  set_has_points_held();
  points_held_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest.points_held)
}

// optional uint32 premium_held = 3;
bool CMsgServerToGCHoldEventPoints_HoldRequest::has_premium_held() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::set_has_premium_held() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::clear_has_premium_held() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::clear_premium_held() {
  premium_held_ = 0u;
  clear_has_premium_held();
}
::google::protobuf::uint32 CMsgServerToGCHoldEventPoints_HoldRequest::premium_held() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest.premium_held)
  return premium_held_;
}
void CMsgServerToGCHoldEventPoints_HoldRequest::set_premium_held(::google::protobuf::uint32 value) {
  set_has_premium_held();
  premium_held_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest.premium_held)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCHoldEventPoints::kHoldsFieldNumber;
const int CMsgServerToGCHoldEventPoints::kEventIdFieldNumber;
const int CMsgServerToGCHoldEventPoints::kHoldKeyFieldNumber;
const int CMsgServerToGCHoldEventPoints::kHoldUntilFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCHoldEventPoints::CMsgServerToGCHoldEventPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCHoldEventPoints)
}
CMsgServerToGCHoldEventPoints::CMsgServerToGCHoldEventPoints(const CMsgServerToGCHoldEventPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      holds_(from.holds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hold_key_, &from.hold_key_,
    reinterpret_cast<char*>(&hold_until_) -
    reinterpret_cast<char*>(&hold_key_) + sizeof(hold_until_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCHoldEventPoints)
}

void CMsgServerToGCHoldEventPoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hold_key_, 0, reinterpret_cast<char*>(&hold_until_) -
    reinterpret_cast<char*>(&hold_key_) + sizeof(hold_until_));
}

CMsgServerToGCHoldEventPoints::~CMsgServerToGCHoldEventPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCHoldEventPoints)
  SharedDtor();
}

void CMsgServerToGCHoldEventPoints::SharedDtor() {
}

void CMsgServerToGCHoldEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCHoldEventPoints::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCHoldEventPoints& CMsgServerToGCHoldEventPoints::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCHoldEventPoints* CMsgServerToGCHoldEventPoints::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCHoldEventPoints* n = new CMsgServerToGCHoldEventPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCHoldEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCHoldEventPoints)
  holds_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&hold_key_, 0, reinterpret_cast<char*>(&hold_until_) -
      reinterpret_cast<char*>(&hold_key_) + sizeof(hold_until_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCHoldEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCHoldEventPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_holds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hold_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hold_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hold_until = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_hold_until();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCHoldEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCHoldEventPoints)
  return false;
#undef DO_
}

void CMsgServerToGCHoldEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCHoldEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
  for (unsigned int i = 0, n = this->holds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->holds(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint64 hold_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hold_key(), output);
  }

  // optional uint32 hold_until = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hold_until(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCHoldEventPoints)
}

::google::protobuf::uint8* CMsgServerToGCHoldEventPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCHoldEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
  for (unsigned int i = 0, n = this->holds_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->holds(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint64 hold_key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hold_key(), target);
  }

  // optional uint32 hold_until = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hold_until(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCHoldEventPoints)
  return target;
}

size_t CMsgServerToGCHoldEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCHoldEventPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
  {
    unsigned int count = this->holds_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->holds(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 hold_key = 3;
    if (has_hold_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hold_key());
    }

    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 hold_until = 4;
    if (has_hold_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_until());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCHoldEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCHoldEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCHoldEventPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCHoldEventPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCHoldEventPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCHoldEventPoints)
    MergeFrom(*source);
  }
}

void CMsgServerToGCHoldEventPoints::MergeFrom(const CMsgServerToGCHoldEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCHoldEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  holds_.MergeFrom(from.holds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hold_key_ = from.hold_key_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hold_until_ = from.hold_until_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCHoldEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCHoldEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCHoldEventPoints::CopyFrom(const CMsgServerToGCHoldEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCHoldEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCHoldEventPoints::IsInitialized() const {
  return true;
}

void CMsgServerToGCHoldEventPoints::Swap(CMsgServerToGCHoldEventPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCHoldEventPoints::InternalSwap(CMsgServerToGCHoldEventPoints* other) {
  holds_.InternalSwap(&other->holds_);
  std::swap(hold_key_, other->hold_key_);
  std::swap(event_id_, other->event_id_);
  std::swap(hold_until_, other->hold_until_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCHoldEventPoints::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCHoldEventPoints

// repeated .proto.dota.CMsgServerToGCHoldEventPoints.HoldRequest holds = 1;
int CMsgServerToGCHoldEventPoints::holds_size() const {
  return holds_.size();
}
void CMsgServerToGCHoldEventPoints::clear_holds() {
  holds_.Clear();
}
const ::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest& CMsgServerToGCHoldEventPoints::holds(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCHoldEventPoints.holds)
  return holds_.Get(index);
}
::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest* CMsgServerToGCHoldEventPoints::mutable_holds(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCHoldEventPoints.holds)
  return holds_.Mutable(index);
}
::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest* CMsgServerToGCHoldEventPoints::add_holds() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCHoldEventPoints.holds)
  return holds_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest >*
CMsgServerToGCHoldEventPoints::mutable_holds() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCHoldEventPoints.holds)
  return &holds_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCHoldEventPoints_HoldRequest >&
CMsgServerToGCHoldEventPoints::holds() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCHoldEventPoints.holds)
  return holds_;
}

// optional uint32 event_id = 2;
bool CMsgServerToGCHoldEventPoints::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCHoldEventPoints::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCHoldEventPoints::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCHoldEventPoints::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgServerToGCHoldEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCHoldEventPoints.event_id)
  return event_id_;
}
void CMsgServerToGCHoldEventPoints::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCHoldEventPoints.event_id)
}

// optional uint64 hold_key = 3;
bool CMsgServerToGCHoldEventPoints::has_hold_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCHoldEventPoints::set_has_hold_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCHoldEventPoints::clear_has_hold_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCHoldEventPoints::clear_hold_key() {
  hold_key_ = GOOGLE_ULONGLONG(0);
  clear_has_hold_key();
}
::google::protobuf::uint64 CMsgServerToGCHoldEventPoints::hold_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCHoldEventPoints.hold_key)
  return hold_key_;
}
void CMsgServerToGCHoldEventPoints::set_hold_key(::google::protobuf::uint64 value) {
  set_has_hold_key();
  hold_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCHoldEventPoints.hold_key)
}

// optional uint32 hold_until = 4;
bool CMsgServerToGCHoldEventPoints::has_hold_until() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCHoldEventPoints::set_has_hold_until() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCHoldEventPoints::clear_has_hold_until() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCHoldEventPoints::clear_hold_until() {
  hold_until_ = 0u;
  clear_has_hold_until();
}
::google::protobuf::uint32 CMsgServerToGCHoldEventPoints::hold_until() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCHoldEventPoints.hold_until)
  return hold_until_;
}
void CMsgServerToGCHoldEventPoints::set_hold_until(::google::protobuf::uint32 value) {
  set_has_hold_until();
  hold_until_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCHoldEventPoints.hold_until)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutReleaseEventPointHolds::kAccountIdsFieldNumber;
const int CMsgSignOutReleaseEventPointHolds::kEventIdFieldNumber;
const int CMsgSignOutReleaseEventPointHolds::kHoldKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutReleaseEventPointHolds::CMsgSignOutReleaseEventPointHolds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutReleaseEventPointHolds)
}
CMsgSignOutReleaseEventPointHolds::CMsgSignOutReleaseEventPointHolds(const CMsgSignOutReleaseEventPointHolds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hold_key_, &from.hold_key_,
    reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&hold_key_) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutReleaseEventPointHolds)
}

void CMsgSignOutReleaseEventPointHolds::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hold_key_, 0, reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&hold_key_) + sizeof(event_id_));
}

CMsgSignOutReleaseEventPointHolds::~CMsgSignOutReleaseEventPointHolds() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutReleaseEventPointHolds)
  SharedDtor();
}

void CMsgSignOutReleaseEventPointHolds::SharedDtor() {
}

void CMsgSignOutReleaseEventPointHolds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutReleaseEventPointHolds::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutReleaseEventPointHolds& CMsgSignOutReleaseEventPointHolds::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutReleaseEventPointHolds* CMsgSignOutReleaseEventPointHolds::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutReleaseEventPointHolds* n = new CMsgSignOutReleaseEventPointHolds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutReleaseEventPointHolds::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  account_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&hold_key_, 0, reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&hold_key_) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutReleaseEventPointHolds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hold_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hold_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutReleaseEventPointHolds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutReleaseEventPointHolds)
  return false;
#undef DO_
}

void CMsgSignOutReleaseEventPointHolds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint64 hold_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hold_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutReleaseEventPointHolds)
}

::google::protobuf::uint8* CMsgSignOutReleaseEventPointHolds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint64 hold_key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hold_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutReleaseEventPointHolds)
  return target;
}

size_t CMsgSignOutReleaseEventPointHolds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 hold_key = 3;
    if (has_hold_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hold_key());
    }

    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutReleaseEventPointHolds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutReleaseEventPointHolds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutReleaseEventPointHolds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutReleaseEventPointHolds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutReleaseEventPointHolds)
    MergeFrom(*source);
  }
}

void CMsgSignOutReleaseEventPointHolds::MergeFrom(const CMsgSignOutReleaseEventPointHolds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      hold_key_ = from.hold_key_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutReleaseEventPointHolds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutReleaseEventPointHolds::CopyFrom(const CMsgSignOutReleaseEventPointHolds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutReleaseEventPointHolds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutReleaseEventPointHolds::IsInitialized() const {
  return true;
}

void CMsgSignOutReleaseEventPointHolds::Swap(CMsgSignOutReleaseEventPointHolds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutReleaseEventPointHolds::InternalSwap(CMsgSignOutReleaseEventPointHolds* other) {
  account_ids_.InternalSwap(&other->account_ids_);
  std::swap(hold_key_, other->hold_key_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutReleaseEventPointHolds::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutReleaseEventPointHolds

// repeated uint32 account_ids = 1;
int CMsgSignOutReleaseEventPointHolds::account_ids_size() const {
  return account_ids_.size();
}
void CMsgSignOutReleaseEventPointHolds::clear_account_ids() {
  account_ids_.Clear();
}
::google::protobuf::uint32 CMsgSignOutReleaseEventPointHolds::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutReleaseEventPointHolds.account_ids)
  return account_ids_.Get(index);
}
void CMsgSignOutReleaseEventPointHolds::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutReleaseEventPointHolds.account_ids)
}
void CMsgSignOutReleaseEventPointHolds::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutReleaseEventPointHolds.account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSignOutReleaseEventPointHolds::account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutReleaseEventPointHolds.account_ids)
  return account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSignOutReleaseEventPointHolds::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutReleaseEventPointHolds.account_ids)
  return &account_ids_;
}

// optional uint32 event_id = 2;
bool CMsgSignOutReleaseEventPointHolds::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutReleaseEventPointHolds::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutReleaseEventPointHolds::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutReleaseEventPointHolds::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgSignOutReleaseEventPointHolds::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutReleaseEventPointHolds.event_id)
  return event_id_;
}
void CMsgSignOutReleaseEventPointHolds::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutReleaseEventPointHolds.event_id)
}

// optional uint64 hold_key = 3;
bool CMsgSignOutReleaseEventPointHolds::has_hold_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutReleaseEventPointHolds::set_has_hold_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutReleaseEventPointHolds::clear_has_hold_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutReleaseEventPointHolds::clear_hold_key() {
  hold_key_ = GOOGLE_ULONGLONG(0);
  clear_has_hold_key();
}
::google::protobuf::uint64 CMsgSignOutReleaseEventPointHolds::hold_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutReleaseEventPointHolds.hold_key)
  return hold_key_;
}
void CMsgSignOutReleaseEventPointHolds::set_hold_key(::google::protobuf::uint64 value) {
  set_has_hold_key();
  hold_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutReleaseEventPointHolds.hold_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToServerUpdateBroadcastCheers::kTimeStampFieldNumber;
const int CMsgGCToServerUpdateBroadcastCheers::kTeam1CheersFieldNumber;
const int CMsgGCToServerUpdateBroadcastCheers::kTeam2CheersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToServerUpdateBroadcastCheers::CMsgGCToServerUpdateBroadcastCheers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
}
CMsgGCToServerUpdateBroadcastCheers::CMsgGCToServerUpdateBroadcastCheers(const CMsgGCToServerUpdateBroadcastCheers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    reinterpret_cast<char*>(&team_2_cheers_) -
    reinterpret_cast<char*>(&time_stamp_) + sizeof(team_2_cheers_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
}

void CMsgGCToServerUpdateBroadcastCheers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_stamp_, 0, reinterpret_cast<char*>(&team_2_cheers_) -
    reinterpret_cast<char*>(&time_stamp_) + sizeof(team_2_cheers_));
}

CMsgGCToServerUpdateBroadcastCheers::~CMsgGCToServerUpdateBroadcastCheers() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  SharedDtor();
}

void CMsgGCToServerUpdateBroadcastCheers::SharedDtor() {
}

void CMsgGCToServerUpdateBroadcastCheers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerUpdateBroadcastCheers::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToServerUpdateBroadcastCheers& CMsgGCToServerUpdateBroadcastCheers::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToServerUpdateBroadcastCheers* CMsgGCToServerUpdateBroadcastCheers::New(::google::protobuf::Arena* arena) const {
  CMsgGCToServerUpdateBroadcastCheers* n = new CMsgGCToServerUpdateBroadcastCheers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToServerUpdateBroadcastCheers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&time_stamp_, 0, reinterpret_cast<char*>(&team_2_cheers_) -
      reinterpret_cast<char*>(&time_stamp_) + sizeof(team_2_cheers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToServerUpdateBroadcastCheers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_time_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_1_cheers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_1_cheers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_1_cheers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_2_cheers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_team_2_cheers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_2_cheers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  return false;
#undef DO_
}

void CMsgGCToServerUpdateBroadcastCheers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_stamp(), output);
  }

  // optional uint32 team_1_cheers = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_1_cheers(), output);
  }

  // optional uint32 team_2_cheers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_2_cheers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
}

::google::protobuf::uint8* CMsgGCToServerUpdateBroadcastCheers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_stamp(), target);
  }

  // optional uint32 team_1_cheers = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_1_cheers(), target);
  }

  // optional uint32 team_2_cheers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_2_cheers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  return target;
}

size_t CMsgGCToServerUpdateBroadcastCheers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // optional uint32 team_1_cheers = 2;
    if (has_team_1_cheers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_1_cheers());
    }

    // optional uint32 team_2_cheers = 3;
    if (has_team_2_cheers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_2_cheers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerUpdateBroadcastCheers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerUpdateBroadcastCheers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToServerUpdateBroadcastCheers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
    MergeFrom(*source);
  }
}

void CMsgGCToServerUpdateBroadcastCheers::MergeFrom(const CMsgGCToServerUpdateBroadcastCheers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_1_cheers_ = from.team_1_cheers_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_2_cheers_ = from.team_2_cheers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToServerUpdateBroadcastCheers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerUpdateBroadcastCheers::CopyFrom(const CMsgGCToServerUpdateBroadcastCheers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToServerUpdateBroadcastCheers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerUpdateBroadcastCheers::IsInitialized() const {
  return true;
}

void CMsgGCToServerUpdateBroadcastCheers::Swap(CMsgGCToServerUpdateBroadcastCheers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToServerUpdateBroadcastCheers::InternalSwap(CMsgGCToServerUpdateBroadcastCheers* other) {
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(team_1_cheers_, other->team_1_cheers_);
  std::swap(team_2_cheers_, other->team_2_cheers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToServerUpdateBroadcastCheers::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToServerUpdateBroadcastCheers

// optional uint32 time_stamp = 1;
bool CMsgGCToServerUpdateBroadcastCheers::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToServerUpdateBroadcastCheers::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToServerUpdateBroadcastCheers::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToServerUpdateBroadcastCheers::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
::google::protobuf::uint32 CMsgGCToServerUpdateBroadcastCheers::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerUpdateBroadcastCheers.time_stamp)
  return time_stamp_;
}
void CMsgGCToServerUpdateBroadcastCheers::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerUpdateBroadcastCheers.time_stamp)
}

// optional uint32 team_1_cheers = 2;
bool CMsgGCToServerUpdateBroadcastCheers::has_team_1_cheers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToServerUpdateBroadcastCheers::set_has_team_1_cheers() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToServerUpdateBroadcastCheers::clear_has_team_1_cheers() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToServerUpdateBroadcastCheers::clear_team_1_cheers() {
  team_1_cheers_ = 0u;
  clear_has_team_1_cheers();
}
::google::protobuf::uint32 CMsgGCToServerUpdateBroadcastCheers::team_1_cheers() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerUpdateBroadcastCheers.team_1_cheers)
  return team_1_cheers_;
}
void CMsgGCToServerUpdateBroadcastCheers::set_team_1_cheers(::google::protobuf::uint32 value) {
  set_has_team_1_cheers();
  team_1_cheers_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerUpdateBroadcastCheers.team_1_cheers)
}

// optional uint32 team_2_cheers = 3;
bool CMsgGCToServerUpdateBroadcastCheers::has_team_2_cheers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToServerUpdateBroadcastCheers::set_has_team_2_cheers() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToServerUpdateBroadcastCheers::clear_has_team_2_cheers() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToServerUpdateBroadcastCheers::clear_team_2_cheers() {
  team_2_cheers_ = 0u;
  clear_has_team_2_cheers();
}
::google::protobuf::uint32 CMsgGCToServerUpdateBroadcastCheers::team_2_cheers() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToServerUpdateBroadcastCheers.team_2_cheers)
  return team_2_cheers_;
}
void CMsgGCToServerUpdateBroadcastCheers::set_team_2_cheers(::google::protobuf::uint32 value) {
  set_has_team_2_cheers();
  team_2_cheers_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToServerUpdateBroadcastCheers.team_2_cheers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutWagerStats_Player::kAccountIdFieldNumber;
const int CMsgSignOutWagerStats_Player::kWinningsFieldNumber;
const int CMsgSignOutWagerStats_Player::kMaxWagerFieldNumber;
const int CMsgSignOutWagerStats_Player::kWagerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutWagerStats_Player::CMsgSignOutWagerStats_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutWagerStats.Player)
}
CMsgSignOutWagerStats_Player::CMsgSignOutWagerStats_Player(const CMsgSignOutWagerStats_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&wager_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(wager_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutWagerStats.Player)
}

void CMsgSignOutWagerStats_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&wager_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(wager_));
}

CMsgSignOutWagerStats_Player::~CMsgSignOutWagerStats_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutWagerStats.Player)
  SharedDtor();
}

void CMsgSignOutWagerStats_Player::SharedDtor() {
}

void CMsgSignOutWagerStats_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutWagerStats_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutWagerStats_Player& CMsgSignOutWagerStats_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutWagerStats_Player* CMsgSignOutWagerStats_Player::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutWagerStats_Player* n = new CMsgSignOutWagerStats_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutWagerStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutWagerStats.Player)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&wager_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(wager_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutWagerStats_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutWagerStats.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winnings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_winnings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_wager = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max_wager();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wager = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_wager();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutWagerStats.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutWagerStats.Player)
  return false;
#undef DO_
}

void CMsgSignOutWagerStats_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutWagerStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winnings(), output);
  }

  // optional uint32 max_wager = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_wager(), output);
  }

  // optional uint32 wager = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wager(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutWagerStats.Player)
}

::google::protobuf::uint8* CMsgSignOutWagerStats_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutWagerStats.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winnings(), target);
  }

  // optional uint32 max_wager = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_wager(), target);
  }

  // optional uint32 wager = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wager(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutWagerStats.Player)
  return target;
}

size_t CMsgSignOutWagerStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutWagerStats.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 winnings = 2;
    if (has_winnings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnings());
    }

    // optional uint32 max_wager = 3;
    if (has_max_wager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_wager());
    }

    // optional uint32 wager = 4;
    if (has_wager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutWagerStats_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutWagerStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutWagerStats_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutWagerStats_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutWagerStats.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutWagerStats.Player)
    MergeFrom(*source);
  }
}

void CMsgSignOutWagerStats_Player::MergeFrom(const CMsgSignOutWagerStats_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutWagerStats.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      winnings_ = from.winnings_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_wager_ = from.max_wager_;
    }
    if (cached_has_bits & 0x00000008u) {
      wager_ = from.wager_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutWagerStats_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutWagerStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutWagerStats_Player::CopyFrom(const CMsgSignOutWagerStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutWagerStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutWagerStats_Player::IsInitialized() const {
  return true;
}

void CMsgSignOutWagerStats_Player::Swap(CMsgSignOutWagerStats_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutWagerStats_Player::InternalSwap(CMsgSignOutWagerStats_Player* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(winnings_, other->winnings_);
  std::swap(max_wager_, other->max_wager_);
  std::swap(wager_, other->wager_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutWagerStats_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutWagerStats_Player

// optional uint32 account_id = 1;
bool CMsgSignOutWagerStats_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutWagerStats_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutWagerStats_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutWagerStats_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgSignOutWagerStats_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutWagerStats.Player.account_id)
  return account_id_;
}
void CMsgSignOutWagerStats_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutWagerStats.Player.account_id)
}

// optional uint32 winnings = 2;
bool CMsgSignOutWagerStats_Player::has_winnings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutWagerStats_Player::set_has_winnings() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutWagerStats_Player::clear_has_winnings() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutWagerStats_Player::clear_winnings() {
  winnings_ = 0u;
  clear_has_winnings();
}
::google::protobuf::uint32 CMsgSignOutWagerStats_Player::winnings() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutWagerStats.Player.winnings)
  return winnings_;
}
void CMsgSignOutWagerStats_Player::set_winnings(::google::protobuf::uint32 value) {
  set_has_winnings();
  winnings_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutWagerStats.Player.winnings)
}

// optional uint32 max_wager = 3;
bool CMsgSignOutWagerStats_Player::has_max_wager() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSignOutWagerStats_Player::set_has_max_wager() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSignOutWagerStats_Player::clear_has_max_wager() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSignOutWagerStats_Player::clear_max_wager() {
  max_wager_ = 0u;
  clear_has_max_wager();
}
::google::protobuf::uint32 CMsgSignOutWagerStats_Player::max_wager() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutWagerStats.Player.max_wager)
  return max_wager_;
}
void CMsgSignOutWagerStats_Player::set_max_wager(::google::protobuf::uint32 value) {
  set_has_max_wager();
  max_wager_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutWagerStats.Player.max_wager)
}

// optional uint32 wager = 4;
bool CMsgSignOutWagerStats_Player::has_wager() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSignOutWagerStats_Player::set_has_wager() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSignOutWagerStats_Player::clear_has_wager() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSignOutWagerStats_Player::clear_wager() {
  wager_ = 0u;
  clear_has_wager();
}
::google::protobuf::uint32 CMsgSignOutWagerStats_Player::wager() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutWagerStats.Player.wager)
  return wager_;
}
void CMsgSignOutWagerStats_Player::set_wager(::google::protobuf::uint32 value) {
  set_has_wager();
  wager_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutWagerStats.Player.wager)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutWagerStats::kPlayersFieldNumber;
const int CMsgSignOutWagerStats::kEventIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutWagerStats::CMsgSignOutWagerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutWagerStats)
}
CMsgSignOutWagerStats::CMsgSignOutWagerStats(const CMsgSignOutWagerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutWagerStats)
}

void CMsgSignOutWagerStats::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
}

CMsgSignOutWagerStats::~CMsgSignOutWagerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutWagerStats)
  SharedDtor();
}

void CMsgSignOutWagerStats::SharedDtor() {
}

void CMsgSignOutWagerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutWagerStats::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutWagerStats& CMsgSignOutWagerStats::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutWagerStats* CMsgSignOutWagerStats::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutWagerStats* n = new CMsgSignOutWagerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutWagerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutWagerStats)
  players_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutWagerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutWagerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutWagerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutWagerStats)
  return false;
#undef DO_
}

void CMsgSignOutWagerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutWagerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutWagerStats)
}

::google::protobuf::uint8* CMsgSignOutWagerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutWagerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutWagerStats)
  return target;
}

size_t CMsgSignOutWagerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutWagerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // optional uint32 event_id = 2;
  if (has_event_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutWagerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutWagerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutWagerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutWagerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutWagerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutWagerStats)
    MergeFrom(*source);
  }
}

void CMsgSignOutWagerStats::MergeFrom(const CMsgSignOutWagerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutWagerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgSignOutWagerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutWagerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutWagerStats::CopyFrom(const CMsgSignOutWagerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutWagerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutWagerStats::IsInitialized() const {
  return true;
}

void CMsgSignOutWagerStats::Swap(CMsgSignOutWagerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutWagerStats::InternalSwap(CMsgSignOutWagerStats* other) {
  players_.InternalSwap(&other->players_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutWagerStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutWagerStats

// repeated .proto.dota.CMsgSignOutWagerStats.Player players = 1;
int CMsgSignOutWagerStats::players_size() const {
  return players_.size();
}
void CMsgSignOutWagerStats::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgSignOutWagerStats_Player& CMsgSignOutWagerStats::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutWagerStats.players)
  return players_.Get(index);
}
::proto::dota::CMsgSignOutWagerStats_Player* CMsgSignOutWagerStats::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSignOutWagerStats.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgSignOutWagerStats_Player* CMsgSignOutWagerStats::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutWagerStats.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutWagerStats_Player >*
CMsgSignOutWagerStats::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutWagerStats.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutWagerStats_Player >&
CMsgSignOutWagerStats::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutWagerStats.players)
  return players_;
}

// optional uint32 event_id = 2;
bool CMsgSignOutWagerStats::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutWagerStats::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutWagerStats::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutWagerStats::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgSignOutWagerStats::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutWagerStats.event_id)
  return event_id_;
}
void CMsgSignOutWagerStats::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutWagerStats.event_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpendWager_Player::kAccountIdFieldNumber;
const int CMsgSpendWager_Player::kWagerFieldNumber;
const int CMsgSpendWager_Player::kWagerTokenItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpendWager_Player::CMsgSpendWager_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpendWager.Player)
}
CMsgSpendWager_Player::CMsgSpendWager_Player(const CMsgSpendWager_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&wager_token_item_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(wager_token_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpendWager.Player)
}

void CMsgSpendWager_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&wager_token_item_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(wager_token_item_id_));
}

CMsgSpendWager_Player::~CMsgSpendWager_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpendWager.Player)
  SharedDtor();
}

void CMsgSpendWager_Player::SharedDtor() {
}

void CMsgSpendWager_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpendWager_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSpendWager_Player& CMsgSpendWager_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSpendWager_Player* CMsgSpendWager_Player::New(::google::protobuf::Arena* arena) const {
  CMsgSpendWager_Player* n = new CMsgSpendWager_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSpendWager_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpendWager.Player)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&wager_token_item_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(wager_token_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSpendWager_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpendWager.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wager = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_wager();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 wager_token_item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_wager_token_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wager_token_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpendWager.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpendWager.Player)
  return false;
#undef DO_
}

void CMsgSpendWager_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpendWager.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 wager = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wager(), output);
  }

  // optional uint64 wager_token_item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->wager_token_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpendWager.Player)
}

::google::protobuf::uint8* CMsgSpendWager_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpendWager.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 wager = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wager(), target);
  }

  // optional uint64 wager_token_item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->wager_token_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpendWager.Player)
  return target;
}

size_t CMsgSpendWager_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpendWager.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 wager = 2;
    if (has_wager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager());
    }

    // optional uint64 wager_token_item_id = 3;
    if (has_wager_token_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wager_token_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpendWager_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpendWager.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpendWager_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSpendWager_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpendWager.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpendWager.Player)
    MergeFrom(*source);
  }
}

void CMsgSpendWager_Player::MergeFrom(const CMsgSpendWager_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpendWager.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      wager_ = from.wager_;
    }
    if (cached_has_bits & 0x00000004u) {
      wager_token_item_id_ = from.wager_token_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpendWager_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpendWager.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpendWager_Player::CopyFrom(const CMsgSpendWager_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpendWager.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpendWager_Player::IsInitialized() const {
  return true;
}

void CMsgSpendWager_Player::Swap(CMsgSpendWager_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpendWager_Player::InternalSwap(CMsgSpendWager_Player* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(wager_, other->wager_);
  std::swap(wager_token_item_id_, other->wager_token_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSpendWager_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSpendWager_Player

// optional uint32 account_id = 1;
bool CMsgSpendWager_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSpendWager_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSpendWager_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSpendWager_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgSpendWager_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpendWager.Player.account_id)
  return account_id_;
}
void CMsgSpendWager_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpendWager.Player.account_id)
}

// optional uint32 wager = 2;
bool CMsgSpendWager_Player::has_wager() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSpendWager_Player::set_has_wager() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSpendWager_Player::clear_has_wager() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSpendWager_Player::clear_wager() {
  wager_ = 0u;
  clear_has_wager();
}
::google::protobuf::uint32 CMsgSpendWager_Player::wager() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpendWager.Player.wager)
  return wager_;
}
void CMsgSpendWager_Player::set_wager(::google::protobuf::uint32 value) {
  set_has_wager();
  wager_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpendWager.Player.wager)
}

// optional uint64 wager_token_item_id = 3;
bool CMsgSpendWager_Player::has_wager_token_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSpendWager_Player::set_has_wager_token_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSpendWager_Player::clear_has_wager_token_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSpendWager_Player::clear_wager_token_item_id() {
  wager_token_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_wager_token_item_id();
}
::google::protobuf::uint64 CMsgSpendWager_Player::wager_token_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpendWager.Player.wager_token_item_id)
  return wager_token_item_id_;
}
void CMsgSpendWager_Player::set_wager_token_item_id(::google::protobuf::uint64 value) {
  set_has_wager_token_item_id();
  wager_token_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpendWager.Player.wager_token_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpendWager::kPlayersFieldNumber;
const int CMsgSpendWager::kEventIdFieldNumber;
const int CMsgSpendWager::kTimestampFieldNumber;
const int CMsgSpendWager::kMatchIdFieldNumber;
const int CMsgSpendWager::kServerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpendWager::CMsgSpendWager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpendWager)
}
CMsgSpendWager::CMsgSpendWager(const CMsgSpendWager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    reinterpret_cast<char*>(&server_steam_id_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(server_steam_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpendWager)
}

void CMsgSpendWager::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&server_steam_id_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(server_steam_id_));
}

CMsgSpendWager::~CMsgSpendWager() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpendWager)
  SharedDtor();
}

void CMsgSpendWager::SharedDtor() {
}

void CMsgSpendWager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpendWager::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSpendWager& CMsgSpendWager::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSpendWager* CMsgSpendWager::New(::google::protobuf::Arena* arena) const {
  CMsgSpendWager* n = new CMsgSpendWager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSpendWager::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpendWager)
  players_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&event_id_, 0, reinterpret_cast<char*>(&server_steam_id_) -
      reinterpret_cast<char*>(&event_id_) + sizeof(server_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSpendWager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpendWager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSpendWager.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpendWager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpendWager)
  return false;
#undef DO_
}

void CMsgSpendWager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpendWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpendWager.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->match_id(), output);
  }

  // optional uint64 server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->server_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpendWager)
}

::google::protobuf::uint8* CMsgSpendWager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpendWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpendWager.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->match_id(), target);
  }

  // optional uint64 server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->server_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpendWager)
  return target;
}

size_t CMsgSpendWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpendWager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSpendWager.Player players = 1;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint64 match_id = 4;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint64 server_steam_id = 5;
    if (has_server_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_steam_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpendWager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpendWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpendWager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSpendWager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpendWager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpendWager)
    MergeFrom(*source);
  }
}

void CMsgSpendWager::MergeFrom(const CMsgSpendWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpendWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_steam_id_ = from.server_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpendWager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpendWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpendWager::CopyFrom(const CMsgSpendWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpendWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpendWager::IsInitialized() const {
  return true;
}

void CMsgSpendWager::Swap(CMsgSpendWager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpendWager::InternalSwap(CMsgSpendWager* other) {
  players_.InternalSwap(&other->players_);
  std::swap(event_id_, other->event_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(match_id_, other->match_id_);
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSpendWager::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSpendWager

// repeated .proto.dota.CMsgSpendWager.Player players = 1;
int CMsgSpendWager::players_size() const {
  return players_.size();
}
void CMsgSpendWager::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgSpendWager_Player& CMsgSpendWager::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpendWager.players)
  return players_.Get(index);
}
::proto::dota::CMsgSpendWager_Player* CMsgSpendWager::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSpendWager.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgSpendWager_Player* CMsgSpendWager::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSpendWager.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSpendWager_Player >*
CMsgSpendWager::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSpendWager.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSpendWager_Player >&
CMsgSpendWager::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSpendWager.players)
  return players_;
}

// optional uint32 event_id = 2;
bool CMsgSpendWager::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSpendWager::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSpendWager::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSpendWager::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgSpendWager::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpendWager.event_id)
  return event_id_;
}
void CMsgSpendWager::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpendWager.event_id)
}

// optional uint32 timestamp = 3;
bool CMsgSpendWager::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSpendWager::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSpendWager::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSpendWager::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgSpendWager::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpendWager.timestamp)
  return timestamp_;
}
void CMsgSpendWager::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpendWager.timestamp)
}

// optional uint64 match_id = 4;
bool CMsgSpendWager::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSpendWager::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSpendWager::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSpendWager::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgSpendWager::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpendWager.match_id)
  return match_id_;
}
void CMsgSpendWager::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpendWager.match_id)
}

// optional uint64 server_steam_id = 5;
bool CMsgSpendWager::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSpendWager::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSpendWager::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSpendWager::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
::google::protobuf::uint64 CMsgSpendWager::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpendWager.server_steam_id)
  return server_steam_id_;
}
void CMsgSpendWager::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpendWager.server_steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutXPCoins_Player::kAccountIdFieldNumber;
const int CMsgSignOutXPCoins_Player::kXpGainedFieldNumber;
const int CMsgSignOutXPCoins_Player::kCoinsSpentFieldNumber;
const int CMsgSignOutXPCoins_Player::kWagerTokenItemIdFieldNumber;
const int CMsgSignOutXPCoins_Player::kRankWagerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutXPCoins.Player)
}
CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player(const CMsgSignOutXPCoins_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&rank_wager_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(rank_wager_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutXPCoins.Player)
}

void CMsgSignOutXPCoins_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&rank_wager_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(rank_wager_));
}

CMsgSignOutXPCoins_Player::~CMsgSignOutXPCoins_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutXPCoins.Player)
  SharedDtor();
}

void CMsgSignOutXPCoins_Player::SharedDtor() {
}

void CMsgSignOutXPCoins_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutXPCoins_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutXPCoins_Player& CMsgSignOutXPCoins_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutXPCoins_Player* CMsgSignOutXPCoins_Player::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutXPCoins_Player* n = new CMsgSignOutXPCoins_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutXPCoins_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutXPCoins.Player)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&rank_wager_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(rank_wager_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutXPCoins_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutXPCoins.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_gained = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_xp_gained();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_gained_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 coins_spent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_coins_spent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coins_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 wager_token_item_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_wager_token_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wager_token_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank_wager = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_rank_wager();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutXPCoins.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutXPCoins.Player)
  return false;
#undef DO_
}

void CMsgSignOutXPCoins_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutXPCoins.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 xp_gained = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->xp_gained(), output);
  }

  // optional uint32 coins_spent = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coins_spent(), output);
  }

  // optional uint64 wager_token_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->wager_token_item_id(), output);
  }

  // optional uint32 rank_wager = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rank_wager(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutXPCoins.Player)
}

::google::protobuf::uint8* CMsgSignOutXPCoins_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutXPCoins.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 xp_gained = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->xp_gained(), target);
  }

  // optional uint32 coins_spent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coins_spent(), target);
  }

  // optional uint64 wager_token_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->wager_token_item_id(), target);
  }

  // optional uint32 rank_wager = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rank_wager(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutXPCoins.Player)
  return target;
}

size_t CMsgSignOutXPCoins_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutXPCoins.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 xp_gained = 2;
    if (has_xp_gained()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_gained());
    }

    // optional uint64 wager_token_item_id = 4;
    if (has_wager_token_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wager_token_item_id());
    }

    // optional uint32 coins_spent = 3;
    if (has_coins_spent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coins_spent());
    }

    // optional uint32 rank_wager = 5;
    if (has_rank_wager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_wager());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutXPCoins_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutXPCoins.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutXPCoins_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutXPCoins_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutXPCoins.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutXPCoins.Player)
    MergeFrom(*source);
  }
}

void CMsgSignOutXPCoins_Player::MergeFrom(const CMsgSignOutXPCoins_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutXPCoins.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_gained_ = from.xp_gained_;
    }
    if (cached_has_bits & 0x00000004u) {
      wager_token_item_id_ = from.wager_token_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      coins_spent_ = from.coins_spent_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_wager_ = from.rank_wager_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutXPCoins_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutXPCoins.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutXPCoins_Player::CopyFrom(const CMsgSignOutXPCoins_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutXPCoins.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutXPCoins_Player::IsInitialized() const {
  return true;
}

void CMsgSignOutXPCoins_Player::Swap(CMsgSignOutXPCoins_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutXPCoins_Player::InternalSwap(CMsgSignOutXPCoins_Player* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(xp_gained_, other->xp_gained_);
  std::swap(wager_token_item_id_, other->wager_token_item_id_);
  std::swap(coins_spent_, other->coins_spent_);
  std::swap(rank_wager_, other->rank_wager_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutXPCoins_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutXPCoins_Player

// optional uint32 account_id = 1;
bool CMsgSignOutXPCoins_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutXPCoins_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutXPCoins_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutXPCoins_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgSignOutXPCoins_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutXPCoins.Player.account_id)
  return account_id_;
}
void CMsgSignOutXPCoins_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutXPCoins.Player.account_id)
}

// optional uint32 xp_gained = 2;
bool CMsgSignOutXPCoins_Player::has_xp_gained() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutXPCoins_Player::set_has_xp_gained() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutXPCoins_Player::clear_has_xp_gained() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutXPCoins_Player::clear_xp_gained() {
  xp_gained_ = 0u;
  clear_has_xp_gained();
}
::google::protobuf::uint32 CMsgSignOutXPCoins_Player::xp_gained() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutXPCoins.Player.xp_gained)
  return xp_gained_;
}
void CMsgSignOutXPCoins_Player::set_xp_gained(::google::protobuf::uint32 value) {
  set_has_xp_gained();
  xp_gained_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutXPCoins.Player.xp_gained)
}

// optional uint32 coins_spent = 3;
bool CMsgSignOutXPCoins_Player::has_coins_spent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSignOutXPCoins_Player::set_has_coins_spent() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSignOutXPCoins_Player::clear_has_coins_spent() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSignOutXPCoins_Player::clear_coins_spent() {
  coins_spent_ = 0u;
  clear_has_coins_spent();
}
::google::protobuf::uint32 CMsgSignOutXPCoins_Player::coins_spent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutXPCoins.Player.coins_spent)
  return coins_spent_;
}
void CMsgSignOutXPCoins_Player::set_coins_spent(::google::protobuf::uint32 value) {
  set_has_coins_spent();
  coins_spent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutXPCoins.Player.coins_spent)
}

// optional uint64 wager_token_item_id = 4;
bool CMsgSignOutXPCoins_Player::has_wager_token_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSignOutXPCoins_Player::set_has_wager_token_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSignOutXPCoins_Player::clear_has_wager_token_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSignOutXPCoins_Player::clear_wager_token_item_id() {
  wager_token_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_wager_token_item_id();
}
::google::protobuf::uint64 CMsgSignOutXPCoins_Player::wager_token_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutXPCoins.Player.wager_token_item_id)
  return wager_token_item_id_;
}
void CMsgSignOutXPCoins_Player::set_wager_token_item_id(::google::protobuf::uint64 value) {
  set_has_wager_token_item_id();
  wager_token_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutXPCoins.Player.wager_token_item_id)
}

// optional uint32 rank_wager = 5;
bool CMsgSignOutXPCoins_Player::has_rank_wager() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSignOutXPCoins_Player::set_has_rank_wager() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSignOutXPCoins_Player::clear_has_rank_wager() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSignOutXPCoins_Player::clear_rank_wager() {
  rank_wager_ = 0u;
  clear_has_rank_wager();
}
::google::protobuf::uint32 CMsgSignOutXPCoins_Player::rank_wager() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutXPCoins.Player.rank_wager)
  return rank_wager_;
}
void CMsgSignOutXPCoins_Player::set_rank_wager(::google::protobuf::uint32 value) {
  set_has_rank_wager();
  rank_wager_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutXPCoins.Player.rank_wager)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutXPCoins::kPlayersFieldNumber;
const int CMsgSignOutXPCoins::kEventIdFieldNumber;
const int CMsgSignOutXPCoins::kMatchIdFieldNumber;
const int CMsgSignOutXPCoins::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutXPCoins::CMsgSignOutXPCoins()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutXPCoins)
}
CMsgSignOutXPCoins::CMsgSignOutXPCoins(const CMsgSignOutXPCoins& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutXPCoins)
}

void CMsgSignOutXPCoins::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(timestamp_));
}

CMsgSignOutXPCoins::~CMsgSignOutXPCoins() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutXPCoins)
  SharedDtor();
}

void CMsgSignOutXPCoins::SharedDtor() {
}

void CMsgSignOutXPCoins::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutXPCoins::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutXPCoins& CMsgSignOutXPCoins::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutXPCoins* CMsgSignOutXPCoins::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutXPCoins* n = new CMsgSignOutXPCoins;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutXPCoins::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutXPCoins)
  players_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutXPCoins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutXPCoins)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutXPCoins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutXPCoins)
  return false;
#undef DO_
}

void CMsgSignOutXPCoins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutXPCoins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutXPCoins)
}

::google::protobuf::uint8* CMsgSignOutXPCoins::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutXPCoins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutXPCoins)
  return target;
}

size_t CMsgSignOutXPCoins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutXPCoins)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutXPCoins::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutXPCoins)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutXPCoins* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutXPCoins>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutXPCoins)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutXPCoins)
    MergeFrom(*source);
  }
}

void CMsgSignOutXPCoins::MergeFrom(const CMsgSignOutXPCoins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutXPCoins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutXPCoins::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutXPCoins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutXPCoins::CopyFrom(const CMsgSignOutXPCoins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutXPCoins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutXPCoins::IsInitialized() const {
  return true;
}

void CMsgSignOutXPCoins::Swap(CMsgSignOutXPCoins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutXPCoins::InternalSwap(CMsgSignOutXPCoins* other) {
  players_.InternalSwap(&other->players_);
  std::swap(match_id_, other->match_id_);
  std::swap(event_id_, other->event_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutXPCoins::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutXPCoins

// repeated .proto.dota.CMsgSignOutXPCoins.Player players = 1;
int CMsgSignOutXPCoins::players_size() const {
  return players_.size();
}
void CMsgSignOutXPCoins::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgSignOutXPCoins_Player& CMsgSignOutXPCoins::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutXPCoins.players)
  return players_.Get(index);
}
::proto::dota::CMsgSignOutXPCoins_Player* CMsgSignOutXPCoins::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSignOutXPCoins.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgSignOutXPCoins_Player* CMsgSignOutXPCoins::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutXPCoins.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutXPCoins_Player >*
CMsgSignOutXPCoins::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutXPCoins.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutXPCoins_Player >&
CMsgSignOutXPCoins::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutXPCoins.players)
  return players_;
}

// optional uint32 event_id = 2;
bool CMsgSignOutXPCoins::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutXPCoins::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutXPCoins::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutXPCoins::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgSignOutXPCoins::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutXPCoins.event_id)
  return event_id_;
}
void CMsgSignOutXPCoins::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutXPCoins.event_id)
}

// optional uint64 match_id = 3;
bool CMsgSignOutXPCoins::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutXPCoins::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutXPCoins::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutXPCoins::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgSignOutXPCoins::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutXPCoins.match_id)
  return match_id_;
}
void CMsgSignOutXPCoins::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutXPCoins.match_id)
}

// optional uint32 timestamp = 4;
bool CMsgSignOutXPCoins::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSignOutXPCoins::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSignOutXPCoins::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSignOutXPCoins::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgSignOutXPCoins::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutXPCoins.timestamp)
  return timestamp_;
}
void CMsgSignOutXPCoins::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutXPCoins.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutCommunityGoalProgress_EventGoalIncrement::kEventGoalIdFieldNumber;
const int CMsgSignOutCommunityGoalProgress_EventGoalIncrement::kIncrementAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}
CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_goal_id_, &from.event_goal_id_,
    reinterpret_cast<char*>(&increment_amount_) -
    reinterpret_cast<char*>(&event_goal_id_) + sizeof(increment_amount_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_goal_id_, 0, reinterpret_cast<char*>(&increment_amount_) -
    reinterpret_cast<char*>(&event_goal_id_) + sizeof(increment_amount_));
}

CMsgSignOutCommunityGoalProgress_EventGoalIncrement::~CMsgSignOutCommunityGoalProgress_EventGoalIncrement() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  SharedDtor();
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SharedDtor() {
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutCommunityGoalProgress_EventGoalIncrement::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& CMsgSignOutCommunityGoalProgress_EventGoalIncrement::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutCommunityGoalProgress_EventGoalIncrement* CMsgSignOutCommunityGoalProgress_EventGoalIncrement::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutCommunityGoalProgress_EventGoalIncrement* n = new CMsgSignOutCommunityGoalProgress_EventGoalIncrement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&event_goal_id_, 0, reinterpret_cast<char*>(&increment_amount_) -
      reinterpret_cast<char*>(&event_goal_id_) + sizeof(increment_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_goal_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_goal_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_goal_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 increment_amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_increment_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &increment_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  return false;
#undef DO_
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_goal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_goal_id(), output);
  }

  // optional uint32 increment_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->increment_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}

::google::protobuf::uint8* CMsgSignOutCommunityGoalProgress_EventGoalIncrement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_goal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_goal_id(), target);
  }

  // optional uint32 increment_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->increment_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  return target;
}

size_t CMsgSignOutCommunityGoalProgress_EventGoalIncrement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 event_goal_id = 1;
    if (has_event_goal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_goal_id());
    }

    // optional uint32 increment_amount = 2;
    if (has_increment_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->increment_amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunityGoalProgress_EventGoalIncrement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutCommunityGoalProgress_EventGoalIncrement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergeFrom(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      event_goal_id_ = from.event_goal_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      increment_amount_ = from.increment_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CopyFrom(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::Swap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::InternalSwap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* other) {
  std::swap(event_goal_id_, other->event_goal_id_);
  std::swap(increment_amount_, other->increment_amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutCommunityGoalProgress_EventGoalIncrement::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutCommunityGoalProgress_EventGoalIncrement

// optional uint32 event_goal_id = 1;
bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::has_event_goal_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::set_has_event_goal_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::clear_has_event_goal_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::clear_event_goal_id() {
  event_goal_id_ = 0u;
  clear_has_event_goal_id();
}
::google::protobuf::uint32 CMsgSignOutCommunityGoalProgress_EventGoalIncrement::event_goal_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement.event_goal_id)
  return event_goal_id_;
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::set_event_goal_id(::google::protobuf::uint32 value) {
  set_has_event_goal_id();
  event_goal_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement.event_goal_id)
}

// optional uint32 increment_amount = 2;
bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::has_increment_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::set_has_increment_amount() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::clear_has_increment_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::clear_increment_amount() {
  increment_amount_ = 0u;
  clear_has_increment_amount();
}
::google::protobuf::uint32 CMsgSignOutCommunityGoalProgress_EventGoalIncrement::increment_amount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement.increment_amount)
  return increment_amount_;
}
void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::set_increment_amount(::google::protobuf::uint32 value) {
  set_has_increment_amount();
  increment_amount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement.increment_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSignOutCommunityGoalProgress::kEventIdFieldNumber;
const int CMsgSignOutCommunityGoalProgress::kEventIncrementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSignOutCommunityGoalProgress)
}
CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress(const CMsgSignOutCommunityGoalProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      event_increments_(from.event_increments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSignOutCommunityGoalProgress)
}

void CMsgSignOutCommunityGoalProgress::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
}

CMsgSignOutCommunityGoalProgress::~CMsgSignOutCommunityGoalProgress() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSignOutCommunityGoalProgress)
  SharedDtor();
}

void CMsgSignOutCommunityGoalProgress::SharedDtor() {
}

void CMsgSignOutCommunityGoalProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSignOutCommunityGoalProgress::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSignOutCommunityGoalProgress& CMsgSignOutCommunityGoalProgress::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSignOutCommunityGoalProgress* CMsgSignOutCommunityGoalProgress::New(::google::protobuf::Arena* arena) const {
  CMsgSignOutCommunityGoalProgress* n = new CMsgSignOutCommunityGoalProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSignOutCommunityGoalProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  event_increments_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSignOutCommunityGoalProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_increments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSignOutCommunityGoalProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSignOutCommunityGoalProgress)
  return false;
#undef DO_
}

void CMsgSignOutCommunityGoalProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  for (unsigned int i = 0, n = this->event_increments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event_increments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSignOutCommunityGoalProgress)
}

::google::protobuf::uint8* CMsgSignOutCommunityGoalProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  for (unsigned int i = 0, n = this->event_increments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->event_increments(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSignOutCommunityGoalProgress)
  return target;
}

size_t CMsgSignOutCommunityGoalProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  {
    unsigned int count = this->event_increments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_increments(i));
    }
  }

  // optional uint32 event_id = 1;
  if (has_event_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSignOutCommunityGoalProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSignOutCommunityGoalProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSignOutCommunityGoalProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSignOutCommunityGoalProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSignOutCommunityGoalProgress)
    MergeFrom(*source);
  }
}

void CMsgSignOutCommunityGoalProgress::MergeFrom(const CMsgSignOutCommunityGoalProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_increments_.MergeFrom(from.event_increments_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgSignOutCommunityGoalProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSignOutCommunityGoalProgress::CopyFrom(const CMsgSignOutCommunityGoalProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSignOutCommunityGoalProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunityGoalProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunityGoalProgress::Swap(CMsgSignOutCommunityGoalProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSignOutCommunityGoalProgress::InternalSwap(CMsgSignOutCommunityGoalProgress* other) {
  event_increments_.InternalSwap(&other->event_increments_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSignOutCommunityGoalProgress::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSignOutCommunityGoalProgress

// optional uint32 event_id = 1;
bool CMsgSignOutCommunityGoalProgress::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSignOutCommunityGoalProgress::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSignOutCommunityGoalProgress::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSignOutCommunityGoalProgress::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgSignOutCommunityGoalProgress::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunityGoalProgress.event_id)
  return event_id_;
}
void CMsgSignOutCommunityGoalProgress::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSignOutCommunityGoalProgress.event_id)
}

// repeated .proto.dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
int CMsgSignOutCommunityGoalProgress::event_increments_size() const {
  return event_increments_.size();
}
void CMsgSignOutCommunityGoalProgress::clear_event_increments() {
  event_increments_.Clear();
}
const ::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement& CMsgSignOutCommunityGoalProgress::event_increments(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSignOutCommunityGoalProgress.event_increments)
  return event_increments_.Get(index);
}
::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* CMsgSignOutCommunityGoalProgress::mutable_event_increments(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSignOutCommunityGoalProgress.event_increments)
  return event_increments_.Mutable(index);
}
::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* CMsgSignOutCommunityGoalProgress::add_event_increments() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSignOutCommunityGoalProgress.event_increments)
  return event_increments_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >*
CMsgSignOutCommunityGoalProgress::mutable_event_increments() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSignOutCommunityGoalProgress.event_increments)
  return &event_increments_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >&
CMsgSignOutCommunityGoalProgress::event_increments() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSignOutCommunityGoalProgress.event_increments)
  return event_increments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCPostMatchTip::kEventIdFieldNumber;
const int CMsgServerToGCPostMatchTip::kMatchIdFieldNumber;
const int CMsgServerToGCPostMatchTip::kTipperAccountIdFieldNumber;
const int CMsgServerToGCPostMatchTip::kRecipientAccountIdFieldNumber;
const int CMsgServerToGCPostMatchTip::kTipAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCPostMatchTip::CMsgServerToGCPostMatchTip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCPostMatchTip)
}
CMsgServerToGCPostMatchTip::CMsgServerToGCPostMatchTip(const CMsgServerToGCPostMatchTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&tip_amount_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(tip_amount_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCPostMatchTip)
}

void CMsgServerToGCPostMatchTip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&tip_amount_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(tip_amount_));
}

CMsgServerToGCPostMatchTip::~CMsgServerToGCPostMatchTip() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCPostMatchTip)
  SharedDtor();
}

void CMsgServerToGCPostMatchTip::SharedDtor() {
}

void CMsgServerToGCPostMatchTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCPostMatchTip::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCPostMatchTip& CMsgServerToGCPostMatchTip::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCPostMatchTip* CMsgServerToGCPostMatchTip::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCPostMatchTip* n = new CMsgServerToGCPostMatchTip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCPostMatchTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCPostMatchTip)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&tip_amount_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(tip_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCPostMatchTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCPostMatchTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tipper_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tipper_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tipper_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recipient_account_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_recipient_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tip_amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tip_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tip_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCPostMatchTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCPostMatchTip)
  return false;
#undef DO_
}

void CMsgServerToGCPostMatchTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCPostMatchTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional uint32 tipper_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tipper_account_id(), output);
  }

  // optional uint32 recipient_account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recipient_account_id(), output);
  }

  // optional uint32 tip_amount = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tip_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCPostMatchTip)
}

::google::protobuf::uint8* CMsgServerToGCPostMatchTip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCPostMatchTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional uint32 tipper_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tipper_account_id(), target);
  }

  // optional uint32 recipient_account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recipient_account_id(), target);
  }

  // optional uint32 tip_amount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tip_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCPostMatchTip)
  return target;
}

size_t CMsgServerToGCPostMatchTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCPostMatchTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 tipper_account_id = 3;
    if (has_tipper_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tipper_account_id());
    }

    // optional uint32 recipient_account_id = 4;
    if (has_recipient_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipient_account_id());
    }

    // optional uint32 tip_amount = 5;
    if (has_tip_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tip_amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCPostMatchTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCPostMatchTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCPostMatchTip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCPostMatchTip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCPostMatchTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCPostMatchTip)
    MergeFrom(*source);
  }
}

void CMsgServerToGCPostMatchTip::MergeFrom(const CMsgServerToGCPostMatchTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCPostMatchTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tipper_account_id_ = from.tipper_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      recipient_account_id_ = from.recipient_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      tip_amount_ = from.tip_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCPostMatchTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCPostMatchTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCPostMatchTip::CopyFrom(const CMsgServerToGCPostMatchTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCPostMatchTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPostMatchTip::IsInitialized() const {
  return true;
}

void CMsgServerToGCPostMatchTip::Swap(CMsgServerToGCPostMatchTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCPostMatchTip::InternalSwap(CMsgServerToGCPostMatchTip* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(event_id_, other->event_id_);
  std::swap(tipper_account_id_, other->tipper_account_id_);
  std::swap(recipient_account_id_, other->recipient_account_id_);
  std::swap(tip_amount_, other->tip_amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCPostMatchTip::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCPostMatchTip

// optional uint32 event_id = 1;
bool CMsgServerToGCPostMatchTip::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCPostMatchTip::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCPostMatchTip::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCPostMatchTip::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgServerToGCPostMatchTip::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCPostMatchTip.event_id)
  return event_id_;
}
void CMsgServerToGCPostMatchTip::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCPostMatchTip.event_id)
}

// optional uint64 match_id = 2;
bool CMsgServerToGCPostMatchTip::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCPostMatchTip::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCPostMatchTip::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCPostMatchTip::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgServerToGCPostMatchTip::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCPostMatchTip.match_id)
  return match_id_;
}
void CMsgServerToGCPostMatchTip::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCPostMatchTip.match_id)
}

// optional uint32 tipper_account_id = 3;
bool CMsgServerToGCPostMatchTip::has_tipper_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCPostMatchTip::set_has_tipper_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCPostMatchTip::clear_has_tipper_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCPostMatchTip::clear_tipper_account_id() {
  tipper_account_id_ = 0u;
  clear_has_tipper_account_id();
}
::google::protobuf::uint32 CMsgServerToGCPostMatchTip::tipper_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCPostMatchTip.tipper_account_id)
  return tipper_account_id_;
}
void CMsgServerToGCPostMatchTip::set_tipper_account_id(::google::protobuf::uint32 value) {
  set_has_tipper_account_id();
  tipper_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCPostMatchTip.tipper_account_id)
}

// optional uint32 recipient_account_id = 4;
bool CMsgServerToGCPostMatchTip::has_recipient_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgServerToGCPostMatchTip::set_has_recipient_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgServerToGCPostMatchTip::clear_has_recipient_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgServerToGCPostMatchTip::clear_recipient_account_id() {
  recipient_account_id_ = 0u;
  clear_has_recipient_account_id();
}
::google::protobuf::uint32 CMsgServerToGCPostMatchTip::recipient_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCPostMatchTip.recipient_account_id)
  return recipient_account_id_;
}
void CMsgServerToGCPostMatchTip::set_recipient_account_id(::google::protobuf::uint32 value) {
  set_has_recipient_account_id();
  recipient_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCPostMatchTip.recipient_account_id)
}

// optional uint32 tip_amount = 5;
bool CMsgServerToGCPostMatchTip::has_tip_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgServerToGCPostMatchTip::set_has_tip_amount() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgServerToGCPostMatchTip::clear_has_tip_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgServerToGCPostMatchTip::clear_tip_amount() {
  tip_amount_ = 0u;
  clear_has_tip_amount();
}
::google::protobuf::uint32 CMsgServerToGCPostMatchTip::tip_amount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCPostMatchTip.tip_amount)
  return tip_amount_;
}
void CMsgServerToGCPostMatchTip::set_tip_amount(::google::protobuf::uint32 value) {
  set_has_tip_amount();
  tip_amount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCPostMatchTip.tip_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCPostMatchTipResponse::kMatchIdFieldNumber;
const int CMsgServerToGCPostMatchTipResponse::kTipperAccountIdFieldNumber;
const int CMsgServerToGCPostMatchTipResponse::kRecipientAccountIdFieldNumber;
const int CMsgServerToGCPostMatchTipResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCPostMatchTipResponse::CMsgServerToGCPostMatchTipResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCPostMatchTipResponse)
}
CMsgServerToGCPostMatchTipResponse::CMsgServerToGCPostMatchTipResponse(const CMsgServerToGCPostMatchTipResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCPostMatchTipResponse)
}

void CMsgServerToGCPostMatchTipResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(result_));
}

CMsgServerToGCPostMatchTipResponse::~CMsgServerToGCPostMatchTipResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCPostMatchTipResponse)
  SharedDtor();
}

void CMsgServerToGCPostMatchTipResponse::SharedDtor() {
}

void CMsgServerToGCPostMatchTipResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCPostMatchTipResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCPostMatchTipResponse& CMsgServerToGCPostMatchTipResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCPostMatchTipResponse* CMsgServerToGCPostMatchTipResponse::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCPostMatchTipResponse* n = new CMsgServerToGCPostMatchTipResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCPostMatchTipResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCPostMatchTipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tipper_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tipper_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tipper_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recipient_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_recipient_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgServerToGCPostMatchTipResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgServerToGCPostMatchTipResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCPostMatchTipResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCPostMatchTipResponse)
  return false;
#undef DO_
}

void CMsgServerToGCPostMatchTipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 tipper_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tipper_account_id(), output);
  }

  // optional uint32 recipient_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recipient_account_id(), output);
  }

  // optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCPostMatchTipResponse)
}

::google::protobuf::uint8* CMsgServerToGCPostMatchTipResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 tipper_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tipper_account_id(), target);
  }

  // optional uint32 recipient_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recipient_account_id(), target);
  }

  // optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCPostMatchTipResponse)
  return target;
}

size_t CMsgServerToGCPostMatchTipResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 tipper_account_id = 2;
    if (has_tipper_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tipper_account_id());
    }

    // optional uint32 recipient_account_id = 3;
    if (has_recipient_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipient_account_id());
    }

    // optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCPostMatchTipResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCPostMatchTipResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCPostMatchTipResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCPostMatchTipResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCPostMatchTipResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCPostMatchTipResponse::MergeFrom(const CMsgServerToGCPostMatchTipResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      tipper_account_id_ = from.tipper_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      recipient_account_id_ = from.recipient_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCPostMatchTipResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCPostMatchTipResponse::CopyFrom(const CMsgServerToGCPostMatchTipResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCPostMatchTipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPostMatchTipResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCPostMatchTipResponse::Swap(CMsgServerToGCPostMatchTipResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCPostMatchTipResponse::InternalSwap(CMsgServerToGCPostMatchTipResponse* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(tipper_account_id_, other->tipper_account_id_);
  std::swap(recipient_account_id_, other->recipient_account_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCPostMatchTipResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCPostMatchTipResponse

// optional uint64 match_id = 1;
bool CMsgServerToGCPostMatchTipResponse::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCPostMatchTipResponse::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCPostMatchTipResponse::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCPostMatchTipResponse::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgServerToGCPostMatchTipResponse::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCPostMatchTipResponse.match_id)
  return match_id_;
}
void CMsgServerToGCPostMatchTipResponse::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCPostMatchTipResponse.match_id)
}

// optional uint32 tipper_account_id = 2;
bool CMsgServerToGCPostMatchTipResponse::has_tipper_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCPostMatchTipResponse::set_has_tipper_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCPostMatchTipResponse::clear_has_tipper_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCPostMatchTipResponse::clear_tipper_account_id() {
  tipper_account_id_ = 0u;
  clear_has_tipper_account_id();
}
::google::protobuf::uint32 CMsgServerToGCPostMatchTipResponse::tipper_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCPostMatchTipResponse.tipper_account_id)
  return tipper_account_id_;
}
void CMsgServerToGCPostMatchTipResponse::set_tipper_account_id(::google::protobuf::uint32 value) {
  set_has_tipper_account_id();
  tipper_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCPostMatchTipResponse.tipper_account_id)
}

// optional uint32 recipient_account_id = 3;
bool CMsgServerToGCPostMatchTipResponse::has_recipient_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCPostMatchTipResponse::set_has_recipient_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCPostMatchTipResponse::clear_has_recipient_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCPostMatchTipResponse::clear_recipient_account_id() {
  recipient_account_id_ = 0u;
  clear_has_recipient_account_id();
}
::google::protobuf::uint32 CMsgServerToGCPostMatchTipResponse::recipient_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCPostMatchTipResponse.recipient_account_id)
  return recipient_account_id_;
}
void CMsgServerToGCPostMatchTipResponse::set_recipient_account_id(::google::protobuf::uint32 value) {
  set_has_recipient_account_id();
  recipient_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCPostMatchTipResponse.recipient_account_id)
}

// optional .proto.dota.CMsgServerToGCPostMatchTipResponse.Result result = 4 [default = SUCCESS];
bool CMsgServerToGCPostMatchTipResponse::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgServerToGCPostMatchTipResponse::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgServerToGCPostMatchTipResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgServerToGCPostMatchTipResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgServerToGCPostMatchTipResponse_Result CMsgServerToGCPostMatchTipResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCPostMatchTipResponse.result)
  return static_cast< ::proto::dota::CMsgServerToGCPostMatchTipResponse_Result >(result_);
}
void CMsgServerToGCPostMatchTipResponse::set_result(::proto::dota::CMsgServerToGCPostMatchTipResponse_Result value) {
  assert(::proto::dota::CMsgServerToGCPostMatchTipResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCPostMatchTipResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCloseCompendiumInGamePredictionVoting::kMatchIdFieldNumber;
const int CMsgServerToGCCloseCompendiumInGamePredictionVoting::kHltvDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}
CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&hltv_delay_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(hltv_delay_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&hltv_delay_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(hltv_delay_));
}

CMsgServerToGCCloseCompendiumInGamePredictionVoting::~CMsgServerToGCCloseCompendiumInGamePredictionVoting() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  SharedDtor();
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SharedDtor() {
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCCloseCompendiumInGamePredictionVoting::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCCloseCompendiumInGamePredictionVoting& CMsgServerToGCCloseCompendiumInGamePredictionVoting::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCCloseCompendiumInGamePredictionVoting* CMsgServerToGCCloseCompendiumInGamePredictionVoting::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCCloseCompendiumInGamePredictionVoting* n = new CMsgServerToGCCloseCompendiumInGamePredictionVoting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&hltv_delay_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(hltv_delay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hltv_delay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hltv_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hltv_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  return false;
#undef DO_
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 hltv_delay = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hltv_delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}

::google::protobuf::uint8* CMsgServerToGCCloseCompendiumInGamePredictionVoting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 hltv_delay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hltv_delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  return target;
}

size_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 hltv_delay = 2;
    if (has_hltv_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hltv_delay());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCloseCompendiumInGamePredictionVoting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCCloseCompendiumInGamePredictionVoting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergeFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hltv_delay_ = from.hltv_delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::IsInitialized() const {
  return true;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::Swap(CMsgServerToGCCloseCompendiumInGamePredictionVoting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVoting* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(hltv_delay_, other->hltv_delay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCCloseCompendiumInGamePredictionVoting::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCCloseCompendiumInGamePredictionVoting

// optional uint64 match_id = 1;
bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgServerToGCCloseCompendiumInGamePredictionVoting::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting.match_id)
  return match_id_;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting.match_id)
}

// optional uint32 hltv_delay = 2;
bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::has_hltv_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::set_has_hltv_delay() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::clear_has_hltv_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::clear_hltv_delay() {
  hltv_delay_ = 0u;
  clear_has_hltv_delay();
}
::google::protobuf::uint32 CMsgServerToGCCloseCompendiumInGamePredictionVoting::hltv_delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting.hltv_delay)
  return hltv_delay_;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVoting::set_hltv_delay(::google::protobuf::uint32 value) {
  set_has_hltv_delay();
  hltv_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting.hltv_delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}
CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
}

CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::~CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  SharedDtor();
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SharedDtor() {
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* n = new CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  return false;
#undef DO_
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}

::google::protobuf::uint8* CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  return target;
}

size_t CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool result = 1;
  if (has_result()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergeFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::Swap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse

// optional bool result = 1;
bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::clear_result() {
  result_ = false;
  clear_has_result();
}
bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse.result)
  return result_;
}
void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::kPredictionIdFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::kPredictionValueFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::kPredictionValueIsMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}
CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prediction_id_, &from.prediction_id_,
    reinterpret_cast<char*>(&prediction_value_is_mask_) -
    reinterpret_cast<char*>(&prediction_id_) + sizeof(prediction_value_is_mask_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&prediction_id_, 0, reinterpret_cast<char*>(&prediction_value_is_mask_) -
    reinterpret_cast<char*>(&prediction_id_) + sizeof(prediction_value_is_mask_));
}

CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::~CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  SharedDtor();
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SharedDtor() {
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* n = new CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&prediction_id_, 0, reinterpret_cast<char*>(&prediction_value_is_mask_) -
      reinterpret_cast<char*>(&prediction_id_) + sizeof(prediction_value_is_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prediction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_prediction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prediction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prediction_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_prediction_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prediction_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prediction_value_is_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_prediction_value_is_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prediction_value_is_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  return false;
#undef DO_
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prediction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prediction_id(), output);
  }

  // optional uint32 prediction_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prediction_value(), output);
  }

  // optional bool prediction_value_is_mask = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prediction_value_is_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}

::google::protobuf::uint8* CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prediction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prediction_id(), target);
  }

  // optional uint32 prediction_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prediction_value(), target);
  }

  // optional bool prediction_value_is_mask = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prediction_value_is_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 prediction_id = 1;
    if (has_prediction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prediction_id());
    }

    // optional uint32 prediction_value = 2;
    if (has_prediction_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prediction_value());
    }

    // optional bool prediction_value_is_mask = 3;
    if (has_prediction_value_is_mask()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergeFrom(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      prediction_id_ = from.prediction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      prediction_value_ = from.prediction_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      prediction_value_is_mask_ = from.prediction_value_is_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::Swap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* other) {
  std::swap(prediction_id_, other->prediction_id_);
  std::swap(prediction_value_, other->prediction_value_);
  std::swap(prediction_value_is_mask_, other->prediction_value_is_mask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult

// optional uint32 prediction_id = 1;
bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::has_prediction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::set_has_prediction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::clear_has_prediction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::clear_prediction_id() {
  prediction_id_ = 0u;
  clear_has_prediction_id();
}
::google::protobuf::uint32 CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::prediction_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_id)
  return prediction_id_;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::set_prediction_id(::google::protobuf::uint32 value) {
  set_has_prediction_id();
  prediction_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_id)
}

// optional uint32 prediction_value = 2;
bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::has_prediction_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::set_has_prediction_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::clear_has_prediction_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::clear_prediction_value() {
  prediction_value_ = 0u;
  clear_has_prediction_value();
}
::google::protobuf::uint32 CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::prediction_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_value)
  return prediction_value_;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::set_prediction_value(::google::protobuf::uint32 value) {
  set_has_prediction_value();
  prediction_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_value)
}

// optional bool prediction_value_is_mask = 3;
bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::has_prediction_value_is_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::set_has_prediction_value_is_mask() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::clear_has_prediction_value_is_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::clear_prediction_value_is_mask() {
  prediction_value_is_mask_ = false;
  clear_has_prediction_value_is_mask();
}
bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::prediction_value_is_mask() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_value_is_mask)
  return prediction_value_is_mask_;
}
void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::set_prediction_value_is_mask(bool value) {
  set_has_prediction_value_is_mask();
  prediction_value_is_mask_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_value_is_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCompendiumInGamePredictionResults::kMatchIdFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults::kResultsFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults::kLeagueIdFieldNumber;
const int CMsgServerToGCCompendiumInGamePredictionResults::kSeriesIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
}
CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults(const CMsgServerToGCCompendiumInGamePredictionResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&series_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(series_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
}

void CMsgServerToGCCompendiumInGamePredictionResults::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&series_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(series_id_));
}

CMsgServerToGCCompendiumInGamePredictionResults::~CMsgServerToGCCompendiumInGamePredictionResults() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  SharedDtor();
}

void CMsgServerToGCCompendiumInGamePredictionResults::SharedDtor() {
}

void CMsgServerToGCCompendiumInGamePredictionResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCCompendiumInGamePredictionResults::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCCompendiumInGamePredictionResults& CMsgServerToGCCompendiumInGamePredictionResults::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCCompendiumInGamePredictionResults* CMsgServerToGCCompendiumInGamePredictionResults::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCCompendiumInGamePredictionResults* n = new CMsgServerToGCCompendiumInGamePredictionResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCCompendiumInGamePredictionResults::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  results_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&series_id_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(series_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCCompendiumInGamePredictionResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  return false;
#undef DO_
}

void CMsgServerToGCCompendiumInGamePredictionResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->league_id(), output);
  }

  // optional uint32 series_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->series_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
}

::google::protobuf::uint8* CMsgServerToGCCompendiumInGamePredictionResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->results(i), deterministic, target);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->league_id(), target);
  }

  // optional uint32 series_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->series_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 league_id = 3;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 series_id = 4;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumInGamePredictionResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCCompendiumInGamePredictionResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(const CMsgServerToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_id_ = from.series_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCCompendiumInGamePredictionResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumInGamePredictionResults::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResults::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResults::Swap(CMsgServerToGCCompendiumInGamePredictionResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCompendiumInGamePredictionResults::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults* other) {
  results_.InternalSwap(&other->results_);
  std::swap(match_id_, other->match_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(series_id_, other->series_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCCompendiumInGamePredictionResults::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCCompendiumInGamePredictionResults

// optional uint64 match_id = 1;
bool CMsgServerToGCCompendiumInGamePredictionResults::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCCompendiumInGamePredictionResults::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCCompendiumInGamePredictionResults::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCCompendiumInGamePredictionResults::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgServerToGCCompendiumInGamePredictionResults::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.match_id)
  return match_id_;
}
void CMsgServerToGCCompendiumInGamePredictionResults::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.match_id)
}

// repeated .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
int CMsgServerToGCCompendiumInGamePredictionResults::results_size() const {
  return results_.size();
}
void CMsgServerToGCCompendiumInGamePredictionResults::clear_results() {
  results_.Clear();
}
const ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& CMsgServerToGCCompendiumInGamePredictionResults::results(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.results)
  return results_.Get(index);
}
::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* CMsgServerToGCCompendiumInGamePredictionResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.results)
  return results_.Mutable(index);
}
::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* CMsgServerToGCCompendiumInGamePredictionResults::add_results() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >*
CMsgServerToGCCompendiumInGamePredictionResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >&
CMsgServerToGCCompendiumInGamePredictionResults::results() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.results)
  return results_;
}

// optional uint32 league_id = 3;
bool CMsgServerToGCCompendiumInGamePredictionResults::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCCompendiumInGamePredictionResults::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCCompendiumInGamePredictionResults::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCCompendiumInGamePredictionResults::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgServerToGCCompendiumInGamePredictionResults::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.league_id)
  return league_id_;
}
void CMsgServerToGCCompendiumInGamePredictionResults::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.league_id)
}

// optional uint32 series_id = 4;
bool CMsgServerToGCCompendiumInGamePredictionResults::has_series_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCCompendiumInGamePredictionResults::set_has_series_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCCompendiumInGamePredictionResults::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCCompendiumInGamePredictionResults::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
::google::protobuf::uint32 CMsgServerToGCCompendiumInGamePredictionResults::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.series_id)
  return series_id_;
}
void CMsgServerToGCCompendiumInGamePredictionResults::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCompendiumInGamePredictionResults.series_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCCompendiumInGamePredictionResultsResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCCompendiumInGamePredictionResultsResponse::CMsgServerToGCCompendiumInGamePredictionResultsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
}
CMsgServerToGCCompendiumInGamePredictionResultsResponse::CMsgServerToGCCompendiumInGamePredictionResultsResponse(const CMsgServerToGCCompendiumInGamePredictionResultsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
}

CMsgServerToGCCompendiumInGamePredictionResultsResponse::~CMsgServerToGCCompendiumInGamePredictionResultsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  SharedDtor();
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SharedDtor() {
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCCompendiumInGamePredictionResultsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCCompendiumInGamePredictionResultsResponse& CMsgServerToGCCompendiumInGamePredictionResultsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCCompendiumInGamePredictionResultsResponse* CMsgServerToGCCompendiumInGamePredictionResultsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCCompendiumInGamePredictionResultsResponse* n = new CMsgServerToGCCompendiumInGamePredictionResultsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCCompendiumInGamePredictionResultsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  return false;
#undef DO_
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
}

::google::protobuf::uint8* CMsgServerToGCCompendiumInGamePredictionResultsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool result = 1;
  if (has_result()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCCompendiumInGamePredictionResultsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCCompendiumInGamePredictionResultsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::MergeFrom(const CMsgServerToGCCompendiumInGamePredictionResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResultsResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResultsResponse::Swap(CMsgServerToGCCompendiumInGamePredictionResultsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCCompendiumInGamePredictionResultsResponse::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResultsResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCCompendiumInGamePredictionResultsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCCompendiumInGamePredictionResultsResponse

// optional bool result = 1;
bool CMsgServerToGCCompendiumInGamePredictionResultsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCCompendiumInGamePredictionResultsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCCompendiumInGamePredictionResultsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCCompendiumInGamePredictionResultsResponse::clear_result() {
  result_ = false;
  clear_has_result();
}
bool CMsgServerToGCCompendiumInGamePredictionResultsResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse.result)
  return result_;
}
void CMsgServerToGCCompendiumInGamePredictionResultsResponse::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCCompendiumInGamePredictionResults::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
}
CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults(const CMsgGCToGCCompendiumInGamePredictionResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_results()) {
    results_ = new ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults(*from.results_);
  } else {
    results_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
}

void CMsgGCToGCCompendiumInGamePredictionResults::SharedCtor() {
  _cached_size_ = 0;
  results_ = NULL;
}

CMsgGCToGCCompendiumInGamePredictionResults::~CMsgGCToGCCompendiumInGamePredictionResults() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  SharedDtor();
}

void CMsgGCToGCCompendiumInGamePredictionResults::SharedDtor() {
  if (this != internal_default_instance()) {
    delete results_;
  }
}

void CMsgGCToGCCompendiumInGamePredictionResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCCompendiumInGamePredictionResults::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCCompendiumInGamePredictionResults& CMsgGCToGCCompendiumInGamePredictionResults::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCCompendiumInGamePredictionResults* CMsgGCToGCCompendiumInGamePredictionResults::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCCompendiumInGamePredictionResults* n = new CMsgGCToGCCompendiumInGamePredictionResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCCompendiumInGamePredictionResults::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  if (has_results()) {
    GOOGLE_DCHECK(results_ != NULL);
    results_->::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCCompendiumInGamePredictionResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  return false;
#undef DO_
}

void CMsgGCToGCCompendiumInGamePredictionResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->results_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
}

::google::protobuf::uint8* CMsgGCToGCCompendiumInGamePredictionResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->results_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  return target;
}

size_t CMsgGCToGCCompendiumInGamePredictionResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  if (has_results()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->results_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCCompendiumInGamePredictionResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCCompendiumInGamePredictionResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCCompendiumInGamePredictionResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
    MergeFrom(*source);
  }
}

void CMsgGCToGCCompendiumInGamePredictionResults::MergeFrom(const CMsgGCToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_results()) {
    mutable_results()->::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(from.results());
  }
}

void CMsgGCToGCCompendiumInGamePredictionResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCCompendiumInGamePredictionResults::CopyFrom(const CMsgGCToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCompendiumInGamePredictionResults::IsInitialized() const {
  return true;
}

void CMsgGCToGCCompendiumInGamePredictionResults::Swap(CMsgGCToGCCompendiumInGamePredictionResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCCompendiumInGamePredictionResults::InternalSwap(CMsgGCToGCCompendiumInGamePredictionResults* other) {
  std::swap(results_, other->results_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCCompendiumInGamePredictionResults::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCCompendiumInGamePredictionResults

// optional .proto.dota.CMsgServerToGCCompendiumInGamePredictionResults results = 1;
bool CMsgGCToGCCompendiumInGamePredictionResults::has_results() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCCompendiumInGamePredictionResults::set_has_results() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCCompendiumInGamePredictionResults::clear_has_results() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCCompendiumInGamePredictionResults::clear_results() {
  if (results_ != NULL) results_->::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults::Clear();
  clear_has_results();
}
const ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults& CMsgGCToGCCompendiumInGamePredictionResults::results() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults.results)
  return results_ != NULL ? *results_
                         : *::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults::internal_default_instance();
}
::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults* CMsgGCToGCCompendiumInGamePredictionResults::mutable_results() {
  set_has_results();
  if (results_ == NULL) {
    results_ = new ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults.results)
  return results_;
}
::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults* CMsgGCToGCCompendiumInGamePredictionResults::release_results() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults.results)
  clear_has_results();
  ::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults* temp = results_;
  results_ = NULL;
  return temp;
}
void CMsgGCToGCCompendiumInGamePredictionResults::set_allocated_results(::proto::dota::CMsgServerToGCCompendiumInGamePredictionResults* results) {
  delete results_;
  results_ = results;
  if (results) {
    set_has_results();
  } else {
    clear_has_results();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToGCCompendiumInGamePredictionResults.results)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kItemFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kGoldFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kNetWorthFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::kGameTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_, &from.item_,
    reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&item_) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_, 0, reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&item_) + sizeof(game_time_));
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::~CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  SharedDtor();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SharedDtor() {
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* n = new CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&item_, 0, reinterpret_cast<char*>(&game_time_) -
      reinterpret_cast<char*>(&item_) + sizeof(game_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_net_worth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  return false;
#undef DO_
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item(), output);
  }

  // optional uint32 gold = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold(), output);
  }

  // optional uint32 net_worth = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->net_worth(), output);
  }

  // optional uint32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}

::google::protobuf::uint8* CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item(), target);
  }

  // optional uint32 gold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold(), target);
  }

  // optional uint32 net_worth = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->net_worth(), target);
  }

  // optional uint32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item());
    }

    // optional uint32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 net_worth = 3;
    if (has_net_worth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 game_time = 4;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergeFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      item_ = from.item_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000004u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::Swap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* other) {
  std::swap(item_, other->item_);
  std::swap(gold_, other->gold_);
  std::swap(net_worth_, other->net_worth_);
  std::swap(game_time_, other->game_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase

// optional uint32 item = 1;
bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_item() {
  item_ = 0u;
  clear_has_item();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.item)
  return item_;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_item(::google::protobuf::uint32 value) {
  set_has_item();
  item_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.item)
}

// optional uint32 gold = 2;
bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.gold)
  return gold_;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.gold)
}

// optional uint32 net_worth = 3;
bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::has_net_worth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_has_net_worth() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_has_net_worth() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_net_worth() {
  net_worth_ = 0u;
  clear_has_net_worth();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.net_worth)
  return net_worth_;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_net_worth(::google::protobuf::uint32 value) {
  set_has_net_worth();
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.net_worth)
}

// optional uint32 game_time = 4;
bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::has_game_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_has_game_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.game_time)
  return game_time_;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.game_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kPlayerSlotFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kAccountIdFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kHeroIdFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kAlliedHeroIdsFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kEnemyHeroIdsFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::kItemPurchasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      allied_hero_ids_(from.allied_hero_ids_),
      enemy_hero_ids_(from.enemy_hero_ids_),
      item_purchases_(from.item_purchases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_slot_, &from.player_slot_,
    reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&player_slot_) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_slot_, 0, reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&player_slot_) + sizeof(hero_id_));
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::~CMsgServerToGCMatchPlayerItemPurchaseHistory_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  SharedDtor();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SharedDtor() {
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* n = new CMsgServerToGCMatchPlayerItemPurchaseHistory_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  allied_hero_ids_.Clear();
  enemy_hero_ids_.Clear();
  item_purchases_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_slot_, 0, reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&player_slot_) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 allied_hero_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_allied_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allied_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 enemy_hero_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_enemy_hero_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enemy_hero_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_purchases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  return false;
#undef DO_
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_slot(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // repeated uint32 allied_hero_ids = 4;
  for (int i = 0, n = this->allied_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->allied_hero_ids(i), output);
  }

  // repeated uint32 enemy_hero_ids = 5;
  for (int i = 0, n = this->enemy_hero_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->enemy_hero_ids(i), output);
  }

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  for (unsigned int i = 0, n = this->item_purchases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item_purchases(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}

::google::protobuf::uint8* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_slot(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->allied_hero_ids_, target);

  // repeated uint32 enemy_hero_ids = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->enemy_hero_ids_, target);

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  for (unsigned int i = 0, n = this->item_purchases_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->item_purchases(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 allied_hero_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->allied_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->enemy_hero_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  {
    unsigned int count = this->item_purchases_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_purchases(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 player_slot = 1;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergeFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allied_hero_ids_.MergeFrom(from.allied_hero_ids_);
  enemy_hero_ids_.MergeFrom(from.enemy_hero_ids_);
  item_purchases_.MergeFrom(from.item_purchases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::Swap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* other) {
  allied_hero_ids_.InternalSwap(&other->allied_hero_ids_);
  enemy_hero_ids_.InternalSwap(&other->enemy_hero_ids_);
  item_purchases_.InternalSwap(&other->item_purchases_);
  std::swap(player_slot_, other->player_slot_);
  std::swap(account_id_, other->account_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCMatchPlayerItemPurchaseHistory_Player

// optional uint32 player_slot = 1;
bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.player_slot)
  return player_slot_;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.player_slot)
}

// optional uint32 account_id = 2;
bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.account_id)
  return account_id_;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.account_id)
}

// optional uint32 hero_id = 3;
bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.hero_id)
  return hero_id_;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.hero_id)
}

// repeated uint32 allied_hero_ids = 4;
int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::allied_hero_ids_size() const {
  return allied_hero_ids_.size();
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_allied_hero_ids() {
  allied_hero_ids_.Clear();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::allied_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
  return allied_hero_ids_.Get(index);
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_allied_hero_ids(int index, ::google::protobuf::uint32 value) {
  allied_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::add_allied_hero_ids(::google::protobuf::uint32 value) {
  allied_hero_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::allied_hero_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
  return allied_hero_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::mutable_allied_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
  return &allied_hero_ids_;
}

// repeated uint32 enemy_hero_ids = 5;
int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::enemy_hero_ids_size() const {
  return enemy_hero_ids_.size();
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_enemy_hero_ids() {
  enemy_hero_ids_.Clear();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::enemy_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
  return enemy_hero_ids_.Get(index);
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_enemy_hero_ids(int index, ::google::protobuf::uint32 value) {
  enemy_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::add_enemy_hero_ids(::google::protobuf::uint32 value) {
  enemy_hero_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::enemy_hero_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
  return enemy_hero_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::mutable_enemy_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
  return &enemy_hero_ids_;
}

// repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::item_purchases_size() const {
  return item_purchases_.size();
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_item_purchases() {
  item_purchases_.Clear();
}
const ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::item_purchases(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return item_purchases_.Get(index);
}
::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::mutable_item_purchases(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return item_purchases_.Mutable(index);
}
::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::add_item_purchases() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return item_purchases_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::mutable_item_purchases() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return &item_purchases_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::item_purchases() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return item_purchases_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerToGCMatchPlayerItemPurchaseHistory::kMatchIdFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory::kMmrFieldNumber;
const int CMsgServerToGCMatchPlayerItemPurchaseHistory::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(mmr_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(mmr_));
}

CMsgServerToGCMatchPlayerItemPurchaseHistory::~CMsgServerToGCMatchPlayerItemPurchaseHistory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  SharedDtor();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SharedDtor() {
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerToGCMatchPlayerItemPurchaseHistory::descriptor() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgServerToGCMatchPlayerItemPurchaseHistory& CMsgServerToGCMatchPlayerItemPurchaseHistory::default_instance() {
  protobuf_dota_5fgcmessages_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgServerToGCMatchPlayerItemPurchaseHistory* CMsgServerToGCMatchPlayerItemPurchaseHistory::New(::google::protobuf::Arena* arena) const {
  CMsgServerToGCMatchPlayerItemPurchaseHistory* n = new CMsgServerToGCMatchPlayerItemPurchaseHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  players_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&mmr_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(mmr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mmr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mmr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mmr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  return false;
#undef DO_
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 mmr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mmr(), output);
  }

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
}

::google::protobuf::uint8* CMsgServerToGCMatchPlayerItemPurchaseHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 mmr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mmr(), target);
  }

  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 mmr = 2;
    if (has_mmr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mmr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCMatchPlayerItemPurchaseHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgServerToGCMatchPlayerItemPurchaseHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
    MergeFrom(*source);
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::MergeFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      mmr_ = from.mmr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::Swap(CMsgServerToGCMatchPlayerItemPurchaseHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory* other) {
  players_.InternalSwap(&other->players_);
  std::swap(match_id_, other->match_id_);
  std::swap(mmr_, other->mmr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgServerToGCMatchPlayerItemPurchaseHistory

// optional uint64 match_id = 1;
bool CMsgServerToGCMatchPlayerItemPurchaseHistory::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgServerToGCMatchPlayerItemPurchaseHistory::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.match_id)
  return match_id_;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.match_id)
}

// optional uint32 mmr = 2;
bool CMsgServerToGCMatchPlayerItemPurchaseHistory::has_mmr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::set_has_mmr() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::clear_has_mmr() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::clear_mmr() {
  mmr_ = 0u;
  clear_has_mmr();
}
::google::protobuf::uint32 CMsgServerToGCMatchPlayerItemPurchaseHistory::mmr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.mmr)
  return mmr_;
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::set_mmr(::google::protobuf::uint32 value) {
  set_has_mmr();
  mmr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.mmr)
}

// repeated .proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
int CMsgServerToGCMatchPlayerItemPurchaseHistory::players_size() const {
  return players_.size();
}
void CMsgServerToGCMatchPlayerItemPurchaseHistory::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& CMsgServerToGCMatchPlayerItemPurchaseHistory::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return players_.Get(index);
}
::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* CMsgServerToGCMatchPlayerItemPurchaseHistory::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* CMsgServerToGCMatchPlayerItemPurchaseHistory::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >*
CMsgServerToGCMatchPlayerItemPurchaseHistory::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >&
CMsgServerToGCMatchPlayerItemPurchaseHistory::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
