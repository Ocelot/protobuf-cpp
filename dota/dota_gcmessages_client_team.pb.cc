// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgDOTATeamMemberSDODefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamMemberSDO> {
} _CMsgDOTATeamMemberSDO_default_instance_;
class CMsgDOTATeamAdminSDODefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamAdminSDO> {
} _CMsgDOTATeamAdminSDO_default_instance_;
class CMsgDOTATeamMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamMember> {
} _CMsgDOTATeamMember_default_instance_;
class CMsgDOTATeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeam> {
} _CMsgDOTATeam_default_instance_;
class CMsgDOTATeamInfo_MemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInfo_Member> {
} _CMsgDOTATeamInfo_Member_default_instance_;
class CMsgDOTATeamInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInfo> {
} _CMsgDOTATeamInfo_default_instance_;
class CMsgDOTATeamsInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamsInfo> {
} _CMsgDOTATeamsInfo_default_instance_;
class CMsgDOTAMyTeamInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMyTeamInfoRequest> {
} _CMsgDOTAMyTeamInfoRequest_default_instance_;
class CMsgDOTACreateTeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACreateTeam> {
} _CMsgDOTACreateTeam_default_instance_;
class CMsgDOTACreateTeamResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACreateTeamResponse> {
} _CMsgDOTACreateTeamResponse_default_instance_;
class CMsgDOTAEditTeamDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAEditTeamDetails> {
} _CMsgDOTAEditTeamDetails_default_instance_;
class CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAEditTeamDetailsResponse> {
} _CMsgDOTAEditTeamDetailsResponse_default_instance_;
class CMsgDOTATeamProfileResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamProfileResponse> {
} _CMsgDOTATeamProfileResponse_default_instance_;
class CMsgDOTAProTeamListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProTeamListRequest> {
} _CMsgDOTAProTeamListRequest_default_instance_;
class CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProTeamListResponse_TeamEntry> {
} _CMsgDOTAProTeamListResponse_TeamEntry_default_instance_;
class CMsgDOTAProTeamListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProTeamListResponse> {
} _CMsgDOTAProTeamListResponse_default_instance_;
class CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_InviterToGC> {
} _CMsgDOTATeamInvite_InviterToGC_default_instance_;
class CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_GCImmediateResponseToInviter> {
} _CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_;
class CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_GCRequestToInvitee> {
} _CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_;
class CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_InviteeResponseToGC> {
} _CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_;
class CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_GCResponseToInviter> {
} _CMsgDOTATeamInvite_GCResponseToInviter_default_instance_;
class CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATeamInvite_GCResponseToInvitee> {
} _CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_;
class CMsgDOTAKickTeamMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAKickTeamMember> {
} _CMsgDOTAKickTeamMember_default_instance_;
class CMsgDOTAKickTeamMemberResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAKickTeamMemberResponse> {
} _CMsgDOTAKickTeamMemberResponse_default_instance_;
class CMsgDOTATransferTeamAdminDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATransferTeamAdmin> {
} _CMsgDOTATransferTeamAdmin_default_instance_;
class CMsgDOTATransferTeamAdminResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATransferTeamAdminResponse> {
} _CMsgDOTATransferTeamAdminResponse_default_instance_;
class CMsgDOTAChangeTeamSubDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChangeTeamSub> {
} _CMsgDOTAChangeTeamSub_default_instance_;
class CMsgDOTAChangeTeamSubResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChangeTeamSubResponse> {
} _CMsgDOTAChangeTeamSubResponse_default_instance_;
class CMsgDOTALeaveTeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeaveTeam> {
} _CMsgDOTALeaveTeam_default_instance_;
class CMsgDOTALeaveTeamResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeaveTeamResponse> {
} _CMsgDOTALeaveTeamResponse_default_instance_;
class CMsgDOTABetaParticipationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABetaParticipation> {
} _CMsgDOTABetaParticipation_default_instance_;

namespace protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, team_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, profile_team_id_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamAdminSDO, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamAdminSDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamAdminSDO, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamAdminSDO, team_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMember, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMember, time_joined_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, admin_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, disbanded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, losses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, calibration_games_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, banner_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, sponsor_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, fullgamesplayed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, leagues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, gamesplayed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, gamesplayedwithcurrentroster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, teammatchmakinggamesplayed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, lastplayedgametime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, lastrenametime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, recent_match_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, top_match_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, pickup_team_),
  ~0u,
  4,
  0,
  1,
  5,
  6,
  15,
  7,
  8,
  9,
  22,
  10,
  11,
  12,
  13,
  2,
  3,
  14,
  ~0u,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, time_joined_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, admin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, sub_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, pro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, locked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, pickup_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, ugc_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, ugc_base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, ugc_banner_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, ugc_sponsor_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, losses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, calibration_games_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, games_played_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, games_played_matchmaking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, leagues_participated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, top_match_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, recent_match_ids_),
  ~0u,
  4,
  0,
  1,
  5,
  7,
  8,
  9,
  6,
  11,
  12,
  13,
  2,
  3,
  10,
  14,
  15,
  16,
  17,
  18,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamsInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamsInfo, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamsInfo, teams_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMyTeamInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMyTeamInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, banner_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, sponsor_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, pickup_team_),
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  3,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeamResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeamResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeamResponse, team_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, banner_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, sponsor_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, in_use_by_party_),
  6,
  0,
  1,
  4,
  5,
  8,
  9,
  2,
  3,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetailsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetailsResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamProfileResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamProfileResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamProfileResponse, team_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, member_count_),
  2,
  0,
  3,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse, teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse, eresult_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, team_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, invitee_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, required_badge_level_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, inviter_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, team_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, logo_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviteeResponseToGC, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviteeResponseToGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviteeResponseToGC, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInviter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInviter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInviter, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInviter, invitee_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInvitee, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInvitee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInvitee, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInvitee, team_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMember, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMember, team_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMemberResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMemberResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, new_admin_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, team_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdminResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdminResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdminResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, member_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, sub_account_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSubResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSubResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSubResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeam, team_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeamResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeamResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABetaParticipation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABetaParticipation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABetaParticipation, access_rights_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(CMsgDOTATeamMemberSDO)},
  { 11, 18, sizeof(CMsgDOTATeamAdminSDO)},
  { 20, 27, sizeof(CMsgDOTATeamMember)},
  { 29, 61, sizeof(CMsgDOTATeam)},
  { 88, 97, sizeof(CMsgDOTATeamInfo_Member)},
  { 101, 129, sizeof(CMsgDOTATeamInfo)},
  { 152, 159, sizeof(CMsgDOTATeamsInfo)},
  { 161, 166, sizeof(CMsgDOTAMyTeamInfoRequest)},
  { 166, 180, sizeof(CMsgDOTACreateTeam)},
  { 189, 196, sizeof(CMsgDOTACreateTeamResponse)},
  { 198, 213, sizeof(CMsgDOTAEditTeamDetails)},
  { 223, 229, sizeof(CMsgDOTAEditTeamDetailsResponse)},
  { 230, 237, sizeof(CMsgDOTATeamProfileResponse)},
  { 239, 244, sizeof(CMsgDOTAProTeamListRequest)},
  { 244, 255, sizeof(CMsgDOTAProTeamListResponse_TeamEntry)},
  { 261, 268, sizeof(CMsgDOTAProTeamListResponse)},
  { 270, 277, sizeof(CMsgDOTATeamInvite_InviterToGC)},
  { 279, 287, sizeof(CMsgDOTATeamInvite_GCImmediateResponseToInviter)},
  { 290, 299, sizeof(CMsgDOTATeamInvite_GCRequestToInvitee)},
  { 303, 309, sizeof(CMsgDOTATeamInvite_InviteeResponseToGC)},
  { 310, 317, sizeof(CMsgDOTATeamInvite_GCResponseToInviter)},
  { 319, 326, sizeof(CMsgDOTATeamInvite_GCResponseToInvitee)},
  { 328, 335, sizeof(CMsgDOTAKickTeamMember)},
  { 337, 343, sizeof(CMsgDOTAKickTeamMemberResponse)},
  { 344, 351, sizeof(CMsgDOTATransferTeamAdmin)},
  { 353, 359, sizeof(CMsgDOTATransferTeamAdminResponse)},
  { 360, 368, sizeof(CMsgDOTAChangeTeamSub)},
  { 371, 377, sizeof(CMsgDOTAChangeTeamSubResponse)},
  { 378, 384, sizeof(CMsgDOTALeaveTeam)},
  { 385, 391, sizeof(CMsgDOTALeaveTeamResponse)},
  { 392, 398, sizeof(CMsgDOTABetaParticipation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamMemberSDO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamAdminSDO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamInfo_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMyTeamInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTACreateTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTACreateTeamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAEditTeamDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAEditTeamDetailsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamProfileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProTeamListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProTeamListResponse_TeamEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProTeamListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamInvite_InviterToGC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamInvite_GCResponseToInviter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAKickTeamMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAKickTeamMemberResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATransferTeamAdmin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATransferTeamAdminResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChangeTeamSub_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChangeTeamSubResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTALeaveTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTALeaveTeamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTABetaParticipation_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_client_team.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgDOTATeamMemberSDO_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgDOTATeamAdminSDO_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgDOTATeamMember_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgDOTATeam_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgDOTATeamInfo_Member_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgDOTATeamInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgDOTATeamsInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgDOTAMyTeamInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgDOTACreateTeam_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgDOTACreateTeamResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgDOTAEditTeamDetails_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgDOTAEditTeamDetailsResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgDOTATeamProfileResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgDOTAProTeamListRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgDOTAProTeamListResponse_TeamEntry_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgDOTAProTeamListResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgDOTATeamInvite_InviterToGC_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgDOTATeamInvite_GCResponseToInviter_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgDOTAKickTeamMember_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgDOTAKickTeamMemberResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgDOTATransferTeamAdmin_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgDOTATransferTeamAdminResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgDOTAChangeTeamSub_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgDOTAChangeTeamSubResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgDOTALeaveTeam_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgDOTALeaveTeamResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgDOTABetaParticipation_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CMsgDOTATeamMemberSDO_default_instance_.DefaultConstruct();
  _CMsgDOTATeamAdminSDO_default_instance_.DefaultConstruct();
  _CMsgDOTATeamMember_default_instance_.DefaultConstruct();
  _CMsgDOTATeam_default_instance_.DefaultConstruct();
  _CMsgDOTATeamInfo_Member_default_instance_.DefaultConstruct();
  _CMsgDOTATeamInfo_default_instance_.DefaultConstruct();
  _CMsgDOTATeamsInfo_default_instance_.DefaultConstruct();
  _CMsgDOTAMyTeamInfoRequest_default_instance_.DefaultConstruct();
  _CMsgDOTACreateTeam_default_instance_.DefaultConstruct();
  _CMsgDOTACreateTeamResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAEditTeamDetails_default_instance_.DefaultConstruct();
  _CMsgDOTAEditTeamDetailsResponse_default_instance_.DefaultConstruct();
  _CMsgDOTATeamProfileResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAProTeamListRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAProTeamListResponse_TeamEntry_default_instance_.DefaultConstruct();
  _CMsgDOTAProTeamListResponse_default_instance_.DefaultConstruct();
  _CMsgDOTATeamInvite_InviterToGC_default_instance_.DefaultConstruct();
  _CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_.DefaultConstruct();
  _CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_.DefaultConstruct();
  _CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_.DefaultConstruct();
  _CMsgDOTATeamInvite_GCResponseToInviter_default_instance_.DefaultConstruct();
  _CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_.DefaultConstruct();
  _CMsgDOTAKickTeamMember_default_instance_.DefaultConstruct();
  _CMsgDOTAKickTeamMemberResponse_default_instance_.DefaultConstruct();
  _CMsgDOTATransferTeamAdmin_default_instance_.DefaultConstruct();
  _CMsgDOTATransferTeamAdminResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAChangeTeamSub_default_instance_.DefaultConstruct();
  _CMsgDOTAChangeTeamSubResponse_default_instance_.DefaultConstruct();
  _CMsgDOTALeaveTeam_default_instance_.DefaultConstruct();
  _CMsgDOTALeaveTeamResponse_default_instance_.DefaultConstruct();
  _CMsgDOTABetaParticipation_default_instance_.DefaultConstruct();
  _CMsgDOTATeamProfileResponse_default_instance_.get_mutable()->team_ = const_cast< ::proto::dota::CMsgDOTATeam*>(
      ::proto::dota::CMsgDOTATeam::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n!dota_gcmessages_client_team.proto\022\npro"
      "to.dota\"V\n\025CMsgDOTATeamMemberSDO\022\022\n\nacco"
      "unt_id\030\001 \001(\r\022\020\n\010team_ids\030\002 \003(\r\022\027\n\017profil"
      "e_team_id\030\003 \001(\r\"<\n\024CMsgDOTATeamAdminSDO\022"
      "\022\n\naccount_id\030\001 \001(\r\022\020\n\010team_ids\030\002 \003(\r\"=\n"
      "\022CMsgDOTATeamMember\022\022\n\naccount_id\030\001 \001(\r\022"
      "\023\n\013time_joined\030\004 \001(\r\"\351\004\n\014CMsgDOTATeam\022/\n"
      "\007members\030\001 \003(\0132\036.proto.dota.CMsgDOTATeam"
      "Member\022\017\n\007team_id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\013\n"
      "\003tag\030\004 \001(\t\022\020\n\010admin_id\030\005 \001(\r\022\024\n\014time_cre"
      "ated\030\006 \001(\r\022\021\n\tdisbanded\030\007 \001(\010\022\014\n\004wins\030\010 "
      "\001(\r\022\016\n\006losses\030\t \001(\r\022\014\n\004rank\030\n \001(\r\022#\n\033cal"
      "ibration_games_remaining\030\030 \001(\r\022\014\n\004logo\030\013"
      " \001(\004\022\021\n\tbase_logo\030\014 \001(\004\022\023\n\013banner_logo\030\r"
      " \001(\004\022\024\n\014sponsor_logo\030\016 \001(\004\022\024\n\014country_co"
      "de\030\017 \001(\t\022\013\n\003url\030\020 \001(\t\022\027\n\017fullgamesplayed"
      "\030\021 \001(\r\022\017\n\007leagues\030\022 \003(\r\022\023\n\013gamesplayed\030\023"
      " \001(\r\022$\n\034gamesplayedwithcurrentroster\030\024 \001"
      "(\r\022\"\n\032teammatchmakinggamesplayed\030\025 \001(\r\022\032"
      "\n\022lastplayedgametime\030\026 \001(\r\022\026\n\016lastrename"
      "time\030\027 \001(\r\022\030\n\020recent_match_ids\030\031 \003(\004\022\025\n\r"
      "top_match_ids\030\032 \003(\004\022\023\n\013pickup_team\030\033 \001(\010"
      "\"\350\004\n\020CMsgDOTATeamInfo\0224\n\007members\030\001 \003(\0132#"
      ".proto.dota.CMsgDOTATeamInfo.Member\022\017\n\007t"
      "eam_id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\013\n\003tag\030\004 \001(\t\022"
      "\024\n\014time_created\030\005 \001(\r\022\013\n\003pro\030\006 \001(\010\022\016\n\006lo"
      "cked\030\007 \001(\010\022\023\n\013pickup_team\030\010 \001(\010\022\020\n\010ugc_l"
      "ogo\030\t \001(\004\022\025\n\rugc_base_logo\030\n \001(\004\022\027\n\017ugc_"
      "banner_logo\030\013 \001(\004\022\030\n\020ugc_sponsor_logo\030\014 "
      "\001(\004\022\024\n\014country_code\030\r \001(\t\022\013\n\003url\030\016 \001(\t\022\014"
      "\n\004wins\030\017 \001(\r\022\016\n\006losses\030\020 \001(\r\022\014\n\004rank\030\021 \001"
      "(\r\022#\n\033calibration_games_remaining\030\022 \001(\r\022"
      "\032\n\022games_played_total\030\023 \001(\r\022 \n\030games_pla"
      "yed_matchmaking\030\024 \001(\r\022\034\n\024leagues_partici"
      "pated\030\025 \003(\r\022\025\n\rtop_match_ids\030\026 \003(\004\022\030\n\020re"
      "cent_match_ids\030\027 \003(\004\032M\n\006Member\022\022\n\naccoun"
      "t_id\030\001 \001(\r\022\023\n\013time_joined\030\002 \001(\r\022\r\n\005admin"
      "\030\003 \001(\010\022\013\n\003sub\030\004 \001(\010\"S\n\021CMsgDOTATeamsInfo"
      "\022\021\n\tleague_id\030\001 \001(\r\022+\n\005teams\030\002 \003(\0132\034.pro"
      "to.dota.CMsgDOTATeamInfo\"\033\n\031CMsgDOTAMyTe"
      "amInfoRequest\"\263\001\n\022CMsgDOTACreateTeam\022\014\n\004"
      "name\030\001 \001(\t\022\013\n\003tag\030\002 \001(\t\022\014\n\004logo\030\003 \001(\004\022\021\n"
      "\tbase_logo\030\004 \001(\004\022\023\n\013banner_logo\030\005 \001(\004\022\024\n"
      "\014sponsor_logo\030\006 \001(\004\022\024\n\014country_code\030\007 \001("
      "\t\022\013\n\003url\030\010 \001(\t\022\023\n\013pickup_team\030\t \001(\010\"\242\004\n\032"
      "CMsgDOTACreateTeamResponse\022F\n\006result\030\001 \001"
      "(\0162-.proto.dota.CMsgDOTACreateTeamRespon"
      "se.Result:\007INVALID\022\017\n\007team_id\030\002 \001(\r\"\252\003\n\006"
      "Result\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007SUCCESS\020"
      "\000\022\016\n\nNAME_EMPTY\020\001\022\027\n\023NAME_BAD_CHARACTERS"
      "\020\002\022\016\n\nNAME_TAKEN\020\003\022\021\n\rNAME_TOO_LONG\020\004\022\r\n"
      "\tTAG_EMPTY\020\005\022\026\n\022TAG_BAD_CHARACTERS\020\006\022\r\n\t"
      "TAG_TAKEN\020\007\022\020\n\014TAG_TOO_LONG\020\010\022\020\n\014CREATOR"
      "_BUSY\020\t\022\025\n\021UNSPECIFIED_ERROR\020\n\022\036\n\032CREATO"
      "R_TEAM_LIMIT_REACHED\020\013\022\013\n\007NO_LOGO\020\014\022\"\n\036C"
      "REATOR_TEAM_CREATION_COOLDOWN\020\r\022\026\n\022LOGO_"
      "UPLOAD_FAILED\020\016\022\035\n\031NAME_CHANGED_TOO_RECE"
      "NTLY\020\017\022\036\n\032CREATOR_INSUFFICIENT_LEVEL\020\020\022\030"
      "\n\024INVALID_ACCOUNT_TYPE\020\021\"\315\001\n\027CMsgDOTAEdi"
      "tTeamDetails\022\017\n\007team_id\030\001 \001(\r\022\014\n\004name\030\002 "
      "\001(\t\022\013\n\003tag\030\003 \001(\t\022\014\n\004logo\030\004 \001(\004\022\021\n\tbase_l"
      "ogo\030\005 \001(\004\022\023\n\013banner_logo\030\006 \001(\004\022\024\n\014sponso"
      "r_logo\030\007 \001(\004\022\024\n\014country_code\030\010 \001(\t\022\013\n\003ur"
      "l\030\t \001(\t\022\027\n\017in_use_by_party\030\n \001(\010\"\370\001\n\037CMs"
      "gDOTAEditTeamDetailsResponse\022K\n\006result\030\001"
      " \001(\01622.proto.dota.CMsgDOTAEditTeamDetail"
      "sResponse.Result:\007SUCCESS\"\207\001\n\006Result\022\013\n\007"
      "SUCCESS\020\000\022 \n\034FAILURE_INVALID_ACCOUNT_TYP"
      "E\020\001\022\026\n\022FAILURE_NOT_MEMBER\020\002\022\027\n\023FAILURE_T"
      "EAM_LOCKED\020\003\022\035\n\031FAILURE_UNSPECIFIED_ERRO"
      "R\020\004\"V\n\033CMsgDOTATeamProfileResponse\022\017\n\007er"
      "esult\030\001 \001(\r\022&\n\004team\030\002 \001(\0132\030.proto.dota.C"
      "MsgDOTATeam\"\034\n\032CMsgDOTAProTeamListReques"
      "t\"\353\001\n\033CMsgDOTAProTeamListResponse\022@\n\005tea"
      "ms\030\001 \003(\01321.proto.dota.CMsgDOTAProTeamLis"
      "tResponse.TeamEntry\022\017\n\007eresult\030\002 \001(\r\032y\n\t"
      "TeamEntry\022\017\n\007team_id\030\001 \001(\r\022\013\n\003tag\030\002 \001(\t\022"
      "\024\n\014time_created\030\003 \001(\r\022\014\n\004logo\030\004 \001(\004\022\024\n\014c"
      "ountry_code\030\005 \001(\t\022\024\n\014member_count\030\006 \001(\r\""
      "E\n\036CMsgDOTATeamInvite_InviterToGC\022\022\n\nacc"
      "ount_id\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\"\251\001\n/CMsgD"
      "OTATeamInvite_GCImmediateResponseToInvit"
      "er\022B\n\006result\030\001 \001(\0162\035.proto.dota.ETeamInv"
      "iteResult:\023TEAM_INVITE_SUCCESS\022\024\n\014invite"
      "e_name\030\002 \001(\t\022\034\n\024required_badge_level\030\003 \001"
      "(\r\"v\n%CMsgDOTATeamInvite_GCRequestToInvi"
      "tee\022\032\n\022inviter_account_id\030\001 \001(\r\022\021\n\tteam_"
      "name\030\002 \001(\t\022\020\n\010team_tag\030\003 \001(\t\022\014\n\004logo\030\004 \001"
      "(\004\"l\n&CMsgDOTATeamInvite_InviteeResponse"
      "ToGC\022B\n\006result\030\001 \001(\0162\035.proto.dota.ETeamI"
      "nviteResult:\023TEAM_INVITE_SUCCESS\"\202\001\n&CMs"
      "gDOTATeamInvite_GCResponseToInviter\022B\n\006r"
      "esult\030\001 \001(\0162\035.proto.dota.ETeamInviteResu"
      "lt:\023TEAM_INVITE_SUCCESS\022\024\n\014invitee_name\030"
      "\002 \001(\t\"\177\n&CMsgDOTATeamInvite_GCResponseTo"
      "Invitee\022B\n\006result\030\001 \001(\0162\035.proto.dota.ETe"
      "amInviteResult:\023TEAM_INVITE_SUCCESS\022\021\n\tt"
      "eam_name\030\002 \001(\t\"=\n\026CMsgDOTAKickTeamMember"
      "\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\"\233\002"
      "\n\036CMsgDOTAKickTeamMemberResponse\022J\n\006resu"
      "lt\030\001 \001(\01621.proto.dota.CMsgDOTAKickTeamMe"
      "mberResponse.Result:\007SUCCESS\"\254\001\n\006Result\022"
      "\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVALID_ACCOUNT_"
      "TYPE\020\001\022\034\n\030FAILURE_KICKER_NOT_ADMIN\020\002\022\035\n\031"
      "FAILURE_KICKEE_NOT_MEMBER\020\003\022\027\n\023FAILURE_T"
      "EAM_LOCKED\020\004\022\035\n\031FAILURE_UNSPECIFIED_ERRO"
      "R\020\005\"J\n\031CMsgDOTATransferTeamAdmin\022\034\n\024new_"
      "admin_account_id\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\""
      "\224\002\n!CMsgDOTATransferTeamAdminResponse\022M\n"
      "\006result\030\001 \001(\01624.proto.dota.CMsgDOTATrans"
      "ferTeamAdminResponse.Result:\007SUCCESS\"\237\001\n"
      "\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVALID_"
      "ACCOUNT_TYPE\020\001\022\025\n\021FAILURE_NOT_ADMIN\020\002\022\030\n"
      "\024FAILURE_SAME_ACCOUNT\020\003\022\026\n\022FAILURE_NOT_M"
      "EMBER\020\004\022\035\n\031FAILURE_UNSPECIFIED_ERROR\020\005\"["
      "\n\025CMsgDOTAChangeTeamSub\022\017\n\007team_id\030\001 \001(\r"
      "\022\031\n\021member_account_id\030\002 \001(\r\022\026\n\016sub_accou"
      "nt_id\030\003 \001(\r\"\272\002\n\035CMsgDOTAChangeTeamSubRes"
      "ponse\022I\n\006result\030\001 \001(\01620.proto.dota.CMsgD"
      "OTAChangeTeamSubResponse.Result:\007SUCCESS"
      "\"\315\001\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVA"
      "LID_ACCOUNT_TYPE\020\001\022\030\n\024FAILURE_SAME_ACCOU"
      "NT\020\002\022\025\n\021FAILURE_NOT_ADMIN\020\003\022\026\n\022FAILURE_N"
      "OT_MEMBER\020\004\022\023\n\017FAILURE_NOT_SUB\020\005\022\027\n\023FAIL"
      "URE_ALREADY_SUB\020\006\022\035\n\031FAILURE_UNSPECIFIED"
      "_ERROR\020\007\"$\n\021CMsgDOTALeaveTeam\022\017\n\007team_id"
      "\030\001 \001(\r\"\311\001\n\031CMsgDOTALeaveTeamResponse\022E\n\006"
      "result\030\001 \001(\0162,.proto.dota.CMsgDOTALeaveT"
      "eamResponse.Result:\007SUCCESS\"e\n\006Result\022\013\n"
      "\007SUCCESS\020\000\022\026\n\022FAILURE_NOT_MEMBER\020\001\022\027\n\023FA"
      "ILURE_TEAM_LOCKED\020\002\022\035\n\031FAILURE_UNSPECIFI"
      "ED_ERROR\020\003\"2\n\031CMsgDOTABetaParticipation\022"
      "\025\n\raccess_rights\030\001 \001(\r*\332\004\n\021ETeamInviteRe"
      "sult\022\027\n\023TEAM_INVITE_SUCCESS\020\000\022\'\n#TEAM_IN"
      "VITE_FAILURE_INVITE_REJECTED\020\001\022&\n\"TEAM_I"
      "NVITE_FAILURE_INVITE_TIMEOUT\020\002\022*\n&TEAM_I"
      "NVITE_ERROR_TEAM_AT_MEMBER_LIMIT\020\003\022!\n\035TE"
      "AM_INVITE_ERROR_TEAM_LOCKED\020\004\022+\n\'TEAM_IN"
      "VITE_ERROR_INVITEE_NOT_AVAILABLE\020\005\022\"\n\036TE"
      "AM_INVITE_ERROR_INVITEE_BUSY\020\006\022,\n(TEAM_I"
      "NVITE_ERROR_INVITEE_ALREADY_MEMBER\020\007\022+\n\'"
      "TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT\020"
      "\010\0220\n,TEAM_INVITE_ERROR_INVITEE_INSUFFICI"
      "ENT_LEVEL\020\t\0222\n.TEAM_INVITE_ERROR_INVITER"
      "_INVALID_ACCOUNT_TYPE\020\n\022\'\n#TEAM_INVITE_E"
      "RROR_INVITER_NOT_ADMIN\020\013\022.\n*TEAM_INVITE_"
      "ERROR_INCORRECT_USER_RESPONDED\020\014\022!\n\035TEAM"
      "_INVITE_ERROR_UNSPECIFIED\020\rB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_team.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto

const ::google::protobuf::EnumDescriptor* CMsgDOTACreateTeamResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_enum_descriptors[0];
}
bool CMsgDOTACreateTeamResponse_Result_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::SUCCESS;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_EMPTY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_BAD_CHARACTERS;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TAKEN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TOO_LONG;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_EMPTY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_BAD_CHARACTERS;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TAKEN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TOO_LONG;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_BUSY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::UNSPECIFIED_ERROR;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_LIMIT_REACHED;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NO_LOGO;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_CREATION_COOLDOWN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::LOGO_UPLOAD_FAILED;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_CHANGED_TOO_RECENTLY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_INSUFFICIENT_LEVEL;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID_ACCOUNT_TYPE;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MIN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MAX;
const int CMsgDOTACreateTeamResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAEditTeamDetailsResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_enum_descriptors[1];
}
bool CMsgDOTAEditTeamDetailsResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::SUCCESS;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_NOT_MEMBER;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_TEAM_LOCKED;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MIN;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MAX;
const int CMsgDOTAEditTeamDetailsResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAKickTeamMemberResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_enum_descriptors[2];
}
bool CMsgDOTAKickTeamMemberResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::SUCCESS;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKER_NOT_ADMIN;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKEE_NOT_MEMBER;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_TEAM_LOCKED;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MIN;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MAX;
const int CMsgDOTAKickTeamMemberResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTATransferTeamAdminResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_enum_descriptors[3];
}
bool CMsgDOTATransferTeamAdminResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::SUCCESS;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_ADMIN;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_SAME_ACCOUNT;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_MEMBER;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MIN;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MAX;
const int CMsgDOTATransferTeamAdminResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAChangeTeamSubResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_enum_descriptors[4];
}
bool CMsgDOTAChangeTeamSubResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::SUCCESS;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_SAME_ACCOUNT;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_NOT_ADMIN;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_NOT_MEMBER;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_NOT_SUB;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_ALREADY_SUB;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::Result_MIN;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::Result_MAX;
const int CMsgDOTAChangeTeamSubResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTALeaveTeamResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_enum_descriptors[5];
}
bool CMsgDOTALeaveTeamResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::SUCCESS;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_NOT_MEMBER;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_TEAM_LOCKED;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MIN;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MAX;
const int CMsgDOTALeaveTeamResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ETeamInviteResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_enum_descriptors[6];
}
bool ETeamInviteResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamMemberSDO::kAccountIdFieldNumber;
const int CMsgDOTATeamMemberSDO::kTeamIdsFieldNumber;
const int CMsgDOTATeamMemberSDO::kProfileTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamMemberSDO::CMsgDOTATeamMemberSDO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamMemberSDO)
}
CMsgDOTATeamMemberSDO::CMsgDOTATeamMemberSDO(const CMsgDOTATeamMemberSDO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      team_ids_(from.team_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&profile_team_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(profile_team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamMemberSDO)
}

void CMsgDOTATeamMemberSDO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&profile_team_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(profile_team_id_));
}

CMsgDOTATeamMemberSDO::~CMsgDOTATeamMemberSDO() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamMemberSDO)
  SharedDtor();
}

void CMsgDOTATeamMemberSDO::SharedDtor() {
}

void CMsgDOTATeamMemberSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamMemberSDO::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamMemberSDO& CMsgDOTATeamMemberSDO::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamMemberSDO* CMsgDOTATeamMemberSDO::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamMemberSDO* n = new CMsgDOTATeamMemberSDO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamMemberSDO::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamMemberSDO)
  team_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&profile_team_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(profile_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamMemberSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamMemberSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_team_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 profile_team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_profile_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profile_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamMemberSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamMemberSDO)
  return false;
#undef DO_
}

void CMsgDOTATeamMemberSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamMemberSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0, n = this->team_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->team_ids(i), output);
  }

  // optional uint32 profile_team_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->profile_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamMemberSDO)
}

::google::protobuf::uint8* CMsgDOTATeamMemberSDO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamMemberSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 team_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->team_ids_, target);

  // optional uint32 profile_team_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->profile_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamMemberSDO)
  return target;
}

size_t CMsgDOTATeamMemberSDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamMemberSDO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 team_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->team_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 profile_team_id = 3;
    if (has_profile_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profile_team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamMemberSDO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamMemberSDO)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamMemberSDO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamMemberSDO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamMemberSDO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamMemberSDO)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamMemberSDO::MergeFrom(const CMsgDOTATeamMemberSDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamMemberSDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      profile_team_id_ = from.profile_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamMemberSDO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamMemberSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamMemberSDO::CopyFrom(const CMsgDOTATeamMemberSDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamMemberSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamMemberSDO::IsInitialized() const {
  return true;
}

void CMsgDOTATeamMemberSDO::Swap(CMsgDOTATeamMemberSDO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamMemberSDO::InternalSwap(CMsgDOTATeamMemberSDO* other) {
  team_ids_.InternalSwap(&other->team_ids_);
  std::swap(account_id_, other->account_id_);
  std::swap(profile_team_id_, other->profile_team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamMemberSDO::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamMemberSDO

// optional uint32 account_id = 1;
bool CMsgDOTATeamMemberSDO::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamMemberSDO::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamMemberSDO::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamMemberSDO::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTATeamMemberSDO::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMemberSDO.account_id)
  return account_id_;
}
void CMsgDOTATeamMemberSDO::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMemberSDO.account_id)
}

// repeated uint32 team_ids = 2;
int CMsgDOTATeamMemberSDO::team_ids_size() const {
  return team_ids_.size();
}
void CMsgDOTATeamMemberSDO::clear_team_ids() {
  team_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTATeamMemberSDO::team_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
  return team_ids_.Get(index);
}
void CMsgDOTATeamMemberSDO::set_team_ids(int index, ::google::protobuf::uint32 value) {
  team_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
}
void CMsgDOTATeamMemberSDO::add_team_ids(::google::protobuf::uint32 value) {
  team_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeamMemberSDO::team_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
  return team_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeamMemberSDO::mutable_team_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
  return &team_ids_;
}

// optional uint32 profile_team_id = 3;
bool CMsgDOTATeamMemberSDO::has_profile_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamMemberSDO::set_has_profile_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamMemberSDO::clear_has_profile_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamMemberSDO::clear_profile_team_id() {
  profile_team_id_ = 0u;
  clear_has_profile_team_id();
}
::google::protobuf::uint32 CMsgDOTATeamMemberSDO::profile_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMemberSDO.profile_team_id)
  return profile_team_id_;
}
void CMsgDOTATeamMemberSDO::set_profile_team_id(::google::protobuf::uint32 value) {
  set_has_profile_team_id();
  profile_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMemberSDO.profile_team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamAdminSDO::kAccountIdFieldNumber;
const int CMsgDOTATeamAdminSDO::kTeamIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamAdminSDO::CMsgDOTATeamAdminSDO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamAdminSDO)
}
CMsgDOTATeamAdminSDO::CMsgDOTATeamAdminSDO(const CMsgDOTATeamAdminSDO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      team_ids_(from.team_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamAdminSDO)
}

void CMsgDOTATeamAdminSDO::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgDOTATeamAdminSDO::~CMsgDOTATeamAdminSDO() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamAdminSDO)
  SharedDtor();
}

void CMsgDOTATeamAdminSDO::SharedDtor() {
}

void CMsgDOTATeamAdminSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamAdminSDO::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamAdminSDO& CMsgDOTATeamAdminSDO::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamAdminSDO* CMsgDOTATeamAdminSDO::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamAdminSDO* n = new CMsgDOTATeamAdminSDO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamAdminSDO::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamAdminSDO)
  team_ids_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamAdminSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamAdminSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_team_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamAdminSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamAdminSDO)
  return false;
#undef DO_
}

void CMsgDOTATeamAdminSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamAdminSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0, n = this->team_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->team_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamAdminSDO)
}

::google::protobuf::uint8* CMsgDOTATeamAdminSDO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamAdminSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 team_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->team_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamAdminSDO)
  return target;
}

size_t CMsgDOTATeamAdminSDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamAdminSDO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 team_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->team_ids_size());
    total_size += data_size;
  }

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamAdminSDO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamAdminSDO)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamAdminSDO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamAdminSDO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamAdminSDO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamAdminSDO)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamAdminSDO::MergeFrom(const CMsgDOTATeamAdminSDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamAdminSDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgDOTATeamAdminSDO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamAdminSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamAdminSDO::CopyFrom(const CMsgDOTATeamAdminSDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamAdminSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamAdminSDO::IsInitialized() const {
  return true;
}

void CMsgDOTATeamAdminSDO::Swap(CMsgDOTATeamAdminSDO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamAdminSDO::InternalSwap(CMsgDOTATeamAdminSDO* other) {
  team_ids_.InternalSwap(&other->team_ids_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamAdminSDO::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamAdminSDO

// optional uint32 account_id = 1;
bool CMsgDOTATeamAdminSDO::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamAdminSDO::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamAdminSDO::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamAdminSDO::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTATeamAdminSDO::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamAdminSDO.account_id)
  return account_id_;
}
void CMsgDOTATeamAdminSDO::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamAdminSDO.account_id)
}

// repeated uint32 team_ids = 2;
int CMsgDOTATeamAdminSDO::team_ids_size() const {
  return team_ids_.size();
}
void CMsgDOTATeamAdminSDO::clear_team_ids() {
  team_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTATeamAdminSDO::team_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
  return team_ids_.Get(index);
}
void CMsgDOTATeamAdminSDO::set_team_ids(int index, ::google::protobuf::uint32 value) {
  team_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
}
void CMsgDOTATeamAdminSDO::add_team_ids(::google::protobuf::uint32 value) {
  team_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeamAdminSDO::team_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
  return team_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeamAdminSDO::mutable_team_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
  return &team_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamMember::kAccountIdFieldNumber;
const int CMsgDOTATeamMember::kTimeJoinedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamMember::CMsgDOTATeamMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamMember)
}
CMsgDOTATeamMember::CMsgDOTATeamMember(const CMsgDOTATeamMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&time_joined_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(time_joined_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamMember)
}

void CMsgDOTATeamMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&time_joined_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(time_joined_));
}

CMsgDOTATeamMember::~CMsgDOTATeamMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamMember)
  SharedDtor();
}

void CMsgDOTATeamMember::SharedDtor() {
}

void CMsgDOTATeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamMember::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamMember& CMsgDOTATeamMember::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamMember* CMsgDOTATeamMember::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamMember* n = new CMsgDOTATeamMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamMember)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&time_joined_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(time_joined_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_joined = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time_joined();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamMember)
  return false;
#undef DO_
}

void CMsgDOTATeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_joined = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_joined(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamMember)
}

::google::protobuf::uint8* CMsgDOTATeamMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_joined = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_joined(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamMember)
  return target;
}

size_t CMsgDOTATeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_joined = 4;
    if (has_time_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamMember)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamMember::MergeFrom(const CMsgDOTATeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamMember::CopyFrom(const CMsgDOTATeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamMember::IsInitialized() const {
  return true;
}

void CMsgDOTATeamMember::Swap(CMsgDOTATeamMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamMember::InternalSwap(CMsgDOTATeamMember* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(time_joined_, other->time_joined_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamMember::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamMember

// optional uint32 account_id = 1;
bool CMsgDOTATeamMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTATeamMember::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMember.account_id)
  return account_id_;
}
void CMsgDOTATeamMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMember.account_id)
}

// optional uint32 time_joined = 4;
bool CMsgDOTATeamMember::has_time_joined() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamMember::set_has_time_joined() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamMember::clear_has_time_joined() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamMember::clear_time_joined() {
  time_joined_ = 0u;
  clear_has_time_joined();
}
::google::protobuf::uint32 CMsgDOTATeamMember::time_joined() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMember.time_joined)
  return time_joined_;
}
void CMsgDOTATeamMember::set_time_joined(::google::protobuf::uint32 value) {
  set_has_time_joined();
  time_joined_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMember.time_joined)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeam::kMembersFieldNumber;
const int CMsgDOTATeam::kTeamIdFieldNumber;
const int CMsgDOTATeam::kNameFieldNumber;
const int CMsgDOTATeam::kTagFieldNumber;
const int CMsgDOTATeam::kAdminIdFieldNumber;
const int CMsgDOTATeam::kTimeCreatedFieldNumber;
const int CMsgDOTATeam::kDisbandedFieldNumber;
const int CMsgDOTATeam::kWinsFieldNumber;
const int CMsgDOTATeam::kLossesFieldNumber;
const int CMsgDOTATeam::kRankFieldNumber;
const int CMsgDOTATeam::kCalibrationGamesRemainingFieldNumber;
const int CMsgDOTATeam::kLogoFieldNumber;
const int CMsgDOTATeam::kBaseLogoFieldNumber;
const int CMsgDOTATeam::kBannerLogoFieldNumber;
const int CMsgDOTATeam::kSponsorLogoFieldNumber;
const int CMsgDOTATeam::kCountryCodeFieldNumber;
const int CMsgDOTATeam::kUrlFieldNumber;
const int CMsgDOTATeam::kFullgamesplayedFieldNumber;
const int CMsgDOTATeam::kLeaguesFieldNumber;
const int CMsgDOTATeam::kGamesplayedFieldNumber;
const int CMsgDOTATeam::kGamesplayedwithcurrentrosterFieldNumber;
const int CMsgDOTATeam::kTeammatchmakinggamesplayedFieldNumber;
const int CMsgDOTATeam::kLastplayedgametimeFieldNumber;
const int CMsgDOTATeam::kLastrenametimeFieldNumber;
const int CMsgDOTATeam::kRecentMatchIdsFieldNumber;
const int CMsgDOTATeam::kTopMatchIdsFieldNumber;
const int CMsgDOTATeam::kPickupTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeam::CMsgDOTATeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeam)
}
CMsgDOTATeam::CMsgDOTATeam(const CMsgDOTATeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_),
      leagues_(from.leagues_),
      recent_match_ids_(from.recent_match_ids_),
      top_match_ids_(from.top_match_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    reinterpret_cast<char*>(&calibration_games_remaining_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(calibration_games_remaining_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeam)
}

void CMsgDOTATeam::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, reinterpret_cast<char*>(&calibration_games_remaining_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(calibration_games_remaining_));
}

CMsgDOTATeam::~CMsgDOTATeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeam)
  SharedDtor();
}

void CMsgDOTATeam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeam::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeam& CMsgDOTATeam::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeam* CMsgDOTATeam::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeam* n = new CMsgDOTATeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeam)
  members_.Clear();
  leagues_.Clear();
  recent_match_ids_.Clear();
  top_match_ids_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag()) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&team_id_, 0, reinterpret_cast<char*>(&wins_) -
      reinterpret_cast<char*>(&team_id_) + sizeof(wins_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&losses_, 0, reinterpret_cast<char*>(&disbanded_) -
      reinterpret_cast<char*>(&losses_) + sizeof(disbanded_));
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ::memset(&pickup_team_, 0, reinterpret_cast<char*>(&calibration_games_remaining_) -
      reinterpret_cast<char*>(&pickup_team_) + sizeof(calibration_games_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTATeamMember members = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeam.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeam.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 admin_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_admin_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disbanded = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_disbanded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disbanded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_losses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_logo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 banner_logo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_banner_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sponsor_logo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_sponsor_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsor_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeam.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeam.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fullgamesplayed = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_fullgamesplayed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fullgamesplayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 leagues = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144u, input, this->mutable_leagues())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(146u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_leagues())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gamesplayed = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_gamesplayed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamesplayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gamesplayedwithcurrentroster = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_gamesplayedwithcurrentroster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamesplayedwithcurrentroster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teammatchmakinggamesplayed = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_teammatchmakinggamesplayed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammatchmakinggamesplayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lastplayedgametime = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_lastplayedgametime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastplayedgametime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lastrenametime = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_lastrenametime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrenametime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 calibration_games_remaining = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_calibration_games_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 recent_match_ids = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 200u, input, this->mutable_recent_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(202u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_recent_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 top_match_ids = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 208u, input, this->mutable_top_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(210u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_top_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pickup_team = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_pickup_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeam)
  return false;
#undef DO_
}

void CMsgDOTATeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamMember members = 1;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  // optional uint32 admin_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->admin_id(), output);
  }

  // optional uint32 time_created = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_created(), output);
  }

  // optional bool disbanded = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disbanded(), output);
  }

  // optional uint32 wins = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->wins(), output);
  }

  // optional uint32 losses = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->losses(), output);
  }

  // optional uint32 rank = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rank(), output);
  }

  // optional uint64 logo = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->logo(), output);
  }

  // optional uint64 base_logo = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->banner_logo(), output);
  }

  // optional uint64 sponsor_logo = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->sponsor_logo(), output);
  }

  // optional string country_code = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->country_code(), output);
  }

  // optional string url = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->url(), output);
  }

  // optional uint32 fullgamesplayed = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fullgamesplayed(), output);
  }

  // repeated uint32 leagues = 18;
  for (int i = 0, n = this->leagues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->leagues(i), output);
  }

  // optional uint32 gamesplayed = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->gamesplayed(), output);
  }

  // optional uint32 gamesplayedwithcurrentroster = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->gamesplayedwithcurrentroster(), output);
  }

  // optional uint32 teammatchmakinggamesplayed = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->teammatchmakinggamesplayed(), output);
  }

  // optional uint32 lastplayedgametime = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->lastplayedgametime(), output);
  }

  // optional uint32 lastrenametime = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->lastrenametime(), output);
  }

  // optional uint32 calibration_games_remaining = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->calibration_games_remaining(), output);
  }

  // repeated uint64 recent_match_ids = 25;
  for (int i = 0, n = this->recent_match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      25, this->recent_match_ids(i), output);
  }

  // repeated uint64 top_match_ids = 26;
  for (int i = 0, n = this->top_match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      26, this->top_match_ids(i), output);
  }

  // optional bool pickup_team = 27;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->pickup_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeam)
}

::google::protobuf::uint8* CMsgDOTATeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamMember members = 1;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->members(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  // optional uint32 admin_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->admin_id(), target);
  }

  // optional uint32 time_created = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_created(), target);
  }

  // optional bool disbanded = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disbanded(), target);
  }

  // optional uint32 wins = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->wins(), target);
  }

  // optional uint32 losses = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->losses(), target);
  }

  // optional uint32 rank = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rank(), target);
  }

  // optional uint64 logo = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->logo(), target);
  }

  // optional uint64 base_logo = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->sponsor_logo(), target);
  }

  // optional string country_code = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->country_code(), target);
  }

  // optional string url = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeam.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->url(), target);
  }

  // optional uint32 fullgamesplayed = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fullgamesplayed(), target);
  }

  // repeated uint32 leagues = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(18, this->leagues_, target);

  // optional uint32 gamesplayed = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->gamesplayed(), target);
  }

  // optional uint32 gamesplayedwithcurrentroster = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->gamesplayedwithcurrentroster(), target);
  }

  // optional uint32 teammatchmakinggamesplayed = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->teammatchmakinggamesplayed(), target);
  }

  // optional uint32 lastplayedgametime = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->lastplayedgametime(), target);
  }

  // optional uint32 lastrenametime = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->lastrenametime(), target);
  }

  // optional uint32 calibration_games_remaining = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->calibration_games_remaining(), target);
  }

  // repeated uint64 recent_match_ids = 25;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(25, this->recent_match_ids_, target);

  // repeated uint64 top_match_ids = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(26, this->top_match_ids_, target);

  // optional bool pickup_team = 27;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->pickup_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeam)
  return target;
}

size_t CMsgDOTATeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTATeamMember members = 1;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // repeated uint32 leagues = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->leagues_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->leagues_size());
    total_size += data_size;
  }

  // repeated uint64 recent_match_ids = 25;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->recent_match_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->recent_match_ids_size());
    total_size += data_size;
  }

  // repeated uint64 top_match_ids = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->top_match_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->top_match_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 4;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 15;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 16;
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 admin_id = 5;
    if (has_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->admin_id());
    }

    // optional uint32 time_created = 6;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 wins = 8;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 losses = 9;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional uint32 rank = 10;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 logo = 11;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 12;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 13;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint64 sponsor_logo = 14;
    if (has_sponsor_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsor_logo());
    }

    // optional uint32 fullgamesplayed = 17;
    if (has_fullgamesplayed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fullgamesplayed());
    }

    // optional bool disbanded = 7;
    if (has_disbanded()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional bool pickup_team = 27;
    if (has_pickup_team()) {
      total_size += 2 + 1;
    }

    // optional uint32 gamesplayed = 19;
    if (has_gamesplayed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamesplayed());
    }

    // optional uint32 gamesplayedwithcurrentroster = 20;
    if (has_gamesplayedwithcurrentroster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamesplayedwithcurrentroster());
    }

    // optional uint32 teammatchmakinggamesplayed = 21;
    if (has_teammatchmakinggamesplayed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammatchmakinggamesplayed());
    }

    // optional uint32 lastplayedgametime = 22;
    if (has_lastplayedgametime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastplayedgametime());
    }

    // optional uint32 lastrenametime = 23;
    if (has_lastrenametime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrenametime());
    }

    // optional uint32 calibration_games_remaining = 24;
    if (has_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeam)
    MergeFrom(*source);
  }
}

void CMsgDOTATeam::MergeFrom(const CMsgDOTATeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  leagues_.MergeFrom(from.leagues_);
  recent_match_ids_.MergeFrom(from.recent_match_ids_);
  top_match_ids_.MergeFrom(from.top_match_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      admin_id_ = from.admin_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000080u) {
      wins_ = from.wins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000200u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000400u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00001000u) {
      banner_logo_ = from.banner_logo_;
    }
    if (cached_has_bits & 0x00002000u) {
      sponsor_logo_ = from.sponsor_logo_;
    }
    if (cached_has_bits & 0x00004000u) {
      fullgamesplayed_ = from.fullgamesplayed_;
    }
    if (cached_has_bits & 0x00008000u) {
      disbanded_ = from.disbanded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      pickup_team_ = from.pickup_team_;
    }
    if (cached_has_bits & 0x00020000u) {
      gamesplayed_ = from.gamesplayed_;
    }
    if (cached_has_bits & 0x00040000u) {
      gamesplayedwithcurrentroster_ = from.gamesplayedwithcurrentroster_;
    }
    if (cached_has_bits & 0x00080000u) {
      teammatchmakinggamesplayed_ = from.teammatchmakinggamesplayed_;
    }
    if (cached_has_bits & 0x00100000u) {
      lastplayedgametime_ = from.lastplayedgametime_;
    }
    if (cached_has_bits & 0x00200000u) {
      lastrenametime_ = from.lastrenametime_;
    }
    if (cached_has_bits & 0x00400000u) {
      calibration_games_remaining_ = from.calibration_games_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeam::CopyFrom(const CMsgDOTATeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeam::IsInitialized() const {
  return true;
}

void CMsgDOTATeam::Swap(CMsgDOTATeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeam::InternalSwap(CMsgDOTATeam* other) {
  members_.InternalSwap(&other->members_);
  leagues_.InternalSwap(&other->leagues_);
  recent_match_ids_.InternalSwap(&other->recent_match_ids_);
  top_match_ids_.InternalSwap(&other->top_match_ids_);
  name_.Swap(&other->name_);
  tag_.Swap(&other->tag_);
  country_code_.Swap(&other->country_code_);
  url_.Swap(&other->url_);
  std::swap(team_id_, other->team_id_);
  std::swap(admin_id_, other->admin_id_);
  std::swap(time_created_, other->time_created_);
  std::swap(wins_, other->wins_);
  std::swap(losses_, other->losses_);
  std::swap(rank_, other->rank_);
  std::swap(logo_, other->logo_);
  std::swap(base_logo_, other->base_logo_);
  std::swap(banner_logo_, other->banner_logo_);
  std::swap(sponsor_logo_, other->sponsor_logo_);
  std::swap(fullgamesplayed_, other->fullgamesplayed_);
  std::swap(disbanded_, other->disbanded_);
  std::swap(pickup_team_, other->pickup_team_);
  std::swap(gamesplayed_, other->gamesplayed_);
  std::swap(gamesplayedwithcurrentroster_, other->gamesplayedwithcurrentroster_);
  std::swap(teammatchmakinggamesplayed_, other->teammatchmakinggamesplayed_);
  std::swap(lastplayedgametime_, other->lastplayedgametime_);
  std::swap(lastrenametime_, other->lastrenametime_);
  std::swap(calibration_games_remaining_, other->calibration_games_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeam::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeam

// repeated .proto.dota.CMsgDOTATeamMember members = 1;
int CMsgDOTATeam::members_size() const {
  return members_.size();
}
void CMsgDOTATeam::clear_members() {
  members_.Clear();
}
const ::proto::dota::CMsgDOTATeamMember& CMsgDOTATeam::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.members)
  return members_.Get(index);
}
::proto::dota::CMsgDOTATeamMember* CMsgDOTATeam::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.members)
  return members_.Mutable(index);
}
::proto::dota::CMsgDOTATeamMember* CMsgDOTATeam::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeam.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamMember >*
CMsgDOTATeam::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeam.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamMember >&
CMsgDOTATeam::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeam.members)
  return members_;
}

// optional uint32 team_id = 2;
bool CMsgDOTATeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATeam::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTATeam::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.team_id)
  return team_id_;
}
void CMsgDOTATeam::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.team_id)
}

// optional string name = 3;
bool CMsgDOTATeam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTATeam::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.name)
  return name_.GetNoArena();
}
void CMsgDOTATeam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.name)
}
#if LANG_CXX11
void CMsgDOTATeam::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeam.name)
}
#endif
void CMsgDOTATeam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeam.name)
}
void CMsgDOTATeam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeam.name)
}
::std::string* CMsgDOTATeam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeam::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeam.name)
}

// optional string tag = 4;
bool CMsgDOTATeam::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeam::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeam::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeam::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& CMsgDOTATeam::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.tag)
  return tag_.GetNoArena();
}
void CMsgDOTATeam::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.tag)
}
#if LANG_CXX11
void CMsgDOTATeam::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeam.tag)
}
#endif
void CMsgDOTATeam::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeam.tag)
}
void CMsgDOTATeam::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeam.tag)
}
::std::string* CMsgDOTATeam::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeam::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeam.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeam::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeam.tag)
}

// optional uint32 admin_id = 5;
bool CMsgDOTATeam::has_admin_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATeam::set_has_admin_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATeam::clear_has_admin_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATeam::clear_admin_id() {
  admin_id_ = 0u;
  clear_has_admin_id();
}
::google::protobuf::uint32 CMsgDOTATeam::admin_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.admin_id)
  return admin_id_;
}
void CMsgDOTATeam::set_admin_id(::google::protobuf::uint32 value) {
  set_has_admin_id();
  admin_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.admin_id)
}

// optional uint32 time_created = 6;
bool CMsgDOTATeam::has_time_created() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTATeam::set_has_time_created() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTATeam::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTATeam::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CMsgDOTATeam::time_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.time_created)
  return time_created_;
}
void CMsgDOTATeam::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.time_created)
}

// optional bool disbanded = 7;
bool CMsgDOTATeam::has_disbanded() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTATeam::set_has_disbanded() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTATeam::clear_has_disbanded() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTATeam::clear_disbanded() {
  disbanded_ = false;
  clear_has_disbanded();
}
bool CMsgDOTATeam::disbanded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.disbanded)
  return disbanded_;
}
void CMsgDOTATeam::set_disbanded(bool value) {
  set_has_disbanded();
  disbanded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.disbanded)
}

// optional uint32 wins = 8;
bool CMsgDOTATeam::has_wins() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTATeam::set_has_wins() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTATeam::clear_has_wins() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTATeam::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
::google::protobuf::uint32 CMsgDOTATeam::wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.wins)
  return wins_;
}
void CMsgDOTATeam::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.wins)
}

// optional uint32 losses = 9;
bool CMsgDOTATeam::has_losses() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTATeam::set_has_losses() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTATeam::clear_has_losses() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTATeam::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
::google::protobuf::uint32 CMsgDOTATeam::losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.losses)
  return losses_;
}
void CMsgDOTATeam::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.losses)
}

// optional uint32 rank = 10;
bool CMsgDOTATeam::has_rank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTATeam::set_has_rank() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTATeam::clear_has_rank() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTATeam::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
::google::protobuf::uint32 CMsgDOTATeam::rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.rank)
  return rank_;
}
void CMsgDOTATeam::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.rank)
}

// optional uint32 calibration_games_remaining = 24;
bool CMsgDOTATeam::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTATeam::set_has_calibration_games_remaining() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTATeam::clear_has_calibration_games_remaining() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTATeam::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  clear_has_calibration_games_remaining();
}
::google::protobuf::uint32 CMsgDOTATeam::calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.calibration_games_remaining)
  return calibration_games_remaining_;
}
void CMsgDOTATeam::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_calibration_games_remaining();
  calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.calibration_games_remaining)
}

// optional uint64 logo = 11;
bool CMsgDOTATeam::has_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTATeam::set_has_logo() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTATeam::clear_has_logo() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTATeam::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTATeam::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.logo)
  return logo_;
}
void CMsgDOTATeam::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.logo)
}

// optional uint64 base_logo = 12;
bool CMsgDOTATeam::has_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTATeam::set_has_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTATeam::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTATeam::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
::google::protobuf::uint64 CMsgDOTATeam::base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.base_logo)
  return base_logo_;
}
void CMsgDOTATeam::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.base_logo)
}

// optional uint64 banner_logo = 13;
bool CMsgDOTATeam::has_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTATeam::set_has_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTATeam::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTATeam::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
::google::protobuf::uint64 CMsgDOTATeam::banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.banner_logo)
  return banner_logo_;
}
void CMsgDOTATeam::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.banner_logo)
}

// optional uint64 sponsor_logo = 14;
bool CMsgDOTATeam::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTATeam::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTATeam::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTATeam::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
::google::protobuf::uint64 CMsgDOTATeam::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.sponsor_logo)
  return sponsor_logo_;
}
void CMsgDOTATeam::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.sponsor_logo)
}

// optional string country_code = 15;
bool CMsgDOTATeam::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATeam::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATeam::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATeam::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& CMsgDOTATeam::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.country_code)
  return country_code_.GetNoArena();
}
void CMsgDOTATeam::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.country_code)
}
#if LANG_CXX11
void CMsgDOTATeam::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeam.country_code)
}
#endif
void CMsgDOTATeam::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeam.country_code)
}
void CMsgDOTATeam::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeam.country_code)
}
::std::string* CMsgDOTATeam::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeam::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeam.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeam::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeam.country_code)
}

// optional string url = 16;
bool CMsgDOTATeam::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATeam::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATeam::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATeam::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgDOTATeam::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.url)
  return url_.GetNoArena();
}
void CMsgDOTATeam::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.url)
}
#if LANG_CXX11
void CMsgDOTATeam::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeam.url)
}
#endif
void CMsgDOTATeam::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeam.url)
}
void CMsgDOTATeam::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeam.url)
}
::std::string* CMsgDOTATeam::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeam::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeam.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeam::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeam.url)
}

// optional uint32 fullgamesplayed = 17;
bool CMsgDOTATeam::has_fullgamesplayed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTATeam::set_has_fullgamesplayed() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTATeam::clear_has_fullgamesplayed() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTATeam::clear_fullgamesplayed() {
  fullgamesplayed_ = 0u;
  clear_has_fullgamesplayed();
}
::google::protobuf::uint32 CMsgDOTATeam::fullgamesplayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.fullgamesplayed)
  return fullgamesplayed_;
}
void CMsgDOTATeam::set_fullgamesplayed(::google::protobuf::uint32 value) {
  set_has_fullgamesplayed();
  fullgamesplayed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.fullgamesplayed)
}

// repeated uint32 leagues = 18;
int CMsgDOTATeam::leagues_size() const {
  return leagues_.size();
}
void CMsgDOTATeam::clear_leagues() {
  leagues_.Clear();
}
::google::protobuf::uint32 CMsgDOTATeam::leagues(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.leagues)
  return leagues_.Get(index);
}
void CMsgDOTATeam::set_leagues(int index, ::google::protobuf::uint32 value) {
  leagues_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.leagues)
}
void CMsgDOTATeam::add_leagues(::google::protobuf::uint32 value) {
  leagues_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeam.leagues)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeam::leagues() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeam.leagues)
  return leagues_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeam::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeam.leagues)
  return &leagues_;
}

// optional uint32 gamesplayed = 19;
bool CMsgDOTATeam::has_gamesplayed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTATeam::set_has_gamesplayed() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTATeam::clear_has_gamesplayed() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTATeam::clear_gamesplayed() {
  gamesplayed_ = 0u;
  clear_has_gamesplayed();
}
::google::protobuf::uint32 CMsgDOTATeam::gamesplayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.gamesplayed)
  return gamesplayed_;
}
void CMsgDOTATeam::set_gamesplayed(::google::protobuf::uint32 value) {
  set_has_gamesplayed();
  gamesplayed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.gamesplayed)
}

// optional uint32 gamesplayedwithcurrentroster = 20;
bool CMsgDOTATeam::has_gamesplayedwithcurrentroster() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTATeam::set_has_gamesplayedwithcurrentroster() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTATeam::clear_has_gamesplayedwithcurrentroster() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTATeam::clear_gamesplayedwithcurrentroster() {
  gamesplayedwithcurrentroster_ = 0u;
  clear_has_gamesplayedwithcurrentroster();
}
::google::protobuf::uint32 CMsgDOTATeam::gamesplayedwithcurrentroster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.gamesplayedwithcurrentroster)
  return gamesplayedwithcurrentroster_;
}
void CMsgDOTATeam::set_gamesplayedwithcurrentroster(::google::protobuf::uint32 value) {
  set_has_gamesplayedwithcurrentroster();
  gamesplayedwithcurrentroster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.gamesplayedwithcurrentroster)
}

// optional uint32 teammatchmakinggamesplayed = 21;
bool CMsgDOTATeam::has_teammatchmakinggamesplayed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTATeam::set_has_teammatchmakinggamesplayed() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTATeam::clear_has_teammatchmakinggamesplayed() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTATeam::clear_teammatchmakinggamesplayed() {
  teammatchmakinggamesplayed_ = 0u;
  clear_has_teammatchmakinggamesplayed();
}
::google::protobuf::uint32 CMsgDOTATeam::teammatchmakinggamesplayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.teammatchmakinggamesplayed)
  return teammatchmakinggamesplayed_;
}
void CMsgDOTATeam::set_teammatchmakinggamesplayed(::google::protobuf::uint32 value) {
  set_has_teammatchmakinggamesplayed();
  teammatchmakinggamesplayed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.teammatchmakinggamesplayed)
}

// optional uint32 lastplayedgametime = 22;
bool CMsgDOTATeam::has_lastplayedgametime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTATeam::set_has_lastplayedgametime() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTATeam::clear_has_lastplayedgametime() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTATeam::clear_lastplayedgametime() {
  lastplayedgametime_ = 0u;
  clear_has_lastplayedgametime();
}
::google::protobuf::uint32 CMsgDOTATeam::lastplayedgametime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.lastplayedgametime)
  return lastplayedgametime_;
}
void CMsgDOTATeam::set_lastplayedgametime(::google::protobuf::uint32 value) {
  set_has_lastplayedgametime();
  lastplayedgametime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.lastplayedgametime)
}

// optional uint32 lastrenametime = 23;
bool CMsgDOTATeam::has_lastrenametime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTATeam::set_has_lastrenametime() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTATeam::clear_has_lastrenametime() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTATeam::clear_lastrenametime() {
  lastrenametime_ = 0u;
  clear_has_lastrenametime();
}
::google::protobuf::uint32 CMsgDOTATeam::lastrenametime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.lastrenametime)
  return lastrenametime_;
}
void CMsgDOTATeam::set_lastrenametime(::google::protobuf::uint32 value) {
  set_has_lastrenametime();
  lastrenametime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.lastrenametime)
}

// repeated uint64 recent_match_ids = 25;
int CMsgDOTATeam::recent_match_ids_size() const {
  return recent_match_ids_.size();
}
void CMsgDOTATeam::clear_recent_match_ids() {
  recent_match_ids_.Clear();
}
::google::protobuf::uint64 CMsgDOTATeam::recent_match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.recent_match_ids)
  return recent_match_ids_.Get(index);
}
void CMsgDOTATeam::set_recent_match_ids(int index, ::google::protobuf::uint64 value) {
  recent_match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.recent_match_ids)
}
void CMsgDOTATeam::add_recent_match_ids(::google::protobuf::uint64 value) {
  recent_match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeam.recent_match_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTATeam::recent_match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeam.recent_match_ids)
  return recent_match_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTATeam::mutable_recent_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeam.recent_match_ids)
  return &recent_match_ids_;
}

// repeated uint64 top_match_ids = 26;
int CMsgDOTATeam::top_match_ids_size() const {
  return top_match_ids_.size();
}
void CMsgDOTATeam::clear_top_match_ids() {
  top_match_ids_.Clear();
}
::google::protobuf::uint64 CMsgDOTATeam::top_match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.top_match_ids)
  return top_match_ids_.Get(index);
}
void CMsgDOTATeam::set_top_match_ids(int index, ::google::protobuf::uint64 value) {
  top_match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.top_match_ids)
}
void CMsgDOTATeam::add_top_match_ids(::google::protobuf::uint64 value) {
  top_match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeam.top_match_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTATeam::top_match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeam.top_match_ids)
  return top_match_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTATeam::mutable_top_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeam.top_match_ids)
  return &top_match_ids_;
}

// optional bool pickup_team = 27;
bool CMsgDOTATeam::has_pickup_team() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTATeam::set_has_pickup_team() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTATeam::clear_has_pickup_team() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTATeam::clear_pickup_team() {
  pickup_team_ = false;
  clear_has_pickup_team();
}
bool CMsgDOTATeam::pickup_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.pickup_team)
  return pickup_team_;
}
void CMsgDOTATeam::set_pickup_team(bool value) {
  set_has_pickup_team();
  pickup_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.pickup_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInfo_Member::kAccountIdFieldNumber;
const int CMsgDOTATeamInfo_Member::kTimeJoinedFieldNumber;
const int CMsgDOTATeamInfo_Member::kAdminFieldNumber;
const int CMsgDOTATeamInfo_Member::kSubFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInfo.Member)
}
CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member(const CMsgDOTATeamInfo_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&sub_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(sub_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInfo.Member)
}

void CMsgDOTATeamInfo_Member::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&sub_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(sub_));
}

CMsgDOTATeamInfo_Member::~CMsgDOTATeamInfo_Member() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInfo.Member)
  SharedDtor();
}

void CMsgDOTATeamInfo_Member::SharedDtor() {
}

void CMsgDOTATeamInfo_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInfo_Member::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamInfo_Member& CMsgDOTATeamInfo_Member::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamInfo_Member* CMsgDOTATeamInfo_Member::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamInfo_Member* n = new CMsgDOTATeamInfo_Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamInfo_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInfo.Member)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&sub_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(sub_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamInfo_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInfo.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_joined = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_joined();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool admin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_admin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sub = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sub();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInfo.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInfo.Member)
  return false;
#undef DO_
}

void CMsgDOTATeamInfo_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInfo.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_joined(), output);
  }

  // optional bool admin = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->admin(), output);
  }

  // optional bool sub = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sub(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInfo.Member)
}

::google::protobuf::uint8* CMsgDOTATeamInfo_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInfo.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_joined(), target);
  }

  // optional bool admin = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->admin(), target);
  }

  // optional bool sub = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sub(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInfo.Member)
  return target;
}

size_t CMsgDOTATeamInfo_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInfo.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_joined = 2;
    if (has_time_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

    // optional bool admin = 3;
    if (has_admin()) {
      total_size += 1 + 1;
    }

    // optional bool sub = 4;
    if (has_sub()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInfo_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInfo.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamInfo_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInfo.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInfo.Member)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_Member::MergeFrom(const CMsgDOTATeamInfo_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInfo.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    if (cached_has_bits & 0x00000004u) {
      admin_ = from.admin_;
    }
    if (cached_has_bits & 0x00000008u) {
      sub_ = from.sub_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInfo.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_Member::CopyFrom(const CMsgDOTATeamInfo_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInfo.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_Member::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_Member::Swap(CMsgDOTATeamInfo_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInfo_Member::InternalSwap(CMsgDOTATeamInfo_Member* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(time_joined_, other->time_joined_);
  std::swap(admin_, other->admin_);
  std::swap(sub_, other->sub_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamInfo_Member::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamInfo_Member

// optional uint32 account_id = 1;
bool CMsgDOTATeamInfo_Member::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamInfo_Member::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamInfo_Member::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamInfo_Member::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTATeamInfo_Member::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.Member.account_id)
  return account_id_;
}
void CMsgDOTATeamInfo_Member::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.Member.account_id)
}

// optional uint32 time_joined = 2;
bool CMsgDOTATeamInfo_Member::has_time_joined() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamInfo_Member::set_has_time_joined() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamInfo_Member::clear_has_time_joined() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamInfo_Member::clear_time_joined() {
  time_joined_ = 0u;
  clear_has_time_joined();
}
::google::protobuf::uint32 CMsgDOTATeamInfo_Member::time_joined() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.Member.time_joined)
  return time_joined_;
}
void CMsgDOTATeamInfo_Member::set_time_joined(::google::protobuf::uint32 value) {
  set_has_time_joined();
  time_joined_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.Member.time_joined)
}

// optional bool admin = 3;
bool CMsgDOTATeamInfo_Member::has_admin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATeamInfo_Member::set_has_admin() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATeamInfo_Member::clear_has_admin() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATeamInfo_Member::clear_admin() {
  admin_ = false;
  clear_has_admin();
}
bool CMsgDOTATeamInfo_Member::admin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.Member.admin)
  return admin_;
}
void CMsgDOTATeamInfo_Member::set_admin(bool value) {
  set_has_admin();
  admin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.Member.admin)
}

// optional bool sub = 4;
bool CMsgDOTATeamInfo_Member::has_sub() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATeamInfo_Member::set_has_sub() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATeamInfo_Member::clear_has_sub() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATeamInfo_Member::clear_sub() {
  sub_ = false;
  clear_has_sub();
}
bool CMsgDOTATeamInfo_Member::sub() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.Member.sub)
  return sub_;
}
void CMsgDOTATeamInfo_Member::set_sub(bool value) {
  set_has_sub();
  sub_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.Member.sub)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInfo::kMembersFieldNumber;
const int CMsgDOTATeamInfo::kTeamIdFieldNumber;
const int CMsgDOTATeamInfo::kNameFieldNumber;
const int CMsgDOTATeamInfo::kTagFieldNumber;
const int CMsgDOTATeamInfo::kTimeCreatedFieldNumber;
const int CMsgDOTATeamInfo::kProFieldNumber;
const int CMsgDOTATeamInfo::kLockedFieldNumber;
const int CMsgDOTATeamInfo::kPickupTeamFieldNumber;
const int CMsgDOTATeamInfo::kUgcLogoFieldNumber;
const int CMsgDOTATeamInfo::kUgcBaseLogoFieldNumber;
const int CMsgDOTATeamInfo::kUgcBannerLogoFieldNumber;
const int CMsgDOTATeamInfo::kUgcSponsorLogoFieldNumber;
const int CMsgDOTATeamInfo::kCountryCodeFieldNumber;
const int CMsgDOTATeamInfo::kUrlFieldNumber;
const int CMsgDOTATeamInfo::kWinsFieldNumber;
const int CMsgDOTATeamInfo::kLossesFieldNumber;
const int CMsgDOTATeamInfo::kRankFieldNumber;
const int CMsgDOTATeamInfo::kCalibrationGamesRemainingFieldNumber;
const int CMsgDOTATeamInfo::kGamesPlayedTotalFieldNumber;
const int CMsgDOTATeamInfo::kGamesPlayedMatchmakingFieldNumber;
const int CMsgDOTATeamInfo::kLeaguesParticipatedFieldNumber;
const int CMsgDOTATeamInfo::kTopMatchIdsFieldNumber;
const int CMsgDOTATeamInfo::kRecentMatchIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInfo::CMsgDOTATeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInfo)
}
CMsgDOTATeamInfo::CMsgDOTATeamInfo(const CMsgDOTATeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_),
      leagues_participated_(from.leagues_participated_),
      top_match_ids_(from.top_match_ids_),
      recent_match_ids_(from.recent_match_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    reinterpret_cast<char*>(&games_played_matchmaking_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(games_played_matchmaking_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInfo)
}

void CMsgDOTATeamInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, reinterpret_cast<char*>(&games_played_matchmaking_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(games_played_matchmaking_));
}

CMsgDOTATeamInfo::~CMsgDOTATeamInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInfo)
  SharedDtor();
}

void CMsgDOTATeamInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamInfo& CMsgDOTATeamInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamInfo* CMsgDOTATeamInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamInfo* n = new CMsgDOTATeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInfo)
  members_.Clear();
  leagues_participated_.Clear();
  top_match_ids_.Clear();
  recent_match_ids_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag()) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&team_id_, 0, reinterpret_cast<char*>(&pro_) -
      reinterpret_cast<char*>(&team_id_) + sizeof(pro_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&locked_, 0, reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&locked_) + sizeof(rank_));
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ::memset(&calibration_games_remaining_, 0, reinterpret_cast<char*>(&games_played_matchmaking_) -
      reinterpret_cast<char*>(&calibration_games_remaining_) + sizeof(games_played_matchmaking_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInfo.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pro = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_pro();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool locked = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_locked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pickup_team = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_pickup_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_logo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_ugc_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_base_logo = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_ugc_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_banner_logo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_ugc_banner_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_sponsor_logo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_ugc_sponsor_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_sponsor_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInfo.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_losses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 calibration_games_remaining = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_calibration_games_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 games_played_total = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_games_played_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_played_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 games_played_matchmaking = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_games_played_matchmaking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_played_matchmaking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 leagues_participated = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168u, input, this->mutable_leagues_participated())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(170u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_leagues_participated())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 top_match_ids = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 176u, input, this->mutable_top_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(178u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_top_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 recent_match_ids = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 184u, input, this->mutable_recent_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(186u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_recent_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInfo)
  return false;
#undef DO_
}

void CMsgDOTATeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  // optional uint32 time_created = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_created(), output);
  }

  // optional bool pro = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->pro(), output);
  }

  // optional bool locked = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->locked(), output);
  }

  // optional bool pickup_team = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->pickup_team(), output);
  }

  // optional uint64 ugc_logo = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ugc_logo(), output);
  }

  // optional uint64 ugc_base_logo = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ugc_base_logo(), output);
  }

  // optional uint64 ugc_banner_logo = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->ugc_banner_logo(), output);
  }

  // optional uint64 ugc_sponsor_logo = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->ugc_sponsor_logo(), output);
  }

  // optional string country_code = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->country_code(), output);
  }

  // optional string url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->url(), output);
  }

  // optional uint32 wins = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->wins(), output);
  }

  // optional uint32 losses = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->losses(), output);
  }

  // optional uint32 rank = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->rank(), output);
  }

  // optional uint32 calibration_games_remaining = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->calibration_games_remaining(), output);
  }

  // optional uint32 games_played_total = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->games_played_total(), output);
  }

  // optional uint32 games_played_matchmaking = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->games_played_matchmaking(), output);
  }

  // repeated uint32 leagues_participated = 21;
  for (int i = 0, n = this->leagues_participated_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->leagues_participated(i), output);
  }

  // repeated uint64 top_match_ids = 22;
  for (int i = 0, n = this->top_match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      22, this->top_match_ids(i), output);
  }

  // repeated uint64 recent_match_ids = 23;
  for (int i = 0, n = this->recent_match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      23, this->recent_match_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInfo)
}

::google::protobuf::uint8* CMsgDOTATeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->members(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  // optional uint32 time_created = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_created(), target);
  }

  // optional bool pro = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->pro(), target);
  }

  // optional bool locked = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->locked(), target);
  }

  // optional bool pickup_team = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->pickup_team(), target);
  }

  // optional uint64 ugc_logo = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ugc_logo(), target);
  }

  // optional uint64 ugc_base_logo = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ugc_base_logo(), target);
  }

  // optional uint64 ugc_banner_logo = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->ugc_banner_logo(), target);
  }

  // optional uint64 ugc_sponsor_logo = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->ugc_sponsor_logo(), target);
  }

  // optional string country_code = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->country_code(), target);
  }

  // optional string url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->url(), target);
  }

  // optional uint32 wins = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->wins(), target);
  }

  // optional uint32 losses = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->losses(), target);
  }

  // optional uint32 rank = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->rank(), target);
  }

  // optional uint32 calibration_games_remaining = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->calibration_games_remaining(), target);
  }

  // optional uint32 games_played_total = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->games_played_total(), target);
  }

  // optional uint32 games_played_matchmaking = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->games_played_matchmaking(), target);
  }

  // repeated uint32 leagues_participated = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(21, this->leagues_participated_, target);

  // repeated uint64 top_match_ids = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(22, this->top_match_ids_, target);

  // repeated uint64 recent_match_ids = 23;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(23, this->recent_match_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInfo)
  return target;
}

size_t CMsgDOTATeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // repeated uint32 leagues_participated = 21;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->leagues_participated_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->leagues_participated_size());
    total_size += data_size;
  }

  // repeated uint64 top_match_ids = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->top_match_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->top_match_ids_size());
    total_size += data_size;
  }

  // repeated uint64 recent_match_ids = 23;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->recent_match_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->recent_match_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 4;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 13;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 14;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 time_created = 5;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint64 ugc_logo = 9;
    if (has_ugc_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_logo());
    }

    // optional bool pro = 6;
    if (has_pro()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool locked = 7;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // optional bool pickup_team = 8;
    if (has_pickup_team()) {
      total_size += 1 + 1;
    }

    // optional uint32 wins = 15;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint64 ugc_base_logo = 10;
    if (has_ugc_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_base_logo());
    }

    // optional uint64 ugc_banner_logo = 11;
    if (has_ugc_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_banner_logo());
    }

    // optional uint64 ugc_sponsor_logo = 12;
    if (has_ugc_sponsor_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_sponsor_logo());
    }

    // optional uint32 losses = 16;
    if (has_losses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional uint32 rank = 17;
    if (has_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 calibration_games_remaining = 18;
    if (has_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

    // optional uint32 games_played_total = 19;
    if (has_games_played_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_played_total());
    }

    // optional uint32 games_played_matchmaking = 20;
    if (has_games_played_matchmaking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_played_matchmaking());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo::MergeFrom(const CMsgDOTATeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  leagues_participated_.MergeFrom(from.leagues_participated_);
  top_match_ids_.MergeFrom(from.top_match_ids_);
  recent_match_ids_.MergeFrom(from.recent_match_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000040u) {
      ugc_logo_ = from.ugc_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      pro_ = from.pro_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      locked_ = from.locked_;
    }
    if (cached_has_bits & 0x00000200u) {
      pickup_team_ = from.pickup_team_;
    }
    if (cached_has_bits & 0x00000400u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000800u) {
      ugc_base_logo_ = from.ugc_base_logo_;
    }
    if (cached_has_bits & 0x00001000u) {
      ugc_banner_logo_ = from.ugc_banner_logo_;
    }
    if (cached_has_bits & 0x00002000u) {
      ugc_sponsor_logo_ = from.ugc_sponsor_logo_;
    }
    if (cached_has_bits & 0x00004000u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00008000u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      calibration_games_remaining_ = from.calibration_games_remaining_;
    }
    if (cached_has_bits & 0x00020000u) {
      games_played_total_ = from.games_played_total_;
    }
    if (cached_has_bits & 0x00040000u) {
      games_played_matchmaking_ = from.games_played_matchmaking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo::CopyFrom(const CMsgDOTATeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo::Swap(CMsgDOTATeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInfo::InternalSwap(CMsgDOTATeamInfo* other) {
  members_.InternalSwap(&other->members_);
  leagues_participated_.InternalSwap(&other->leagues_participated_);
  top_match_ids_.InternalSwap(&other->top_match_ids_);
  recent_match_ids_.InternalSwap(&other->recent_match_ids_);
  name_.Swap(&other->name_);
  tag_.Swap(&other->tag_);
  country_code_.Swap(&other->country_code_);
  url_.Swap(&other->url_);
  std::swap(team_id_, other->team_id_);
  std::swap(time_created_, other->time_created_);
  std::swap(ugc_logo_, other->ugc_logo_);
  std::swap(pro_, other->pro_);
  std::swap(locked_, other->locked_);
  std::swap(pickup_team_, other->pickup_team_);
  std::swap(wins_, other->wins_);
  std::swap(ugc_base_logo_, other->ugc_base_logo_);
  std::swap(ugc_banner_logo_, other->ugc_banner_logo_);
  std::swap(ugc_sponsor_logo_, other->ugc_sponsor_logo_);
  std::swap(losses_, other->losses_);
  std::swap(rank_, other->rank_);
  std::swap(calibration_games_remaining_, other->calibration_games_remaining_);
  std::swap(games_played_total_, other->games_played_total_);
  std::swap(games_played_matchmaking_, other->games_played_matchmaking_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamInfo

// repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
int CMsgDOTATeamInfo::members_size() const {
  return members_.size();
}
void CMsgDOTATeamInfo::clear_members() {
  members_.Clear();
}
const ::proto::dota::CMsgDOTATeamInfo_Member& CMsgDOTATeamInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.members)
  return members_.Get(index);
}
::proto::dota::CMsgDOTATeamInfo_Member* CMsgDOTATeamInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.members)
  return members_.Mutable(index);
}
::proto::dota::CMsgDOTATeamInfo_Member* CMsgDOTATeamInfo::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamInfo.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo_Member >*
CMsgDOTATeamInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamInfo.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo_Member >&
CMsgDOTATeamInfo::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamInfo.members)
  return members_;
}

// optional uint32 team_id = 2;
bool CMsgDOTATeamInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATeamInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATeamInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATeamInfo::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTATeamInfo::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.team_id)
  return team_id_;
}
void CMsgDOTATeamInfo::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.team_id)
}

// optional string name = 3;
bool CMsgDOTATeamInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTATeamInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.name)
  return name_.GetNoArena();
}
void CMsgDOTATeamInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.name)
}
#if LANG_CXX11
void CMsgDOTATeamInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInfo.name)
}
#endif
void CMsgDOTATeamInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInfo.name)
}
void CMsgDOTATeamInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInfo.name)
}
::std::string* CMsgDOTATeamInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeamInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInfo.name)
}

// optional string tag = 4;
bool CMsgDOTATeamInfo::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamInfo::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamInfo::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamInfo::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& CMsgDOTATeamInfo::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.tag)
  return tag_.GetNoArena();
}
void CMsgDOTATeamInfo::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.tag)
}
#if LANG_CXX11
void CMsgDOTATeamInfo::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInfo.tag)
}
#endif
void CMsgDOTATeamInfo::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInfo.tag)
}
void CMsgDOTATeamInfo::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInfo.tag)
}
::std::string* CMsgDOTATeamInfo::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeamInfo::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInfo.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeamInfo::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInfo.tag)
}

// optional uint32 time_created = 5;
bool CMsgDOTATeamInfo::has_time_created() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATeamInfo::set_has_time_created() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATeamInfo::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATeamInfo::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CMsgDOTATeamInfo::time_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.time_created)
  return time_created_;
}
void CMsgDOTATeamInfo::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.time_created)
}

// optional bool pro = 6;
bool CMsgDOTATeamInfo::has_pro() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTATeamInfo::set_has_pro() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTATeamInfo::clear_has_pro() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTATeamInfo::clear_pro() {
  pro_ = false;
  clear_has_pro();
}
bool CMsgDOTATeamInfo::pro() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.pro)
  return pro_;
}
void CMsgDOTATeamInfo::set_pro(bool value) {
  set_has_pro();
  pro_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.pro)
}

// optional bool locked = 7;
bool CMsgDOTATeamInfo::has_locked() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTATeamInfo::set_has_locked() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTATeamInfo::clear_has_locked() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTATeamInfo::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
bool CMsgDOTATeamInfo::locked() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.locked)
  return locked_;
}
void CMsgDOTATeamInfo::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.locked)
}

// optional bool pickup_team = 8;
bool CMsgDOTATeamInfo::has_pickup_team() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTATeamInfo::set_has_pickup_team() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTATeamInfo::clear_has_pickup_team() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTATeamInfo::clear_pickup_team() {
  pickup_team_ = false;
  clear_has_pickup_team();
}
bool CMsgDOTATeamInfo::pickup_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.pickup_team)
  return pickup_team_;
}
void CMsgDOTATeamInfo::set_pickup_team(bool value) {
  set_has_pickup_team();
  pickup_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.pickup_team)
}

// optional uint64 ugc_logo = 9;
bool CMsgDOTATeamInfo::has_ugc_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTATeamInfo::set_has_ugc_logo() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTATeamInfo::clear_has_ugc_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTATeamInfo::clear_ugc_logo() {
  ugc_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_logo();
}
::google::protobuf::uint64 CMsgDOTATeamInfo::ugc_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.ugc_logo)
  return ugc_logo_;
}
void CMsgDOTATeamInfo::set_ugc_logo(::google::protobuf::uint64 value) {
  set_has_ugc_logo();
  ugc_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.ugc_logo)
}

// optional uint64 ugc_base_logo = 10;
bool CMsgDOTATeamInfo::has_ugc_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTATeamInfo::set_has_ugc_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTATeamInfo::clear_has_ugc_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTATeamInfo::clear_ugc_base_logo() {
  ugc_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_base_logo();
}
::google::protobuf::uint64 CMsgDOTATeamInfo::ugc_base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.ugc_base_logo)
  return ugc_base_logo_;
}
void CMsgDOTATeamInfo::set_ugc_base_logo(::google::protobuf::uint64 value) {
  set_has_ugc_base_logo();
  ugc_base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.ugc_base_logo)
}

// optional uint64 ugc_banner_logo = 11;
bool CMsgDOTATeamInfo::has_ugc_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTATeamInfo::set_has_ugc_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTATeamInfo::clear_has_ugc_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTATeamInfo::clear_ugc_banner_logo() {
  ugc_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_banner_logo();
}
::google::protobuf::uint64 CMsgDOTATeamInfo::ugc_banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.ugc_banner_logo)
  return ugc_banner_logo_;
}
void CMsgDOTATeamInfo::set_ugc_banner_logo(::google::protobuf::uint64 value) {
  set_has_ugc_banner_logo();
  ugc_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.ugc_banner_logo)
}

// optional uint64 ugc_sponsor_logo = 12;
bool CMsgDOTATeamInfo::has_ugc_sponsor_logo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTATeamInfo::set_has_ugc_sponsor_logo() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTATeamInfo::clear_has_ugc_sponsor_logo() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTATeamInfo::clear_ugc_sponsor_logo() {
  ugc_sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_sponsor_logo();
}
::google::protobuf::uint64 CMsgDOTATeamInfo::ugc_sponsor_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.ugc_sponsor_logo)
  return ugc_sponsor_logo_;
}
void CMsgDOTATeamInfo::set_ugc_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_ugc_sponsor_logo();
  ugc_sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.ugc_sponsor_logo)
}

// optional string country_code = 13;
bool CMsgDOTATeamInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATeamInfo::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATeamInfo::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATeamInfo::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& CMsgDOTATeamInfo::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.country_code)
  return country_code_.GetNoArena();
}
void CMsgDOTATeamInfo::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.country_code)
}
#if LANG_CXX11
void CMsgDOTATeamInfo::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInfo.country_code)
}
#endif
void CMsgDOTATeamInfo::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInfo.country_code)
}
void CMsgDOTATeamInfo::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInfo.country_code)
}
::std::string* CMsgDOTATeamInfo::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeamInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInfo.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeamInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInfo.country_code)
}

// optional string url = 14;
bool CMsgDOTATeamInfo::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATeamInfo::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATeamInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATeamInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgDOTATeamInfo::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.url)
  return url_.GetNoArena();
}
void CMsgDOTATeamInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.url)
}
#if LANG_CXX11
void CMsgDOTATeamInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInfo.url)
}
#endif
void CMsgDOTATeamInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInfo.url)
}
void CMsgDOTATeamInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInfo.url)
}
::std::string* CMsgDOTATeamInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeamInfo::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeamInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInfo.url)
}

// optional uint32 wins = 15;
bool CMsgDOTATeamInfo::has_wins() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTATeamInfo::set_has_wins() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTATeamInfo::clear_has_wins() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTATeamInfo::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
::google::protobuf::uint32 CMsgDOTATeamInfo::wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.wins)
  return wins_;
}
void CMsgDOTATeamInfo::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.wins)
}

// optional uint32 losses = 16;
bool CMsgDOTATeamInfo::has_losses() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTATeamInfo::set_has_losses() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTATeamInfo::clear_has_losses() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTATeamInfo::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
::google::protobuf::uint32 CMsgDOTATeamInfo::losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.losses)
  return losses_;
}
void CMsgDOTATeamInfo::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.losses)
}

// optional uint32 rank = 17;
bool CMsgDOTATeamInfo::has_rank() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTATeamInfo::set_has_rank() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTATeamInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTATeamInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
::google::protobuf::uint32 CMsgDOTATeamInfo::rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.rank)
  return rank_;
}
void CMsgDOTATeamInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.rank)
}

// optional uint32 calibration_games_remaining = 18;
bool CMsgDOTATeamInfo::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTATeamInfo::set_has_calibration_games_remaining() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTATeamInfo::clear_has_calibration_games_remaining() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTATeamInfo::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  clear_has_calibration_games_remaining();
}
::google::protobuf::uint32 CMsgDOTATeamInfo::calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.calibration_games_remaining)
  return calibration_games_remaining_;
}
void CMsgDOTATeamInfo::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_calibration_games_remaining();
  calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.calibration_games_remaining)
}

// optional uint32 games_played_total = 19;
bool CMsgDOTATeamInfo::has_games_played_total() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTATeamInfo::set_has_games_played_total() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTATeamInfo::clear_has_games_played_total() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTATeamInfo::clear_games_played_total() {
  games_played_total_ = 0u;
  clear_has_games_played_total();
}
::google::protobuf::uint32 CMsgDOTATeamInfo::games_played_total() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.games_played_total)
  return games_played_total_;
}
void CMsgDOTATeamInfo::set_games_played_total(::google::protobuf::uint32 value) {
  set_has_games_played_total();
  games_played_total_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.games_played_total)
}

// optional uint32 games_played_matchmaking = 20;
bool CMsgDOTATeamInfo::has_games_played_matchmaking() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTATeamInfo::set_has_games_played_matchmaking() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTATeamInfo::clear_has_games_played_matchmaking() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTATeamInfo::clear_games_played_matchmaking() {
  games_played_matchmaking_ = 0u;
  clear_has_games_played_matchmaking();
}
::google::protobuf::uint32 CMsgDOTATeamInfo::games_played_matchmaking() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.games_played_matchmaking)
  return games_played_matchmaking_;
}
void CMsgDOTATeamInfo::set_games_played_matchmaking(::google::protobuf::uint32 value) {
  set_has_games_played_matchmaking();
  games_played_matchmaking_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.games_played_matchmaking)
}

// repeated uint32 leagues_participated = 21;
int CMsgDOTATeamInfo::leagues_participated_size() const {
  return leagues_participated_.size();
}
void CMsgDOTATeamInfo::clear_leagues_participated() {
  leagues_participated_.Clear();
}
::google::protobuf::uint32 CMsgDOTATeamInfo::leagues_participated(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.leagues_participated)
  return leagues_participated_.Get(index);
}
void CMsgDOTATeamInfo::set_leagues_participated(int index, ::google::protobuf::uint32 value) {
  leagues_participated_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.leagues_participated)
}
void CMsgDOTATeamInfo::add_leagues_participated(::google::protobuf::uint32 value) {
  leagues_participated_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamInfo.leagues_participated)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeamInfo::leagues_participated() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamInfo.leagues_participated)
  return leagues_participated_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeamInfo::mutable_leagues_participated() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamInfo.leagues_participated)
  return &leagues_participated_;
}

// repeated uint64 top_match_ids = 22;
int CMsgDOTATeamInfo::top_match_ids_size() const {
  return top_match_ids_.size();
}
void CMsgDOTATeamInfo::clear_top_match_ids() {
  top_match_ids_.Clear();
}
::google::protobuf::uint64 CMsgDOTATeamInfo::top_match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.top_match_ids)
  return top_match_ids_.Get(index);
}
void CMsgDOTATeamInfo::set_top_match_ids(int index, ::google::protobuf::uint64 value) {
  top_match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.top_match_ids)
}
void CMsgDOTATeamInfo::add_top_match_ids(::google::protobuf::uint64 value) {
  top_match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamInfo.top_match_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTATeamInfo::top_match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamInfo.top_match_ids)
  return top_match_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTATeamInfo::mutable_top_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamInfo.top_match_ids)
  return &top_match_ids_;
}

// repeated uint64 recent_match_ids = 23;
int CMsgDOTATeamInfo::recent_match_ids_size() const {
  return recent_match_ids_.size();
}
void CMsgDOTATeamInfo::clear_recent_match_ids() {
  recent_match_ids_.Clear();
}
::google::protobuf::uint64 CMsgDOTATeamInfo::recent_match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
  return recent_match_ids_.Get(index);
}
void CMsgDOTATeamInfo::set_recent_match_ids(int index, ::google::protobuf::uint64 value) {
  recent_match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
}
void CMsgDOTATeamInfo::add_recent_match_ids(::google::protobuf::uint64 value) {
  recent_match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTATeamInfo::recent_match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
  return recent_match_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTATeamInfo::mutable_recent_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
  return &recent_match_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamsInfo::kLeagueIdFieldNumber;
const int CMsgDOTATeamsInfo::kTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamsInfo::CMsgDOTATeamsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamsInfo)
}
CMsgDOTATeamsInfo::CMsgDOTATeamsInfo(const CMsgDOTATeamsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamsInfo)
}

void CMsgDOTATeamsInfo::SharedCtor() {
  _cached_size_ = 0;
  league_id_ = 0u;
}

CMsgDOTATeamsInfo::~CMsgDOTATeamsInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamsInfo)
  SharedDtor();
}

void CMsgDOTATeamsInfo::SharedDtor() {
}

void CMsgDOTATeamsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamsInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamsInfo& CMsgDOTATeamsInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamsInfo* CMsgDOTATeamsInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamsInfo* n = new CMsgDOTATeamsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamsInfo)
  teams_.Clear();
  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamsInfo)
  return false;
#undef DO_
}

void CMsgDOTATeamsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamsInfo)
}

::google::protobuf::uint8* CMsgDOTATeamsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->teams(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamsInfo)
  return target;
}

size_t CMsgDOTATeamsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
  {
    unsigned int count = this->teams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(i));
    }
  }

  // optional uint32 league_id = 1;
  if (has_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamsInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamsInfo::MergeFrom(const CMsgDOTATeamsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from.has_league_id()) {
    set_league_id(from.league_id());
  }
}

void CMsgDOTATeamsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamsInfo::CopyFrom(const CMsgDOTATeamsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamsInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATeamsInfo::Swap(CMsgDOTATeamsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamsInfo::InternalSwap(CMsgDOTATeamsInfo* other) {
  teams_.InternalSwap(&other->teams_);
  std::swap(league_id_, other->league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamsInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamsInfo

// optional uint32 league_id = 1;
bool CMsgDOTATeamsInfo::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamsInfo::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamsInfo::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamsInfo::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTATeamsInfo::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamsInfo.league_id)
  return league_id_;
}
void CMsgDOTATeamsInfo::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamsInfo.league_id)
}

// repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
int CMsgDOTATeamsInfo::teams_size() const {
  return teams_.size();
}
void CMsgDOTATeamsInfo::clear_teams() {
  teams_.Clear();
}
const ::proto::dota::CMsgDOTATeamInfo& CMsgDOTATeamsInfo::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamsInfo.teams)
  return teams_.Get(index);
}
::proto::dota::CMsgDOTATeamInfo* CMsgDOTATeamsInfo::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamsInfo.teams)
  return teams_.Mutable(index);
}
::proto::dota::CMsgDOTATeamInfo* CMsgDOTATeamsInfo::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamsInfo.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo >*
CMsgDOTATeamsInfo::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamsInfo.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo >&
CMsgDOTATeamsInfo::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamsInfo.teams)
  return teams_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMyTeamInfoRequest)
}
CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest(const CMsgDOTAMyTeamInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMyTeamInfoRequest)
}

void CMsgDOTAMyTeamInfoRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAMyTeamInfoRequest::~CMsgDOTAMyTeamInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMyTeamInfoRequest)
  SharedDtor();
}

void CMsgDOTAMyTeamInfoRequest::SharedDtor() {
}

void CMsgDOTAMyTeamInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMyTeamInfoRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMyTeamInfoRequest& CMsgDOTAMyTeamInfoRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMyTeamInfoRequest* CMsgDOTAMyTeamInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMyTeamInfoRequest* n = new CMsgDOTAMyTeamInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMyTeamInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMyTeamInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMyTeamInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMyTeamInfoRequest)
  return false;
#undef DO_
}

void CMsgDOTAMyTeamInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMyTeamInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAMyTeamInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMyTeamInfoRequest)
  return target;
}

size_t CMsgDOTAMyTeamInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMyTeamInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMyTeamInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMyTeamInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMyTeamInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMyTeamInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAMyTeamInfoRequest::MergeFrom(const CMsgDOTAMyTeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTAMyTeamInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMyTeamInfoRequest::CopyFrom(const CMsgDOTAMyTeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMyTeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMyTeamInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAMyTeamInfoRequest::Swap(CMsgDOTAMyTeamInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMyTeamInfoRequest::InternalSwap(CMsgDOTAMyTeamInfoRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMyTeamInfoRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMyTeamInfoRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACreateTeam::kNameFieldNumber;
const int CMsgDOTACreateTeam::kTagFieldNumber;
const int CMsgDOTACreateTeam::kLogoFieldNumber;
const int CMsgDOTACreateTeam::kBaseLogoFieldNumber;
const int CMsgDOTACreateTeam::kBannerLogoFieldNumber;
const int CMsgDOTACreateTeam::kSponsorLogoFieldNumber;
const int CMsgDOTACreateTeam::kCountryCodeFieldNumber;
const int CMsgDOTACreateTeam::kUrlFieldNumber;
const int CMsgDOTACreateTeam::kPickupTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACreateTeam::CMsgDOTACreateTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACreateTeam)
}
CMsgDOTACreateTeam::CMsgDOTACreateTeam(const CMsgDOTACreateTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&logo_, &from.logo_,
    reinterpret_cast<char*>(&pickup_team_) -
    reinterpret_cast<char*>(&logo_) + sizeof(pickup_team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACreateTeam)
}

void CMsgDOTACreateTeam::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, reinterpret_cast<char*>(&pickup_team_) -
    reinterpret_cast<char*>(&logo_) + sizeof(pickup_team_));
}

CMsgDOTACreateTeam::~CMsgDOTACreateTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACreateTeam)
  SharedDtor();
}

void CMsgDOTACreateTeam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTACreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACreateTeam::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTACreateTeam& CMsgDOTACreateTeam::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTACreateTeam* CMsgDOTACreateTeam::New(::google::protobuf::Arena* arena) const {
  CMsgDOTACreateTeam* n = new CMsgDOTACreateTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTACreateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACreateTeam)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag()) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&logo_, 0, reinterpret_cast<char*>(&sponsor_logo_) -
      reinterpret_cast<char*>(&logo_) + sizeof(sponsor_logo_));
  }
  pickup_team_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTACreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACreateTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateTeam.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateTeam.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 banner_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_banner_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sponsor_logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_sponsor_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsor_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateTeam.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateTeam.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pickup_team = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pickup_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACreateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACreateTeam)
  return false;
#undef DO_
}

void CMsgDOTACreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional uint64 logo = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->logo(), output);
  }

  // optional uint64 base_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->banner_logo(), output);
  }

  // optional uint64 sponsor_logo = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sponsor_logo(), output);
  }

  // optional string country_code = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->country_code(), output);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  // optional bool pickup_team = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->pickup_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACreateTeam)
}

::google::protobuf::uint8* CMsgDOTACreateTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional uint64 logo = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->logo(), target);
  }

  // optional uint64 base_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sponsor_logo(), target);
  }

  // optional string country_code = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country_code(), target);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateTeam.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // optional bool pickup_team = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->pickup_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACreateTeam)
  return target;
}

size_t CMsgDOTACreateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACreateTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 7;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 logo = 3;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 4;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 5;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint64 sponsor_logo = 6;
    if (has_sponsor_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsor_logo());
    }

  }
  // optional bool pickup_team = 9;
  if (has_pickup_team()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACreateTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACreateTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACreateTeam)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateTeam::MergeFrom(const CMsgDOTACreateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      banner_logo_ = from.banner_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      sponsor_logo_ = from.sponsor_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_pickup_team(from.pickup_team());
  }
}

void CMsgDOTACreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateTeam::CopyFrom(const CMsgDOTACreateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeam::IsInitialized() const {
  return true;
}

void CMsgDOTACreateTeam::Swap(CMsgDOTACreateTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateTeam::InternalSwap(CMsgDOTACreateTeam* other) {
  name_.Swap(&other->name_);
  tag_.Swap(&other->tag_);
  country_code_.Swap(&other->country_code_);
  url_.Swap(&other->url_);
  std::swap(logo_, other->logo_);
  std::swap(base_logo_, other->base_logo_);
  std::swap(banner_logo_, other->banner_logo_);
  std::swap(sponsor_logo_, other->sponsor_logo_);
  std::swap(pickup_team_, other->pickup_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTACreateTeam::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTACreateTeam

// optional string name = 1;
bool CMsgDOTACreateTeam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTACreateTeam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTACreateTeam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTACreateTeam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTACreateTeam::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.name)
  return name_.GetNoArena();
}
void CMsgDOTACreateTeam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.name)
}
#if LANG_CXX11
void CMsgDOTACreateTeam::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTACreateTeam.name)
}
#endif
void CMsgDOTACreateTeam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTACreateTeam.name)
}
void CMsgDOTACreateTeam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTACreateTeam.name)
}
::std::string* CMsgDOTACreateTeam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTACreateTeam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTACreateTeam::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTACreateTeam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTACreateTeam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTACreateTeam.name)
}

// optional string tag = 2;
bool CMsgDOTACreateTeam::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTACreateTeam::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTACreateTeam::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTACreateTeam::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& CMsgDOTACreateTeam::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.tag)
  return tag_.GetNoArena();
}
void CMsgDOTACreateTeam::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.tag)
}
#if LANG_CXX11
void CMsgDOTACreateTeam::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTACreateTeam.tag)
}
#endif
void CMsgDOTACreateTeam::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTACreateTeam.tag)
}
void CMsgDOTACreateTeam::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTACreateTeam.tag)
}
::std::string* CMsgDOTACreateTeam::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTACreateTeam.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTACreateTeam::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTACreateTeam.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTACreateTeam::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTACreateTeam.tag)
}

// optional uint64 logo = 3;
bool CMsgDOTACreateTeam::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTACreateTeam::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTACreateTeam::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTACreateTeam::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTACreateTeam::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.logo)
  return logo_;
}
void CMsgDOTACreateTeam::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.logo)
}

// optional uint64 base_logo = 4;
bool CMsgDOTACreateTeam::has_base_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTACreateTeam::set_has_base_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTACreateTeam::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTACreateTeam::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
::google::protobuf::uint64 CMsgDOTACreateTeam::base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.base_logo)
  return base_logo_;
}
void CMsgDOTACreateTeam::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.base_logo)
}

// optional uint64 banner_logo = 5;
bool CMsgDOTACreateTeam::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTACreateTeam::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTACreateTeam::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTACreateTeam::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
::google::protobuf::uint64 CMsgDOTACreateTeam::banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.banner_logo)
  return banner_logo_;
}
void CMsgDOTACreateTeam::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.banner_logo)
}

// optional uint64 sponsor_logo = 6;
bool CMsgDOTACreateTeam::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTACreateTeam::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTACreateTeam::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTACreateTeam::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
::google::protobuf::uint64 CMsgDOTACreateTeam::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.sponsor_logo)
  return sponsor_logo_;
}
void CMsgDOTACreateTeam::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.sponsor_logo)
}

// optional string country_code = 7;
bool CMsgDOTACreateTeam::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTACreateTeam::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTACreateTeam::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTACreateTeam::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& CMsgDOTACreateTeam::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.country_code)
  return country_code_.GetNoArena();
}
void CMsgDOTACreateTeam::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.country_code)
}
#if LANG_CXX11
void CMsgDOTACreateTeam::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTACreateTeam.country_code)
}
#endif
void CMsgDOTACreateTeam::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTACreateTeam.country_code)
}
void CMsgDOTACreateTeam::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTACreateTeam.country_code)
}
::std::string* CMsgDOTACreateTeam::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTACreateTeam.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTACreateTeam::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTACreateTeam.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTACreateTeam::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTACreateTeam.country_code)
}

// optional string url = 8;
bool CMsgDOTACreateTeam::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTACreateTeam::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTACreateTeam::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTACreateTeam::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgDOTACreateTeam::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.url)
  return url_.GetNoArena();
}
void CMsgDOTACreateTeam::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.url)
}
#if LANG_CXX11
void CMsgDOTACreateTeam::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTACreateTeam.url)
}
#endif
void CMsgDOTACreateTeam::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTACreateTeam.url)
}
void CMsgDOTACreateTeam::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTACreateTeam.url)
}
::std::string* CMsgDOTACreateTeam::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTACreateTeam.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTACreateTeam::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTACreateTeam.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTACreateTeam::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTACreateTeam.url)
}

// optional bool pickup_team = 9;
bool CMsgDOTACreateTeam::has_pickup_team() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTACreateTeam::set_has_pickup_team() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTACreateTeam::clear_has_pickup_team() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTACreateTeam::clear_pickup_team() {
  pickup_team_ = false;
  clear_has_pickup_team();
}
bool CMsgDOTACreateTeam::pickup_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.pickup_team)
  return pickup_team_;
}
void CMsgDOTACreateTeam::set_pickup_team(bool value) {
  set_has_pickup_team();
  pickup_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.pickup_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACreateTeamResponse::kResultFieldNumber;
const int CMsgDOTACreateTeamResponse::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACreateTeamResponse)
}
CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse(const CMsgDOTACreateTeamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACreateTeamResponse)
}

void CMsgDOTACreateTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
  result_ = -1;
}

CMsgDOTACreateTeamResponse::~CMsgDOTACreateTeamResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACreateTeamResponse)
  SharedDtor();
}

void CMsgDOTACreateTeamResponse::SharedDtor() {
}

void CMsgDOTACreateTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACreateTeamResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTACreateTeamResponse& CMsgDOTACreateTeamResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTACreateTeamResponse* CMsgDOTACreateTeamResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTACreateTeamResponse* n = new CMsgDOTACreateTeamResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTACreateTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACreateTeamResponse)
  if (_has_bits_[0 / 32] & 3u) {
    team_id_ = 0u;
    result_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTACreateTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACreateTeamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTACreateTeamResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTACreateTeamResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACreateTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACreateTeamResponse)
  return false;
#undef DO_
}

void CMsgDOTACreateTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACreateTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACreateTeamResponse)
}

::google::protobuf::uint8* CMsgDOTACreateTeamResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACreateTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACreateTeamResponse)
  return target;
}

size_t CMsgDOTACreateTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACreateTeamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACreateTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACreateTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateTeamResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACreateTeamResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACreateTeamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACreateTeamResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateTeamResponse::MergeFrom(const CMsgDOTACreateTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACreateTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTACreateTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACreateTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateTeamResponse::CopyFrom(const CMsgDOTACreateTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACreateTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTACreateTeamResponse::Swap(CMsgDOTACreateTeamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateTeamResponse::InternalSwap(CMsgDOTACreateTeamResponse* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTACreateTeamResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTACreateTeamResponse

// optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
bool CMsgDOTACreateTeamResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTACreateTeamResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTACreateTeamResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTACreateTeamResponse::clear_result() {
  result_ = -1;
  clear_has_result();
}
::proto::dota::CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeamResponse.result)
  return static_cast< ::proto::dota::CMsgDOTACreateTeamResponse_Result >(result_);
}
void CMsgDOTACreateTeamResponse::set_result(::proto::dota::CMsgDOTACreateTeamResponse_Result value) {
  assert(::proto::dota::CMsgDOTACreateTeamResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeamResponse.result)
}

// optional uint32 team_id = 2;
bool CMsgDOTACreateTeamResponse::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTACreateTeamResponse::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTACreateTeamResponse::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTACreateTeamResponse::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTACreateTeamResponse::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeamResponse.team_id)
  return team_id_;
}
void CMsgDOTACreateTeamResponse::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeamResponse.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAEditTeamDetails::kTeamIdFieldNumber;
const int CMsgDOTAEditTeamDetails::kNameFieldNumber;
const int CMsgDOTAEditTeamDetails::kTagFieldNumber;
const int CMsgDOTAEditTeamDetails::kLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kBaseLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kBannerLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kSponsorLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kCountryCodeFieldNumber;
const int CMsgDOTAEditTeamDetails::kUrlFieldNumber;
const int CMsgDOTAEditTeamDetails::kInUseByPartyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAEditTeamDetails)
}
CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails(const CMsgDOTAEditTeamDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&logo_, &from.logo_,
    reinterpret_cast<char*>(&sponsor_logo_) -
    reinterpret_cast<char*>(&logo_) + sizeof(sponsor_logo_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAEditTeamDetails)
}

void CMsgDOTAEditTeamDetails::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, reinterpret_cast<char*>(&sponsor_logo_) -
    reinterpret_cast<char*>(&logo_) + sizeof(sponsor_logo_));
}

CMsgDOTAEditTeamDetails::~CMsgDOTAEditTeamDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAEditTeamDetails)
  SharedDtor();
}

void CMsgDOTAEditTeamDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAEditTeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAEditTeamDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAEditTeamDetails& CMsgDOTAEditTeamDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAEditTeamDetails* CMsgDOTAEditTeamDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAEditTeamDetails* n = new CMsgDOTAEditTeamDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAEditTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAEditTeamDetails)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag()) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&logo_, 0, reinterpret_cast<char*>(&in_use_by_party_) -
      reinterpret_cast<char*>(&logo_) + sizeof(in_use_by_party_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&banner_logo_, 0, reinterpret_cast<char*>(&sponsor_logo_) -
      reinterpret_cast<char*>(&banner_logo_) + sizeof(sponsor_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAEditTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAEditTeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditTeamDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditTeamDetails.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 banner_logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_banner_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sponsor_logo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_sponsor_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsor_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditTeamDetails.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditTeamDetails.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_use_by_party = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_in_use_by_party();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_by_party_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAEditTeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAEditTeamDetails)
  return false;
#undef DO_
}

void CMsgDOTAEditTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAEditTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  // optional uint64 base_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->banner_logo(), output);
  }

  // optional uint64 sponsor_logo = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sponsor_logo(), output);
  }

  // optional string country_code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country_code(), output);
  }

  // optional string url = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->url(), output);
  }

  // optional bool in_use_by_party = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->in_use_by_party(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAEditTeamDetails)
}

::google::protobuf::uint8* CMsgDOTAEditTeamDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAEditTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  // optional uint64 base_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sponsor_logo(), target);
  }

  // optional string country_code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country_code(), target);
  }

  // optional string url = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditTeamDetails.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->url(), target);
  }

  // optional bool in_use_by_party = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->in_use_by_party(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAEditTeamDetails)
  return target;
}

size_t CMsgDOTAEditTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAEditTeamDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 8;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 9;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 5;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool in_use_by_party = 10;
    if (has_in_use_by_party()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint64 banner_logo = 6;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint64 sponsor_logo = 7;
    if (has_sponsor_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsor_logo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAEditTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAEditTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditTeamDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAEditTeamDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAEditTeamDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAEditTeamDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditTeamDetails::MergeFrom(const CMsgDOTAEditTeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAEditTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      in_use_by_party_ = from.in_use_by_party_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      banner_logo_ = from.banner_logo_;
    }
    if (cached_has_bits & 0x00000200u) {
      sponsor_logo_ = from.sponsor_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAEditTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAEditTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditTeamDetails::CopyFrom(const CMsgDOTAEditTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAEditTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTAEditTeamDetails::Swap(CMsgDOTAEditTeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditTeamDetails::InternalSwap(CMsgDOTAEditTeamDetails* other) {
  name_.Swap(&other->name_);
  tag_.Swap(&other->tag_);
  country_code_.Swap(&other->country_code_);
  url_.Swap(&other->url_);
  std::swap(logo_, other->logo_);
  std::swap(base_logo_, other->base_logo_);
  std::swap(team_id_, other->team_id_);
  std::swap(in_use_by_party_, other->in_use_by_party_);
  std::swap(banner_logo_, other->banner_logo_);
  std::swap(sponsor_logo_, other->sponsor_logo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAEditTeamDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAEditTeamDetails

// optional uint32 team_id = 1;
bool CMsgDOTAEditTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAEditTeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAEditTeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTAEditTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.team_id)
  return team_id_;
}
void CMsgDOTAEditTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.team_id)
}

// optional string name = 2;
bool CMsgDOTAEditTeamDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAEditTeamDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAEditTeamDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTAEditTeamDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.name)
  return name_.GetNoArena();
}
void CMsgDOTAEditTeamDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.name)
}
#if LANG_CXX11
void CMsgDOTAEditTeamDetails::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAEditTeamDetails.name)
}
#endif
void CMsgDOTAEditTeamDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAEditTeamDetails.name)
}
void CMsgDOTAEditTeamDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAEditTeamDetails.name)
}
::std::string* CMsgDOTAEditTeamDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAEditTeamDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAEditTeamDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAEditTeamDetails.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAEditTeamDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAEditTeamDetails.name)
}

// optional string tag = 3;
bool CMsgDOTAEditTeamDetails::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAEditTeamDetails::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAEditTeamDetails::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& CMsgDOTAEditTeamDetails::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.tag)
  return tag_.GetNoArena();
}
void CMsgDOTAEditTeamDetails::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.tag)
}
#if LANG_CXX11
void CMsgDOTAEditTeamDetails::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAEditTeamDetails.tag)
}
#endif
void CMsgDOTAEditTeamDetails::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAEditTeamDetails.tag)
}
void CMsgDOTAEditTeamDetails::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAEditTeamDetails.tag)
}
::std::string* CMsgDOTAEditTeamDetails::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAEditTeamDetails.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAEditTeamDetails::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAEditTeamDetails.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAEditTeamDetails::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAEditTeamDetails.tag)
}

// optional uint64 logo = 4;
bool CMsgDOTAEditTeamDetails::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAEditTeamDetails::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAEditTeamDetails::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAEditTeamDetails::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.logo)
  return logo_;
}
void CMsgDOTAEditTeamDetails::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.logo)
}

// optional uint64 base_logo = 5;
bool CMsgDOTAEditTeamDetails::has_base_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_base_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAEditTeamDetails::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAEditTeamDetails::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
::google::protobuf::uint64 CMsgDOTAEditTeamDetails::base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.base_logo)
  return base_logo_;
}
void CMsgDOTAEditTeamDetails::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.base_logo)
}

// optional uint64 banner_logo = 6;
bool CMsgDOTAEditTeamDetails::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAEditTeamDetails::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAEditTeamDetails::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
::google::protobuf::uint64 CMsgDOTAEditTeamDetails::banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.banner_logo)
  return banner_logo_;
}
void CMsgDOTAEditTeamDetails::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.banner_logo)
}

// optional uint64 sponsor_logo = 7;
bool CMsgDOTAEditTeamDetails::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAEditTeamDetails::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAEditTeamDetails::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
::google::protobuf::uint64 CMsgDOTAEditTeamDetails::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.sponsor_logo)
  return sponsor_logo_;
}
void CMsgDOTAEditTeamDetails::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.sponsor_logo)
}

// optional string country_code = 8;
bool CMsgDOTAEditTeamDetails::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAEditTeamDetails::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAEditTeamDetails::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& CMsgDOTAEditTeamDetails::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.country_code)
  return country_code_.GetNoArena();
}
void CMsgDOTAEditTeamDetails::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}
#if LANG_CXX11
void CMsgDOTAEditTeamDetails::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}
#endif
void CMsgDOTAEditTeamDetails::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}
void CMsgDOTAEditTeamDetails::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}
::std::string* CMsgDOTAEditTeamDetails::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAEditTeamDetails.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAEditTeamDetails::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAEditTeamDetails.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAEditTeamDetails::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}

// optional string url = 9;
bool CMsgDOTAEditTeamDetails::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAEditTeamDetails::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAEditTeamDetails::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgDOTAEditTeamDetails::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.url)
  return url_.GetNoArena();
}
void CMsgDOTAEditTeamDetails::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.url)
}
#if LANG_CXX11
void CMsgDOTAEditTeamDetails::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAEditTeamDetails.url)
}
#endif
void CMsgDOTAEditTeamDetails::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAEditTeamDetails.url)
}
void CMsgDOTAEditTeamDetails::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAEditTeamDetails.url)
}
::std::string* CMsgDOTAEditTeamDetails::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAEditTeamDetails.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAEditTeamDetails::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAEditTeamDetails.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAEditTeamDetails::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAEditTeamDetails.url)
}

// optional bool in_use_by_party = 10;
bool CMsgDOTAEditTeamDetails::has_in_use_by_party() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAEditTeamDetails::set_has_in_use_by_party() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAEditTeamDetails::clear_has_in_use_by_party() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAEditTeamDetails::clear_in_use_by_party() {
  in_use_by_party_ = false;
  clear_has_in_use_by_party();
}
bool CMsgDOTAEditTeamDetails::in_use_by_party() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.in_use_by_party)
  return in_use_by_party_;
}
void CMsgDOTAEditTeamDetails::set_in_use_by_party(bool value) {
  set_has_in_use_by_party();
  in_use_by_party_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.in_use_by_party)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAEditTeamDetailsResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAEditTeamDetailsResponse)
}
CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse(const CMsgDOTAEditTeamDetailsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAEditTeamDetailsResponse)
}

void CMsgDOTAEditTeamDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAEditTeamDetailsResponse::~CMsgDOTAEditTeamDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  SharedDtor();
}

void CMsgDOTAEditTeamDetailsResponse::SharedDtor() {
}

void CMsgDOTAEditTeamDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAEditTeamDetailsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAEditTeamDetailsResponse& CMsgDOTAEditTeamDetailsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAEditTeamDetailsResponse* CMsgDOTAEditTeamDetailsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAEditTeamDetailsResponse* n = new CMsgDOTAEditTeamDetailsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAEditTeamDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAEditTeamDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  return false;
#undef DO_
}

void CMsgDOTAEditTeamDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAEditTeamDetailsResponse)
}

::google::protobuf::uint8* CMsgDOTAEditTeamDetailsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  return target;
}

size_t CMsgDOTAEditTeamDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAEditTeamDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditTeamDetailsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAEditTeamDetailsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAEditTeamDetailsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAEditTeamDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditTeamDetailsResponse::MergeFrom(const CMsgDOTAEditTeamDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAEditTeamDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditTeamDetailsResponse::CopyFrom(const CMsgDOTAEditTeamDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAEditTeamDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAEditTeamDetailsResponse::Swap(CMsgDOTAEditTeamDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditTeamDetailsResponse::InternalSwap(CMsgDOTAEditTeamDetailsResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAEditTeamDetailsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAEditTeamDetailsResponse

// optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
bool CMsgDOTAEditTeamDetailsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAEditTeamDetailsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAEditTeamDetailsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAEditTeamDetailsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetailsResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result >(result_);
}
void CMsgDOTAEditTeamDetailsResponse::set_result(::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result value) {
  assert(::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetailsResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamProfileResponse::kEresultFieldNumber;
const int CMsgDOTATeamProfileResponse::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamProfileResponse::CMsgDOTATeamProfileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamProfileResponse)
}
CMsgDOTATeamProfileResponse::CMsgDOTATeamProfileResponse(const CMsgDOTATeamProfileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team()) {
    team_ = new ::proto::dota::CMsgDOTATeam(*from.team_);
  } else {
    team_ = NULL;
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamProfileResponse)
}

void CMsgDOTATeamProfileResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_, 0, reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&team_) + sizeof(eresult_));
}

CMsgDOTATeamProfileResponse::~CMsgDOTATeamProfileResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamProfileResponse)
  SharedDtor();
}

void CMsgDOTATeamProfileResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete team_;
  }
}

void CMsgDOTATeamProfileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamProfileResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamProfileResponse& CMsgDOTATeamProfileResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamProfileResponse* CMsgDOTATeamProfileResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamProfileResponse* n = new CMsgDOTATeamProfileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamProfileResponse)
  if (has_team()) {
    GOOGLE_DCHECK(team_ != NULL);
    team_->::proto::dota::CMsgDOTATeam::Clear();
  }
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamProfileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTATeam team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamProfileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamProfileResponse)
  return false;
#undef DO_
}

void CMsgDOTATeamProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamProfileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional .proto.dota.CMsgDOTATeam team = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->team_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamProfileResponse)
}

::google::protobuf::uint8* CMsgDOTATeamProfileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamProfileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional .proto.dota.CMsgDOTATeam team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->team_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamProfileResponse)
  return target;
}

size_t CMsgDOTATeamProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamProfileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDOTATeam team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->team_);
    }

    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamProfileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamProfileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamProfileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamProfileResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamProfileResponse::MergeFrom(const CMsgDOTATeamProfileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team()->::proto::dota::CMsgDOTATeam::MergeFrom(from.team());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamProfileResponse::CopyFrom(const CMsgDOTATeamProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamProfileResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATeamProfileResponse::Swap(CMsgDOTATeamProfileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamProfileResponse::InternalSwap(CMsgDOTATeamProfileResponse* other) {
  std::swap(team_, other->team_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamProfileResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamProfileResponse

// optional uint32 eresult = 1;
bool CMsgDOTATeamProfileResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamProfileResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamProfileResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamProfileResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgDOTATeamProfileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamProfileResponse.eresult)
  return eresult_;
}
void CMsgDOTATeamProfileResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamProfileResponse.eresult)
}

// optional .proto.dota.CMsgDOTATeam team = 2;
bool CMsgDOTATeamProfileResponse::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamProfileResponse::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamProfileResponse::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamProfileResponse::clear_team() {
  if (team_ != NULL) team_->::proto::dota::CMsgDOTATeam::Clear();
  clear_has_team();
}
const ::proto::dota::CMsgDOTATeam& CMsgDOTATeamProfileResponse::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamProfileResponse.team)
  return team_ != NULL ? *team_
                         : *::proto::dota::CMsgDOTATeam::internal_default_instance();
}
::proto::dota::CMsgDOTATeam* CMsgDOTATeamProfileResponse::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    team_ = new ::proto::dota::CMsgDOTATeam;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamProfileResponse.team)
  return team_;
}
::proto::dota::CMsgDOTATeam* CMsgDOTATeamProfileResponse::release_team() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamProfileResponse.team)
  clear_has_team();
  ::proto::dota::CMsgDOTATeam* temp = team_;
  team_ = NULL;
  return temp;
}
void CMsgDOTATeamProfileResponse::set_allocated_team(::proto::dota::CMsgDOTATeam* team) {
  delete team_;
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamProfileResponse.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProTeamListRequest::CMsgDOTAProTeamListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProTeamListRequest)
}
CMsgDOTAProTeamListRequest::CMsgDOTAProTeamListRequest(const CMsgDOTAProTeamListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProTeamListRequest)
}

void CMsgDOTAProTeamListRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAProTeamListRequest::~CMsgDOTAProTeamListRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProTeamListRequest)
  SharedDtor();
}

void CMsgDOTAProTeamListRequest::SharedDtor() {
}

void CMsgDOTAProTeamListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProTeamListRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProTeamListRequest& CMsgDOTAProTeamListRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProTeamListRequest* CMsgDOTAProTeamListRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProTeamListRequest* n = new CMsgDOTAProTeamListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProTeamListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProTeamListRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProTeamListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProTeamListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProTeamListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProTeamListRequest)
  return false;
#undef DO_
}

void CMsgDOTAProTeamListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProTeamListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProTeamListRequest)
}

::google::protobuf::uint8* CMsgDOTAProTeamListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProTeamListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProTeamListRequest)
  return target;
}

size_t CMsgDOTAProTeamListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProTeamListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProTeamListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProTeamListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProTeamListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProTeamListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProTeamListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProTeamListRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListRequest::MergeFrom(const CMsgDOTAProTeamListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProTeamListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTAProTeamListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProTeamListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListRequest::CopyFrom(const CMsgDOTAProTeamListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProTeamListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAProTeamListRequest::Swap(CMsgDOTAProTeamListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProTeamListRequest::InternalSwap(CMsgDOTAProTeamListRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProTeamListRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProTeamListRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProTeamListResponse_TeamEntry::kTeamIdFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kTagFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kTimeCreatedFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kLogoFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kCountryCodeFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kMemberCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProTeamListResponse_TeamEntry::CMsgDOTAProTeamListResponse_TeamEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
}
CMsgDOTAProTeamListResponse_TeamEntry::CMsgDOTAProTeamListResponse_TeamEntry(const CMsgDOTAProTeamListResponse_TeamEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
}

void CMsgDOTAProTeamListResponse_TeamEntry::SharedCtor() {
  _cached_size_ = 0;
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(member_count_));
}

CMsgDOTAProTeamListResponse_TeamEntry::~CMsgDOTAProTeamListResponse_TeamEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  SharedDtor();
}

void CMsgDOTAProTeamListResponse_TeamEntry::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAProTeamListResponse_TeamEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProTeamListResponse_TeamEntry::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProTeamListResponse_TeamEntry& CMsgDOTAProTeamListResponse_TeamEntry::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProTeamListResponse_TeamEntry* CMsgDOTAProTeamListResponse_TeamEntry::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProTeamListResponse_TeamEntry* n = new CMsgDOTAProTeamListResponse_TeamEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProTeamListResponse_TeamEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tag()) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&team_id_, 0, reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&team_id_) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProTeamListResponse_TeamEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_member_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  return false;
#undef DO_
}

void CMsgDOTAProTeamListResponse_TeamEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_created(), output);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  // optional string country_code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->country_code(), output);
  }

  // optional uint32 member_count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->member_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
}

::google::protobuf::uint8* CMsgDOTAProTeamListResponse_TeamEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_created(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  // optional string country_code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->country_code(), target);
  }

  // optional uint32 member_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->member_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  return target;
}

size_t CMsgDOTAProTeamListResponse_TeamEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string country_code = 5;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 time_created = 3;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint64 logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint32 member_count = 6;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProTeamListResponse_TeamEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProTeamListResponse_TeamEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProTeamListResponse_TeamEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListResponse_TeamEntry::MergeFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProTeamListResponse_TeamEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListResponse_TeamEntry::CopyFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListResponse_TeamEntry::IsInitialized() const {
  return true;
}

void CMsgDOTAProTeamListResponse_TeamEntry::Swap(CMsgDOTAProTeamListResponse_TeamEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProTeamListResponse_TeamEntry::InternalSwap(CMsgDOTAProTeamListResponse_TeamEntry* other) {
  tag_.Swap(&other->tag_);
  country_code_.Swap(&other->country_code_);
  std::swap(team_id_, other->team_id_);
  std::swap(time_created_, other->time_created_);
  std::swap(logo_, other->logo_);
  std::swap(member_count_, other->member_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProTeamListResponse_TeamEntry::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProTeamListResponse_TeamEntry

// optional uint32 team_id = 1;
bool CMsgDOTAProTeamListResponse_TeamEntry::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTAProTeamListResponse_TeamEntry::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.team_id)
  return team_id_;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.team_id)
}

// optional string tag = 2;
bool CMsgDOTAProTeamListResponse_TeamEntry::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& CMsgDOTAProTeamListResponse_TeamEntry::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
  return tag_.GetNoArena();
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
#if LANG_CXX11
void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
#endif
void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
::std::string* CMsgDOTAProTeamListResponse_TeamEntry::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAProTeamListResponse_TeamEntry::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}

// optional uint32 time_created = 3;
bool CMsgDOTAProTeamListResponse_TeamEntry::has_time_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_has_time_created() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CMsgDOTAProTeamListResponse_TeamEntry::time_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.time_created)
  return time_created_;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.time_created)
}

// optional uint64 logo = 4;
bool CMsgDOTAProTeamListResponse_TeamEntry::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAProTeamListResponse_TeamEntry::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.logo)
  return logo_;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.logo)
}

// optional string country_code = 5;
bool CMsgDOTAProTeamListResponse_TeamEntry::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& CMsgDOTAProTeamListResponse_TeamEntry::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
  return country_code_.GetNoArena();
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
#if LANG_CXX11
void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
#endif
void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
::std::string* CMsgDOTAProTeamListResponse_TeamEntry::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAProTeamListResponse_TeamEntry::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}

// optional uint32 member_count = 6;
bool CMsgDOTAProTeamListResponse_TeamEntry::has_member_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_has_member_count() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAProTeamListResponse_TeamEntry::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
::google::protobuf::uint32 CMsgDOTAProTeamListResponse_TeamEntry::member_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.member_count)
  return member_count_;
}
void CMsgDOTAProTeamListResponse_TeamEntry::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.member_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProTeamListResponse::kTeamsFieldNumber;
const int CMsgDOTAProTeamListResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProTeamListResponse::CMsgDOTAProTeamListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProTeamListResponse)
}
CMsgDOTAProTeamListResponse::CMsgDOTAProTeamListResponse(const CMsgDOTAProTeamListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProTeamListResponse)
}

void CMsgDOTAProTeamListResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
}

CMsgDOTAProTeamListResponse::~CMsgDOTAProTeamListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProTeamListResponse)
  SharedDtor();
}

void CMsgDOTAProTeamListResponse::SharedDtor() {
}

void CMsgDOTAProTeamListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProTeamListResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProTeamListResponse& CMsgDOTAProTeamListResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProTeamListResponse* CMsgDOTAProTeamListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProTeamListResponse* n = new CMsgDOTAProTeamListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProTeamListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProTeamListResponse)
  teams_.Clear();
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProTeamListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProTeamListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProTeamListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProTeamListResponse)
  return false;
#undef DO_
}

void CMsgDOTAProTeamListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProTeamListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProTeamListResponse)
}

::google::protobuf::uint8* CMsgDOTAProTeamListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProTeamListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->teams(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProTeamListResponse)
  return target;
}

size_t CMsgDOTAProTeamListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProTeamListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  {
    unsigned int count = this->teams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(i));
    }
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProTeamListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProTeamListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProTeamListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProTeamListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProTeamListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProTeamListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListResponse::MergeFrom(const CMsgDOTAProTeamListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProTeamListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgDOTAProTeamListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProTeamListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListResponse::CopyFrom(const CMsgDOTAProTeamListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProTeamListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAProTeamListResponse::Swap(CMsgDOTAProTeamListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProTeamListResponse::InternalSwap(CMsgDOTAProTeamListResponse* other) {
  teams_.InternalSwap(&other->teams_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProTeamListResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProTeamListResponse

// repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
int CMsgDOTAProTeamListResponse::teams_size() const {
  return teams_.size();
}
void CMsgDOTAProTeamListResponse::clear_teams() {
  teams_.Clear();
}
const ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry& CMsgDOTAProTeamListResponse::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return teams_.Get(index);
}
::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry* CMsgDOTAProTeamListResponse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return teams_.Mutable(index);
}
::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry* CMsgDOTAProTeamListResponse::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry >*
CMsgDOTAProTeamListResponse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry >&
CMsgDOTAProTeamListResponse::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return teams_;
}

// optional uint32 eresult = 2;
bool CMsgDOTAProTeamListResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProTeamListResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProTeamListResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProTeamListResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgDOTAProTeamListResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.eresult)
  return eresult_;
}
void CMsgDOTAProTeamListResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_InviterToGC::kAccountIdFieldNumber;
const int CMsgDOTATeamInvite_InviterToGC::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_InviterToGC)
}
CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC(const CMsgDOTATeamInvite_InviterToGC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_InviterToGC)
}

void CMsgDOTATeamInvite_InviterToGC::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(team_id_));
}

CMsgDOTATeamInvite_InviterToGC::~CMsgDOTATeamInvite_InviterToGC() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  SharedDtor();
}

void CMsgDOTATeamInvite_InviterToGC::SharedDtor() {
}

void CMsgDOTATeamInvite_InviterToGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_InviterToGC::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamInvite_InviterToGC& CMsgDOTATeamInvite_InviterToGC::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamInvite_InviterToGC* CMsgDOTATeamInvite_InviterToGC::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamInvite_InviterToGC* n = new CMsgDOTATeamInvite_InviterToGC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamInvite_InviterToGC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamInvite_InviterToGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_InviterToGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_InviterToGC)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_InviterToGC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  return target;
}

size_t CMsgDOTATeamInvite_InviterToGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_InviterToGC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_InviterToGC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamInvite_InviterToGC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_InviterToGC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_InviterToGC)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_InviterToGC::MergeFrom(const CMsgDOTATeamInvite_InviterToGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_InviterToGC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_InviterToGC::CopyFrom(const CMsgDOTATeamInvite_InviterToGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_InviterToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviterToGC::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_InviterToGC::Swap(CMsgDOTATeamInvite_InviterToGC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_InviterToGC::InternalSwap(CMsgDOTATeamInvite_InviterToGC* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_InviterToGC::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamInvite_InviterToGC

// optional uint32 account_id = 1;
bool CMsgDOTATeamInvite_InviterToGC::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamInvite_InviterToGC::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamInvite_InviterToGC::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamInvite_InviterToGC::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTATeamInvite_InviterToGC::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_InviterToGC.account_id)
  return account_id_;
}
void CMsgDOTATeamInvite_InviterToGC::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_InviterToGC.account_id)
}

// optional uint32 team_id = 2;
bool CMsgDOTATeamInvite_InviterToGC::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamInvite_InviterToGC::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamInvite_InviterToGC::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamInvite_InviterToGC::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTATeamInvite_InviterToGC::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_InviterToGC.team_id)
  return team_id_;
}
void CMsgDOTATeamInvite_InviterToGC::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_InviterToGC.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter::kResultFieldNumber;
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter::kInviteeNameFieldNumber;
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter::kRequiredBadgeLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}
CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invitee_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invitee_name()) {
    invitee_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&required_badge_level_) -
    reinterpret_cast<char*>(&result_) + sizeof(required_badge_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedCtor() {
  _cached_size_ = 0;
  invitee_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&required_badge_level_) -
    reinterpret_cast<char*>(&result_) + sizeof(required_badge_level_));
}

CMsgDOTATeamInvite_GCImmediateResponseToInviter::~CMsgDOTATeamInvite_GCImmediateResponseToInviter() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedDtor() {
  invitee_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCImmediateResponseToInviter::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamInvite_GCImmediateResponseToInviter& CMsgDOTATeamInvite_GCImmediateResponseToInviter::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamInvite_GCImmediateResponseToInviter* CMsgDOTATeamInvite_GCImmediateResponseToInviter::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamInvite_GCImmediateResponseToInviter* n = new CMsgDOTATeamInvite_GCImmediateResponseToInviter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  if (has_invitee_name()) {
    GOOGLE_DCHECK(!invitee_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*invitee_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&required_badge_level_) -
      reinterpret_cast<char*>(&result_) + sizeof(required_badge_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invitee_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitee_name().data(), this->invitee_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 required_badge_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_required_badge_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_badge_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invitee_name(), output);
  }

  // optional uint32 required_badge_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->required_badge_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCImmediateResponseToInviter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitee_name(), target);
  }

  // optional uint32 required_badge_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->required_badge_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return target;
}

size_t CMsgDOTATeamInvite_GCImmediateResponseToInviter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string invitee_name = 2;
    if (has_invitee_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitee_name());
    }

    // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 required_badge_level = 3;
    if (has_required_badge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_badge_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCImmediateResponseToInviter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamInvite_GCImmediateResponseToInviter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_invitee_name();
      invitee_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      required_badge_level_ = from.required_badge_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::Swap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::InternalSwap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other) {
  invitee_name_.Swap(&other->invitee_name_);
  std::swap(result_, other->result_);
  std::swap(required_badge_level_, other->required_badge_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCImmediateResponseToInviter::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamInvite_GCImmediateResponseToInviter

// optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::ETeamInviteResult CMsgDOTATeamInvite_GCImmediateResponseToInviter::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.result)
  return static_cast< ::proto::dota::ETeamInviteResult >(result_);
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_result(::proto::dota::ETeamInviteResult value) {
  assert(::proto::dota::ETeamInviteResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.result)
}

// optional string invitee_name = 2;
bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::has_invitee_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_has_invitee_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_has_invitee_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_invitee_name() {
  invitee_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invitee_name();
}
const ::std::string& CMsgDOTATeamInvite_GCImmediateResponseToInviter::invitee_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
  return invitee_name_.GetNoArena();
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(const ::std::string& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
#if LANG_CXX11
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(::std::string&& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
#endif
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(const char* value, size_t size) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
::std::string* CMsgDOTATeamInvite_GCImmediateResponseToInviter::mutable_invitee_name() {
  set_has_invitee_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
  return invitee_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeamInvite_GCImmediateResponseToInviter::release_invitee_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
  clear_has_invitee_name();
  return invitee_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_allocated_invitee_name(::std::string* invitee_name) {
  if (invitee_name != NULL) {
    set_has_invitee_name();
  } else {
    clear_has_invitee_name();
  }
  invitee_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}

// optional uint32 required_badge_level = 3;
bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::has_required_badge_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_has_required_badge_level() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_has_required_badge_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_required_badge_level() {
  required_badge_level_ = 0u;
  clear_has_required_badge_level();
}
::google::protobuf::uint32 CMsgDOTATeamInvite_GCImmediateResponseToInviter::required_badge_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.required_badge_level)
  return required_badge_level_;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_required_badge_level(::google::protobuf::uint32 value) {
  set_has_required_badge_level();
  required_badge_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.required_badge_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_GCRequestToInvitee::kInviterAccountIdFieldNumber;
const int CMsgDOTATeamInvite_GCRequestToInvitee::kTeamNameFieldNumber;
const int CMsgDOTATeamInvite_GCRequestToInvitee::kTeamTagFieldNumber;
const int CMsgDOTATeamInvite_GCRequestToInvitee::kLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
}
CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee(const CMsgDOTATeamInvite_GCRequestToInvitee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  ::memcpy(&logo_, &from.logo_,
    reinterpret_cast<char*>(&inviter_account_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(inviter_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, reinterpret_cast<char*>(&inviter_account_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(inviter_account_id_));
}

CMsgDOTATeamInvite_GCRequestToInvitee::~CMsgDOTATeamInvite_GCRequestToInvitee() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCRequestToInvitee::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamInvite_GCRequestToInvitee& CMsgDOTATeamInvite_GCRequestToInvitee::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamInvite_GCRequestToInvitee* CMsgDOTATeamInvite_GCRequestToInvitee::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamInvite_GCRequestToInvitee* n = new CMsgDOTATeamInvite_GCRequestToInvitee;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_team_name()) {
      GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_team_tag()) {
      GOOGLE_DCHECK(!team_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_tag_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&logo_, 0, reinterpret_cast<char*>(&inviter_account_id_) -
      reinterpret_cast<char*>(&logo_) + sizeof(inviter_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamInvite_GCRequestToInvitee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 inviter_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_inviter_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviter_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 inviter_account_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inviter_account_id(), output);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_tag(), output);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCRequestToInvitee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 inviter_account_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inviter_account_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_tag(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  return target;
}

size_t CMsgDOTATeamInvite_GCRequestToInvitee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 3;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional uint64 logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint32 inviter_account_id = 1;
    if (has_inviter_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviter_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCRequestToInvitee* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamInvite_GCRequestToInvitee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCRequestToInvitee::MergeFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_team_tag();
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      inviter_account_id_ = from.inviter_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCRequestToInvitee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCRequestToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCRequestToInvitee::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::Swap(CMsgDOTATeamInvite_GCRequestToInvitee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_GCRequestToInvitee::InternalSwap(CMsgDOTATeamInvite_GCRequestToInvitee* other) {
  team_name_.Swap(&other->team_name_);
  team_tag_.Swap(&other->team_tag_);
  std::swap(logo_, other->logo_);
  std::swap(inviter_account_id_, other->inviter_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCRequestToInvitee::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamInvite_GCRequestToInvitee

// optional uint32 inviter_account_id = 1;
bool CMsgDOTATeamInvite_GCRequestToInvitee::has_inviter_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_inviter_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_inviter_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::clear_inviter_account_id() {
  inviter_account_id_ = 0u;
  clear_has_inviter_account_id();
}
::google::protobuf::uint32 CMsgDOTATeamInvite_GCRequestToInvitee::inviter_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.inviter_account_id)
  return inviter_account_id_;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_inviter_account_id(::google::protobuf::uint32 value) {
  set_has_inviter_account_id();
  inviter_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.inviter_account_id)
}

// optional string team_name = 2;
bool CMsgDOTATeamInvite_GCRequestToInvitee::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTATeamInvite_GCRequestToInvitee::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
#if LANG_CXX11
void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
#endif
void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}

// optional string team_tag = 3;
bool CMsgDOTATeamInvite_GCRequestToInvitee::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_tag();
}
const ::std::string& CMsgDOTATeamInvite_GCRequestToInvitee::team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
  return team_tag_.GetNoArena();
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
#if LANG_CXX11
void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(::std::string&& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
#endif
void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::mutable_team_tag() {
  set_has_team_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::release_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
  clear_has_team_tag();
  return team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != NULL) {
    set_has_team_tag();
  } else {
    clear_has_team_tag();
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}

// optional uint64 logo = 4;
bool CMsgDOTATeamInvite_GCRequestToInvitee::has_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_logo() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTATeamInvite_GCRequestToInvitee::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.logo)
  return logo_;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.logo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_InviteeResponseToGC::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
}
CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC(const CMsgDOTATeamInvite_InviteeResponseToGC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTATeamInvite_InviteeResponseToGC::~CMsgDOTATeamInvite_InviteeResponseToGC() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  SharedDtor();
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SharedDtor() {
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_InviteeResponseToGC::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamInvite_InviteeResponseToGC& CMsgDOTATeamInvite_InviteeResponseToGC::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamInvite_InviteeResponseToGC* CMsgDOTATeamInvite_InviteeResponseToGC::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamInvite_InviteeResponseToGC* n = new CMsgDOTATeamInvite_InviteeResponseToGC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamInvite_InviteeResponseToGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_InviteeResponseToGC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  return target;
}

size_t CMsgDOTATeamInvite_InviteeResponseToGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_InviteeResponseToGC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamInvite_InviteeResponseToGC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_InviteeResponseToGC::MergeFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTATeamInvite_InviteeResponseToGC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_InviteeResponseToGC::CopyFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviteeResponseToGC::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::Swap(CMsgDOTATeamInvite_InviteeResponseToGC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_InviteeResponseToGC::InternalSwap(CMsgDOTATeamInvite_InviteeResponseToGC* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_InviteeResponseToGC::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamInvite_InviteeResponseToGC

// optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
bool CMsgDOTATeamInvite_InviteeResponseToGC::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamInvite_InviteeResponseToGC::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamInvite_InviteeResponseToGC::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamInvite_InviteeResponseToGC::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::ETeamInviteResult CMsgDOTATeamInvite_InviteeResponseToGC::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC.result)
  return static_cast< ::proto::dota::ETeamInviteResult >(result_);
}
void CMsgDOTATeamInvite_InviteeResponseToGC::set_result(::proto::dota::ETeamInviteResult value) {
  assert(::proto::dota::ETeamInviteResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_GCResponseToInviter::kResultFieldNumber;
const int CMsgDOTATeamInvite_GCResponseToInviter::kInviteeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
}
CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter(const CMsgDOTATeamInvite_GCResponseToInviter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invitee_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invitee_name()) {
    invitee_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
}

void CMsgDOTATeamInvite_GCResponseToInviter::SharedCtor() {
  _cached_size_ = 0;
  invitee_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CMsgDOTATeamInvite_GCResponseToInviter::~CMsgDOTATeamInvite_GCResponseToInviter() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCResponseToInviter::SharedDtor() {
  invitee_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCResponseToInviter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCResponseToInviter::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamInvite_GCResponseToInviter& CMsgDOTATeamInvite_GCResponseToInviter::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamInvite_GCResponseToInviter* CMsgDOTATeamInvite_GCResponseToInviter::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamInvite_GCResponseToInviter* n = new CMsgDOTATeamInvite_GCResponseToInviter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamInvite_GCResponseToInviter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  if (has_invitee_name()) {
    GOOGLE_DCHECK(!invitee_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*invitee_name_.UnsafeRawStringPointer())->clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamInvite_GCResponseToInviter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invitee_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitee_name().data(), this->invitee_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_GCResponseToInviter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invitee_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCResponseToInviter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitee_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  return target;
}

size_t CMsgDOTATeamInvite_GCResponseToInviter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string invitee_name = 2;
    if (has_invitee_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitee_name());
    }

    // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_GCResponseToInviter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCResponseToInviter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamInvite_GCResponseToInviter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCResponseToInviter::MergeFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_invitee_name();
      invitee_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCResponseToInviter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInviter::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCResponseToInviter::Swap(CMsgDOTATeamInvite_GCResponseToInviter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_GCResponseToInviter::InternalSwap(CMsgDOTATeamInvite_GCResponseToInviter* other) {
  invitee_name_.Swap(&other->invitee_name_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCResponseToInviter::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamInvite_GCResponseToInviter

// optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
bool CMsgDOTATeamInvite_GCResponseToInviter::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamInvite_GCResponseToInviter::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamInvite_GCResponseToInviter::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamInvite_GCResponseToInviter::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::ETeamInviteResult CMsgDOTATeamInvite_GCResponseToInviter::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.result)
  return static_cast< ::proto::dota::ETeamInviteResult >(result_);
}
void CMsgDOTATeamInvite_GCResponseToInviter::set_result(::proto::dota::ETeamInviteResult value) {
  assert(::proto::dota::ETeamInviteResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.result)
}

// optional string invitee_name = 2;
bool CMsgDOTATeamInvite_GCResponseToInviter::has_invitee_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamInvite_GCResponseToInviter::set_has_invitee_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamInvite_GCResponseToInviter::clear_has_invitee_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamInvite_GCResponseToInviter::clear_invitee_name() {
  invitee_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invitee_name();
}
const ::std::string& CMsgDOTATeamInvite_GCResponseToInviter::invitee_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
  return invitee_name_.GetNoArena();
}
void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(const ::std::string& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
#if LANG_CXX11
void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(::std::string&& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
#endif
void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(const char* value, size_t size) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
::std::string* CMsgDOTATeamInvite_GCResponseToInviter::mutable_invitee_name() {
  set_has_invitee_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
  return invitee_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeamInvite_GCResponseToInviter::release_invitee_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
  clear_has_invitee_name();
  return invitee_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeamInvite_GCResponseToInviter::set_allocated_invitee_name(::std::string* invitee_name) {
  if (invitee_name != NULL) {
    set_has_invitee_name();
  } else {
    clear_has_invitee_name();
  }
  invitee_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATeamInvite_GCResponseToInvitee::kResultFieldNumber;
const int CMsgDOTATeamInvite_GCResponseToInvitee::kTeamNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
}
CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee(const CMsgDOTATeamInvite_GCResponseToInvitee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CMsgDOTATeamInvite_GCResponseToInvitee::~CMsgDOTATeamInvite_GCResponseToInvitee() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCResponseToInvitee::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATeamInvite_GCResponseToInvitee& CMsgDOTATeamInvite_GCResponseToInvitee::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATeamInvite_GCResponseToInvitee* CMsgDOTATeamInvite_GCResponseToInvitee::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATeamInvite_GCResponseToInvitee* n = new CMsgDOTATeamInvite_GCResponseToInvitee;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  if (has_team_name()) {
    GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*team_name_.UnsafeRawStringPointer())->clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATeamInvite_GCResponseToInvitee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCResponseToInvitee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  return target;
}

size_t CMsgDOTATeamInvite_GCResponseToInvitee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCResponseToInvitee* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATeamInvite_GCResponseToInvitee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCResponseToInvitee::MergeFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCResponseToInvitee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCResponseToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInvitee::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::Swap(CMsgDOTATeamInvite_GCResponseToInvitee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATeamInvite_GCResponseToInvitee::InternalSwap(CMsgDOTATeamInvite_GCResponseToInvitee* other) {
  team_name_.Swap(&other->team_name_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCResponseToInvitee::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamInvite_GCResponseToInvitee

// optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
bool CMsgDOTATeamInvite_GCResponseToInvitee::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATeamInvite_GCResponseToInvitee::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATeamInvite_GCResponseToInvitee::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATeamInvite_GCResponseToInvitee::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::ETeamInviteResult CMsgDOTATeamInvite_GCResponseToInvitee::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.result)
  return static_cast< ::proto::dota::ETeamInviteResult >(result_);
}
void CMsgDOTATeamInvite_GCResponseToInvitee::set_result(::proto::dota::ETeamInviteResult value) {
  assert(::proto::dota::ETeamInviteResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.result)
}

// optional string team_name = 2;
bool CMsgDOTATeamInvite_GCResponseToInvitee::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATeamInvite_GCResponseToInvitee::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATeamInvite_GCResponseToInvitee::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATeamInvite_GCResponseToInvitee::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTATeamInvite_GCResponseToInvitee::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
#if LANG_CXX11
void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
#endif
void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
::std::string* CMsgDOTATeamInvite_GCResponseToInvitee::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATeamInvite_GCResponseToInvitee::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATeamInvite_GCResponseToInvitee::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAKickTeamMember::kAccountIdFieldNumber;
const int CMsgDOTAKickTeamMember::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAKickTeamMember)
}
CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember(const CMsgDOTAKickTeamMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAKickTeamMember)
}

void CMsgDOTAKickTeamMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(team_id_));
}

CMsgDOTAKickTeamMember::~CMsgDOTAKickTeamMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAKickTeamMember)
  SharedDtor();
}

void CMsgDOTAKickTeamMember::SharedDtor() {
}

void CMsgDOTAKickTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAKickTeamMember::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAKickTeamMember& CMsgDOTAKickTeamMember::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAKickTeamMember* CMsgDOTAKickTeamMember::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAKickTeamMember* n = new CMsgDOTAKickTeamMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAKickTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAKickTeamMember)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAKickTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAKickTeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAKickTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAKickTeamMember)
  return false;
#undef DO_
}

void CMsgDOTAKickTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAKickTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAKickTeamMember)
}

::google::protobuf::uint8* CMsgDOTAKickTeamMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAKickTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAKickTeamMember)
  return target;
}

size_t CMsgDOTAKickTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAKickTeamMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAKickTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAKickTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAKickTeamMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAKickTeamMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAKickTeamMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAKickTeamMember)
    MergeFrom(*source);
  }
}

void CMsgDOTAKickTeamMember::MergeFrom(const CMsgDOTAKickTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAKickTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAKickTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAKickTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAKickTeamMember::CopyFrom(const CMsgDOTAKickTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAKickTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMember::IsInitialized() const {
  return true;
}

void CMsgDOTAKickTeamMember::Swap(CMsgDOTAKickTeamMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAKickTeamMember::InternalSwap(CMsgDOTAKickTeamMember* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAKickTeamMember::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAKickTeamMember

// optional uint32 account_id = 1;
bool CMsgDOTAKickTeamMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAKickTeamMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAKickTeamMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAKickTeamMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAKickTeamMember::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAKickTeamMember.account_id)
  return account_id_;
}
void CMsgDOTAKickTeamMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAKickTeamMember.account_id)
}

// optional uint32 team_id = 2;
bool CMsgDOTAKickTeamMember::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAKickTeamMember::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAKickTeamMember::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAKickTeamMember::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTAKickTeamMember::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAKickTeamMember.team_id)
  return team_id_;
}
void CMsgDOTAKickTeamMember::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAKickTeamMember.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAKickTeamMemberResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAKickTeamMemberResponse)
}
CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse(const CMsgDOTAKickTeamMemberResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAKickTeamMemberResponse)
}

void CMsgDOTAKickTeamMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAKickTeamMemberResponse::~CMsgDOTAKickTeamMemberResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAKickTeamMemberResponse)
  SharedDtor();
}

void CMsgDOTAKickTeamMemberResponse::SharedDtor() {
}

void CMsgDOTAKickTeamMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAKickTeamMemberResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAKickTeamMemberResponse& CMsgDOTAKickTeamMemberResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAKickTeamMemberResponse* CMsgDOTAKickTeamMemberResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAKickTeamMemberResponse* n = new CMsgDOTAKickTeamMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAKickTeamMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAKickTeamMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAKickTeamMemberResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAKickTeamMemberResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAKickTeamMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAKickTeamMemberResponse)
  return false;
#undef DO_
}

void CMsgDOTAKickTeamMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAKickTeamMemberResponse)
}

::google::protobuf::uint8* CMsgDOTAKickTeamMemberResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAKickTeamMemberResponse)
  return target;
}

size_t CMsgDOTAKickTeamMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAKickTeamMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAKickTeamMemberResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAKickTeamMemberResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAKickTeamMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAKickTeamMemberResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAKickTeamMemberResponse::MergeFrom(const CMsgDOTAKickTeamMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAKickTeamMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAKickTeamMemberResponse::CopyFrom(const CMsgDOTAKickTeamMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAKickTeamMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMemberResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAKickTeamMemberResponse::Swap(CMsgDOTAKickTeamMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAKickTeamMemberResponse::InternalSwap(CMsgDOTAKickTeamMemberResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAKickTeamMemberResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAKickTeamMemberResponse

// optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
bool CMsgDOTAKickTeamMemberResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAKickTeamMemberResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAKickTeamMemberResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAKickTeamMemberResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAKickTeamMemberResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAKickTeamMemberResponse_Result >(result_);
}
void CMsgDOTAKickTeamMemberResponse::set_result(::proto::dota::CMsgDOTAKickTeamMemberResponse_Result value) {
  assert(::proto::dota::CMsgDOTAKickTeamMemberResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAKickTeamMemberResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATransferTeamAdmin::kNewAdminAccountIdFieldNumber;
const int CMsgDOTATransferTeamAdmin::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATransferTeamAdmin)
}
CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin(const CMsgDOTATransferTeamAdmin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_admin_account_id_, &from.new_admin_account_id_,
    reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&new_admin_account_id_) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATransferTeamAdmin)
}

void CMsgDOTATransferTeamAdmin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&new_admin_account_id_, 0, reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&new_admin_account_id_) + sizeof(team_id_));
}

CMsgDOTATransferTeamAdmin::~CMsgDOTATransferTeamAdmin() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATransferTeamAdmin)
  SharedDtor();
}

void CMsgDOTATransferTeamAdmin::SharedDtor() {
}

void CMsgDOTATransferTeamAdmin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATransferTeamAdmin::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATransferTeamAdmin& CMsgDOTATransferTeamAdmin::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATransferTeamAdmin* CMsgDOTATransferTeamAdmin::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATransferTeamAdmin* n = new CMsgDOTATransferTeamAdmin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATransferTeamAdmin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATransferTeamAdmin)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&new_admin_account_id_, 0, reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&new_admin_account_id_) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATransferTeamAdmin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATransferTeamAdmin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_admin_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_new_admin_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_admin_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATransferTeamAdmin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATransferTeamAdmin)
  return false;
#undef DO_
}

void CMsgDOTATransferTeamAdmin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATransferTeamAdmin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_admin_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_admin_account_id(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATransferTeamAdmin)
}

::google::protobuf::uint8* CMsgDOTATransferTeamAdmin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATransferTeamAdmin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_admin_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_admin_account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATransferTeamAdmin)
  return target;
}

size_t CMsgDOTATransferTeamAdmin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATransferTeamAdmin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 new_admin_account_id = 1;
    if (has_new_admin_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_admin_account_id());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATransferTeamAdmin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATransferTeamAdmin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATransferTeamAdmin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATransferTeamAdmin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATransferTeamAdmin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATransferTeamAdmin)
    MergeFrom(*source);
  }
}

void CMsgDOTATransferTeamAdmin::MergeFrom(const CMsgDOTATransferTeamAdmin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATransferTeamAdmin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      new_admin_account_id_ = from.new_admin_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATransferTeamAdmin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATransferTeamAdmin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATransferTeamAdmin::CopyFrom(const CMsgDOTATransferTeamAdmin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATransferTeamAdmin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdmin::IsInitialized() const {
  return true;
}

void CMsgDOTATransferTeamAdmin::Swap(CMsgDOTATransferTeamAdmin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATransferTeamAdmin::InternalSwap(CMsgDOTATransferTeamAdmin* other) {
  std::swap(new_admin_account_id_, other->new_admin_account_id_);
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATransferTeamAdmin::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATransferTeamAdmin

// optional uint32 new_admin_account_id = 1;
bool CMsgDOTATransferTeamAdmin::has_new_admin_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATransferTeamAdmin::set_has_new_admin_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATransferTeamAdmin::clear_has_new_admin_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATransferTeamAdmin::clear_new_admin_account_id() {
  new_admin_account_id_ = 0u;
  clear_has_new_admin_account_id();
}
::google::protobuf::uint32 CMsgDOTATransferTeamAdmin::new_admin_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATransferTeamAdmin.new_admin_account_id)
  return new_admin_account_id_;
}
void CMsgDOTATransferTeamAdmin::set_new_admin_account_id(::google::protobuf::uint32 value) {
  set_has_new_admin_account_id();
  new_admin_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATransferTeamAdmin.new_admin_account_id)
}

// optional uint32 team_id = 2;
bool CMsgDOTATransferTeamAdmin::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATransferTeamAdmin::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATransferTeamAdmin::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATransferTeamAdmin::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTATransferTeamAdmin::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATransferTeamAdmin.team_id)
  return team_id_;
}
void CMsgDOTATransferTeamAdmin::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATransferTeamAdmin.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATransferTeamAdminResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATransferTeamAdminResponse)
}
CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse(const CMsgDOTATransferTeamAdminResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATransferTeamAdminResponse)
}

void CMsgDOTATransferTeamAdminResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTATransferTeamAdminResponse::~CMsgDOTATransferTeamAdminResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATransferTeamAdminResponse)
  SharedDtor();
}

void CMsgDOTATransferTeamAdminResponse::SharedDtor() {
}

void CMsgDOTATransferTeamAdminResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATransferTeamAdminResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATransferTeamAdminResponse& CMsgDOTATransferTeamAdminResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATransferTeamAdminResponse* CMsgDOTATransferTeamAdminResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATransferTeamAdminResponse* n = new CMsgDOTATransferTeamAdminResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATransferTeamAdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATransferTeamAdminResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTATransferTeamAdminResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTATransferTeamAdminResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATransferTeamAdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATransferTeamAdminResponse)
  return false;
#undef DO_
}

void CMsgDOTATransferTeamAdminResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATransferTeamAdminResponse)
}

::google::protobuf::uint8* CMsgDOTATransferTeamAdminResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATransferTeamAdminResponse)
  return target;
}

size_t CMsgDOTATransferTeamAdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATransferTeamAdminResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATransferTeamAdminResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATransferTeamAdminResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATransferTeamAdminResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATransferTeamAdminResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTATransferTeamAdminResponse::MergeFrom(const CMsgDOTATransferTeamAdminResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTATransferTeamAdminResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATransferTeamAdminResponse::CopyFrom(const CMsgDOTATransferTeamAdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATransferTeamAdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdminResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATransferTeamAdminResponse::Swap(CMsgDOTATransferTeamAdminResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATransferTeamAdminResponse::InternalSwap(CMsgDOTATransferTeamAdminResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATransferTeamAdminResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATransferTeamAdminResponse

// optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
bool CMsgDOTATransferTeamAdminResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATransferTeamAdminResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATransferTeamAdminResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATransferTeamAdminResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATransferTeamAdminResponse.result)
  return static_cast< ::proto::dota::CMsgDOTATransferTeamAdminResponse_Result >(result_);
}
void CMsgDOTATransferTeamAdminResponse::set_result(::proto::dota::CMsgDOTATransferTeamAdminResponse_Result value) {
  assert(::proto::dota::CMsgDOTATransferTeamAdminResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATransferTeamAdminResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChangeTeamSub::kTeamIdFieldNumber;
const int CMsgDOTAChangeTeamSub::kMemberAccountIdFieldNumber;
const int CMsgDOTAChangeTeamSub::kSubAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChangeTeamSub::CMsgDOTAChangeTeamSub()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChangeTeamSub)
}
CMsgDOTAChangeTeamSub::CMsgDOTAChangeTeamSub(const CMsgDOTAChangeTeamSub& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    reinterpret_cast<char*>(&sub_account_id_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(sub_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChangeTeamSub)
}

void CMsgDOTAChangeTeamSub::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_id_, 0, reinterpret_cast<char*>(&sub_account_id_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(sub_account_id_));
}

CMsgDOTAChangeTeamSub::~CMsgDOTAChangeTeamSub() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChangeTeamSub)
  SharedDtor();
}

void CMsgDOTAChangeTeamSub::SharedDtor() {
}

void CMsgDOTAChangeTeamSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChangeTeamSub::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChangeTeamSub& CMsgDOTAChangeTeamSub::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChangeTeamSub* CMsgDOTAChangeTeamSub::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChangeTeamSub* n = new CMsgDOTAChangeTeamSub;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChangeTeamSub::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChangeTeamSub)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&team_id_, 0, reinterpret_cast<char*>(&sub_account_id_) -
      reinterpret_cast<char*>(&team_id_) + sizeof(sub_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChangeTeamSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChangeTeamSub)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_member_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sub_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sub_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChangeTeamSub)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChangeTeamSub)
  return false;
#undef DO_
}

void CMsgDOTAChangeTeamSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChangeTeamSub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional uint32 member_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->member_account_id(), output);
  }

  // optional uint32 sub_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChangeTeamSub)
}

::google::protobuf::uint8* CMsgDOTAChangeTeamSub::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChangeTeamSub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional uint32 member_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->member_account_id(), target);
  }

  // optional uint32 sub_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChangeTeamSub)
  return target;
}

size_t CMsgDOTAChangeTeamSub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChangeTeamSub)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 member_account_id = 2;
    if (has_member_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_account_id());
    }

    // optional uint32 sub_account_id = 3;
    if (has_sub_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChangeTeamSub::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChangeTeamSub)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChangeTeamSub* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChangeTeamSub>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChangeTeamSub)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChangeTeamSub)
    MergeFrom(*source);
  }
}

void CMsgDOTAChangeTeamSub::MergeFrom(const CMsgDOTAChangeTeamSub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChangeTeamSub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      member_account_id_ = from.member_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sub_account_id_ = from.sub_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChangeTeamSub::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChangeTeamSub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChangeTeamSub::CopyFrom(const CMsgDOTAChangeTeamSub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChangeTeamSub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChangeTeamSub::IsInitialized() const {
  return true;
}

void CMsgDOTAChangeTeamSub::Swap(CMsgDOTAChangeTeamSub* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChangeTeamSub::InternalSwap(CMsgDOTAChangeTeamSub* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(member_account_id_, other->member_account_id_);
  std::swap(sub_account_id_, other->sub_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChangeTeamSub::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChangeTeamSub

// optional uint32 team_id = 1;
bool CMsgDOTAChangeTeamSub::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChangeTeamSub::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChangeTeamSub::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChangeTeamSub::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTAChangeTeamSub::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChangeTeamSub.team_id)
  return team_id_;
}
void CMsgDOTAChangeTeamSub::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChangeTeamSub.team_id)
}

// optional uint32 member_account_id = 2;
bool CMsgDOTAChangeTeamSub::has_member_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChangeTeamSub::set_has_member_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChangeTeamSub::clear_has_member_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChangeTeamSub::clear_member_account_id() {
  member_account_id_ = 0u;
  clear_has_member_account_id();
}
::google::protobuf::uint32 CMsgDOTAChangeTeamSub::member_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChangeTeamSub.member_account_id)
  return member_account_id_;
}
void CMsgDOTAChangeTeamSub::set_member_account_id(::google::protobuf::uint32 value) {
  set_has_member_account_id();
  member_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChangeTeamSub.member_account_id)
}

// optional uint32 sub_account_id = 3;
bool CMsgDOTAChangeTeamSub::has_sub_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAChangeTeamSub::set_has_sub_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAChangeTeamSub::clear_has_sub_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAChangeTeamSub::clear_sub_account_id() {
  sub_account_id_ = 0u;
  clear_has_sub_account_id();
}
::google::protobuf::uint32 CMsgDOTAChangeTeamSub::sub_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChangeTeamSub.sub_account_id)
  return sub_account_id_;
}
void CMsgDOTAChangeTeamSub::set_sub_account_id(::google::protobuf::uint32 value) {
  set_has_sub_account_id();
  sub_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChangeTeamSub.sub_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChangeTeamSubResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChangeTeamSubResponse::CMsgDOTAChangeTeamSubResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChangeTeamSubResponse)
}
CMsgDOTAChangeTeamSubResponse::CMsgDOTAChangeTeamSubResponse(const CMsgDOTAChangeTeamSubResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChangeTeamSubResponse)
}

void CMsgDOTAChangeTeamSubResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAChangeTeamSubResponse::~CMsgDOTAChangeTeamSubResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChangeTeamSubResponse)
  SharedDtor();
}

void CMsgDOTAChangeTeamSubResponse::SharedDtor() {
}

void CMsgDOTAChangeTeamSubResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChangeTeamSubResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChangeTeamSubResponse& CMsgDOTAChangeTeamSubResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChangeTeamSubResponse* CMsgDOTAChangeTeamSubResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChangeTeamSubResponse* n = new CMsgDOTAChangeTeamSubResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChangeTeamSubResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChangeTeamSubResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChangeTeamSubResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChangeTeamSubResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAChangeTeamSubResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAChangeTeamSubResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChangeTeamSubResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChangeTeamSubResponse)
  return false;
#undef DO_
}

void CMsgDOTAChangeTeamSubResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChangeTeamSubResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChangeTeamSubResponse)
}

::google::protobuf::uint8* CMsgDOTAChangeTeamSubResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChangeTeamSubResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChangeTeamSubResponse)
  return target;
}

size_t CMsgDOTAChangeTeamSubResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChangeTeamSubResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChangeTeamSubResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChangeTeamSubResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChangeTeamSubResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChangeTeamSubResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChangeTeamSubResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChangeTeamSubResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAChangeTeamSubResponse::MergeFrom(const CMsgDOTAChangeTeamSubResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChangeTeamSubResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAChangeTeamSubResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChangeTeamSubResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChangeTeamSubResponse::CopyFrom(const CMsgDOTAChangeTeamSubResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChangeTeamSubResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChangeTeamSubResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAChangeTeamSubResponse::Swap(CMsgDOTAChangeTeamSubResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChangeTeamSubResponse::InternalSwap(CMsgDOTAChangeTeamSubResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChangeTeamSubResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChangeTeamSubResponse

// optional .proto.dota.CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
bool CMsgDOTAChangeTeamSubResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChangeTeamSubResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChangeTeamSubResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChangeTeamSubResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChangeTeamSubResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAChangeTeamSubResponse_Result >(result_);
}
void CMsgDOTAChangeTeamSubResponse::set_result(::proto::dota::CMsgDOTAChangeTeamSubResponse_Result value) {
  assert(::proto::dota::CMsgDOTAChangeTeamSubResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChangeTeamSubResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeaveTeam::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeaveTeam::CMsgDOTALeaveTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeaveTeam)
}
CMsgDOTALeaveTeam::CMsgDOTALeaveTeam(const CMsgDOTALeaveTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeaveTeam)
}

void CMsgDOTALeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
}

CMsgDOTALeaveTeam::~CMsgDOTALeaveTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeaveTeam)
  SharedDtor();
}

void CMsgDOTALeaveTeam::SharedDtor() {
}

void CMsgDOTALeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALeaveTeam::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTALeaveTeam& CMsgDOTALeaveTeam::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTALeaveTeam* CMsgDOTALeaveTeam::New(::google::protobuf::Arena* arena) const {
  CMsgDOTALeaveTeam* n = new CMsgDOTALeaveTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTALeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeaveTeam)
  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTALeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeaveTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeaveTeam)
  return false;
#undef DO_
}

void CMsgDOTALeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeaveTeam)
}

::google::protobuf::uint8* CMsgDOTALeaveTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeaveTeam)
  return target;
}

size_t CMsgDOTALeaveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeaveTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaveTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTALeaveTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeaveTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeaveTeam)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveTeam::MergeFrom(const CMsgDOTALeaveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    set_team_id(from.team_id());
  }
}

void CMsgDOTALeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveTeam::CopyFrom(const CMsgDOTALeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeam::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveTeam::Swap(CMsgDOTALeaveTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeaveTeam::InternalSwap(CMsgDOTALeaveTeam* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTALeaveTeam::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTALeaveTeam

// optional uint32 team_id = 1;
bool CMsgDOTALeaveTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTALeaveTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTALeaveTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTALeaveTeam::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTALeaveTeam::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALeaveTeam.team_id)
  return team_id_;
}
void CMsgDOTALeaveTeam::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALeaveTeam.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeaveTeamResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeaveTeamResponse)
}
CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse(const CMsgDOTALeaveTeamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeaveTeamResponse)
}

void CMsgDOTALeaveTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTALeaveTeamResponse::~CMsgDOTALeaveTeamResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeaveTeamResponse)
  SharedDtor();
}

void CMsgDOTALeaveTeamResponse::SharedDtor() {
}

void CMsgDOTALeaveTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALeaveTeamResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTALeaveTeamResponse& CMsgDOTALeaveTeamResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTALeaveTeamResponse* CMsgDOTALeaveTeamResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTALeaveTeamResponse* n = new CMsgDOTALeaveTeamResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTALeaveTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeaveTeamResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTALeaveTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeaveTeamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTALeaveTeamResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTALeaveTeamResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeaveTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeaveTeamResponse)
  return false;
#undef DO_
}

void CMsgDOTALeaveTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeaveTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeaveTeamResponse)
}

::google::protobuf::uint8* CMsgDOTALeaveTeamResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeaveTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeaveTeamResponse)
  return target;
}

size_t CMsgDOTALeaveTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeaveTeamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALeaveTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeaveTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaveTeamResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTALeaveTeamResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeaveTeamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeaveTeamResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveTeamResponse::MergeFrom(const CMsgDOTALeaveTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeaveTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTALeaveTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeaveTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveTeamResponse::CopyFrom(const CMsgDOTALeaveTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeaveTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveTeamResponse::Swap(CMsgDOTALeaveTeamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeaveTeamResponse::InternalSwap(CMsgDOTALeaveTeamResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTALeaveTeamResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTALeaveTeamResponse

// optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
bool CMsgDOTALeaveTeamResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTALeaveTeamResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTALeaveTeamResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTALeaveTeamResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALeaveTeamResponse.result)
  return static_cast< ::proto::dota::CMsgDOTALeaveTeamResponse_Result >(result_);
}
void CMsgDOTALeaveTeamResponse::set_result(::proto::dota::CMsgDOTALeaveTeamResponse_Result value) {
  assert(::proto::dota::CMsgDOTALeaveTeamResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALeaveTeamResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABetaParticipation::kAccessRightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABetaParticipation::CMsgDOTABetaParticipation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABetaParticipation)
}
CMsgDOTABetaParticipation::CMsgDOTABetaParticipation(const CMsgDOTABetaParticipation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  access_rights_ = from.access_rights_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABetaParticipation)
}

void CMsgDOTABetaParticipation::SharedCtor() {
  _cached_size_ = 0;
  access_rights_ = 0u;
}

CMsgDOTABetaParticipation::~CMsgDOTABetaParticipation() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABetaParticipation)
  SharedDtor();
}

void CMsgDOTABetaParticipation::SharedDtor() {
}

void CMsgDOTABetaParticipation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABetaParticipation::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTABetaParticipation& CMsgDOTABetaParticipation::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTABetaParticipation* CMsgDOTABetaParticipation::New(::google::protobuf::Arena* arena) const {
  CMsgDOTABetaParticipation* n = new CMsgDOTABetaParticipation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTABetaParticipation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABetaParticipation)
  access_rights_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTABetaParticipation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABetaParticipation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 access_rights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_access_rights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &access_rights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABetaParticipation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABetaParticipation)
  return false;
#undef DO_
}

void CMsgDOTABetaParticipation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABetaParticipation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 access_rights = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->access_rights(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABetaParticipation)
}

::google::protobuf::uint8* CMsgDOTABetaParticipation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABetaParticipation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 access_rights = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->access_rights(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABetaParticipation)
  return target;
}

size_t CMsgDOTABetaParticipation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABetaParticipation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 access_rights = 1;
  if (has_access_rights()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->access_rights());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABetaParticipation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABetaParticipation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABetaParticipation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTABetaParticipation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABetaParticipation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABetaParticipation)
    MergeFrom(*source);
  }
}

void CMsgDOTABetaParticipation::MergeFrom(const CMsgDOTABetaParticipation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABetaParticipation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_access_rights()) {
    set_access_rights(from.access_rights());
  }
}

void CMsgDOTABetaParticipation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABetaParticipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABetaParticipation::CopyFrom(const CMsgDOTABetaParticipation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABetaParticipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABetaParticipation::IsInitialized() const {
  return true;
}

void CMsgDOTABetaParticipation::Swap(CMsgDOTABetaParticipation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABetaParticipation::InternalSwap(CMsgDOTABetaParticipation* other) {
  std::swap(access_rights_, other->access_rights_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTABetaParticipation::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTABetaParticipation

// optional uint32 access_rights = 1;
bool CMsgDOTABetaParticipation::has_access_rights() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTABetaParticipation::set_has_access_rights() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTABetaParticipation::clear_has_access_rights() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTABetaParticipation::clear_access_rights() {
  access_rights_ = 0u;
  clear_has_access_rights();
}
::google::protobuf::uint32 CMsgDOTABetaParticipation::access_rights() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABetaParticipation.access_rights)
  return access_rights_;
}
void CMsgDOTABetaParticipation::set_access_rights(::google::protobuf::uint32 value) {
  set_has_access_rights();
  access_rights_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABetaParticipation.access_rights)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
