// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsdk_gcmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gcsdk_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgSHA1DigestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSHA1Digest> {
} _CMsgSHA1Digest_default_instance_;
class CMsgSOIDOwnerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOIDOwner> {
} _CMsgSOIDOwner_default_instance_;
class CMsgSOSingleObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOSingleObject> {
} _CMsgSOSingleObject_default_instance_;
class CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOMultipleObjects_SingleObject> {
} _CMsgSOMultipleObjects_SingleObject_default_instance_;
class CMsgSOMultipleObjectsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOMultipleObjects> {
} _CMsgSOMultipleObjects_default_instance_;
class CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscribed_SubscribedType> {
} _CMsgSOCacheSubscribed_SubscribedType_default_instance_;
class CMsgSOCacheSubscribedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscribed> {
} _CMsgSOCacheSubscribed_default_instance_;
class CMsgSOCacheSubscribedUpToDateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscribedUpToDate> {
} _CMsgSOCacheSubscribedUpToDate_default_instance_;
class CMsgSOCacheUnsubscribedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheUnsubscribed> {
} _CMsgSOCacheUnsubscribed_default_instance_;
class CMsgSOCacheSubscriptionCheckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscriptionCheck> {
} _CMsgSOCacheSubscriptionCheck_default_instance_;
class CMsgSOCacheSubscriptionRefreshDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheSubscriptionRefresh> {
} _CMsgSOCacheSubscriptionRefresh_default_instance_;
class CMsgSOCacheVersionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheVersion> {
} _CMsgSOCacheVersion_default_instance_;
class CMsgGCMultiplexMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMultiplexMessage> {
} _CMsgGCMultiplexMessage_default_instance_;
class CGCToGCMsgMasterAck_ProcessDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterAck_Process> {
} _CGCToGCMsgMasterAck_Process_default_instance_;
class CGCToGCMsgMasterAckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterAck> {
} _CGCToGCMsgMasterAck_default_instance_;
class CGCToGCMsgMasterAck_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterAck_Response> {
} _CGCToGCMsgMasterAck_Response_default_instance_;
class CMsgGCToGCUniverseStartupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCUniverseStartup> {
} _CMsgGCToGCUniverseStartup_default_instance_;
class CMsgGCToGCUniverseStartupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCUniverseStartupResponse> {
} _CMsgGCToGCUniverseStartupResponse_default_instance_;
class CGCToGCMsgMasterStartupComplete_GCInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterStartupComplete_GCInfo> {
} _CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_;
class CGCToGCMsgMasterStartupCompleteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgMasterStartupComplete> {
} _CGCToGCMsgMasterStartupComplete_default_instance_;
class CGCToGCMsgRoutedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgRouted> {
} _CGCToGCMsgRouted_default_instance_;
class CGCToGCMsgRoutedReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCToGCMsgRoutedReply> {
} _CGCToGCMsgRoutedReply_default_instance_;
class CMsgGCUpdateSubGCSessionInfo_CMsgUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCUpdateSubGCSessionInfo_CMsgUpdate> {
} _CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_;
class CMsgGCUpdateSubGCSessionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCUpdateSubGCSessionInfo> {
} _CMsgGCUpdateSubGCSessionInfo_default_instance_;
class CMsgGCRequestSubGCSessionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRequestSubGCSessionInfo> {
} _CMsgGCRequestSubGCSessionInfo_default_instance_;
class CMsgGCRequestSubGCSessionInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRequestSubGCSessionInfoResponse> {
} _CMsgGCRequestSubGCSessionInfoResponse_default_instance_;
class CMsgSOCacheHaveVersionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSOCacheHaveVersion> {
} _CMsgSOCacheHaveVersion_default_instance_;
class CMsgClientHelloDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientHello> {
} _CMsgClientHello_default_instance_;
class CMsgClientWelcome_LocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientWelcome_Location> {
} _CMsgClientWelcome_Location_default_instance_;
class CMsgClientWelcomeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientWelcome> {
} _CMsgClientWelcome_default_instance_;
class CMsgConnectionStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgConnectionStatus> {
} _CMsgConnectionStatus_default_instance_;
class CMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions> {
} _CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_;
class CMsgGCToGCSOCacheSubscribeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSOCacheSubscribe> {
} _CMsgGCToGCSOCacheSubscribe_default_instance_;
class CMsgGCToGCSOCacheUnsubscribeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCSOCacheUnsubscribe> {
} _CMsgGCToGCSOCacheUnsubscribe_default_instance_;
class CMsgGCClientPingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientPing> {
} _CMsgGCClientPing_default_instance_;
class CMsgGCToGCForwardAccountDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCForwardAccountDetails> {
} _CMsgGCToGCForwardAccountDetails_default_instance_;
class CMsgGCToGCLoadSessionSOCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCLoadSessionSOCache> {
} _CMsgGCToGCLoadSessionSOCache_default_instance_;
class CMsgGCToGCLoadSessionSOCacheResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCLoadSessionSOCacheResponse> {
} _CMsgGCToGCLoadSessionSOCacheResponse_default_instance_;
class CMsgGCToGCUpdateSessionStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCUpdateSessionStats> {
} _CMsgGCToGCUpdateSessionStats_default_instance_;
class CWorkshop_PopulateItemDescriptions_Request_SingleItemDescriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription> {
} _CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_default_instance_;
class CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock> {
} _CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_default_instance_;
class CWorkshop_PopulateItemDescriptions_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_PopulateItemDescriptions_Request> {
} _CWorkshop_PopulateItemDescriptions_Request_default_instance_;
class CWorkshop_GetContributors_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_GetContributors_Request> {
} _CWorkshop_GetContributors_Request_default_instance_;
class CWorkshop_GetContributors_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_GetContributors_Response> {
} _CWorkshop_GetContributors_Response_default_instance_;
class CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule> {
} _CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_default_instance_;
class CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule> {
} _CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_default_instance_;
class CWorkshop_SetItemPaymentRules_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_SetItemPaymentRules_Request> {
} _CWorkshop_SetItemPaymentRules_Request_default_instance_;
class CWorkshop_SetItemPaymentRules_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CWorkshop_SetItemPaymentRules_Response> {
} _CWorkshop_SetItemPaymentRules_Response_default_instance_;
class CBroadcast_PostGameDataFrame_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_PostGameDataFrame_Request> {
} _CBroadcast_PostGameDataFrame_Request_default_instance_;
class CMsgSerializedSOCache_TypeCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSerializedSOCache_TypeCache> {
} _CMsgSerializedSOCache_TypeCache_default_instance_;
class CMsgSerializedSOCache_Cache_VersionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSerializedSOCache_Cache_Version> {
} _CMsgSerializedSOCache_Cache_Version_default_instance_;
class CMsgSerializedSOCache_CacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSerializedSOCache_Cache> {
} _CMsgSerializedSOCache_Cache_default_instance_;
class CMsgSerializedSOCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSerializedSOCache> {
} _CMsgSerializedSOCache_default_instance_;
class CMsgGCToClientPollConvarRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPollConvarRequest> {
} _CMsgGCToClientPollConvarRequest_default_instance_;
class CMsgGCToClientPollConvarResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPollConvarResponse> {
} _CMsgGCToClientPollConvarResponse_default_instance_;

namespace protobuf_gcsdk_5fgcmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[55];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, block1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, block2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, block3_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, object_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, service_id_),
  3,
  0,
  2,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, object_data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_modified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_added_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_removed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, service_id_),
  ~0u,
  1,
  ~0u,
  ~0u,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, object_data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, service_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, sync_version_),
  ~0u,
  1,
  0,
  3,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, service_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, sync_version_),
  1,
  0,
  3,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, owner_soid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, owner_soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, service_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, sync_version_),
  1,
  0,
  3,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, owner_soid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, version_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, steamids_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Process, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Process, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Process, dir_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Process, type_instances_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, dir_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, machine_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, process_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, directory_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Response, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUniverseStartup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUniverseStartup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUniverseStartup, is_initial_startup_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUniverseStartupResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUniverseStartupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUniverseStartupResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete_GCInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete_GCInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete_GCInfo, dir_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete_GCInfo, machine_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete, gc_info_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, net_message_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, net_message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, trusted_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo, updates_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfo, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, trusted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, success_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, soid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, cached_file_version_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, socache_have_versions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_session_need_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_launcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, secret_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, engine_),
  1,
  ~0u,
  2,
  3,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, country_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, game_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, outofdate_subscribed_caches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, uptodate_subscribed_caches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, save_game_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, item_schema_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, items_game_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, gc_socache_file_version_),
  4,
  0,
  ~0u,
  ~0u,
  3,
  1,
  5,
  2,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, client_session_need_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, queue_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, queue_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, wait_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, estimated_wait_seconds_remaining_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, version_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, subscriber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, subscribe_to_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, sync_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, have_versions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, subscribe_to_type_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, subscriber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, unsubscribe_from_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, unsubscribe_from_type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCForwardAccountDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCForwardAccountDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCForwardAccountDetails, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCForwardAccountDetails, account_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCForwardAccountDetails, age_seconds_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCache, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCache, forward_account_details_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCacheResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCacheResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, user_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, server_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, in_logon_surge_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, gameitemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, item_description_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, descriptions_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, languages_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, gameitemid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, contributors_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, workshop_file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, revenue_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, rule_description_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, revenue_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, rule_description_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, gameitemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, associated_workshop_files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, partner_accounts_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, frame_data_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_TypeCache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_TypeCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_TypeCache, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_TypeCache, objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_TypeCache, service_id_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache_Version, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache_Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache_Version, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache_Version, version_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache, versions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache_Cache, type_caches_),
  1,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache, file_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache, caches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSerializedSOCache, gc_socache_file_version_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollConvarRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollConvarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollConvarRequest, convar_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollConvarRequest, poll_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollConvarResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollConvarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollConvarResponse, poll_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPollConvarResponse, convar_value_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(CMsgSHA1Digest)},
  { 11, 18, sizeof(CMsgSOIDOwner)},
  { 20, 30, sizeof(CMsgSOSingleObject)},
  { 35, 42, sizeof(CMsgSOMultipleObjects_SingleObject)},
  { 44, 55, sizeof(CMsgSOMultipleObjects)},
  { 61, 68, sizeof(CMsgSOCacheSubscribed_SubscribedType)},
  { 70, 81, sizeof(CMsgSOCacheSubscribed)},
  { 87, 97, sizeof(CMsgSOCacheSubscribedUpToDate)},
  { 102, 108, sizeof(CMsgSOCacheUnsubscribed)},
  { 109, 119, sizeof(CMsgSOCacheSubscriptionCheck)},
  { 124, 130, sizeof(CMsgSOCacheSubscriptionRefresh)},
  { 131, 137, sizeof(CMsgSOCacheVersion)},
  { 138, 146, sizeof(CMsgGCMultiplexMessage)},
  { 149, 156, sizeof(CGCToGCMsgMasterAck_Process)},
  { 158, 167, sizeof(CGCToGCMsgMasterAck)},
  { 171, 177, sizeof(CGCToGCMsgMasterAck_Response)},
  { 178, 184, sizeof(CMsgGCToGCUniverseStartup)},
  { 185, 191, sizeof(CMsgGCToGCUniverseStartupResponse)},
  { 192, 199, sizeof(CGCToGCMsgMasterStartupComplete_GCInfo)},
  { 201, 207, sizeof(CGCToGCMsgMasterStartupComplete)},
  { 208, 216, sizeof(CGCToGCMsgRouted)},
  { 219, 226, sizeof(CGCToGCMsgRoutedReply)},
  { 228, 236, sizeof(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate)},
  { 239, 245, sizeof(CMsgGCUpdateSubGCSessionInfo)},
  { 246, 252, sizeof(CMsgGCRequestSubGCSessionInfo)},
  { 253, 262, sizeof(CMsgGCRequestSubGCSessionInfoResponse)},
  { 266, 275, sizeof(CMsgSOCacheHaveVersion)},
  { 279, 291, sizeof(CMsgClientHello)},
  { 298, 306, sizeof(CMsgClientWelcome_Location)},
  { 309, 323, sizeof(CMsgClientWelcome)},
  { 332, 343, sizeof(CMsgConnectionStatus)},
  { 349, 356, sizeof(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions)},
  { 358, 368, sizeof(CMsgGCToGCSOCacheSubscribe)},
  { 373, 381, sizeof(CMsgGCToGCSOCacheUnsubscribe)},
  { 384, 389, sizeof(CMsgGCClientPing)},
  { 389, 397, sizeof(CMsgGCToGCForwardAccountDetails)},
  { 400, 407, sizeof(CMsgGCToGCLoadSessionSOCache)},
  { 409, 414, sizeof(CMsgGCToGCLoadSessionSOCacheResponse)},
  { 414, 422, sizeof(CMsgGCToGCUpdateSessionStats)},
  { 425, 432, sizeof(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription)},
  { 434, 441, sizeof(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock)},
  { 443, 450, sizeof(CWorkshop_PopulateItemDescriptions_Request)},
  { 452, 459, sizeof(CWorkshop_GetContributors_Request)},
  { 461, 467, sizeof(CWorkshop_GetContributors_Response)},
  { 468, 476, sizeof(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule)},
  { 479, 487, sizeof(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule)},
  { 490, 499, sizeof(CWorkshop_SetItemPaymentRules_Request)},
  { 503, 508, sizeof(CWorkshop_SetItemPaymentRules_Response)},
  { 508, 517, sizeof(CBroadcast_PostGameDataFrame_Request)},
  { 521, 529, sizeof(CMsgSerializedSOCache_TypeCache)},
  { 532, 539, sizeof(CMsgSerializedSOCache_Cache_Version)},
  { 541, 550, sizeof(CMsgSerializedSOCache_Cache)},
  { 554, 562, sizeof(CMsgSerializedSOCache)},
  { 565, 572, sizeof(CMsgGCToClientPollConvarRequest)},
  { 574, 581, sizeof(CMsgGCToClientPollConvarResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSHA1Digest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOIDOwner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOSingleObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOMultipleObjects_SingleObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOMultipleObjects_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOCacheSubscribed_SubscribedType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOCacheSubscribed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOCacheSubscribedUpToDate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOCacheUnsubscribed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOCacheSubscriptionCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOCacheSubscriptionRefresh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOCacheVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMultiplexMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCToGCMsgMasterAck_Process_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCToGCMsgMasterAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCToGCMsgMasterAck_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCUniverseStartup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCUniverseStartupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCToGCMsgMasterStartupComplete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCToGCMsgRouted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCToGCMsgRoutedReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCUpdateSubGCSessionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCRequestSubGCSessionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCRequestSubGCSessionInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSOCacheHaveVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientHello_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientWelcome_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientWelcome_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgConnectionStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCSOCacheSubscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCSOCacheUnsubscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCClientPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCForwardAccountDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCLoadSessionSOCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCLoadSessionSOCacheResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCUpdateSessionStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CWorkshop_PopulateItemDescriptions_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CWorkshop_GetContributors_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CWorkshop_GetContributors_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CWorkshop_SetItemPaymentRules_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CWorkshop_SetItemPaymentRules_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_PostGameDataFrame_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSerializedSOCache_TypeCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSerializedSOCache_Cache_Version_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSerializedSOCache_Cache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSerializedSOCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientPollConvarRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientPollConvarResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gcsdk_gcmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 55);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgSHA1Digest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgSOIDOwner_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgSOSingleObject_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgSOMultipleObjects_SingleObject_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgSOMultipleObjects_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgSOCacheSubscribed_SubscribedType_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgSOCacheSubscribed_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgSOCacheSubscribedUpToDate_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgSOCacheUnsubscribed_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgSOCacheSubscriptionCheck_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgSOCacheSubscriptionRefresh_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgSOCacheVersion_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgGCMultiplexMessage_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CGCToGCMsgMasterAck_Process_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CGCToGCMsgMasterAck_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CGCToGCMsgMasterAck_Response_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgGCToGCUniverseStartup_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgGCToGCUniverseStartupResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CGCToGCMsgMasterStartupComplete_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CGCToGCMsgRouted_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CGCToGCMsgRoutedReply_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgGCUpdateSubGCSessionInfo_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgGCRequestSubGCSessionInfo_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgGCRequestSubGCSessionInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgSOCacheHaveVersion_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgClientHello_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgClientWelcome_Location_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgClientWelcome_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgConnectionStatus_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgGCToGCSOCacheSubscribe_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CMsgGCToGCSOCacheUnsubscribe_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CMsgGCClientPing_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CMsgGCToGCForwardAccountDetails_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CMsgGCToGCLoadSessionSOCache_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CMsgGCToGCLoadSessionSOCacheResponse_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CMsgGCToGCUpdateSessionStats_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CWorkshop_PopulateItemDescriptions_Request_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CWorkshop_GetContributors_Request_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CWorkshop_GetContributors_Response_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CWorkshop_SetItemPaymentRules_Request_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CWorkshop_SetItemPaymentRules_Response_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CBroadcast_PostGameDataFrame_Request_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CMsgSerializedSOCache_TypeCache_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CMsgSerializedSOCache_Cache_Version_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CMsgSerializedSOCache_Cache_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CMsgSerializedSOCache_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CMsgGCToClientPollConvarRequest_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CMsgGCToClientPollConvarResponse_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_steammessages_2eproto::InitDefaults();
  _CMsgSHA1Digest_default_instance_.DefaultConstruct();
  _CMsgSOIDOwner_default_instance_.DefaultConstruct();
  _CMsgSOSingleObject_default_instance_.DefaultConstruct();
  _CMsgSOMultipleObjects_SingleObject_default_instance_.DefaultConstruct();
  _CMsgSOMultipleObjects_default_instance_.DefaultConstruct();
  _CMsgSOCacheSubscribed_SubscribedType_default_instance_.DefaultConstruct();
  _CMsgSOCacheSubscribed_default_instance_.DefaultConstruct();
  _CMsgSOCacheSubscribedUpToDate_default_instance_.DefaultConstruct();
  _CMsgSOCacheUnsubscribed_default_instance_.DefaultConstruct();
  _CMsgSOCacheSubscriptionCheck_default_instance_.DefaultConstruct();
  _CMsgSOCacheSubscriptionRefresh_default_instance_.DefaultConstruct();
  _CMsgSOCacheVersion_default_instance_.DefaultConstruct();
  _CMsgGCMultiplexMessage_default_instance_.DefaultConstruct();
  _CGCToGCMsgMasterAck_Process_default_instance_.DefaultConstruct();
  _CGCToGCMsgMasterAck_default_instance_.DefaultConstruct();
  _CGCToGCMsgMasterAck_Response_default_instance_.DefaultConstruct();
  _CMsgGCToGCUniverseStartup_default_instance_.DefaultConstruct();
  _CMsgGCToGCUniverseStartupResponse_default_instance_.DefaultConstruct();
  _CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_.DefaultConstruct();
  _CGCToGCMsgMasterStartupComplete_default_instance_.DefaultConstruct();
  _CGCToGCMsgRouted_default_instance_.DefaultConstruct();
  _CGCToGCMsgRoutedReply_default_instance_.DefaultConstruct();
  _CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_.DefaultConstruct();
  _CMsgGCUpdateSubGCSessionInfo_default_instance_.DefaultConstruct();
  _CMsgGCRequestSubGCSessionInfo_default_instance_.DefaultConstruct();
  _CMsgGCRequestSubGCSessionInfoResponse_default_instance_.DefaultConstruct();
  _CMsgSOCacheHaveVersion_default_instance_.DefaultConstruct();
  _CMsgClientHello_default_instance_.DefaultConstruct();
  _CMsgClientWelcome_Location_default_instance_.DefaultConstruct();
  _CMsgClientWelcome_default_instance_.DefaultConstruct();
  _CMsgConnectionStatus_default_instance_.DefaultConstruct();
  _CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_.DefaultConstruct();
  _CMsgGCToGCSOCacheSubscribe_default_instance_.DefaultConstruct();
  _CMsgGCToGCSOCacheUnsubscribe_default_instance_.DefaultConstruct();
  _CMsgGCClientPing_default_instance_.DefaultConstruct();
  _CMsgGCToGCForwardAccountDetails_default_instance_.DefaultConstruct();
  _CMsgGCToGCLoadSessionSOCache_default_instance_.DefaultConstruct();
  _CMsgGCToGCLoadSessionSOCacheResponse_default_instance_.DefaultConstruct();
  _CMsgGCToGCUpdateSessionStats_default_instance_.DefaultConstruct();
  _CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_default_instance_.DefaultConstruct();
  _CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_default_instance_.DefaultConstruct();
  _CWorkshop_PopulateItemDescriptions_Request_default_instance_.DefaultConstruct();
  _CWorkshop_GetContributors_Request_default_instance_.DefaultConstruct();
  _CWorkshop_GetContributors_Response_default_instance_.DefaultConstruct();
  _CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_default_instance_.DefaultConstruct();
  _CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_default_instance_.DefaultConstruct();
  _CWorkshop_SetItemPaymentRules_Request_default_instance_.DefaultConstruct();
  _CWorkshop_SetItemPaymentRules_Response_default_instance_.DefaultConstruct();
  _CBroadcast_PostGameDataFrame_Request_default_instance_.DefaultConstruct();
  _CMsgSerializedSOCache_TypeCache_default_instance_.DefaultConstruct();
  _CMsgSerializedSOCache_Cache_Version_default_instance_.DefaultConstruct();
  _CMsgSerializedSOCache_Cache_default_instance_.DefaultConstruct();
  _CMsgSerializedSOCache_default_instance_.DefaultConstruct();
  _CMsgGCToClientPollConvarRequest_default_instance_.DefaultConstruct();
  _CMsgGCToClientPollConvarResponse_default_instance_.DefaultConstruct();
  _CMsgSOSingleObject_default_instance_.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
  _CMsgSOMultipleObjects_default_instance_.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
  _CMsgSOCacheSubscribed_default_instance_.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
  _CMsgSOCacheSubscribedUpToDate_default_instance_.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
  _CMsgSOCacheUnsubscribed_default_instance_.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
  _CMsgSOCacheSubscriptionCheck_default_instance_.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
  _CMsgSOCacheSubscriptionRefresh_default_instance_.get_mutable()->owner_soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
  _CMsgSOCacheHaveVersion_default_instance_.get_mutable()->soid_ = const_cast< ::proto::dota::CMsgSOIDOwner*>(
      ::proto::dota::CMsgSOIDOwner::internal_default_instance());
  _CMsgClientWelcome_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgClientWelcome_Location*>(
      ::proto::dota::CMsgClientWelcome_Location::internal_default_instance());
  _CMsgGCToGCForwardAccountDetails_default_instance_.get_mutable()->account_details_ = const_cast< ::proto::dota::CGCSystemMsg_GetAccountDetails_Response*>(
      ::proto::dota::CGCSystemMsg_GetAccountDetails_Response::internal_default_instance());
  _CMsgGCToGCLoadSessionSOCache_default_instance_.get_mutable()->forward_account_details_ = const_cast< ::proto::dota::CMsgGCToGCForwardAccountDetails*>(
      ::proto::dota::CMsgGCToGCForwardAccountDetails::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026gcsdk_gcmessages.proto\022\nproto.dota\032\023st"
      "eammessages.proto\"@\n\016CMsgSHA1Digest\022\016\n\006b"
      "lock1\030\001 \002(\006\022\016\n\006block2\030\002 \002(\006\022\016\n\006block3\030\003 "
      "\002(\007\")\n\rCMsgSOIDOwner\022\014\n\004type\030\001 \001(\r\022\n\n\002id"
      "\030\002 \001(\004\"\216\001\n\022CMsgSOSingleObject\022\017\n\007type_id"
      "\030\002 \001(\005\022\023\n\013object_data\030\003 \001(\014\022\017\n\007version\030\004"
      " \001(\006\022-\n\nowner_soid\030\005 \001(\0132\031.proto.dota.CM"
      "sgSOIDOwner\022\022\n\nservice_id\030\006 \001(\r\"\207\003\n\025CMsg"
      "SOMultipleObjects\022H\n\020objects_modified\030\002 "
      "\003(\0132..proto.dota.CMsgSOMultipleObjects.S"
      "ingleObject\022\017\n\007version\030\003 \001(\006\022E\n\robjects_"
      "added\030\004 \003(\0132..proto.dota.CMsgSOMultipleO"
      "bjects.SingleObject\022G\n\017objects_removed\030\005"
      " \003(\0132..proto.dota.CMsgSOMultipleObjects."
      "SingleObject\022-\n\nowner_soid\030\006 \001(\0132\031.proto"
      ".dota.CMsgSOIDOwner\022\022\n\nservice_id\030\007 \001(\r\032"
      "@\n\014SingleObject\022\017\n\007type_id\030\001 \001(\005\022\023\n\013obje"
      "ct_data\030\002 \001(\014:\n\200\246\035\200\002\210\246\035\200\010\"\222\002\n\025CMsgSOCach"
      "eSubscribed\022A\n\007objects\030\002 \003(\01320.proto.dot"
      "a.CMsgSOCacheSubscribed.SubscribedType\022\017"
      "\n\007version\030\003 \001(\006\022-\n\nowner_soid\030\004 \001(\0132\031.pr"
      "oto.dota.CMsgSOIDOwner\022\022\n\nservice_id\030\005 \001"
      "(\r\022\024\n\014service_list\030\006 \003(\r\022\024\n\014sync_version"
      "\030\007 \001(\006\0326\n\016SubscribedType\022\017\n\007type_id\030\001 \001("
      "\005\022\023\n\013object_data\030\002 \003(\014\"\237\001\n\035CMsgSOCacheSu"
      "bscribedUpToDate\022\017\n\007version\030\001 \001(\006\022-\n\nown"
      "er_soid\030\002 \001(\0132\031.proto.dota.CMsgSOIDOwner"
      "\022\022\n\nservice_id\030\003 \001(\r\022\024\n\014service_list\030\004 \003"
      "(\r\022\024\n\014sync_version\030\005 \001(\006\"H\n\027CMsgSOCacheU"
      "nsubscribed\022-\n\nowner_soid\030\002 \001(\0132\031.proto."
      "dota.CMsgSOIDOwner\"\236\001\n\034CMsgSOCacheSubscr"
      "iptionCheck\022\017\n\007version\030\002 \001(\006\022-\n\nowner_so"
      "id\030\003 \001(\0132\031.proto.dota.CMsgSOIDOwner\022\022\n\ns"
      "ervice_id\030\004 \001(\r\022\024\n\014service_list\030\005 \003(\r\022\024\n"
      "\014sync_version\030\006 \001(\006\"O\n\036CMsgSOCacheSubscr"
      "iptionRefresh\022-\n\nowner_soid\030\002 \001(\0132\031.prot"
      "o.dota.CMsgSOIDOwner\"%\n\022CMsgSOCacheVersi"
      "on\022\017\n\007version\030\001 \001(\006\"L\n\026CMsgGCMultiplexMe"
      "ssage\022\017\n\007msgtype\030\001 \001(\r\022\017\n\007payload\030\002 \001(\014\022"
      "\020\n\010steamids\030\003 \003(\006\"\306\001\n\023CGCToGCMsgMasterAc"
      "k\022\021\n\tdir_index\030\001 \001(\r\022\024\n\014machine_name\030\003 \001"
      "(\t\022\024\n\014process_name\030\004 \001(\t\022:\n\tdirectory\030\006 "
      "\003(\0132\'.proto.dota.CGCToGCMsgMasterAck.Pro"
      "cess\0324\n\007Process\022\021\n\tdir_index\030\001 \001(\r\022\026\n\016ty"
      "pe_instances\030\002 \003(\r\"2\n\034CGCToGCMsgMasterAc"
      "k_Response\022\022\n\007eresult\030\001 \001(\005:\0012\"7\n\031CMsgGC"
      "ToGCUniverseStartup\022\032\n\022is_initial_startu"
      "p\030\001 \001(\010\"4\n!CMsgGCToGCUniverseStartupResp"
      "onse\022\017\n\007eresult\030\001 \001(\005\"\231\001\n\037CGCToGCMsgMast"
      "erStartupComplete\022C\n\007gc_info\030\001 \003(\01322.pro"
      "to.dota.CGCToGCMsgMasterStartupComplete."
      "GCInfo\0321\n\006GCInfo\022\021\n\tdir_index\030\001 \001(\r\022\024\n\014m"
      "achine_name\030\002 \001(\t\"L\n\020CGCToGCMsgRouted\022\020\n"
      "\010msg_type\030\001 \001(\r\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013ne"
      "t_message\030\003 \001(\014\">\n\025CGCToGCMsgRoutedReply"
      "\022\020\n\010msg_type\030\001 \001(\r\022\023\n\013net_message\030\002 \001(\014\""
      "\240\001\n\034CMsgGCUpdateSubGCSessionInfo\022D\n\007upda"
      "tes\030\001 \003(\01323.proto.dota.CMsgGCUpdateSubGC"
      "SessionInfo.CMsgUpdate\032:\n\nCMsgUpdate\022\017\n\007"
      "steamid\030\001 \001(\006\022\n\n\002ip\030\002 \001(\007\022\017\n\007trusted\030\003 \001"
      "(\010\"0\n\035CMsgGCRequestSubGCSessionInfo\022\017\n\007s"
      "teamid\030\001 \001(\006\"c\n%CMsgGCRequestSubGCSessio"
      "nInfoResponse\022\n\n\002ip\030\001 \001(\007\022\017\n\007trusted\030\002 \001"
      "(\010\022\014\n\004port\030\003 \001(\r\022\017\n\007success\030\004 \001(\010\"\203\001\n\026CM"
      "sgSOCacheHaveVersion\022\'\n\004soid\030\001 \001(\0132\031.pro"
      "to.dota.CMsgSOIDOwner\022\017\n\007version\030\002 \001(\006\022\022"
      "\n\nservice_id\030\003 \001(\r\022\033\n\023cached_file_versio"
      "n\030\004 \001(\r\"\260\002\n\017CMsgClientHello\022\017\n\007version\030\001"
      " \001(\r\022A\n\025socache_have_versions\030\002 \003(\0132\".pr"
      "oto.dota.CMsgSOCacheHaveVersion\022\033\n\023clien"
      "t_session_need\030\003 \001(\r\022E\n\017client_launcher\030"
      "\004 \001(\0162\036.proto.dota.PartnerAccountType:\014P"
      "ARTNER_NONE\022\022\n\nsecret_key\030\005 \001(\t\022\027\n\017clien"
      "t_language\030\006 \001(\r\0228\n\006engine\030\007 \001(\0162\031.proto"
      ".dota.ESourceEngine:\rk_ESE_Source1\"\262\003\n\021C"
      "MsgClientWelcome\022\017\n\007version\030\001 \001(\r\022\021\n\tgam"
      "e_data\030\002 \001(\014\022F\n\033outofdate_subscribed_cac"
      "hes\030\003 \003(\0132!.proto.dota.CMsgSOCacheSubscr"
      "ibed\022L\n\032uptodate_subscribed_caches\030\004 \003(\013"
      "2(.proto.dota.CMsgSOCacheSubscriptionChe"
      "ck\0228\n\010location\030\005 \001(\0132&.proto.dota.CMsgCl"
      "ientWelcome.Location\022\025\n\rsave_game_key\030\006 "
      "\001(\014\022\027\n\017item_schema_crc\030\007 \001(\007\022\026\n\016items_ga"
      "me_url\030\010 \001(\t\022\037\n\027gc_socache_file_version\030"
      "\t \001(\r\032@\n\010Location\022\020\n\010latitude\030\001 \001(\002\022\021\n\tl"
      "ongitude\030\002 \001(\002\022\017\n\007country\030\003 \001(\t\"\360\001\n\024CMsg"
      "ConnectionStatus\022O\n\006status\030\001 \001(\0162\036.proto"
      ".dota.GCConnectionStatus:\037GCConnectionSt"
      "atus_HAVE_SESSION\022\033\n\023client_session_need"
      "\030\002 \001(\r\022\026\n\016queue_position\030\003 \001(\005\022\022\n\nqueue_"
      "size\030\004 \001(\005\022\024\n\014wait_seconds\030\005 \001(\005\022(\n esti"
      "mated_wait_seconds_remaining\030\006 \001(\005\"\203\002\n\032C"
      "MsgGCToGCSOCacheSubscribe\022\022\n\nsubscriber\030"
      "\001 \001(\006\022\027\n\017subscribe_to_id\030\002 \001(\006\022\024\n\014sync_v"
      "ersion\030\003 \001(\006\022N\n\rhave_versions\030\004 \003(\01327.pr"
      "oto.dota.CMsgGCToGCSOCacheSubscribe.CMsg"
      "HaveVersions\022\031\n\021subscribe_to_type\030\005 \001(\r\032"
      "7\n\020CMsgHaveVersions\022\022\n\nservice_id\030\001 \001(\r\022"
      "\017\n\007version\030\002 \001(\004\"n\n\034CMsgGCToGCSOCacheUns"
      "ubscribe\022\022\n\nsubscriber\030\001 \001(\006\022\033\n\023unsubscr"
      "ibe_from_id\030\002 \001(\006\022\035\n\025unsubscribe_from_ty"
      "pe\030\003 \001(\r\"\022\n\020CMsgGCClientPing\"\225\001\n\037CMsgGCT"
      "oGCForwardAccountDetails\022\017\n\007steamid\030\001 \001("
      "\006\022L\n\017account_details\030\002 \001(\01323.proto.dota."
      "CGCSystemMsg_GetAccountDetails_Response\022"
      "\023\n\013age_seconds\030\003 \001(\r\"\200\001\n\034CMsgGCToGCLoadS"
      "essionSOCache\022\022\n\naccount_id\030\001 \001(\r\022L\n\027for"
      "ward_account_details\030\002 \001(\0132+.proto.dota."
      "CMsgGCToGCForwardAccountDetails\"&\n$CMsgG"
      "CToGCLoadSessionSOCacheResponse\"f\n\034CMsgG"
      "CToGCUpdateSessionStats\022\025\n\ruser_sessions"
      "\030\001 \001(\r\022\027\n\017server_sessions\030\002 \001(\r\022\026\n\016in_lo"
      "gon_surge\030\003 \001(\010\"\203\003\n*CWorkshop_PopulateIt"
      "emDescriptions_Request\022\r\n\005appid\030\001 \001(\r\022g\n"
      "\tlanguages\030\002 \003(\0132T.proto.dota.CWorkshop_"
      "PopulateItemDescriptions_Request.ItemDes"
      "criptionsLanguageBlock\032E\n\025SingleItemDesc"
      "ription\022\022\n\ngameitemid\030\001 \001(\r\022\030\n\020item_desc"
      "ription\030\002 \001(\t\032\225\001\n\035ItemDescriptionsLangua"
      "geBlock\022\020\n\010language\030\001 \001(\t\022b\n\014description"
      "s\030\002 \003(\0132L.proto.dota.CWorkshop_PopulateI"
      "temDescriptions_Request.SingleItemDescri"
      "ption\"F\n!CWorkshop_GetContributors_Reque"
      "st\022\r\n\005appid\030\001 \001(\r\022\022\n\ngameitemid\030\002 \001(\r\":\n"
      "\"CWorkshop_GetContributors_Response\022\024\n\014c"
      "ontributors\030\001 \003(\006\"\353\003\n%CWorkshop_SetItemP"
      "aymentRules_Request\022\r\n\005appid\030\001 \001(\r\022\022\n\nga"
      "meitemid\030\002 \001(\r\022l\n\031associated_workshop_fi"
      "les\030\003 \003(\0132I.proto.dota.CWorkshop_SetItem"
      "PaymentRules_Request.WorkshopItemPayment"
      "Rule\022b\n\020partner_accounts\030\004 \003(\0132H.proto.d"
      "ota.CWorkshop_SetItemPaymentRules_Reques"
      "t.PartnerItemPaymentRule\032i\n\027WorkshopItem"
      "PaymentRule\022\030\n\020workshop_file_id\030\001 \001(\004\022\032\n"
      "\022revenue_percentage\030\002 \001(\002\022\030\n\020rule_descri"
      "ption\030\003 \001(\t\032b\n\026PartnerItemPaymentRule\022\022\n"
      "\naccount_id\030\001 \001(\r\022\032\n\022revenue_percentage\030"
      "\002 \001(\002\022\030\n\020rule_description\030\003 \001(\t\"(\n&CWork"
      "shop_SetItemPaymentRules_Response\"p\n$CBr"
      "oadcast_PostGameDataFrame_Request\022\r\n\005app"
      "id\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\006\022\024\n\014broadcast_i"
      "d\030\003 \001(\006\022\022\n\nframe_data\030\004 \001(\014\"\235\003\n\025CMsgSeri"
      "alizedSOCache\022\024\n\014file_version\030\001 \001(\r\0227\n\006c"
      "aches\030\002 \003(\0132\'.proto.dota.CMsgSerializedS"
      "OCache.Cache\022\037\n\027gc_socache_file_version\030"
      "\003 \001(\r\032>\n\tTypeCache\022\014\n\004type\030\001 \001(\r\022\017\n\007obje"
      "cts\030\002 \003(\014\022\022\n\nservice_id\030\003 \001(\r\032\323\001\n\005Cache\022"
      "\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\022A\n\010versions\030\003 "
      "\003(\0132/.proto.dota.CMsgSerializedSOCache.C"
      "ache.Version\022@\n\013type_caches\030\004 \003(\0132+.prot"
      "o.dota.CMsgSerializedSOCache.TypeCache\032+"
      "\n\007Version\022\017\n\007service\030\001 \001(\r\022\017\n\007version\030\002 "
      "\001(\004\"G\n\037CMsgGCToClientPollConvarRequest\022\023"
      "\n\013convar_name\030\001 \001(\t\022\017\n\007poll_id\030\002 \001(\r\"I\n "
      "CMsgGCToClientPollConvarResponse\022\017\n\007poll"
      "_id\030\001 \001(\r\022\024\n\014convar_value\030\002 \001(\t*5\n\rESour"
      "ceEngine\022\021\n\rk_ESE_Source1\020\000\022\021\n\rk_ESE_Sou"
      "rce2\020\001*i\n\022PartnerAccountType\022\020\n\014PARTNER_"
      "NONE\020\000\022\031\n\025PARTNER_PERFECT_WORLD\020\001\022\021\n\rPAR"
      "TNER_NEXON\020\002\022\023\n\017PARTNER_INVALID\020\003*\240\002\n\022GC"
      "ConnectionStatus\022#\n\037GCConnectionStatus_H"
      "AVE_SESSION\020\000\022$\n GCConnectionStatus_GC_G"
      "OING_DOWN\020\001\022!\n\035GCConnectionStatus_NO_SES"
      "SION\020\002\0220\n,GCConnectionStatus_NO_SESSION_"
      "IN_LOGON_QUEUE\020\003\022\037\n\033GCConnectionStatus_N"
      "O_STEAM\020\004\022 \n\034GCConnectionStatus_SUSPENDE"
      "D\020\005\022\'\n#GCConnectionStatus_STEAM_GOING_DO"
      "WN\020\006B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6691);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gcsdk_gcmessages.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_steammessages_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gcsdk_5fgcmessages_2eproto

const ::google::protobuf::EnumDescriptor* ESourceEngine_descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_enum_descriptors[0];
}
bool ESourceEngine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PartnerAccountType_descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_enum_descriptors[1];
}
bool PartnerAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GCConnectionStatus_descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_enum_descriptors[2];
}
bool GCConnectionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSHA1Digest::kBlock1FieldNumber;
const int CMsgSHA1Digest::kBlock2FieldNumber;
const int CMsgSHA1Digest::kBlock3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSHA1Digest::CMsgSHA1Digest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSHA1Digest)
}
CMsgSHA1Digest::CMsgSHA1Digest(const CMsgSHA1Digest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&block1_, &from.block1_,
    reinterpret_cast<char*>(&block3_) -
    reinterpret_cast<char*>(&block1_) + sizeof(block3_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSHA1Digest)
}

void CMsgSHA1Digest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&block1_, 0, reinterpret_cast<char*>(&block3_) -
    reinterpret_cast<char*>(&block1_) + sizeof(block3_));
}

CMsgSHA1Digest::~CMsgSHA1Digest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSHA1Digest)
  SharedDtor();
}

void CMsgSHA1Digest::SharedDtor() {
}

void CMsgSHA1Digest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSHA1Digest::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSHA1Digest& CMsgSHA1Digest::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSHA1Digest* CMsgSHA1Digest::New(::google::protobuf::Arena* arena) const {
  CMsgSHA1Digest* n = new CMsgSHA1Digest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSHA1Digest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSHA1Digest)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&block1_, 0, reinterpret_cast<char*>(&block3_) -
      reinterpret_cast<char*>(&block1_) + sizeof(block3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSHA1Digest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSHA1Digest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 block1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_block1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &block1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 block2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_block2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &block2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed32 block3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_block3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &block3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSHA1Digest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSHA1Digest)
  return false;
#undef DO_
}

void CMsgSHA1Digest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSHA1Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 block1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->block1(), output);
  }

  // required fixed64 block2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->block2(), output);
  }

  // required fixed32 block3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->block3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSHA1Digest)
}

::google::protobuf::uint8* CMsgSHA1Digest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSHA1Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 block1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->block1(), target);
  }

  // required fixed64 block2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->block2(), target);
  }

  // required fixed32 block3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->block3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSHA1Digest)
  return target;
}

size_t CMsgSHA1Digest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CMsgSHA1Digest)
  size_t total_size = 0;

  if (has_block1()) {
    // required fixed64 block1 = 1;
    total_size += 1 + 8;
  }

  if (has_block2()) {
    // required fixed64 block2 = 2;
    total_size += 1 + 8;
  }

  if (has_block3()) {
    // required fixed32 block3 = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CMsgSHA1Digest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSHA1Digest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed64 block1 = 1;
    total_size += 1 + 8;

    // required fixed64 block2 = 2;
    total_size += 1 + 8;

    // required fixed32 block3 = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSHA1Digest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSHA1Digest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSHA1Digest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSHA1Digest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSHA1Digest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSHA1Digest)
    MergeFrom(*source);
  }
}

void CMsgSHA1Digest::MergeFrom(const CMsgSHA1Digest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSHA1Digest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      block1_ = from.block1_;
    }
    if (cached_has_bits & 0x00000002u) {
      block2_ = from.block2_;
    }
    if (cached_has_bits & 0x00000004u) {
      block3_ = from.block3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSHA1Digest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSHA1Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSHA1Digest::CopyFrom(const CMsgSHA1Digest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSHA1Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSHA1Digest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CMsgSHA1Digest::Swap(CMsgSHA1Digest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSHA1Digest::InternalSwap(CMsgSHA1Digest* other) {
  std::swap(block1_, other->block1_);
  std::swap(block2_, other->block2_);
  std::swap(block3_, other->block3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSHA1Digest::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSHA1Digest

// required fixed64 block1 = 1;
bool CMsgSHA1Digest::has_block1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSHA1Digest::set_has_block1() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSHA1Digest::clear_has_block1() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSHA1Digest::clear_block1() {
  block1_ = GOOGLE_ULONGLONG(0);
  clear_has_block1();
}
::google::protobuf::uint64 CMsgSHA1Digest::block1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSHA1Digest.block1)
  return block1_;
}
void CMsgSHA1Digest::set_block1(::google::protobuf::uint64 value) {
  set_has_block1();
  block1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSHA1Digest.block1)
}

// required fixed64 block2 = 2;
bool CMsgSHA1Digest::has_block2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSHA1Digest::set_has_block2() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSHA1Digest::clear_has_block2() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSHA1Digest::clear_block2() {
  block2_ = GOOGLE_ULONGLONG(0);
  clear_has_block2();
}
::google::protobuf::uint64 CMsgSHA1Digest::block2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSHA1Digest.block2)
  return block2_;
}
void CMsgSHA1Digest::set_block2(::google::protobuf::uint64 value) {
  set_has_block2();
  block2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSHA1Digest.block2)
}

// required fixed32 block3 = 3;
bool CMsgSHA1Digest::has_block3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSHA1Digest::set_has_block3() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSHA1Digest::clear_has_block3() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSHA1Digest::clear_block3() {
  block3_ = 0u;
  clear_has_block3();
}
::google::protobuf::uint32 CMsgSHA1Digest::block3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSHA1Digest.block3)
  return block3_;
}
void CMsgSHA1Digest::set_block3(::google::protobuf::uint32 value) {
  set_has_block3();
  block3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSHA1Digest.block3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOIDOwner::kTypeFieldNumber;
const int CMsgSOIDOwner::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOIDOwner::CMsgSOIDOwner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOIDOwner)
}
CMsgSOIDOwner::CMsgSOIDOwner(const CMsgSOIDOwner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOIDOwner)
}

void CMsgSOIDOwner::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
}

CMsgSOIDOwner::~CMsgSOIDOwner() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOIDOwner)
  SharedDtor();
}

void CMsgSOIDOwner::SharedDtor() {
}

void CMsgSOIDOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOIDOwner::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOIDOwner& CMsgSOIDOwner::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOIDOwner* CMsgSOIDOwner::New(::google::protobuf::Arena* arena) const {
  CMsgSOIDOwner* n = new CMsgSOIDOwner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOIDOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOIDOwner)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOIDOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOIDOwner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOIDOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOIDOwner)
  return false;
#undef DO_
}

void CMsgSOIDOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOIDOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOIDOwner)
}

::google::protobuf::uint8* CMsgSOIDOwner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOIDOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOIDOwner)
  return target;
}

size_t CMsgSOIDOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOIDOwner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOIDOwner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOIDOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOIDOwner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOIDOwner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOIDOwner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOIDOwner)
    MergeFrom(*source);
  }
}

void CMsgSOIDOwner::MergeFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOIDOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOIDOwner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOIDOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOIDOwner::CopyFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOIDOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOIDOwner::IsInitialized() const {
  return true;
}

void CMsgSOIDOwner::Swap(CMsgSOIDOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOIDOwner::InternalSwap(CMsgSOIDOwner* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOIDOwner::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOIDOwner

// optional uint32 type = 1;
bool CMsgSOIDOwner::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOIDOwner::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOIDOwner::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOIDOwner::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CMsgSOIDOwner::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOIDOwner.type)
  return type_;
}
void CMsgSOIDOwner::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOIDOwner.type)
}

// optional uint64 id = 2;
bool CMsgSOIDOwner::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOIDOwner::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOIDOwner::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOIDOwner::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CMsgSOIDOwner::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOIDOwner.id)
  return id_;
}
void CMsgSOIDOwner::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOIDOwner.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOSingleObject::kTypeIdFieldNumber;
const int CMsgSOSingleObject::kObjectDataFieldNumber;
const int CMsgSOSingleObject::kVersionFieldNumber;
const int CMsgSOSingleObject::kOwnerSoidFieldNumber;
const int CMsgSOSingleObject::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOSingleObject::CMsgSOSingleObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOSingleObject)
}
CMsgSOSingleObject::CMsgSOSingleObject(const CMsgSOSingleObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object_data()) {
    object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
  }
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOSingleObject)
}

void CMsgSOSingleObject::SharedCtor() {
  _cached_size_ = 0;
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_soid_, 0, reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_) + sizeof(service_id_));
}

CMsgSOSingleObject::~CMsgSOSingleObject() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOSingleObject)
  SharedDtor();
}

void CMsgSOSingleObject::SharedDtor() {
  object_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete owner_soid_;
  }
}

void CMsgSOSingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOSingleObject::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOSingleObject& CMsgSOSingleObject::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOSingleObject* CMsgSOSingleObject::New(::google::protobuf::Arena* arena) const {
  CMsgSOSingleObject* n = new CMsgSOSingleObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOSingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOSingleObject)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_object_data()) {
      GOOGLE_DCHECK(!object_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*object_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_owner_soid()) {
      GOOGLE_DCHECK(owner_soid_ != NULL);
      owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOSingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOSingleObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes object_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOSingleObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOSingleObject)
  return false;
#undef DO_
}

void CMsgSOSingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOSingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes object_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->object_data(), output);
  }

  // optional fixed64 version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->version(), output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOSingleObject)
}

::google::protobuf::uint8* CMsgSOSingleObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOSingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes object_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->object_data(), target);
  }

  // optional fixed64 version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->version(), target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOSingleObject)
  return target;
}

size_t CMsgSOSingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOSingleObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes object_data = 3;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

    // optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional fixed64 version = 4;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional uint32 service_id = 6;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOSingleObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOSingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOSingleObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOSingleObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOSingleObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOSingleObject)
    MergeFrom(*source);
  }
}

void CMsgSOSingleObject::MergeFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOSingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_object_data();
      object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOSingleObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOSingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOSingleObject::CopyFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOSingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOSingleObject::IsInitialized() const {
  return true;
}

void CMsgSOSingleObject::Swap(CMsgSOSingleObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOSingleObject::InternalSwap(CMsgSOSingleObject* other) {
  object_data_.Swap(&other->object_data_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(version_, other->version_);
  std::swap(type_id_, other->type_id_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOSingleObject::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOSingleObject

// optional int32 type_id = 2;
bool CMsgSOSingleObject::has_type_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSOSingleObject::set_has_type_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSOSingleObject::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSOSingleObject::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
::google::protobuf::int32 CMsgSOSingleObject::type_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOSingleObject.type_id)
  return type_id_;
}
void CMsgSOSingleObject::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOSingleObject.type_id)
}

// optional bytes object_data = 3;
bool CMsgSOSingleObject::has_object_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOSingleObject::set_has_object_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOSingleObject::clear_has_object_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOSingleObject::clear_object_data() {
  object_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_data();
}
const ::std::string& CMsgSOSingleObject::object_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOSingleObject.object_data)
  return object_data_.GetNoArena();
}
void CMsgSOSingleObject::set_object_data(const ::std::string& value) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOSingleObject.object_data)
}
#if LANG_CXX11
void CMsgSOSingleObject::set_object_data(::std::string&& value) {
  set_has_object_data();
  object_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSOSingleObject.object_data)
}
#endif
void CMsgSOSingleObject::set_object_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSOSingleObject.object_data)
}
void CMsgSOSingleObject::set_object_data(const void* value, size_t size) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSOSingleObject.object_data)
}
::std::string* CMsgSOSingleObject::mutable_object_data() {
  set_has_object_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOSingleObject.object_data)
  return object_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSOSingleObject::release_object_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOSingleObject.object_data)
  clear_has_object_data();
  return object_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSOSingleObject::set_allocated_object_data(::std::string* object_data) {
  if (object_data != NULL) {
    set_has_object_data();
  } else {
    clear_has_object_data();
  }
  object_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOSingleObject.object_data)
}

// optional fixed64 version = 4;
bool CMsgSOSingleObject::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOSingleObject::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOSingleObject::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOSingleObject::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CMsgSOSingleObject::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOSingleObject.version)
  return version_;
}
void CMsgSOSingleObject::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOSingleObject.version)
}

// optional .proto.dota.CMsgSOIDOwner owner_soid = 5;
bool CMsgSOSingleObject::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOSingleObject::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOSingleObject::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOSingleObject::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::proto::dota::CMsgSOIDOwner& CMsgSOSingleObject::owner_soid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOSingleObject.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_
                         : *::proto::dota::CMsgSOIDOwner::internal_default_instance();
}
::proto::dota::CMsgSOIDOwner* CMsgSOSingleObject::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOSingleObject.owner_soid)
  return owner_soid_;
}
::proto::dota::CMsgSOIDOwner* CMsgSOSingleObject::release_owner_soid() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOSingleObject.owner_soid)
  clear_has_owner_soid();
  ::proto::dota::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOSingleObject::set_allocated_owner_soid(::proto::dota::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOSingleObject.owner_soid)
}

// optional uint32 service_id = 6;
bool CMsgSOSingleObject::has_service_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSOSingleObject::set_has_service_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSOSingleObject::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSOSingleObject::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 CMsgSOSingleObject::service_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOSingleObject.service_id)
  return service_id_;
}
void CMsgSOSingleObject::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOSingleObject.service_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOMultipleObjects_SingleObject::kTypeIdFieldNumber;
const int CMsgSOMultipleObjects_SingleObject::kObjectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOMultipleObjects.SingleObject)
}
CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object_data()) {
    object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
  }
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOMultipleObjects.SingleObject)
}

void CMsgSOMultipleObjects_SingleObject::SharedCtor() {
  _cached_size_ = 0;
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_id_ = 0;
}

CMsgSOMultipleObjects_SingleObject::~CMsgSOMultipleObjects_SingleObject() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOMultipleObjects.SingleObject)
  SharedDtor();
}

void CMsgSOMultipleObjects_SingleObject::SharedDtor() {
  object_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSOMultipleObjects_SingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_SingleObject::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects_SingleObject::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects_SingleObject::New(::google::protobuf::Arena* arena) const {
  CMsgSOMultipleObjects_SingleObject* n = new CMsgSOMultipleObjects_SingleObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOMultipleObjects_SingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  if (has_object_data()) {
    GOOGLE_DCHECK(!object_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*object_data_.UnsafeRawStringPointer())->clear();
  }
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOMultipleObjects_SingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes object_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOMultipleObjects.SingleObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOMultipleObjects.SingleObject)
  return false;
#undef DO_
}

void CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes object_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->object_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOMultipleObjects.SingleObject)
}

::google::protobuf::uint8* CMsgSOMultipleObjects_SingleObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes object_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOMultipleObjects.SingleObject)
  return target;
}

size_t CMsgSOMultipleObjects_SingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes object_data = 2;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOMultipleObjects_SingleObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOMultipleObjects_SingleObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOMultipleObjects.SingleObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOMultipleObjects.SingleObject)
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_object_data();
      object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_id_ = from.type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOMultipleObjects.SingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects_SingleObject::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects_SingleObject::Swap(CMsgSOMultipleObjects_SingleObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOMultipleObjects_SingleObject::InternalSwap(CMsgSOMultipleObjects_SingleObject* other) {
  object_data_.Swap(&other->object_data_);
  std::swap(type_id_, other->type_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOMultipleObjects_SingleObject::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOMultipleObjects_SingleObject

// optional int32 type_id = 1;
bool CMsgSOMultipleObjects_SingleObject::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOMultipleObjects_SingleObject::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOMultipleObjects_SingleObject::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOMultipleObjects_SingleObject::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
::google::protobuf::int32 CMsgSOMultipleObjects_SingleObject::type_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOMultipleObjects.SingleObject.type_id)
  return type_id_;
}
void CMsgSOMultipleObjects_SingleObject::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOMultipleObjects.SingleObject.type_id)
}

// optional bytes object_data = 2;
bool CMsgSOMultipleObjects_SingleObject::has_object_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOMultipleObjects_SingleObject::set_has_object_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOMultipleObjects_SingleObject::clear_has_object_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOMultipleObjects_SingleObject::clear_object_data() {
  object_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_data();
}
const ::std::string& CMsgSOMultipleObjects_SingleObject::object_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOMultipleObjects.SingleObject.object_data)
  return object_data_.GetNoArena();
}
void CMsgSOMultipleObjects_SingleObject::set_object_data(const ::std::string& value) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOMultipleObjects.SingleObject.object_data)
}
#if LANG_CXX11
void CMsgSOMultipleObjects_SingleObject::set_object_data(::std::string&& value) {
  set_has_object_data();
  object_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSOMultipleObjects.SingleObject.object_data)
}
#endif
void CMsgSOMultipleObjects_SingleObject::set_object_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSOMultipleObjects.SingleObject.object_data)
}
void CMsgSOMultipleObjects_SingleObject::set_object_data(const void* value, size_t size) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSOMultipleObjects.SingleObject.object_data)
}
::std::string* CMsgSOMultipleObjects_SingleObject::mutable_object_data() {
  set_has_object_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOMultipleObjects.SingleObject.object_data)
  return object_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSOMultipleObjects_SingleObject::release_object_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOMultipleObjects.SingleObject.object_data)
  clear_has_object_data();
  return object_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSOMultipleObjects_SingleObject::set_allocated_object_data(::std::string* object_data) {
  if (object_data != NULL) {
    set_has_object_data();
  } else {
    clear_has_object_data();
  }
  object_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOMultipleObjects.SingleObject.object_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOMultipleObjects::kObjectsModifiedFieldNumber;
const int CMsgSOMultipleObjects::kVersionFieldNumber;
const int CMsgSOMultipleObjects::kObjectsAddedFieldNumber;
const int CMsgSOMultipleObjects::kObjectsRemovedFieldNumber;
const int CMsgSOMultipleObjects::kOwnerSoidFieldNumber;
const int CMsgSOMultipleObjects::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOMultipleObjects::CMsgSOMultipleObjects()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOMultipleObjects)
}
CMsgSOMultipleObjects::CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objects_modified_(from.objects_modified_),
      objects_added_(from.objects_added_),
      objects_removed_(from.objects_removed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOMultipleObjects)
}

void CMsgSOMultipleObjects::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_soid_, 0, reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_) + sizeof(service_id_));
}

CMsgSOMultipleObjects::~CMsgSOMultipleObjects() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOMultipleObjects)
  SharedDtor();
}

void CMsgSOMultipleObjects::SharedDtor() {
  if (this != internal_default_instance()) {
    delete owner_soid_;
  }
}

void CMsgSOMultipleObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOMultipleObjects& CMsgSOMultipleObjects::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOMultipleObjects* CMsgSOMultipleObjects::New(::google::protobuf::Arena* arena) const {
  CMsgSOMultipleObjects* n = new CMsgSOMultipleObjects;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOMultipleObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOMultipleObjects)
  objects_modified_.Clear();
  objects_added_.Clear();
  objects_removed_.Clear();
  if (has_owner_soid()) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOMultipleObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOMultipleObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects_modified()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects_added()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects_removed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOMultipleObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOMultipleObjects)
  return false;
#undef DO_
}

void CMsgSOMultipleObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOMultipleObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (unsigned int i = 0, n = this->objects_modified_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects_modified(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (unsigned int i = 0, n = this->objects_added_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->objects_added(i), output);
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (unsigned int i = 0, n = this->objects_removed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->objects_removed(i), output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOMultipleObjects)
}

::google::protobuf::uint8* CMsgSOMultipleObjects::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOMultipleObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (unsigned int i = 0, n = this->objects_modified_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->objects_modified(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (unsigned int i = 0, n = this->objects_added_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->objects_added(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (unsigned int i = 0, n = this->objects_removed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->objects_removed(i), deterministic, target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOMultipleObjects)
  return target;
}

size_t CMsgSOMultipleObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOMultipleObjects)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  {
    unsigned int count = this->objects_modified_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objects_modified(i));
    }
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
  {
    unsigned int count = this->objects_added_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objects_added(i));
    }
  }

  // repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  {
    unsigned int count = this->objects_removed_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objects_removed(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 7;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOMultipleObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOMultipleObjects* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOMultipleObjects>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOMultipleObjects)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOMultipleObjects)
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects::MergeFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOMultipleObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_modified_.MergeFrom(from.objects_modified_);
  objects_added_.MergeFrom(from.objects_added_);
  objects_removed_.MergeFrom(from.objects_removed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOMultipleObjects::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOMultipleObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects::CopyFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOMultipleObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects::Swap(CMsgSOMultipleObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOMultipleObjects::InternalSwap(CMsgSOMultipleObjects* other) {
  objects_modified_.InternalSwap(&other->objects_modified_);
  objects_added_.InternalSwap(&other->objects_added_);
  objects_removed_.InternalSwap(&other->objects_removed_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(version_, other->version_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOMultipleObjects::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOMultipleObjects

// repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_modified = 2;
int CMsgSOMultipleObjects::objects_modified_size() const {
  return objects_modified_.size();
}
void CMsgSOMultipleObjects::clear_objects_modified() {
  objects_modified_.Clear();
}
const ::proto::dota::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects_modified(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOMultipleObjects.objects_modified)
  return objects_modified_.Get(index);
}
::proto::dota::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects_modified(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOMultipleObjects.objects_modified)
  return objects_modified_.Mutable(index);
}
::proto::dota::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects_modified() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSOMultipleObjects.objects_modified)
  return objects_modified_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects_modified() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSOMultipleObjects.objects_modified)
  return &objects_modified_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects_modified() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSOMultipleObjects.objects_modified)
  return objects_modified_;
}

// optional fixed64 version = 3;
bool CMsgSOMultipleObjects::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOMultipleObjects::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOMultipleObjects::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOMultipleObjects::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CMsgSOMultipleObjects::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOMultipleObjects.version)
  return version_;
}
void CMsgSOMultipleObjects::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOMultipleObjects.version)
}

// repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_added = 4;
int CMsgSOMultipleObjects::objects_added_size() const {
  return objects_added_.size();
}
void CMsgSOMultipleObjects::clear_objects_added() {
  objects_added_.Clear();
}
const ::proto::dota::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects_added(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOMultipleObjects.objects_added)
  return objects_added_.Get(index);
}
::proto::dota::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects_added(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOMultipleObjects.objects_added)
  return objects_added_.Mutable(index);
}
::proto::dota::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects_added() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSOMultipleObjects.objects_added)
  return objects_added_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects_added() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSOMultipleObjects.objects_added)
  return &objects_added_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects_added() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSOMultipleObjects.objects_added)
  return objects_added_;
}

// repeated .proto.dota.CMsgSOMultipleObjects.SingleObject objects_removed = 5;
int CMsgSOMultipleObjects::objects_removed_size() const {
  return objects_removed_.size();
}
void CMsgSOMultipleObjects::clear_objects_removed() {
  objects_removed_.Clear();
}
const ::proto::dota::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects_removed(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOMultipleObjects.objects_removed)
  return objects_removed_.Get(index);
}
::proto::dota::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects_removed(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOMultipleObjects.objects_removed)
  return objects_removed_.Mutable(index);
}
::proto::dota::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects_removed() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSOMultipleObjects.objects_removed)
  return objects_removed_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects_removed() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSOMultipleObjects.objects_removed)
  return &objects_removed_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects_removed() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSOMultipleObjects.objects_removed)
  return objects_removed_;
}

// optional .proto.dota.CMsgSOIDOwner owner_soid = 6;
bool CMsgSOMultipleObjects::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOMultipleObjects::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOMultipleObjects::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOMultipleObjects::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::proto::dota::CMsgSOIDOwner& CMsgSOMultipleObjects::owner_soid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOMultipleObjects.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_
                         : *::proto::dota::CMsgSOIDOwner::internal_default_instance();
}
::proto::dota::CMsgSOIDOwner* CMsgSOMultipleObjects::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOMultipleObjects.owner_soid)
  return owner_soid_;
}
::proto::dota::CMsgSOIDOwner* CMsgSOMultipleObjects::release_owner_soid() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOMultipleObjects.owner_soid)
  clear_has_owner_soid();
  ::proto::dota::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOMultipleObjects::set_allocated_owner_soid(::proto::dota::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOMultipleObjects.owner_soid)
}

// optional uint32 service_id = 7;
bool CMsgSOMultipleObjects::has_service_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOMultipleObjects::set_has_service_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOMultipleObjects::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOMultipleObjects::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 CMsgSOMultipleObjects::service_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOMultipleObjects.service_id)
  return service_id_;
}
void CMsgSOMultipleObjects::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOMultipleObjects.service_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscribed_SubscribedType::kTypeIdFieldNumber;
const int CMsgSOCacheSubscribed_SubscribedType::kObjectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
}
CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      object_data_(from.object_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
}

void CMsgSOCacheSubscribed_SubscribedType::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
}

CMsgSOCacheSubscribed_SubscribedType::~CMsgSOCacheSubscribed_SubscribedType() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  SharedDtor();
}

void CMsgSOCacheSubscribed_SubscribedType::SharedDtor() {
}

void CMsgSOCacheSubscribed_SubscribedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_SubscribedType::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed_SubscribedType::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed_SubscribedType::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscribed_SubscribedType* n = new CMsgSOCacheSubscribed_SubscribedType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscribed_SubscribedType::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  object_data_.Clear();
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscribed_SubscribedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes object_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_object_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  return false;
#undef DO_
}

void CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // repeated bytes object_data = 2;
  for (int i = 0, n = this->object_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
}

::google::protobuf::uint8* CMsgSOCacheSubscribed_SubscribedType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // repeated bytes object_data = 2;
  for (int i = 0, n = this->object_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->object_data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  return target;
}

size_t CMsgSOCacheSubscribed_SubscribedType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes object_data = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->object_data_size());
  for (int i = 0, n = this->object_data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->object_data(i));
  }

  // optional int32 type_id = 1;
  if (has_type_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribed_SubscribedType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscribed_SubscribedType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_data_.MergeFrom(from.object_data_);
  if (from.has_type_id()) {
    set_type_id(from.type_id());
  }
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscribed.SubscribedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed_SubscribedType::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed_SubscribedType::Swap(CMsgSOCacheSubscribed_SubscribedType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribed_SubscribedType::InternalSwap(CMsgSOCacheSubscribed_SubscribedType* other) {
  object_data_.InternalSwap(&other->object_data_);
  std::swap(type_id_, other->type_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribed_SubscribedType::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheSubscribed_SubscribedType

// optional int32 type_id = 1;
bool CMsgSOCacheSubscribed_SubscribedType::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheSubscribed_SubscribedType::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheSubscribed_SubscribedType::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheSubscribed_SubscribedType::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
::google::protobuf::int32 CMsgSOCacheSubscribed_SubscribedType::type_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribed.SubscribedType.type_id)
  return type_id_;
}
void CMsgSOCacheSubscribed_SubscribedType::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribed.SubscribedType.type_id)
}

// repeated bytes object_data = 2;
int CMsgSOCacheSubscribed_SubscribedType::object_data_size() const {
  return object_data_.size();
}
void CMsgSOCacheSubscribed_SubscribedType::clear_object_data() {
  object_data_.Clear();
}
const ::std::string& CMsgSOCacheSubscribed_SubscribedType::object_data(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_.Get(index);
}
::std::string* CMsgSOCacheSubscribed_SubscribedType::mutable_object_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_.Mutable(index);
}
void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
  object_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
  object_data_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  object_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
}
void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const void* value, size_t size) {
  object_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
}
::std::string* CMsgSOCacheSubscribed_SubscribedType::add_object_data() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_.Add();
}
void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const ::std::string& value) {
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
}
#if LANG_CXX11
void CMsgSOCacheSubscribed_SubscribedType::add_object_data(::std::string&& value) {
  object_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
}
#endif
void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
}
void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const void* value, size_t size) {
  object_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgSOCacheSubscribed_SubscribedType::object_data() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgSOCacheSubscribed_SubscribedType::mutable_object_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSOCacheSubscribed.SubscribedType.object_data)
  return &object_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscribed::kObjectsFieldNumber;
const int CMsgSOCacheSubscribed::kVersionFieldNumber;
const int CMsgSOCacheSubscribed::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscribed::kServiceIdFieldNumber;
const int CMsgSOCacheSubscribed::kServiceListFieldNumber;
const int CMsgSOCacheSubscribed::kSyncVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscribed::CMsgSOCacheSubscribed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscribed)
}
CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objects_(from.objects_),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscribed)
}

void CMsgSOCacheSubscribed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_soid_, 0, reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_) + sizeof(service_id_));
}

CMsgSOCacheSubscribed::~CMsgSOCacheSubscribed() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscribed)
  SharedDtor();
}

void CMsgSOCacheSubscribed::SharedDtor() {
  if (this != internal_default_instance()) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscribed& CMsgSOCacheSubscribed::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOCacheSubscribed* CMsgSOCacheSubscribed::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscribed* n = new CMsgSOCacheSubscribed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscribed)
  objects_.Clear();
  service_list_.Clear();
  if (has_owner_soid()) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscribed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 service_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_service_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_sync_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscribed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscribed)
  return false;
#undef DO_
}

void CMsgSOCacheSubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->service_id(), output);
  }

  // repeated uint32 service_list = 6;
  for (int i = 0, n = this->service_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscribed)
}

::google::protobuf::uint8* CMsgSOCacheSubscribed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->objects(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->service_id(), target);
  }

  // repeated uint32 service_list = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->service_list_, target);

  // optional fixed64 sync_version = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscribed)
  return target;
}

size_t CMsgSOCacheSubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscribed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
  {
    unsigned int count = this->objects_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objects(i));
    }
  }

  // repeated uint32 service_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->service_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 7;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 5;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscribed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscribed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscribed)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed::MergeFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscribed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed::CopyFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed::Swap(CMsgSOCacheSubscribed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribed::InternalSwap(CMsgSOCacheSubscribed* other) {
  objects_.InternalSwap(&other->objects_);
  service_list_.InternalSwap(&other->service_list_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(version_, other->version_);
  std::swap(sync_version_, other->sync_version_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribed::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheSubscribed

// repeated .proto.dota.CMsgSOCacheSubscribed.SubscribedType objects = 2;
int CMsgSOCacheSubscribed::objects_size() const {
  return objects_.size();
}
void CMsgSOCacheSubscribed::clear_objects() {
  objects_.Clear();
}
const ::proto::dota::CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed::objects(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribed.objects)
  return objects_.Get(index);
}
::proto::dota::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOCacheSubscribed.objects)
  return objects_.Mutable(index);
}
::proto::dota::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::add_objects() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSOCacheSubscribed.objects)
  return objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOCacheSubscribed_SubscribedType >*
CMsgSOCacheSubscribed::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSOCacheSubscribed.objects)
  return &objects_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOCacheSubscribed_SubscribedType >&
CMsgSOCacheSubscribed::objects() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSOCacheSubscribed.objects)
  return objects_;
}

// optional fixed64 version = 3;
bool CMsgSOCacheSubscribed::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOCacheSubscribed::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOCacheSubscribed::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOCacheSubscribed::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CMsgSOCacheSubscribed::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribed.version)
  return version_;
}
void CMsgSOCacheSubscribed::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribed.version)
}

// optional .proto.dota.CMsgSOIDOwner owner_soid = 4;
bool CMsgSOCacheSubscribed::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheSubscribed::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheSubscribed::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheSubscribed::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::proto::dota::CMsgSOIDOwner& CMsgSOCacheSubscribed::owner_soid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribed.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_
                         : *::proto::dota::CMsgSOIDOwner::internal_default_instance();
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheSubscribed::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOCacheSubscribed.owner_soid)
  return owner_soid_;
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheSubscribed::release_owner_soid() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOCacheSubscribed.owner_soid)
  clear_has_owner_soid();
  ::proto::dota::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheSubscribed::set_allocated_owner_soid(::proto::dota::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOCacheSubscribed.owner_soid)
}

// optional uint32 service_id = 5;
bool CMsgSOCacheSubscribed::has_service_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSOCacheSubscribed::set_has_service_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSOCacheSubscribed::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSOCacheSubscribed::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 CMsgSOCacheSubscribed::service_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribed.service_id)
  return service_id_;
}
void CMsgSOCacheSubscribed::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribed.service_id)
}

// repeated uint32 service_list = 6;
int CMsgSOCacheSubscribed::service_list_size() const {
  return service_list_.size();
}
void CMsgSOCacheSubscribed::clear_service_list() {
  service_list_.Clear();
}
::google::protobuf::uint32 CMsgSOCacheSubscribed::service_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribed.service_list)
  return service_list_.Get(index);
}
void CMsgSOCacheSubscribed::set_service_list(int index, ::google::protobuf::uint32 value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribed.service_list)
}
void CMsgSOCacheSubscribed::add_service_list(::google::protobuf::uint32 value) {
  service_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSOCacheSubscribed.service_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSOCacheSubscribed::service_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSOCacheSubscribed.service_list)
  return service_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSOCacheSubscribed::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSOCacheSubscribed.service_list)
  return &service_list_;
}

// optional fixed64 sync_version = 7;
bool CMsgSOCacheSubscribed::has_sync_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOCacheSubscribed::set_has_sync_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOCacheSubscribed::clear_has_sync_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOCacheSubscribed::clear_sync_version() {
  sync_version_ = GOOGLE_ULONGLONG(0);
  clear_has_sync_version();
}
::google::protobuf::uint64 CMsgSOCacheSubscribed::sync_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribed.sync_version)
  return sync_version_;
}
void CMsgSOCacheSubscribed::set_sync_version(::google::protobuf::uint64 value) {
  set_has_sync_version();
  sync_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribed.sync_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscribedUpToDate::kVersionFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kServiceIdFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kServiceListFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kSyncVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscribedUpToDate)
}
CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate(const CMsgSOCacheSubscribedUpToDate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscribedUpToDate)
}

void CMsgSOCacheSubscribedUpToDate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_soid_, 0, reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_) + sizeof(service_id_));
}

CMsgSOCacheSubscribedUpToDate::~CMsgSOCacheSubscribedUpToDate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscribedUpToDate)
  SharedDtor();
}

void CMsgSOCacheSubscribedUpToDate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscribedUpToDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribedUpToDate::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscribedUpToDate& CMsgSOCacheSubscribedUpToDate::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOCacheSubscribedUpToDate* CMsgSOCacheSubscribedUpToDate::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscribedUpToDate* n = new CMsgSOCacheSubscribedUpToDate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscribedUpToDate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  service_list_.Clear();
  if (has_owner_soid()) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscribedUpToDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 service_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_service_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_sync_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscribedUpToDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscribedUpToDate)
  return false;
#undef DO_
}

void CMsgSOCacheSubscribedUpToDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  // repeated uint32 service_list = 4;
  for (int i = 0, n = this->service_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscribedUpToDate)
}

::google::protobuf::uint8* CMsgSOCacheSubscribedUpToDate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  // repeated uint32 service_list = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->service_list_, target);

  // optional fixed64 sync_version = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscribedUpToDate)
  return target;
}

size_t CMsgSOCacheSubscribedUpToDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 service_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->service_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional fixed64 version = 1;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 5;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribedUpToDate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscribedUpToDate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscribedUpToDate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscribedUpToDate)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const CMsgSOCacheSubscribedUpToDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const CMsgSOCacheSubscribedUpToDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscribedUpToDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribedUpToDate::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribedUpToDate::Swap(CMsgSOCacheSubscribedUpToDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribedUpToDate::InternalSwap(CMsgSOCacheSubscribedUpToDate* other) {
  service_list_.InternalSwap(&other->service_list_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(version_, other->version_);
  std::swap(sync_version_, other->sync_version_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribedUpToDate::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheSubscribedUpToDate

// optional fixed64 version = 1;
bool CMsgSOCacheSubscribedUpToDate::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOCacheSubscribedUpToDate::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOCacheSubscribedUpToDate::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOCacheSubscribedUpToDate::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CMsgSOCacheSubscribedUpToDate::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribedUpToDate.version)
  return version_;
}
void CMsgSOCacheSubscribedUpToDate::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribedUpToDate.version)
}

// optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
bool CMsgSOCacheSubscribedUpToDate::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheSubscribedUpToDate::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheSubscribedUpToDate::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheSubscribedUpToDate::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::proto::dota::CMsgSOIDOwner& CMsgSOCacheSubscribedUpToDate::owner_soid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribedUpToDate.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_
                         : *::proto::dota::CMsgSOIDOwner::internal_default_instance();
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheSubscribedUpToDate::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOCacheSubscribedUpToDate.owner_soid)
  return owner_soid_;
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheSubscribedUpToDate::release_owner_soid() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOCacheSubscribedUpToDate.owner_soid)
  clear_has_owner_soid();
  ::proto::dota::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheSubscribedUpToDate::set_allocated_owner_soid(::proto::dota::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOCacheSubscribedUpToDate.owner_soid)
}

// optional uint32 service_id = 3;
bool CMsgSOCacheSubscribedUpToDate::has_service_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSOCacheSubscribedUpToDate::set_has_service_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSOCacheSubscribedUpToDate::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSOCacheSubscribedUpToDate::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 CMsgSOCacheSubscribedUpToDate::service_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribedUpToDate.service_id)
  return service_id_;
}
void CMsgSOCacheSubscribedUpToDate::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribedUpToDate.service_id)
}

// repeated uint32 service_list = 4;
int CMsgSOCacheSubscribedUpToDate::service_list_size() const {
  return service_list_.size();
}
void CMsgSOCacheSubscribedUpToDate::clear_service_list() {
  service_list_.Clear();
}
::google::protobuf::uint32 CMsgSOCacheSubscribedUpToDate::service_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribedUpToDate.service_list)
  return service_list_.Get(index);
}
void CMsgSOCacheSubscribedUpToDate::set_service_list(int index, ::google::protobuf::uint32 value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribedUpToDate.service_list)
}
void CMsgSOCacheSubscribedUpToDate::add_service_list(::google::protobuf::uint32 value) {
  service_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSOCacheSubscribedUpToDate.service_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSOCacheSubscribedUpToDate::service_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSOCacheSubscribedUpToDate.service_list)
  return service_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSOCacheSubscribedUpToDate::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSOCacheSubscribedUpToDate.service_list)
  return &service_list_;
}

// optional fixed64 sync_version = 5;
bool CMsgSOCacheSubscribedUpToDate::has_sync_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOCacheSubscribedUpToDate::set_has_sync_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOCacheSubscribedUpToDate::clear_has_sync_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOCacheSubscribedUpToDate::clear_sync_version() {
  sync_version_ = GOOGLE_ULONGLONG(0);
  clear_has_sync_version();
}
::google::protobuf::uint64 CMsgSOCacheSubscribedUpToDate::sync_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscribedUpToDate.sync_version)
  return sync_version_;
}
void CMsgSOCacheSubscribedUpToDate::set_sync_version(::google::protobuf::uint64 value) {
  set_has_sync_version();
  sync_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscribedUpToDate.sync_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheUnsubscribed::kOwnerSoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheUnsubscribed)
}
CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed(const CMsgSOCacheUnsubscribed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheUnsubscribed)
}

void CMsgSOCacheUnsubscribed::SharedCtor() {
  _cached_size_ = 0;
  owner_soid_ = NULL;
}

CMsgSOCacheUnsubscribed::~CMsgSOCacheUnsubscribed() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheUnsubscribed)
  SharedDtor();
}

void CMsgSOCacheUnsubscribed::SharedDtor() {
  if (this != internal_default_instance()) {
    delete owner_soid_;
  }
}

void CMsgSOCacheUnsubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheUnsubscribed::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheUnsubscribed& CMsgSOCacheUnsubscribed::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOCacheUnsubscribed* CMsgSOCacheUnsubscribed::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheUnsubscribed* n = new CMsgSOCacheUnsubscribed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheUnsubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheUnsubscribed)
  if (has_owner_soid()) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheUnsubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheUnsubscribed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheUnsubscribed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheUnsubscribed)
  return false;
#undef DO_
}

void CMsgSOCacheUnsubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheUnsubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_soid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheUnsubscribed)
}

::google::protobuf::uint8* CMsgSOCacheUnsubscribed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheUnsubscribed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->owner_soid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheUnsubscribed)
  return target;
}

size_t CMsgSOCacheUnsubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheUnsubscribed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->owner_soid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheUnsubscribed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheUnsubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheUnsubscribed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheUnsubscribed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheUnsubscribed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheUnsubscribed)
    MergeFrom(*source);
  }
}

void CMsgSOCacheUnsubscribed::MergeFrom(const CMsgSOCacheUnsubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheUnsubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner_soid()) {
    mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
  }
}

void CMsgSOCacheUnsubscribed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheUnsubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheUnsubscribed::CopyFrom(const CMsgSOCacheUnsubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheUnsubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheUnsubscribed::IsInitialized() const {
  return true;
}

void CMsgSOCacheUnsubscribed::Swap(CMsgSOCacheUnsubscribed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheUnsubscribed::InternalSwap(CMsgSOCacheUnsubscribed* other) {
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheUnsubscribed::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheUnsubscribed

// optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
bool CMsgSOCacheUnsubscribed::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheUnsubscribed::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheUnsubscribed::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheUnsubscribed::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::proto::dota::CMsgSOIDOwner& CMsgSOCacheUnsubscribed::owner_soid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheUnsubscribed.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_
                         : *::proto::dota::CMsgSOIDOwner::internal_default_instance();
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheUnsubscribed::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOCacheUnsubscribed.owner_soid)
  return owner_soid_;
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheUnsubscribed::release_owner_soid() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOCacheUnsubscribed.owner_soid)
  clear_has_owner_soid();
  ::proto::dota::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheUnsubscribed::set_allocated_owner_soid(::proto::dota::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOCacheUnsubscribed.owner_soid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscriptionCheck::kVersionFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kServiceIdFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kServiceListFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kSyncVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscriptionCheck)
}
CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck(const CMsgSOCacheSubscriptionCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscriptionCheck)
}

void CMsgSOCacheSubscriptionCheck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_soid_, 0, reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_) + sizeof(service_id_));
}

CMsgSOCacheSubscriptionCheck::~CMsgSOCacheSubscriptionCheck() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscriptionCheck)
  SharedDtor();
}

void CMsgSOCacheSubscriptionCheck::SharedDtor() {
  if (this != internal_default_instance()) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscriptionCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionCheck::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscriptionCheck& CMsgSOCacheSubscriptionCheck::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOCacheSubscriptionCheck* CMsgSOCacheSubscriptionCheck::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscriptionCheck* n = new CMsgSOCacheSubscriptionCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscriptionCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  service_list_.Clear();
  if (has_owner_soid()) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscriptionCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 service_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_service_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_sync_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscriptionCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscriptionCheck)
  return false;
#undef DO_
}

void CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->service_id(), output);
  }

  // repeated uint32 service_list = 5;
  for (int i = 0, n = this->service_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscriptionCheck)
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  // optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->owner_soid_, deterministic, target);
  }

  // optional uint32 service_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->service_id(), target);
  }

  // repeated uint32 service_list = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->service_list_, target);

  // optional fixed64 sync_version = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscriptionCheck)
  return target;
}

size_t CMsgSOCacheSubscriptionCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 service_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->service_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 6;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 4;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscriptionCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscriptionCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscriptionCheck)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const CMsgSOCacheSubscriptionCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const CMsgSOCacheSubscriptionCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscriptionCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionCheck::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscriptionCheck::Swap(CMsgSOCacheSubscriptionCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscriptionCheck::InternalSwap(CMsgSOCacheSubscriptionCheck* other) {
  service_list_.InternalSwap(&other->service_list_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(version_, other->version_);
  std::swap(sync_version_, other->sync_version_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionCheck::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheSubscriptionCheck

// optional fixed64 version = 2;
bool CMsgSOCacheSubscriptionCheck::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOCacheSubscriptionCheck::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOCacheSubscriptionCheck::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOCacheSubscriptionCheck::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CMsgSOCacheSubscriptionCheck::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscriptionCheck.version)
  return version_;
}
void CMsgSOCacheSubscriptionCheck::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscriptionCheck.version)
}

// optional .proto.dota.CMsgSOIDOwner owner_soid = 3;
bool CMsgSOCacheSubscriptionCheck::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheSubscriptionCheck::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheSubscriptionCheck::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheSubscriptionCheck::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::proto::dota::CMsgSOIDOwner& CMsgSOCacheSubscriptionCheck::owner_soid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscriptionCheck.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_
                         : *::proto::dota::CMsgSOIDOwner::internal_default_instance();
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheSubscriptionCheck::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOCacheSubscriptionCheck.owner_soid)
  return owner_soid_;
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheSubscriptionCheck::release_owner_soid() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOCacheSubscriptionCheck.owner_soid)
  clear_has_owner_soid();
  ::proto::dota::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheSubscriptionCheck::set_allocated_owner_soid(::proto::dota::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOCacheSubscriptionCheck.owner_soid)
}

// optional uint32 service_id = 4;
bool CMsgSOCacheSubscriptionCheck::has_service_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSOCacheSubscriptionCheck::set_has_service_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSOCacheSubscriptionCheck::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSOCacheSubscriptionCheck::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 CMsgSOCacheSubscriptionCheck::service_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscriptionCheck.service_id)
  return service_id_;
}
void CMsgSOCacheSubscriptionCheck::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscriptionCheck.service_id)
}

// repeated uint32 service_list = 5;
int CMsgSOCacheSubscriptionCheck::service_list_size() const {
  return service_list_.size();
}
void CMsgSOCacheSubscriptionCheck::clear_service_list() {
  service_list_.Clear();
}
::google::protobuf::uint32 CMsgSOCacheSubscriptionCheck::service_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscriptionCheck.service_list)
  return service_list_.Get(index);
}
void CMsgSOCacheSubscriptionCheck::set_service_list(int index, ::google::protobuf::uint32 value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscriptionCheck.service_list)
}
void CMsgSOCacheSubscriptionCheck::add_service_list(::google::protobuf::uint32 value) {
  service_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSOCacheSubscriptionCheck.service_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSOCacheSubscriptionCheck::service_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSOCacheSubscriptionCheck.service_list)
  return service_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSOCacheSubscriptionCheck::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSOCacheSubscriptionCheck.service_list)
  return &service_list_;
}

// optional fixed64 sync_version = 6;
bool CMsgSOCacheSubscriptionCheck::has_sync_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOCacheSubscriptionCheck::set_has_sync_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOCacheSubscriptionCheck::clear_has_sync_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOCacheSubscriptionCheck::clear_sync_version() {
  sync_version_ = GOOGLE_ULONGLONG(0);
  clear_has_sync_version();
}
::google::protobuf::uint64 CMsgSOCacheSubscriptionCheck::sync_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscriptionCheck.sync_version)
  return sync_version_;
}
void CMsgSOCacheSubscriptionCheck::set_sync_version(::google::protobuf::uint64 value) {
  set_has_sync_version();
  sync_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheSubscriptionCheck.sync_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheSubscriptionRefresh::kOwnerSoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheSubscriptionRefresh)
}
CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh(const CMsgSOCacheSubscriptionRefresh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner_soid()) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheSubscriptionRefresh)
}

void CMsgSOCacheSubscriptionRefresh::SharedCtor() {
  _cached_size_ = 0;
  owner_soid_ = NULL;
}

CMsgSOCacheSubscriptionRefresh::~CMsgSOCacheSubscriptionRefresh() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheSubscriptionRefresh)
  SharedDtor();
}

void CMsgSOCacheSubscriptionRefresh::SharedDtor() {
  if (this != internal_default_instance()) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscriptionRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionRefresh::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheSubscriptionRefresh& CMsgSOCacheSubscriptionRefresh::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOCacheSubscriptionRefresh* CMsgSOCacheSubscriptionRefresh::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscriptionRefresh* n = new CMsgSOCacheSubscriptionRefresh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscriptionRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  if (has_owner_soid()) {
    GOOGLE_DCHECK(owner_soid_ != NULL);
    owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheSubscriptionRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheSubscriptionRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheSubscriptionRefresh)
  return false;
#undef DO_
}

void CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_soid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheSubscriptionRefresh)
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionRefresh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->owner_soid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheSubscriptionRefresh)
  return target;
}

size_t CMsgSOCacheSubscriptionRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->owner_soid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionRefresh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscriptionRefresh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheSubscriptionRefresh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheSubscriptionRefresh)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const CMsgSOCacheSubscriptionRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner_soid()) {
    mutable_owner_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.owner_soid());
  }
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const CMsgSOCacheSubscriptionRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheSubscriptionRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionRefresh::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscriptionRefresh::Swap(CMsgSOCacheSubscriptionRefresh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscriptionRefresh::InternalSwap(CMsgSOCacheSubscriptionRefresh* other) {
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionRefresh::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheSubscriptionRefresh

// optional .proto.dota.CMsgSOIDOwner owner_soid = 2;
bool CMsgSOCacheSubscriptionRefresh::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheSubscriptionRefresh::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheSubscriptionRefresh::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheSubscriptionRefresh::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::proto::dota::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::proto::dota::CMsgSOIDOwner& CMsgSOCacheSubscriptionRefresh::owner_soid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheSubscriptionRefresh.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_
                         : *::proto::dota::CMsgSOIDOwner::internal_default_instance();
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheSubscriptionRefresh::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::proto::dota::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOCacheSubscriptionRefresh.owner_soid)
  return owner_soid_;
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheSubscriptionRefresh::release_owner_soid() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOCacheSubscriptionRefresh.owner_soid)
  clear_has_owner_soid();
  ::proto::dota::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheSubscriptionRefresh::set_allocated_owner_soid(::proto::dota::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOCacheSubscriptionRefresh.owner_soid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheVersion::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheVersion::CMsgSOCacheVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheVersion)
}
CMsgSOCacheVersion::CMsgSOCacheVersion(const CMsgSOCacheVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheVersion)
}

void CMsgSOCacheVersion::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
}

CMsgSOCacheVersion::~CMsgSOCacheVersion() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheVersion)
  SharedDtor();
}

void CMsgSOCacheVersion::SharedDtor() {
}

void CMsgSOCacheVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheVersion::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheVersion& CMsgSOCacheVersion::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOCacheVersion* CMsgSOCacheVersion::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheVersion* n = new CMsgSOCacheVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheVersion)
  version_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheVersion)
  return false;
#undef DO_
}

void CMsgSOCacheVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheVersion)
}

::google::protobuf::uint8* CMsgSOCacheVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheVersion)
  return target;
}

size_t CMsgSOCacheVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 version = 1;
  if (has_version()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheVersion)
    MergeFrom(*source);
  }
}

void CMsgSOCacheVersion::MergeFrom(const CMsgSOCacheVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    set_version(from.version());
  }
}

void CMsgSOCacheVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheVersion::CopyFrom(const CMsgSOCacheVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheVersion::IsInitialized() const {
  return true;
}

void CMsgSOCacheVersion::Swap(CMsgSOCacheVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheVersion::InternalSwap(CMsgSOCacheVersion* other) {
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheVersion::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheVersion

// optional fixed64 version = 1;
bool CMsgSOCacheVersion::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheVersion::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheVersion::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheVersion::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CMsgSOCacheVersion::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheVersion.version)
  return version_;
}
void CMsgSOCacheVersion::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheVersion.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMultiplexMessage::kMsgtypeFieldNumber;
const int CMsgGCMultiplexMessage::kPayloadFieldNumber;
const int CMsgGCMultiplexMessage::kSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMultiplexMessage::CMsgGCMultiplexMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMultiplexMessage)
}
CMsgGCMultiplexMessage::CMsgGCMultiplexMessage(const CMsgGCMultiplexMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMultiplexMessage)
}

void CMsgGCMultiplexMessage::SharedCtor() {
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0u;
}

CMsgGCMultiplexMessage::~CMsgGCMultiplexMessage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMultiplexMessage)
  SharedDtor();
}

void CMsgGCMultiplexMessage::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMultiplexMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMultiplexMessage::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMultiplexMessage& CMsgGCMultiplexMessage::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMultiplexMessage* CMsgGCMultiplexMessage::New(::google::protobuf::Arena* arena) const {
  CMsgGCMultiplexMessage* n = new CMsgGCMultiplexMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMultiplexMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMultiplexMessage)
  steamids_.Clear();
  if (has_payload()) {
    GOOGLE_DCHECK(!payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*payload_.UnsafeRawStringPointer())->clear();
  }
  msgtype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMultiplexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMultiplexMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMultiplexMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMultiplexMessage)
  return false;
#undef DO_
}

void CMsgGCMultiplexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMultiplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgtype = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgtype(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // repeated fixed64 steamids = 3;
  for (int i = 0, n = this->steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMultiplexMessage)
}

::google::protobuf::uint8* CMsgGCMultiplexMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMultiplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgtype(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // repeated fixed64 steamids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMultiplexMessage)
  return target;
}

size_t CMsgGCMultiplexMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMultiplexMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 steamids = 3;
  {
    unsigned int count = this->steamids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional uint32 msgtype = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMultiplexMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMultiplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMultiplexMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMultiplexMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMultiplexMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMultiplexMessage)
    MergeFrom(*source);
  }
}

void CMsgGCMultiplexMessage::MergeFrom(const CMsgGCMultiplexMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMultiplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      msgtype_ = from.msgtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMultiplexMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMultiplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMultiplexMessage::CopyFrom(const CMsgGCMultiplexMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMultiplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMultiplexMessage::IsInitialized() const {
  return true;
}

void CMsgGCMultiplexMessage::Swap(CMsgGCMultiplexMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMultiplexMessage::InternalSwap(CMsgGCMultiplexMessage* other) {
  steamids_.InternalSwap(&other->steamids_);
  payload_.Swap(&other->payload_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMultiplexMessage::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMultiplexMessage

// optional uint32 msgtype = 1;
bool CMsgGCMultiplexMessage::has_msgtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCMultiplexMessage::set_has_msgtype() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCMultiplexMessage::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCMultiplexMessage::clear_msgtype() {
  msgtype_ = 0u;
  clear_has_msgtype();
}
::google::protobuf::uint32 CMsgGCMultiplexMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMultiplexMessage.msgtype)
  return msgtype_;
}
void CMsgGCMultiplexMessage::set_msgtype(::google::protobuf::uint32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMultiplexMessage.msgtype)
}

// optional bytes payload = 2;
bool CMsgGCMultiplexMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMultiplexMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMultiplexMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMultiplexMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string& CMsgGCMultiplexMessage::payload() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMultiplexMessage.payload)
  return payload_.GetNoArena();
}
void CMsgGCMultiplexMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMultiplexMessage.payload)
}
#if LANG_CXX11
void CMsgGCMultiplexMessage::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCMultiplexMessage.payload)
}
#endif
void CMsgGCMultiplexMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCMultiplexMessage.payload)
}
void CMsgGCMultiplexMessage::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCMultiplexMessage.payload)
}
::std::string* CMsgGCMultiplexMessage::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMultiplexMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCMultiplexMessage::release_payload() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMultiplexMessage.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCMultiplexMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMultiplexMessage.payload)
}

// repeated fixed64 steamids = 3;
int CMsgGCMultiplexMessage::steamids_size() const {
  return steamids_.size();
}
void CMsgGCMultiplexMessage::clear_steamids() {
  steamids_.Clear();
}
::google::protobuf::uint64 CMsgGCMultiplexMessage::steamids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMultiplexMessage.steamids)
  return steamids_.Get(index);
}
void CMsgGCMultiplexMessage::set_steamids(int index, ::google::protobuf::uint64 value) {
  steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMultiplexMessage.steamids)
}
void CMsgGCMultiplexMessage::add_steamids(::google::protobuf::uint64 value) {
  steamids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCMultiplexMessage.steamids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCMultiplexMessage::steamids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCMultiplexMessage.steamids)
  return steamids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCMultiplexMessage::mutable_steamids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCMultiplexMessage.steamids)
  return &steamids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterAck_Process::kDirIndexFieldNumber;
const int CGCToGCMsgMasterAck_Process::kTypeInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterAck_Process::CGCToGCMsgMasterAck_Process()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterAck.Process)
}
CGCToGCMsgMasterAck_Process::CGCToGCMsgMasterAck_Process(const CGCToGCMsgMasterAck_Process& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      type_instances_(from.type_instances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterAck.Process)
}

void CGCToGCMsgMasterAck_Process::SharedCtor() {
  _cached_size_ = 0;
  dir_index_ = 0u;
}

CGCToGCMsgMasterAck_Process::~CGCToGCMsgMasterAck_Process() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterAck.Process)
  SharedDtor();
}

void CGCToGCMsgMasterAck_Process::SharedDtor() {
}

void CGCToGCMsgMasterAck_Process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_Process::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgMasterAck_Process& CGCToGCMsgMasterAck_Process::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCToGCMsgMasterAck_Process* CGCToGCMsgMasterAck_Process::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterAck_Process* n = new CGCToGCMsgMasterAck_Process;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterAck_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterAck.Process)
  type_instances_.Clear();
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgMasterAck_Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterAck.Process)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dir_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 type_instances = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_type_instances())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_type_instances())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterAck.Process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterAck.Process)
  return false;
#undef DO_
}

void CGCToGCMsgMasterAck_Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterAck.Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // repeated uint32 type_instances = 2;
  for (int i = 0, n = this->type_instances_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->type_instances(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterAck.Process)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck_Process::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterAck.Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // repeated uint32 type_instances = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->type_instances_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterAck.Process)
  return target;
}

size_t CGCToGCMsgMasterAck_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterAck.Process)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 type_instances = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->type_instances_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->type_instances_size());
    total_size += data_size;
  }

  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dir_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck_Process::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterAck.Process)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck_Process* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterAck_Process>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterAck.Process)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterAck.Process)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Process::MergeFrom(const CGCToGCMsgMasterAck_Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterAck.Process)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_instances_.MergeFrom(from.type_instances_);
  if (from.has_dir_index()) {
    set_dir_index(from.dir_index());
  }
}

void CGCToGCMsgMasterAck_Process::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterAck.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Process::CopyFrom(const CGCToGCMsgMasterAck_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterAck.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Process::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck_Process::Swap(CGCToGCMsgMasterAck_Process* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck_Process::InternalSwap(CGCToGCMsgMasterAck_Process* other) {
  type_instances_.InternalSwap(&other->type_instances_);
  std::swap(dir_index_, other->dir_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck_Process::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgMasterAck_Process

// optional uint32 dir_index = 1;
bool CGCToGCMsgMasterAck_Process::has_dir_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgMasterAck_Process::set_has_dir_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgMasterAck_Process::clear_has_dir_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgMasterAck_Process::clear_dir_index() {
  dir_index_ = 0u;
  clear_has_dir_index();
}
::google::protobuf::uint32 CGCToGCMsgMasterAck_Process::dir_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterAck.Process.dir_index)
  return dir_index_;
}
void CGCToGCMsgMasterAck_Process::set_dir_index(::google::protobuf::uint32 value) {
  set_has_dir_index();
  dir_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgMasterAck.Process.dir_index)
}

// repeated uint32 type_instances = 2;
int CGCToGCMsgMasterAck_Process::type_instances_size() const {
  return type_instances_.size();
}
void CGCToGCMsgMasterAck_Process::clear_type_instances() {
  type_instances_.Clear();
}
::google::protobuf::uint32 CGCToGCMsgMasterAck_Process::type_instances(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterAck.Process.type_instances)
  return type_instances_.Get(index);
}
void CGCToGCMsgMasterAck_Process::set_type_instances(int index, ::google::protobuf::uint32 value) {
  type_instances_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgMasterAck.Process.type_instances)
}
void CGCToGCMsgMasterAck_Process::add_type_instances(::google::protobuf::uint32 value) {
  type_instances_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CGCToGCMsgMasterAck.Process.type_instances)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CGCToGCMsgMasterAck_Process::type_instances() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCToGCMsgMasterAck.Process.type_instances)
  return type_instances_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CGCToGCMsgMasterAck_Process::mutable_type_instances() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCToGCMsgMasterAck.Process.type_instances)
  return &type_instances_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterAck::kDirIndexFieldNumber;
const int CGCToGCMsgMasterAck::kMachineNameFieldNumber;
const int CGCToGCMsgMasterAck::kProcessNameFieldNumber;
const int CGCToGCMsgMasterAck::kDirectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterAck::CGCToGCMsgMasterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterAck)
}
CGCToGCMsgMasterAck::CGCToGCMsgMasterAck(const CGCToGCMsgMasterAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      directory_(from.directory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_name()) {
    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterAck)
}

void CGCToGCMsgMasterAck::SharedCtor() {
  _cached_size_ = 0;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_index_ = 0u;
}

CGCToGCMsgMasterAck::~CGCToGCMsgMasterAck() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterAck)
  SharedDtor();
}

void CGCToGCMsgMasterAck::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgMasterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgMasterAck& CGCToGCMsgMasterAck::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCToGCMsgMasterAck* CGCToGCMsgMasterAck::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterAck* n = new CGCToGCMsgMasterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterAck)
  directory_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_machine_name()) {
      GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_process_name()) {
      GOOGLE_DCHECK(!process_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*process_name_.UnsafeRawStringPointer())->clear();
    }
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgMasterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dir_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCToGCMsgMasterAck.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string process_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCToGCMsgMasterAck.process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_directory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterAck)
  return false;
#undef DO_
}

void CGCToGCMsgMasterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterAck.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_name(), output);
  }

  // optional string process_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterAck.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->process_name(), output);
  }

  // repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
  for (unsigned int i = 0, n = this->directory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->directory(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterAck)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterAck.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_name(), target);
  }

  // optional string process_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterAck.process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->process_name(), target);
  }

  // repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
  for (unsigned int i = 0, n = this->directory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->directory(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterAck)
  return target;
}

size_t CGCToGCMsgMasterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
  {
    unsigned int count = this->directory_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->directory(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string machine_name = 3;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string process_name = 4;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // optional uint32 dir_index = 1;
    if (has_dir_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterAck)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck::MergeFrom(const CGCToGCMsgMasterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  directory_.MergeFrom(from.directory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_process_name();
      process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgMasterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck::CopyFrom(const CGCToGCMsgMasterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck::Swap(CGCToGCMsgMasterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck::InternalSwap(CGCToGCMsgMasterAck* other) {
  directory_.InternalSwap(&other->directory_);
  machine_name_.Swap(&other->machine_name_);
  process_name_.Swap(&other->process_name_);
  std::swap(dir_index_, other->dir_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgMasterAck

// optional uint32 dir_index = 1;
bool CGCToGCMsgMasterAck::has_dir_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCToGCMsgMasterAck::set_has_dir_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCToGCMsgMasterAck::clear_has_dir_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCToGCMsgMasterAck::clear_dir_index() {
  dir_index_ = 0u;
  clear_has_dir_index();
}
::google::protobuf::uint32 CGCToGCMsgMasterAck::dir_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterAck.dir_index)
  return dir_index_;
}
void CGCToGCMsgMasterAck::set_dir_index(::google::protobuf::uint32 value) {
  set_has_dir_index();
  dir_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgMasterAck.dir_index)
}

// optional string machine_name = 3;
bool CGCToGCMsgMasterAck::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgMasterAck::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgMasterAck::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgMasterAck::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
const ::std::string& CGCToGCMsgMasterAck::machine_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterAck.machine_name)
  return machine_name_.GetNoArena();
}
void CGCToGCMsgMasterAck::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgMasterAck.machine_name)
}
#if LANG_CXX11
void CGCToGCMsgMasterAck::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCToGCMsgMasterAck.machine_name)
}
#endif
void CGCToGCMsgMasterAck::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCToGCMsgMasterAck.machine_name)
}
void CGCToGCMsgMasterAck::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCToGCMsgMasterAck.machine_name)
}
::std::string* CGCToGCMsgMasterAck::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCToGCMsgMasterAck.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCToGCMsgMasterAck::release_machine_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCToGCMsgMasterAck.machine_name)
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCToGCMsgMasterAck::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCToGCMsgMasterAck.machine_name)
}

// optional string process_name = 4;
bool CGCToGCMsgMasterAck::has_process_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCToGCMsgMasterAck::set_has_process_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCToGCMsgMasterAck::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCToGCMsgMasterAck::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_name();
}
const ::std::string& CGCToGCMsgMasterAck::process_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterAck.process_name)
  return process_name_.GetNoArena();
}
void CGCToGCMsgMasterAck::set_process_name(const ::std::string& value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgMasterAck.process_name)
}
#if LANG_CXX11
void CGCToGCMsgMasterAck::set_process_name(::std::string&& value) {
  set_has_process_name();
  process_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCToGCMsgMasterAck.process_name)
}
#endif
void CGCToGCMsgMasterAck::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCToGCMsgMasterAck.process_name)
}
void CGCToGCMsgMasterAck::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCToGCMsgMasterAck.process_name)
}
::std::string* CGCToGCMsgMasterAck::mutable_process_name() {
  set_has_process_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCToGCMsgMasterAck.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCToGCMsgMasterAck::release_process_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCToGCMsgMasterAck.process_name)
  clear_has_process_name();
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCToGCMsgMasterAck::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    set_has_process_name();
  } else {
    clear_has_process_name();
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCToGCMsgMasterAck.process_name)
}

// repeated .proto.dota.CGCToGCMsgMasterAck.Process directory = 6;
int CGCToGCMsgMasterAck::directory_size() const {
  return directory_.size();
}
void CGCToGCMsgMasterAck::clear_directory() {
  directory_.Clear();
}
const ::proto::dota::CGCToGCMsgMasterAck_Process& CGCToGCMsgMasterAck::directory(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterAck.directory)
  return directory_.Get(index);
}
::proto::dota::CGCToGCMsgMasterAck_Process* CGCToGCMsgMasterAck::mutable_directory(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCToGCMsgMasterAck.directory)
  return directory_.Mutable(index);
}
::proto::dota::CGCToGCMsgMasterAck_Process* CGCToGCMsgMasterAck::add_directory() {
  // @@protoc_insertion_point(field_add:proto.dota.CGCToGCMsgMasterAck.directory)
  return directory_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CGCToGCMsgMasterAck_Process >*
CGCToGCMsgMasterAck::mutable_directory() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCToGCMsgMasterAck.directory)
  return &directory_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGCToGCMsgMasterAck_Process >&
CGCToGCMsgMasterAck::directory() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCToGCMsgMasterAck.directory)
  return directory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterAck_Response::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterAck_Response)
}
CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response(const CGCToGCMsgMasterAck_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterAck_Response)
}

void CGCToGCMsgMasterAck_Response::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CGCToGCMsgMasterAck_Response::~CGCToGCMsgMasterAck_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterAck_Response)
  SharedDtor();
}

void CGCToGCMsgMasterAck_Response::SharedDtor() {
}

void CGCToGCMsgMasterAck_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_Response::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgMasterAck_Response& CGCToGCMsgMasterAck_Response::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCToGCMsgMasterAck_Response* CGCToGCMsgMasterAck_Response::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterAck_Response* n = new CGCToGCMsgMasterAck_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterAck_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterAck_Response)
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgMasterAck_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterAck_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterAck_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterAck_Response)
  return false;
#undef DO_
}

void CGCToGCMsgMasterAck_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterAck_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterAck_Response)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterAck_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterAck_Response)
  return target;
}

size_t CGCToGCMsgMasterAck_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterAck_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterAck_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterAck_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterAck_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterAck_Response)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const CGCToGCMsgMasterAck_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterAck_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterAck_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const CGCToGCMsgMasterAck_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterAck_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Response::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck_Response::Swap(CGCToGCMsgMasterAck_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck_Response::InternalSwap(CGCToGCMsgMasterAck_Response* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck_Response::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgMasterAck_Response

// optional int32 eresult = 1 [default = 2];
bool CGCToGCMsgMasterAck_Response::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgMasterAck_Response::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgMasterAck_Response::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgMasterAck_Response::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CGCToGCMsgMasterAck_Response::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterAck_Response.eresult)
  return eresult_;
}
void CGCToGCMsgMasterAck_Response::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgMasterAck_Response.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCUniverseStartup::kIsInitialStartupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCUniverseStartup::CMsgGCToGCUniverseStartup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCUniverseStartup)
}
CMsgGCToGCUniverseStartup::CMsgGCToGCUniverseStartup(const CMsgGCToGCUniverseStartup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_initial_startup_ = from.is_initial_startup_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCUniverseStartup)
}

void CMsgGCToGCUniverseStartup::SharedCtor() {
  _cached_size_ = 0;
  is_initial_startup_ = false;
}

CMsgGCToGCUniverseStartup::~CMsgGCToGCUniverseStartup() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCUniverseStartup)
  SharedDtor();
}

void CMsgGCToGCUniverseStartup::SharedDtor() {
}

void CMsgGCToGCUniverseStartup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCUniverseStartup::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCUniverseStartup& CMsgGCToGCUniverseStartup::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCUniverseStartup* CMsgGCToGCUniverseStartup::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCUniverseStartup* n = new CMsgGCToGCUniverseStartup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCUniverseStartup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCUniverseStartup)
  is_initial_startup_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCUniverseStartup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCUniverseStartup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_initial_startup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_initial_startup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_initial_startup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCUniverseStartup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCUniverseStartup)
  return false;
#undef DO_
}

void CMsgGCToGCUniverseStartup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCUniverseStartup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_initial_startup = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_initial_startup(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCUniverseStartup)
}

::google::protobuf::uint8* CMsgGCToGCUniverseStartup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCUniverseStartup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_initial_startup = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_initial_startup(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCUniverseStartup)
  return target;
}

size_t CMsgGCToGCUniverseStartup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCUniverseStartup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool is_initial_startup = 1;
  if (has_is_initial_startup()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCUniverseStartup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCUniverseStartup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUniverseStartup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCUniverseStartup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCUniverseStartup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCUniverseStartup)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUniverseStartup::MergeFrom(const CMsgGCToGCUniverseStartup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCUniverseStartup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_initial_startup()) {
    set_is_initial_startup(from.is_initial_startup());
  }
}

void CMsgGCToGCUniverseStartup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCUniverseStartup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUniverseStartup::CopyFrom(const CMsgGCToGCUniverseStartup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCUniverseStartup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUniverseStartup::IsInitialized() const {
  return true;
}

void CMsgGCToGCUniverseStartup::Swap(CMsgGCToGCUniverseStartup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCUniverseStartup::InternalSwap(CMsgGCToGCUniverseStartup* other) {
  std::swap(is_initial_startup_, other->is_initial_startup_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCUniverseStartup::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCUniverseStartup

// optional bool is_initial_startup = 1;
bool CMsgGCToGCUniverseStartup::has_is_initial_startup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCUniverseStartup::set_has_is_initial_startup() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCUniverseStartup::clear_has_is_initial_startup() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCUniverseStartup::clear_is_initial_startup() {
  is_initial_startup_ = false;
  clear_has_is_initial_startup();
}
bool CMsgGCToGCUniverseStartup::is_initial_startup() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCUniverseStartup.is_initial_startup)
  return is_initial_startup_;
}
void CMsgGCToGCUniverseStartup::set_is_initial_startup(bool value) {
  set_has_is_initial_startup();
  is_initial_startup_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCUniverseStartup.is_initial_startup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCUniverseStartupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCUniverseStartupResponse::CMsgGCToGCUniverseStartupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCUniverseStartupResponse)
}
CMsgGCToGCUniverseStartupResponse::CMsgGCToGCUniverseStartupResponse(const CMsgGCToGCUniverseStartupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCUniverseStartupResponse)
}

void CMsgGCToGCUniverseStartupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0;
}

CMsgGCToGCUniverseStartupResponse::~CMsgGCToGCUniverseStartupResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCUniverseStartupResponse)
  SharedDtor();
}

void CMsgGCToGCUniverseStartupResponse::SharedDtor() {
}

void CMsgGCToGCUniverseStartupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCUniverseStartupResponse::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCUniverseStartupResponse& CMsgGCToGCUniverseStartupResponse::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCUniverseStartupResponse* CMsgGCToGCUniverseStartupResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCUniverseStartupResponse* n = new CMsgGCToGCUniverseStartupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCUniverseStartupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  eresult_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCUniverseStartupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCUniverseStartupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCUniverseStartupResponse)
  return false;
#undef DO_
}

void CMsgGCToGCUniverseStartupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCUniverseStartupResponse)
}

::google::protobuf::uint8* CMsgGCToGCUniverseStartupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCUniverseStartupResponse)
  return target;
}

size_t CMsgGCToGCUniverseStartupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 eresult = 1;
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCUniverseStartupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUniverseStartupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCUniverseStartupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCUniverseStartupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCUniverseStartupResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUniverseStartupResponse::MergeFrom(const CMsgGCToGCUniverseStartupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgGCToGCUniverseStartupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUniverseStartupResponse::CopyFrom(const CMsgGCToGCUniverseStartupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCUniverseStartupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUniverseStartupResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCUniverseStartupResponse::Swap(CMsgGCToGCUniverseStartupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCUniverseStartupResponse::InternalSwap(CMsgGCToGCUniverseStartupResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCUniverseStartupResponse::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCUniverseStartupResponse

// optional int32 eresult = 1;
bool CMsgGCToGCUniverseStartupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCUniverseStartupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCUniverseStartupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCUniverseStartupResponse::clear_eresult() {
  eresult_ = 0;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgGCToGCUniverseStartupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCUniverseStartupResponse.eresult)
  return eresult_;
}
void CMsgGCToGCUniverseStartupResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCUniverseStartupResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterStartupComplete_GCInfo::kDirIndexFieldNumber;
const int CGCToGCMsgMasterStartupComplete_GCInfo::kMachineNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
}
CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo(const CGCToGCMsgMasterStartupComplete_GCInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedCtor() {
  _cached_size_ = 0;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_index_ = 0u;
}

CGCToGCMsgMasterStartupComplete_GCInfo::~CGCToGCMsgMasterStartupComplete_GCInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  SharedDtor();
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete_GCInfo::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgMasterStartupComplete_GCInfo& CGCToGCMsgMasterStartupComplete_GCInfo::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete_GCInfo::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterStartupComplete_GCInfo* n = new CGCToGCMsgMasterStartupComplete_GCInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  if (has_machine_name()) {
    GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*machine_name_.UnsafeRawStringPointer())->clear();
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgMasterStartupComplete_GCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dir_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  return false;
#undef DO_
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string machine_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
}

::google::protobuf::uint8* CGCToGCMsgMasterStartupComplete_GCInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string machine_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  return target;
}

size_t CGCToGCMsgMasterStartupComplete_GCInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string machine_name = 2;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional uint32 dir_index = 1;
    if (has_dir_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterStartupComplete_GCInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterStartupComplete_GCInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete_GCInfo::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::Swap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterStartupComplete_GCInfo::InternalSwap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
  machine_name_.Swap(&other->machine_name_);
  std::swap(dir_index_, other->dir_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterStartupComplete_GCInfo::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgMasterStartupComplete_GCInfo

// optional uint32 dir_index = 1;
bool CGCToGCMsgMasterStartupComplete_GCInfo::has_dir_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::set_has_dir_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::clear_has_dir_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::clear_dir_index() {
  dir_index_ = 0u;
  clear_has_dir_index();
}
::google::protobuf::uint32 CGCToGCMsgMasterStartupComplete_GCInfo::dir_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.dir_index)
  return dir_index_;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::set_dir_index(::google::protobuf::uint32 value) {
  set_has_dir_index();
  dir_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.dir_index)
}

// optional string machine_name = 2;
bool CGCToGCMsgMasterStartupComplete_GCInfo::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
const ::std::string& CGCToGCMsgMasterStartupComplete_GCInfo::machine_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
  return machine_name_.GetNoArena();
}
void CGCToGCMsgMasterStartupComplete_GCInfo::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}
#if LANG_CXX11
void CGCToGCMsgMasterStartupComplete_GCInfo::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}
#endif
void CGCToGCMsgMasterStartupComplete_GCInfo::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}
void CGCToGCMsgMasterStartupComplete_GCInfo::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}
::std::string* CGCToGCMsgMasterStartupComplete_GCInfo::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCToGCMsgMasterStartupComplete_GCInfo::release_machine_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCToGCMsgMasterStartupComplete_GCInfo::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgMasterStartupComplete::kGcInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgMasterStartupComplete)
}
CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete(const CGCToGCMsgMasterStartupComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gc_info_(from.gc_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgMasterStartupComplete)
}

void CGCToGCMsgMasterStartupComplete::SharedCtor() {
  _cached_size_ = 0;
}

CGCToGCMsgMasterStartupComplete::~CGCToGCMsgMasterStartupComplete() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgMasterStartupComplete)
  SharedDtor();
}

void CGCToGCMsgMasterStartupComplete::SharedDtor() {
}

void CGCToGCMsgMasterStartupComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgMasterStartupComplete& CGCToGCMsgMasterStartupComplete::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCToGCMsgMasterStartupComplete* CGCToGCMsgMasterStartupComplete::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterStartupComplete* n = new CGCToGCMsgMasterStartupComplete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterStartupComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  gc_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgMasterStartupComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgMasterStartupComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgMasterStartupComplete)
  return false;
#undef DO_
}

void CGCToGCMsgMasterStartupComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  for (unsigned int i = 0, n = this->gc_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gc_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgMasterStartupComplete)
}

::google::protobuf::uint8* CGCToGCMsgMasterStartupComplete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  for (unsigned int i = 0, n = this->gc_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->gc_info(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgMasterStartupComplete)
  return target;
}

size_t CGCToGCMsgMasterStartupComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  {
    unsigned int count = this->gc_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gc_info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterStartupComplete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterStartupComplete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgMasterStartupComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgMasterStartupComplete)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const CGCToGCMsgMasterStartupComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gc_info_.MergeFrom(from.gc_info_);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const CGCToGCMsgMasterStartupComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgMasterStartupComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterStartupComplete::Swap(CGCToGCMsgMasterStartupComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterStartupComplete::InternalSwap(CGCToGCMsgMasterStartupComplete* other) {
  gc_info_.InternalSwap(&other->gc_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterStartupComplete::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgMasterStartupComplete

// repeated .proto.dota.CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
int CGCToGCMsgMasterStartupComplete::gc_info_size() const {
  return gc_info_.size();
}
void CGCToGCMsgMasterStartupComplete::clear_gc_info() {
  gc_info_.Clear();
}
const ::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo& CGCToGCMsgMasterStartupComplete::gc_info(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_.Get(index);
}
::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete::mutable_gc_info(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_.Mutable(index);
}
::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete::add_gc_info() {
  // @@protoc_insertion_point(field_add:proto.dota.CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo >*
CGCToGCMsgMasterStartupComplete::mutable_gc_info() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCToGCMsgMasterStartupComplete.gc_info)
  return &gc_info_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGCToGCMsgMasterStartupComplete_GCInfo >&
CGCToGCMsgMasterStartupComplete::gc_info() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgRouted::kMsgTypeFieldNumber;
const int CGCToGCMsgRouted::kSenderIdFieldNumber;
const int CGCToGCMsgRouted::kNetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgRouted::CGCToGCMsgRouted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgRouted)
}
CGCToGCMsgRouted::CGCToGCMsgRouted(const CGCToGCMsgRouted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_message()) {
    net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&sender_id_) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgRouted)
}

void CGCToGCMsgRouted::SharedCtor() {
  _cached_size_ = 0;
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&sender_id_) + sizeof(msg_type_));
}

CGCToGCMsgRouted::~CGCToGCMsgRouted() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgRouted)
  SharedDtor();
}

void CGCToGCMsgRouted::SharedDtor() {
  net_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgRouted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgRouted::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgRouted& CGCToGCMsgRouted::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCToGCMsgRouted* CGCToGCMsgRouted::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgRouted* n = new CGCToGCMsgRouted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgRouted::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgRouted)
  if (has_net_message()) {
    GOOGLE_DCHECK(!net_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*net_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&sender_id_, 0, reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&sender_id_) + sizeof(msg_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgRouted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgRouted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_sender_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes net_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgRouted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgRouted)
  return false;
#undef DO_
}

void CGCToGCMsgRouted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgRouted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional bytes net_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->net_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgRouted)
}

::google::protobuf::uint8* CGCToGCMsgRouted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgRouted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional bytes net_message = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->net_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgRouted)
  return target;
}

size_t CGCToGCMsgRouted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgRouted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes net_message = 3;
    if (has_net_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgRouted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgRouted)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgRouted* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgRouted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgRouted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgRouted)
    MergeFrom(*source);
  }
}

void CGCToGCMsgRouted::MergeFrom(const CGCToGCMsgRouted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgRouted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_net_message();
      net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgRouted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgRouted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRouted::CopyFrom(const CGCToGCMsgRouted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgRouted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRouted::IsInitialized() const {
  return true;
}

void CGCToGCMsgRouted::Swap(CGCToGCMsgRouted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgRouted::InternalSwap(CGCToGCMsgRouted* other) {
  net_message_.Swap(&other->net_message_);
  std::swap(sender_id_, other->sender_id_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgRouted::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgRouted

// optional uint32 msg_type = 1;
bool CGCToGCMsgRouted::has_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCToGCMsgRouted::set_has_msg_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCToGCMsgRouted::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCToGCMsgRouted::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
::google::protobuf::uint32 CGCToGCMsgRouted::msg_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgRouted.msg_type)
  return msg_type_;
}
void CGCToGCMsgRouted::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgRouted.msg_type)
}

// optional fixed64 sender_id = 2;
bool CGCToGCMsgRouted::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCToGCMsgRouted::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCToGCMsgRouted::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCToGCMsgRouted::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
::google::protobuf::uint64 CGCToGCMsgRouted::sender_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgRouted.sender_id)
  return sender_id_;
}
void CGCToGCMsgRouted::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgRouted.sender_id)
}

// optional bytes net_message = 3;
bool CGCToGCMsgRouted::has_net_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgRouted::set_has_net_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgRouted::clear_has_net_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgRouted::clear_net_message() {
  net_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_message();
}
const ::std::string& CGCToGCMsgRouted::net_message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgRouted.net_message)
  return net_message_.GetNoArena();
}
void CGCToGCMsgRouted::set_net_message(const ::std::string& value) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgRouted.net_message)
}
#if LANG_CXX11
void CGCToGCMsgRouted::set_net_message(::std::string&& value) {
  set_has_net_message();
  net_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCToGCMsgRouted.net_message)
}
#endif
void CGCToGCMsgRouted::set_net_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCToGCMsgRouted.net_message)
}
void CGCToGCMsgRouted::set_net_message(const void* value, size_t size) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCToGCMsgRouted.net_message)
}
::std::string* CGCToGCMsgRouted::mutable_net_message() {
  set_has_net_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCToGCMsgRouted.net_message)
  return net_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCToGCMsgRouted::release_net_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCToGCMsgRouted.net_message)
  clear_has_net_message();
  return net_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCToGCMsgRouted::set_allocated_net_message(::std::string* net_message) {
  if (net_message != NULL) {
    set_has_net_message();
  } else {
    clear_has_net_message();
  }
  net_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCToGCMsgRouted.net_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCToGCMsgRoutedReply::kMsgTypeFieldNumber;
const int CGCToGCMsgRoutedReply::kNetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCToGCMsgRoutedReply)
}
CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply(const CGCToGCMsgRoutedReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_message()) {
    net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCToGCMsgRoutedReply)
}

void CGCToGCMsgRoutedReply::SharedCtor() {
  _cached_size_ = 0;
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_ = 0u;
}

CGCToGCMsgRoutedReply::~CGCToGCMsgRoutedReply() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCToGCMsgRoutedReply)
  SharedDtor();
}

void CGCToGCMsgRoutedReply::SharedDtor() {
  net_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgRoutedReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgRoutedReply::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCToGCMsgRoutedReply& CGCToGCMsgRoutedReply::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCToGCMsgRoutedReply* CGCToGCMsgRoutedReply::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgRoutedReply* n = new CGCToGCMsgRoutedReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgRoutedReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCToGCMsgRoutedReply)
  if (has_net_message()) {
    GOOGLE_DCHECK(!net_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*net_message_.UnsafeRawStringPointer())->clear();
  }
  msg_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCToGCMsgRoutedReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCToGCMsgRoutedReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes net_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCToGCMsgRoutedReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCToGCMsgRoutedReply)
  return false;
#undef DO_
}

void CGCToGCMsgRoutedReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCToGCMsgRoutedReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional bytes net_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->net_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCToGCMsgRoutedReply)
}

::google::protobuf::uint8* CGCToGCMsgRoutedReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCToGCMsgRoutedReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional bytes net_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->net_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCToGCMsgRoutedReply)
  return target;
}

size_t CGCToGCMsgRoutedReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCToGCMsgRoutedReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes net_message = 2;
    if (has_net_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgRoutedReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCToGCMsgRoutedReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgRoutedReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgRoutedReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCToGCMsgRoutedReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCToGCMsgRoutedReply)
    MergeFrom(*source);
  }
}

void CGCToGCMsgRoutedReply::MergeFrom(const CGCToGCMsgRoutedReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCToGCMsgRoutedReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_net_message();
      net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgRoutedReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCToGCMsgRoutedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRoutedReply::CopyFrom(const CGCToGCMsgRoutedReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCToGCMsgRoutedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRoutedReply::IsInitialized() const {
  return true;
}

void CGCToGCMsgRoutedReply::Swap(CGCToGCMsgRoutedReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgRoutedReply::InternalSwap(CGCToGCMsgRoutedReply* other) {
  net_message_.Swap(&other->net_message_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgRoutedReply::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgRoutedReply

// optional uint32 msg_type = 1;
bool CGCToGCMsgRoutedReply::has_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCToGCMsgRoutedReply::set_has_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCToGCMsgRoutedReply::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCToGCMsgRoutedReply::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
::google::protobuf::uint32 CGCToGCMsgRoutedReply::msg_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgRoutedReply.msg_type)
  return msg_type_;
}
void CGCToGCMsgRoutedReply::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgRoutedReply.msg_type)
}

// optional bytes net_message = 2;
bool CGCToGCMsgRoutedReply::has_net_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgRoutedReply::set_has_net_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgRoutedReply::clear_has_net_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgRoutedReply::clear_net_message() {
  net_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_message();
}
const ::std::string& CGCToGCMsgRoutedReply::net_message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCToGCMsgRoutedReply.net_message)
  return net_message_.GetNoArena();
}
void CGCToGCMsgRoutedReply::set_net_message(const ::std::string& value) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCToGCMsgRoutedReply.net_message)
}
#if LANG_CXX11
void CGCToGCMsgRoutedReply::set_net_message(::std::string&& value) {
  set_has_net_message();
  net_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCToGCMsgRoutedReply.net_message)
}
#endif
void CGCToGCMsgRoutedReply::set_net_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCToGCMsgRoutedReply.net_message)
}
void CGCToGCMsgRoutedReply::set_net_message(const void* value, size_t size) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCToGCMsgRoutedReply.net_message)
}
::std::string* CGCToGCMsgRoutedReply::mutable_net_message() {
  set_has_net_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCToGCMsgRoutedReply.net_message)
  return net_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCToGCMsgRoutedReply::release_net_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCToGCMsgRoutedReply.net_message)
  clear_has_net_message();
  return net_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCToGCMsgRoutedReply::set_allocated_net_message(::std::string* net_message) {
  if (net_message != NULL) {
    set_has_net_message();
  } else {
    clear_has_net_message();
  }
  net_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCToGCMsgRoutedReply.net_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kSteamidFieldNumber;
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kIpFieldNumber;
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kTrustedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}
CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&trusted_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(trusted_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&trusted_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(trusted_));
}

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::~CMsgGCUpdateSubGCSessionInfo_CMsgUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  SharedDtor();
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedDtor() {
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::New(::google::protobuf::Arena* arena) const {
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* n = new CMsgGCUpdateSubGCSessionInfo_CMsgUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&trusted_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(trusted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trusted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_trusted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return false;
#undef DO_
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  // optional bool trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trusted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

::google::protobuf::uint8* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  // optional bool trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trusted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return target;
}

size_t CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 ip = 2;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional bool trusted = 3;
    if (has_trusted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      trusted_ = from.trusted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::IsInitialized() const {
  return true;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Swap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InternalSwap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(ip_, other->ip_);
  std::swap(trusted_, other->trusted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCUpdateSubGCSessionInfo_CMsgUpdate

// optional fixed64 steamid = 1;
bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.steamid)
  return steamid_;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.steamid)
}

// optional fixed32 ip = 2;
bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.ip)
  return ip_;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.ip)
}

// optional bool trusted = 3;
bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::has_trusted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_has_trusted() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_has_trusted() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_trusted() {
  trusted_ = false;
  clear_has_trusted();
}
bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::trusted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.trusted)
  return trusted_;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_trusted(bool value) {
  set_has_trusted();
  trusted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.trusted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCUpdateSubGCSessionInfo::kUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCUpdateSubGCSessionInfo)
}
CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo(const CMsgGCUpdateSubGCSessionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCUpdateSubGCSessionInfo)
}

void CMsgGCUpdateSubGCSessionInfo::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCUpdateSubGCSessionInfo::~CMsgGCUpdateSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  SharedDtor();
}

void CMsgGCUpdateSubGCSessionInfo::SharedDtor() {
}

void CMsgGCUpdateSubGCSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCUpdateSubGCSessionInfo::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCUpdateSubGCSessionInfo& CMsgGCUpdateSubGCSessionInfo::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCUpdateSubGCSessionInfo* CMsgGCUpdateSubGCSessionInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCUpdateSubGCSessionInfo* n = new CMsgGCUpdateSubGCSessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCUpdateSubGCSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  updates_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCUpdateSubGCSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  return false;
#undef DO_
}

void CMsgGCUpdateSubGCSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updates(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCUpdateSubGCSessionInfo)
}

::google::protobuf::uint8* CMsgGCUpdateSubGCSessionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->updates(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  return target;
}

size_t CMsgGCUpdateSubGCSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  {
    unsigned int count = this->updates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updates(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCUpdateSubGCSessionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCUpdateSubGCSessionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCUpdateSubGCSessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCUpdateSubGCSessionInfo)
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCUpdateSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo::IsInitialized() const {
  return true;
}

void CMsgGCUpdateSubGCSessionInfo::Swap(CMsgGCUpdateSubGCSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCUpdateSubGCSessionInfo::InternalSwap(CMsgGCUpdateSubGCSessionInfo* other) {
  updates_.InternalSwap(&other->updates_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCUpdateSubGCSessionInfo::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCUpdateSubGCSessionInfo

// repeated .proto.dota.CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
int CMsgGCUpdateSubGCSessionInfo::updates_size() const {
  return updates_.size();
}
void CMsgGCUpdateSubGCSessionInfo::clear_updates() {
  updates_.Clear();
}
const ::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& CMsgGCUpdateSubGCSessionInfo::updates(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_.Get(index);
}
::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_.Mutable(index);
}
::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo::add_updates() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >*
CMsgGCUpdateSubGCSessionInfo::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCUpdateSubGCSessionInfo.updates)
  return &updates_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >&
CMsgGCUpdateSubGCSessionInfo::updates() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRequestSubGCSessionInfo::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCRequestSubGCSessionInfo)
}
CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo(const CMsgGCRequestSubGCSessionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCRequestSubGCSessionInfo)
}

void CMsgGCRequestSubGCSessionInfo::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgGCRequestSubGCSessionInfo::~CMsgGCRequestSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCRequestSubGCSessionInfo)
  SharedDtor();
}

void CMsgGCRequestSubGCSessionInfo::SharedDtor() {
}

void CMsgGCRequestSubGCSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestSubGCSessionInfo::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCRequestSubGCSessionInfo& CMsgGCRequestSubGCSessionInfo::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCRequestSubGCSessionInfo* CMsgGCRequestSubGCSessionInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCRequestSubGCSessionInfo* n = new CMsgGCRequestSubGCSessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRequestSubGCSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCRequestSubGCSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCRequestSubGCSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCRequestSubGCSessionInfo)
  return false;
#undef DO_
}

void CMsgGCRequestSubGCSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCRequestSubGCSessionInfo)
}

::google::protobuf::uint8* CMsgGCRequestSubGCSessionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCRequestSubGCSessionInfo)
  return target;
}

size_t CMsgGCRequestSubGCSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestSubGCSessionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRequestSubGCSessionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCRequestSubGCSessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCRequestSubGCSessionInfo)
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const CMsgGCRequestSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const CMsgGCRequestSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCRequestSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfo::IsInitialized() const {
  return true;
}

void CMsgGCRequestSubGCSessionInfo::Swap(CMsgGCRequestSubGCSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRequestSubGCSessionInfo::InternalSwap(CMsgGCRequestSubGCSessionInfo* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRequestSubGCSessionInfo::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCRequestSubGCSessionInfo

// optional fixed64 steamid = 1;
bool CMsgGCRequestSubGCSessionInfo::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCRequestSubGCSessionInfo::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCRequestSubGCSessionInfo::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCRequestSubGCSessionInfo::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCRequestSubGCSessionInfo::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRequestSubGCSessionInfo.steamid)
  return steamid_;
}
void CMsgGCRequestSubGCSessionInfo::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRequestSubGCSessionInfo.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRequestSubGCSessionInfoResponse::kIpFieldNumber;
const int CMsgGCRequestSubGCSessionInfoResponse::kTrustedFieldNumber;
const int CMsgGCRequestSubGCSessionInfoResponse::kPortFieldNumber;
const int CMsgGCRequestSubGCSessionInfoResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
}
CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse(const CMsgGCRequestSubGCSessionInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&ip_) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ip_, 0, reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&ip_) + sizeof(success_));
}

CMsgGCRequestSubGCSessionInfoResponse::~CMsgGCRequestSubGCSessionInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  SharedDtor();
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedDtor() {
}

void CMsgGCRequestSubGCSessionInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestSubGCSessionInfoResponse::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCRequestSubGCSessionInfoResponse& CMsgGCRequestSubGCSessionInfoResponse::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCRequestSubGCSessionInfoResponse* CMsgGCRequestSubGCSessionInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCRequestSubGCSessionInfoResponse* n = new CMsgGCRequestSubGCSessionInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRequestSubGCSessionInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&ip_, 0, reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&ip_) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCRequestSubGCSessionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trusted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_trusted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  return false;
#undef DO_
}

void CMsgGCRequestSubGCSessionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // optional bool trusted = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trusted(), output);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
}

::google::protobuf::uint8* CMsgGCRequestSubGCSessionInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // optional bool trusted = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trusted(), target);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  return target;
}

size_t CMsgGCRequestSubGCSessionInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed32 ip = 1;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional bool trusted = 2;
    if (has_trusted()) {
      total_size += 1 + 1;
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestSubGCSessionInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRequestSubGCSessionInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      trusted_ = from.trusted_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCRequestSubGCSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCRequestSubGCSessionInfoResponse::Swap(CMsgGCRequestSubGCSessionInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRequestSubGCSessionInfoResponse::InternalSwap(CMsgGCRequestSubGCSessionInfoResponse* other) {
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(trusted_, other->trusted_);
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRequestSubGCSessionInfoResponse::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCRequestSubGCSessionInfoResponse

// optional fixed32 ip = 1;
bool CMsgGCRequestSubGCSessionInfoResponse::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 CMsgGCRequestSubGCSessionInfoResponse::ip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRequestSubGCSessionInfoResponse.ip)
  return ip_;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRequestSubGCSessionInfoResponse.ip)
}

// optional bool trusted = 2;
bool CMsgGCRequestSubGCSessionInfoResponse::has_trusted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_has_trusted() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_has_trusted() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_trusted() {
  trusted_ = false;
  clear_has_trusted();
}
bool CMsgGCRequestSubGCSessionInfoResponse::trusted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRequestSubGCSessionInfoResponse.trusted)
  return trusted_;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_trusted(bool value) {
  set_has_trusted();
  trusted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRequestSubGCSessionInfoResponse.trusted)
}

// optional uint32 port = 3;
bool CMsgGCRequestSubGCSessionInfoResponse::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 CMsgGCRequestSubGCSessionInfoResponse::port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRequestSubGCSessionInfoResponse.port)
  return port_;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRequestSubGCSessionInfoResponse.port)
}

// optional bool success = 4;
bool CMsgGCRequestSubGCSessionInfoResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CMsgGCRequestSubGCSessionInfoResponse::success() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRequestSubGCSessionInfoResponse.success)
  return success_;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRequestSubGCSessionInfoResponse.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSOCacheHaveVersion::kSoidFieldNumber;
const int CMsgSOCacheHaveVersion::kVersionFieldNumber;
const int CMsgSOCacheHaveVersion::kServiceIdFieldNumber;
const int CMsgSOCacheHaveVersion::kCachedFileVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSOCacheHaveVersion)
}
CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_soid()) {
    soid_ = new ::proto::dota::CMsgSOIDOwner(*from.soid_);
  } else {
    soid_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&cached_file_version_) -
    reinterpret_cast<char*>(&version_) + sizeof(cached_file_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSOCacheHaveVersion)
}

void CMsgSOCacheHaveVersion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&soid_, 0, reinterpret_cast<char*>(&cached_file_version_) -
    reinterpret_cast<char*>(&soid_) + sizeof(cached_file_version_));
}

CMsgSOCacheHaveVersion::~CMsgSOCacheHaveVersion() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSOCacheHaveVersion)
  SharedDtor();
}

void CMsgSOCacheHaveVersion::SharedDtor() {
  if (this != internal_default_instance()) {
    delete soid_;
  }
}

void CMsgSOCacheHaveVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheHaveVersion::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSOCacheHaveVersion& CMsgSOCacheHaveVersion::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSOCacheHaveVersion* CMsgSOCacheHaveVersion::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheHaveVersion* n = new CMsgSOCacheHaveVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheHaveVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSOCacheHaveVersion)
  if (has_soid()) {
    GOOGLE_DCHECK(soid_ != NULL);
    soid_->::proto::dota::CMsgSOIDOwner::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&cached_file_version_) -
      reinterpret_cast<char*>(&version_) + sizeof(cached_file_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSOCacheHaveVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSOCacheHaveVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgSOIDOwner soid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cached_file_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cached_file_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cached_file_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSOCacheHaveVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSOCacheHaveVersion)
  return false;
#undef DO_
}

void CMsgSOCacheHaveVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSOCacheHaveVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner soid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->soid_, output);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  // optional uint32 cached_file_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cached_file_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSOCacheHaveVersion)
}

::google::protobuf::uint8* CMsgSOCacheHaveVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSOCacheHaveVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgSOIDOwner soid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->soid_, deterministic, target);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  // optional uint32 cached_file_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cached_file_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSOCacheHaveVersion)
  return target;
}

size_t CMsgSOCacheHaveVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSOCacheHaveVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgSOIDOwner soid = 1;
    if (has_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->soid_);
    }

    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional uint32 cached_file_version = 4;
    if (has_cached_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cached_file_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheHaveVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSOCacheHaveVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheHaveVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheHaveVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSOCacheHaveVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSOCacheHaveVersion)
    MergeFrom(*source);
  }
}

void CMsgSOCacheHaveVersion::MergeFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSOCacheHaveVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_soid()->::proto::dota::CMsgSOIDOwner::MergeFrom(from.soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cached_file_version_ = from.cached_file_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheHaveVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSOCacheHaveVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheHaveVersion::CopyFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSOCacheHaveVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheHaveVersion::IsInitialized() const {
  return true;
}

void CMsgSOCacheHaveVersion::Swap(CMsgSOCacheHaveVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheHaveVersion::InternalSwap(CMsgSOCacheHaveVersion* other) {
  std::swap(soid_, other->soid_);
  std::swap(version_, other->version_);
  std::swap(service_id_, other->service_id_);
  std::swap(cached_file_version_, other->cached_file_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheHaveVersion::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheHaveVersion

// optional .proto.dota.CMsgSOIDOwner soid = 1;
bool CMsgSOCacheHaveVersion::has_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheHaveVersion::set_has_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheHaveVersion::clear_has_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheHaveVersion::clear_soid() {
  if (soid_ != NULL) soid_->::proto::dota::CMsgSOIDOwner::Clear();
  clear_has_soid();
}
const ::proto::dota::CMsgSOIDOwner& CMsgSOCacheHaveVersion::soid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheHaveVersion.soid)
  return soid_ != NULL ? *soid_
                         : *::proto::dota::CMsgSOIDOwner::internal_default_instance();
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheHaveVersion::mutable_soid() {
  set_has_soid();
  if (soid_ == NULL) {
    soid_ = new ::proto::dota::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSOCacheHaveVersion.soid)
  return soid_;
}
::proto::dota::CMsgSOIDOwner* CMsgSOCacheHaveVersion::release_soid() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSOCacheHaveVersion.soid)
  clear_has_soid();
  ::proto::dota::CMsgSOIDOwner* temp = soid_;
  soid_ = NULL;
  return temp;
}
void CMsgSOCacheHaveVersion::set_allocated_soid(::proto::dota::CMsgSOIDOwner* soid) {
  delete soid_;
  soid_ = soid;
  if (soid) {
    set_has_soid();
  } else {
    clear_has_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSOCacheHaveVersion.soid)
}

// optional fixed64 version = 2;
bool CMsgSOCacheHaveVersion::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOCacheHaveVersion::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOCacheHaveVersion::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOCacheHaveVersion::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CMsgSOCacheHaveVersion::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheHaveVersion.version)
  return version_;
}
void CMsgSOCacheHaveVersion::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheHaveVersion.version)
}

// optional uint32 service_id = 3;
bool CMsgSOCacheHaveVersion::has_service_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOCacheHaveVersion::set_has_service_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOCacheHaveVersion::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOCacheHaveVersion::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 CMsgSOCacheHaveVersion::service_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheHaveVersion.service_id)
  return service_id_;
}
void CMsgSOCacheHaveVersion::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheHaveVersion.service_id)
}

// optional uint32 cached_file_version = 4;
bool CMsgSOCacheHaveVersion::has_cached_file_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSOCacheHaveVersion::set_has_cached_file_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSOCacheHaveVersion::clear_has_cached_file_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSOCacheHaveVersion::clear_cached_file_version() {
  cached_file_version_ = 0u;
  clear_has_cached_file_version();
}
::google::protobuf::uint32 CMsgSOCacheHaveVersion::cached_file_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSOCacheHaveVersion.cached_file_version)
  return cached_file_version_;
}
void CMsgSOCacheHaveVersion::set_cached_file_version(::google::protobuf::uint32 value) {
  set_has_cached_file_version();
  cached_file_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSOCacheHaveVersion.cached_file_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientHello::kVersionFieldNumber;
const int CMsgClientHello::kSocacheHaveVersionsFieldNumber;
const int CMsgClientHello::kClientSessionNeedFieldNumber;
const int CMsgClientHello::kClientLauncherFieldNumber;
const int CMsgClientHello::kSecretKeyFieldNumber;
const int CMsgClientHello::kClientLanguageFieldNumber;
const int CMsgClientHello::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientHello::CMsgClientHello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientHello)
}
CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      socache_have_versions_(from.socache_have_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret_key()) {
    secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_key_);
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&version_) + sizeof(engine_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientHello)
}

void CMsgClientHello::SharedCtor() {
  _cached_size_ = 0;
  secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&version_) + sizeof(engine_));
}

CMsgClientHello::~CMsgClientHello() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientHello)
  SharedDtor();
}

void CMsgClientHello::SharedDtor() {
  secret_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHello::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientHello& CMsgClientHello::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientHello* CMsgClientHello::New(::google::protobuf::Arena* arena) const {
  CMsgClientHello* n = new CMsgClientHello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientHello)
  socache_have_versions_.Clear();
  if (has_secret_key()) {
    GOOGLE_DCHECK(!secret_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*secret_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&version_) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_socache_have_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_session_need = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_client_session_need();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_client_launcher(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string secret_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secret_key().data(), this->secret_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientHello.secret_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_language = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_client_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ESourceEngine_IsValid(value)) {
            set_engine(static_cast< ::proto::dota::ESourceEngine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientHello)
  return false;
#undef DO_
}

void CMsgClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (unsigned int i = 0, n = this->socache_have_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->socache_have_versions(i), output);
  }

  // optional uint32 client_session_need = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_session_need(), output);
  }

  // optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_launcher(), output);
  }

  // optional string secret_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientHello.secret_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->secret_key(), output);
  }

  // optional uint32 client_language = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_language(), output);
  }

  // optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientHello)
}

::google::protobuf::uint8* CMsgClientHello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (unsigned int i = 0, n = this->socache_have_versions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->socache_have_versions(i), deterministic, target);
  }

  // optional uint32 client_session_need = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_session_need(), target);
  }

  // optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->client_launcher(), target);
  }

  // optional string secret_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientHello.secret_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->secret_key(), target);
  }

  // optional uint32 client_language = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_language(), target);
  }

  // optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientHello)
  return target;
}

size_t CMsgClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientHello)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
  {
    unsigned int count = this->socache_have_versions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socache_have_versions(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string secret_key = 5;
    if (has_secret_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret_key());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 client_session_need = 3;
    if (has_client_session_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
    if (has_client_launcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_launcher());
    }

    // optional uint32 client_language = 6;
    if (has_client_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_language());
    }

    // optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientHello* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientHello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientHello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientHello)
    MergeFrom(*source);
  }
}

void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  socache_have_versions_.MergeFrom(from.socache_have_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_secret_key();
      secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_session_need_ = from.client_session_need_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_launcher_ = from.client_launcher_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_language_ = from.client_language_;
    }
    if (cached_has_bits & 0x00000020u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientHello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {
  return true;
}

void CMsgClientHello::Swap(CMsgClientHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientHello::InternalSwap(CMsgClientHello* other) {
  socache_have_versions_.InternalSwap(&other->socache_have_versions_);
  secret_key_.Swap(&other->secret_key_);
  std::swap(version_, other->version_);
  std::swap(client_session_need_, other->client_session_need_);
  std::swap(client_launcher_, other->client_launcher_);
  std::swap(client_language_, other->client_language_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientHello::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientHello

// optional uint32 version = 1;
bool CMsgClientHello::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientHello::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientHello::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientHello::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 CMsgClientHello::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientHello.version)
  return version_;
}
void CMsgClientHello::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientHello.version)
}

// repeated .proto.dota.CMsgSOCacheHaveVersion socache_have_versions = 2;
int CMsgClientHello::socache_have_versions_size() const {
  return socache_have_versions_.size();
}
void CMsgClientHello::clear_socache_have_versions() {
  socache_have_versions_.Clear();
}
const ::proto::dota::CMsgSOCacheHaveVersion& CMsgClientHello::socache_have_versions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientHello.socache_have_versions)
  return socache_have_versions_.Get(index);
}
::proto::dota::CMsgSOCacheHaveVersion* CMsgClientHello::mutable_socache_have_versions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientHello.socache_have_versions)
  return socache_have_versions_.Mutable(index);
}
::proto::dota::CMsgSOCacheHaveVersion* CMsgClientHello::add_socache_have_versions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientHello.socache_have_versions)
  return socache_have_versions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOCacheHaveVersion >*
CMsgClientHello::mutable_socache_have_versions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientHello.socache_have_versions)
  return &socache_have_versions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOCacheHaveVersion >&
CMsgClientHello::socache_have_versions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientHello.socache_have_versions)
  return socache_have_versions_;
}

// optional uint32 client_session_need = 3;
bool CMsgClientHello::has_client_session_need() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientHello::set_has_client_session_need() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientHello::clear_has_client_session_need() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientHello::clear_client_session_need() {
  client_session_need_ = 0u;
  clear_has_client_session_need();
}
::google::protobuf::uint32 CMsgClientHello::client_session_need() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientHello.client_session_need)
  return client_session_need_;
}
void CMsgClientHello::set_client_session_need(::google::protobuf::uint32 value) {
  set_has_client_session_need();
  client_session_need_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientHello.client_session_need)
}

// optional .proto.dota.PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
bool CMsgClientHello::has_client_launcher() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientHello::set_has_client_launcher() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientHello::clear_has_client_launcher() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientHello::clear_client_launcher() {
  client_launcher_ = 0;
  clear_has_client_launcher();
}
::proto::dota::PartnerAccountType CMsgClientHello::client_launcher() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientHello.client_launcher)
  return static_cast< ::proto::dota::PartnerAccountType >(client_launcher_);
}
void CMsgClientHello::set_client_launcher(::proto::dota::PartnerAccountType value) {
  assert(::proto::dota::PartnerAccountType_IsValid(value));
  set_has_client_launcher();
  client_launcher_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientHello.client_launcher)
}

// optional string secret_key = 5;
bool CMsgClientHello::has_secret_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientHello::set_has_secret_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientHello::clear_has_secret_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientHello::clear_secret_key() {
  secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret_key();
}
const ::std::string& CMsgClientHello::secret_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientHello.secret_key)
  return secret_key_.GetNoArena();
}
void CMsgClientHello::set_secret_key(const ::std::string& value) {
  set_has_secret_key();
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientHello.secret_key)
}
#if LANG_CXX11
void CMsgClientHello::set_secret_key(::std::string&& value) {
  set_has_secret_key();
  secret_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientHello.secret_key)
}
#endif
void CMsgClientHello::set_secret_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secret_key();
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientHello.secret_key)
}
void CMsgClientHello::set_secret_key(const char* value, size_t size) {
  set_has_secret_key();
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientHello.secret_key)
}
::std::string* CMsgClientHello::mutable_secret_key() {
  set_has_secret_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientHello.secret_key)
  return secret_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientHello::release_secret_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientHello.secret_key)
  clear_has_secret_key();
  return secret_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientHello::set_allocated_secret_key(::std::string* secret_key) {
  if (secret_key != NULL) {
    set_has_secret_key();
  } else {
    clear_has_secret_key();
  }
  secret_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientHello.secret_key)
}

// optional uint32 client_language = 6;
bool CMsgClientHello::has_client_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientHello::set_has_client_language() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientHello::clear_has_client_language() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientHello::clear_client_language() {
  client_language_ = 0u;
  clear_has_client_language();
}
::google::protobuf::uint32 CMsgClientHello::client_language() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientHello.client_language)
  return client_language_;
}
void CMsgClientHello::set_client_language(::google::protobuf::uint32 value) {
  set_has_client_language();
  client_language_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientHello.client_language)
}

// optional .proto.dota.ESourceEngine engine = 7 [default = k_ESE_Source1];
bool CMsgClientHello::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientHello::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientHello::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientHello::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::proto::dota::ESourceEngine CMsgClientHello::engine() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientHello.engine)
  return static_cast< ::proto::dota::ESourceEngine >(engine_);
}
void CMsgClientHello::set_engine(::proto::dota::ESourceEngine value) {
  assert(::proto::dota::ESourceEngine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientHello.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientWelcome_Location::kLatitudeFieldNumber;
const int CMsgClientWelcome_Location::kLongitudeFieldNumber;
const int CMsgClientWelcome_Location::kCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientWelcome_Location::CMsgClientWelcome_Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientWelcome.Location)
}
CMsgClientWelcome_Location::CMsgClientWelcome_Location(const CMsgClientWelcome_Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  ::memcpy(&latitude_, &from.latitude_,
    reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientWelcome.Location)
}

void CMsgClientWelcome_Location::SharedCtor() {
  _cached_size_ = 0;
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_, 0, reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(longitude_));
}

CMsgClientWelcome_Location::~CMsgClientWelcome_Location() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientWelcome.Location)
  SharedDtor();
}

void CMsgClientWelcome_Location::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientWelcome_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWelcome_Location::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientWelcome_Location& CMsgClientWelcome_Location::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientWelcome_Location* CMsgClientWelcome_Location::New(::google::protobuf::Arena* arena) const {
  CMsgClientWelcome_Location* n = new CMsgClientWelcome_Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientWelcome_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientWelcome.Location)
  if (has_country()) {
    GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*country_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&latitude_, 0, reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientWelcome_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientWelcome.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientWelcome.Location.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientWelcome.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientWelcome.Location)
  return false;
#undef DO_
}

void CMsgClientWelcome_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientWelcome.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float latitude = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // optional float longitude = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.Location.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientWelcome.Location)
}

::google::protobuf::uint8* CMsgClientWelcome_Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientWelcome.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float latitude = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // optional float longitude = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.Location.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientWelcome.Location)
  return target;
}

size_t CMsgClientWelcome_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientWelcome.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWelcome_Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientWelcome.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientWelcome_Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientWelcome_Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientWelcome.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientWelcome.Location)
    MergeFrom(*source);
  }
}

void CMsgClientWelcome_Location::MergeFrom(const CMsgClientWelcome_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientWelcome.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientWelcome_Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientWelcome.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome_Location::CopyFrom(const CMsgClientWelcome_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientWelcome.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome_Location::IsInitialized() const {
  return true;
}

void CMsgClientWelcome_Location::Swap(CMsgClientWelcome_Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientWelcome_Location::InternalSwap(CMsgClientWelcome_Location* other) {
  country_.Swap(&other->country_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientWelcome_Location::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientWelcome_Location

// optional float latitude = 1;
bool CMsgClientWelcome_Location::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientWelcome_Location::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientWelcome_Location::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientWelcome_Location::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
float CMsgClientWelcome_Location::latitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.Location.latitude)
  return latitude_;
}
void CMsgClientWelcome_Location::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientWelcome.Location.latitude)
}

// optional float longitude = 2;
bool CMsgClientWelcome_Location::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientWelcome_Location::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientWelcome_Location::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientWelcome_Location::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
float CMsgClientWelcome_Location::longitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.Location.longitude)
  return longitude_;
}
void CMsgClientWelcome_Location::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientWelcome.Location.longitude)
}

// optional string country = 3;
bool CMsgClientWelcome_Location::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientWelcome_Location::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientWelcome_Location::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientWelcome_Location::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& CMsgClientWelcome_Location::country() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.Location.country)
  return country_.GetNoArena();
}
void CMsgClientWelcome_Location::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientWelcome.Location.country)
}
#if LANG_CXX11
void CMsgClientWelcome_Location::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientWelcome.Location.country)
}
#endif
void CMsgClientWelcome_Location::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientWelcome.Location.country)
}
void CMsgClientWelcome_Location::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientWelcome.Location.country)
}
::std::string* CMsgClientWelcome_Location::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientWelcome.Location.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientWelcome_Location::release_country() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientWelcome.Location.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientWelcome_Location::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientWelcome.Location.country)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientWelcome::kVersionFieldNumber;
const int CMsgClientWelcome::kGameDataFieldNumber;
const int CMsgClientWelcome::kOutofdateSubscribedCachesFieldNumber;
const int CMsgClientWelcome::kUptodateSubscribedCachesFieldNumber;
const int CMsgClientWelcome::kLocationFieldNumber;
const int CMsgClientWelcome::kSaveGameKeyFieldNumber;
const int CMsgClientWelcome::kItemSchemaCrcFieldNumber;
const int CMsgClientWelcome::kItemsGameUrlFieldNumber;
const int CMsgClientWelcome::kGcSocacheFileVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientWelcome::CMsgClientWelcome()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientWelcome)
}
CMsgClientWelcome::CMsgClientWelcome(const CMsgClientWelcome& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      outofdate_subscribed_caches_(from.outofdate_subscribed_caches_),
      uptodate_subscribed_caches_(from.uptodate_subscribed_caches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_data()) {
    game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_);
  }
  save_game_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_game_key()) {
    save_game_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_key_);
  }
  items_game_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_items_game_url()) {
    items_game_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_url_);
  }
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgClientWelcome_Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&gc_socache_file_version_) -
    reinterpret_cast<char*>(&version_) + sizeof(gc_socache_file_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientWelcome)
}

void CMsgClientWelcome::SharedCtor() {
  _cached_size_ = 0;
  game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_game_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_game_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, reinterpret_cast<char*>(&gc_socache_file_version_) -
    reinterpret_cast<char*>(&location_) + sizeof(gc_socache_file_version_));
}

CMsgClientWelcome::~CMsgClientWelcome() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientWelcome)
  SharedDtor();
}

void CMsgClientWelcome::SharedDtor() {
  game_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_game_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_game_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CMsgClientWelcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWelcome::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientWelcome& CMsgClientWelcome::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientWelcome* CMsgClientWelcome::New(::google::protobuf::Arena* arena) const {
  CMsgClientWelcome* n = new CMsgClientWelcome;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientWelcome::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientWelcome)
  outofdate_subscribed_caches_.Clear();
  uptodate_subscribed_caches_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_game_data()) {
      GOOGLE_DCHECK(!game_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_save_game_key()) {
      GOOGLE_DCHECK(!save_game_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*save_game_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_items_game_url()) {
      GOOGLE_DCHECK(!items_game_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*items_game_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_location()) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::proto::dota::CMsgClientWelcome_Location::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&gc_socache_file_version_) -
      reinterpret_cast<char*>(&version_) + sizeof(gc_socache_file_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientWelcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientWelcome)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes game_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outofdate_subscribed_caches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uptodate_subscribed_caches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientWelcome.Location location = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes save_game_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 item_schema_crc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_item_schema_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &item_schema_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string items_game_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items_game_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->items_game_url().data(), this->items_game_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientWelcome.items_game_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gc_socache_file_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_gc_socache_file_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_socache_file_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientWelcome)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientWelcome)
  return false;
#undef DO_
}

void CMsgClientWelcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientWelcome)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bytes game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->game_data(), output);
  }

  // repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (unsigned int i = 0, n = this->outofdate_subscribed_caches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->outofdate_subscribed_caches(i), output);
  }

  // repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (unsigned int i = 0, n = this->uptodate_subscribed_caches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->uptodate_subscribed_caches(i), output);
  }

  // optional .proto.dota.CMsgClientWelcome.Location location = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->location_, output);
  }

  // optional bytes save_game_key = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->save_game_key(), output);
  }

  // optional fixed32 item_schema_crc = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->item_schema_crc(), output);
  }

  // optional string items_game_url = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.items_game_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->items_game_url(), output);
  }

  // optional uint32 gc_socache_file_version = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gc_socache_file_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientWelcome)
}

::google::protobuf::uint8* CMsgClientWelcome::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientWelcome)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional bytes game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->game_data(), target);
  }

  // repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (unsigned int i = 0, n = this->outofdate_subscribed_caches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->outofdate_subscribed_caches(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (unsigned int i = 0, n = this->uptodate_subscribed_caches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->uptodate_subscribed_caches(i), deterministic, target);
  }

  // optional .proto.dota.CMsgClientWelcome.Location location = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->location_, deterministic, target);
  }

  // optional bytes save_game_key = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->save_game_key(), target);
  }

  // optional fixed32 item_schema_crc = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->item_schema_crc(), target);
  }

  // optional string items_game_url = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientWelcome.items_game_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->items_game_url(), target);
  }

  // optional uint32 gc_socache_file_version = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gc_socache_file_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientWelcome)
  return target;
}

size_t CMsgClientWelcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientWelcome)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  {
    unsigned int count = this->outofdate_subscribed_caches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outofdate_subscribed_caches(i));
    }
  }

  // repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  {
    unsigned int count = this->uptodate_subscribed_caches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uptodate_subscribed_caches(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes game_data = 2;
    if (has_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data());
    }

    // optional bytes save_game_key = 6;
    if (has_save_game_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_key());
    }

    // optional string items_game_url = 8;
    if (has_items_game_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items_game_url());
    }

    // optional .proto.dota.CMsgClientWelcome.Location location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional fixed32 item_schema_crc = 7;
    if (has_item_schema_crc()) {
      total_size += 1 + 4;
    }

    // optional uint32 gc_socache_file_version = 9;
    if (has_gc_socache_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_socache_file_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWelcome::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientWelcome)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientWelcome* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientWelcome>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientWelcome)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientWelcome)
    MergeFrom(*source);
  }
}

void CMsgClientWelcome::MergeFrom(const CMsgClientWelcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientWelcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outofdate_subscribed_caches_.MergeFrom(from.outofdate_subscribed_caches_);
  uptodate_subscribed_caches_.MergeFrom(from.uptodate_subscribed_caches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_data();
      game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_save_game_key();
      save_game_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_items_game_url();
      items_game_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_location()->::proto::dota::CMsgClientWelcome_Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_schema_crc_ = from.item_schema_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      gc_socache_file_version_ = from.gc_socache_file_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientWelcome::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientWelcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome::CopyFrom(const CMsgClientWelcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientWelcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome::IsInitialized() const {
  return true;
}

void CMsgClientWelcome::Swap(CMsgClientWelcome* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientWelcome::InternalSwap(CMsgClientWelcome* other) {
  outofdate_subscribed_caches_.InternalSwap(&other->outofdate_subscribed_caches_);
  uptodate_subscribed_caches_.InternalSwap(&other->uptodate_subscribed_caches_);
  game_data_.Swap(&other->game_data_);
  save_game_key_.Swap(&other->save_game_key_);
  items_game_url_.Swap(&other->items_game_url_);
  std::swap(location_, other->location_);
  std::swap(version_, other->version_);
  std::swap(item_schema_crc_, other->item_schema_crc_);
  std::swap(gc_socache_file_version_, other->gc_socache_file_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientWelcome::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientWelcome

// optional uint32 version = 1;
bool CMsgClientWelcome::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientWelcome::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientWelcome::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientWelcome::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 CMsgClientWelcome::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.version)
  return version_;
}
void CMsgClientWelcome::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientWelcome.version)
}

// optional bytes game_data = 2;
bool CMsgClientWelcome::has_game_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientWelcome::set_has_game_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientWelcome::clear_has_game_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientWelcome::clear_game_data() {
  game_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_data();
}
const ::std::string& CMsgClientWelcome::game_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.game_data)
  return game_data_.GetNoArena();
}
void CMsgClientWelcome::set_game_data(const ::std::string& value) {
  set_has_game_data();
  game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientWelcome.game_data)
}
#if LANG_CXX11
void CMsgClientWelcome::set_game_data(::std::string&& value) {
  set_has_game_data();
  game_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientWelcome.game_data)
}
#endif
void CMsgClientWelcome::set_game_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_data();
  game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientWelcome.game_data)
}
void CMsgClientWelcome::set_game_data(const void* value, size_t size) {
  set_has_game_data();
  game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientWelcome.game_data)
}
::std::string* CMsgClientWelcome::mutable_game_data() {
  set_has_game_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientWelcome.game_data)
  return game_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientWelcome::release_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientWelcome.game_data)
  clear_has_game_data();
  return game_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientWelcome::set_allocated_game_data(::std::string* game_data) {
  if (game_data != NULL) {
    set_has_game_data();
  } else {
    clear_has_game_data();
  }
  game_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientWelcome.game_data)
}

// repeated .proto.dota.CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
int CMsgClientWelcome::outofdate_subscribed_caches_size() const {
  return outofdate_subscribed_caches_.size();
}
void CMsgClientWelcome::clear_outofdate_subscribed_caches() {
  outofdate_subscribed_caches_.Clear();
}
const ::proto::dota::CMsgSOCacheSubscribed& CMsgClientWelcome::outofdate_subscribed_caches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.outofdate_subscribed_caches)
  return outofdate_subscribed_caches_.Get(index);
}
::proto::dota::CMsgSOCacheSubscribed* CMsgClientWelcome::mutable_outofdate_subscribed_caches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientWelcome.outofdate_subscribed_caches)
  return outofdate_subscribed_caches_.Mutable(index);
}
::proto::dota::CMsgSOCacheSubscribed* CMsgClientWelcome::add_outofdate_subscribed_caches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientWelcome.outofdate_subscribed_caches)
  return outofdate_subscribed_caches_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOCacheSubscribed >*
CMsgClientWelcome::mutable_outofdate_subscribed_caches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientWelcome.outofdate_subscribed_caches)
  return &outofdate_subscribed_caches_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOCacheSubscribed >&
CMsgClientWelcome::outofdate_subscribed_caches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientWelcome.outofdate_subscribed_caches)
  return outofdate_subscribed_caches_;
}

// repeated .proto.dota.CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
int CMsgClientWelcome::uptodate_subscribed_caches_size() const {
  return uptodate_subscribed_caches_.size();
}
void CMsgClientWelcome::clear_uptodate_subscribed_caches() {
  uptodate_subscribed_caches_.Clear();
}
const ::proto::dota::CMsgSOCacheSubscriptionCheck& CMsgClientWelcome::uptodate_subscribed_caches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.uptodate_subscribed_caches)
  return uptodate_subscribed_caches_.Get(index);
}
::proto::dota::CMsgSOCacheSubscriptionCheck* CMsgClientWelcome::mutable_uptodate_subscribed_caches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientWelcome.uptodate_subscribed_caches)
  return uptodate_subscribed_caches_.Mutable(index);
}
::proto::dota::CMsgSOCacheSubscriptionCheck* CMsgClientWelcome::add_uptodate_subscribed_caches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientWelcome.uptodate_subscribed_caches)
  return uptodate_subscribed_caches_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOCacheSubscriptionCheck >*
CMsgClientWelcome::mutable_uptodate_subscribed_caches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientWelcome.uptodate_subscribed_caches)
  return &uptodate_subscribed_caches_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSOCacheSubscriptionCheck >&
CMsgClientWelcome::uptodate_subscribed_caches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientWelcome.uptodate_subscribed_caches)
  return uptodate_subscribed_caches_;
}

// optional .proto.dota.CMsgClientWelcome.Location location = 5;
bool CMsgClientWelcome::has_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientWelcome::set_has_location() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientWelcome::clear_has_location() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientWelcome::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgClientWelcome_Location::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgClientWelcome_Location& CMsgClientWelcome::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgClientWelcome_Location::internal_default_instance();
}
::proto::dota::CMsgClientWelcome_Location* CMsgClientWelcome::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgClientWelcome_Location;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientWelcome.location)
  return location_;
}
::proto::dota::CMsgClientWelcome_Location* CMsgClientWelcome::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientWelcome.location)
  clear_has_location();
  ::proto::dota::CMsgClientWelcome_Location* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgClientWelcome::set_allocated_location(::proto::dota::CMsgClientWelcome_Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientWelcome.location)
}

// optional bytes save_game_key = 6;
bool CMsgClientWelcome::has_save_game_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientWelcome::set_has_save_game_key() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientWelcome::clear_has_save_game_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientWelcome::clear_save_game_key() {
  save_game_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_game_key();
}
const ::std::string& CMsgClientWelcome::save_game_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.save_game_key)
  return save_game_key_.GetNoArena();
}
void CMsgClientWelcome::set_save_game_key(const ::std::string& value) {
  set_has_save_game_key();
  save_game_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientWelcome.save_game_key)
}
#if LANG_CXX11
void CMsgClientWelcome::set_save_game_key(::std::string&& value) {
  set_has_save_game_key();
  save_game_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientWelcome.save_game_key)
}
#endif
void CMsgClientWelcome::set_save_game_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_save_game_key();
  save_game_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientWelcome.save_game_key)
}
void CMsgClientWelcome::set_save_game_key(const void* value, size_t size) {
  set_has_save_game_key();
  save_game_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientWelcome.save_game_key)
}
::std::string* CMsgClientWelcome::mutable_save_game_key() {
  set_has_save_game_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientWelcome.save_game_key)
  return save_game_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientWelcome::release_save_game_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientWelcome.save_game_key)
  clear_has_save_game_key();
  return save_game_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientWelcome::set_allocated_save_game_key(::std::string* save_game_key) {
  if (save_game_key != NULL) {
    set_has_save_game_key();
  } else {
    clear_has_save_game_key();
  }
  save_game_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_game_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientWelcome.save_game_key)
}

// optional fixed32 item_schema_crc = 7;
bool CMsgClientWelcome::has_item_schema_crc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientWelcome::set_has_item_schema_crc() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientWelcome::clear_has_item_schema_crc() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientWelcome::clear_item_schema_crc() {
  item_schema_crc_ = 0u;
  clear_has_item_schema_crc();
}
::google::protobuf::uint32 CMsgClientWelcome::item_schema_crc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.item_schema_crc)
  return item_schema_crc_;
}
void CMsgClientWelcome::set_item_schema_crc(::google::protobuf::uint32 value) {
  set_has_item_schema_crc();
  item_schema_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientWelcome.item_schema_crc)
}

// optional string items_game_url = 8;
bool CMsgClientWelcome::has_items_game_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientWelcome::set_has_items_game_url() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientWelcome::clear_has_items_game_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientWelcome::clear_items_game_url() {
  items_game_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_items_game_url();
}
const ::std::string& CMsgClientWelcome::items_game_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.items_game_url)
  return items_game_url_.GetNoArena();
}
void CMsgClientWelcome::set_items_game_url(const ::std::string& value) {
  set_has_items_game_url();
  items_game_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientWelcome.items_game_url)
}
#if LANG_CXX11
void CMsgClientWelcome::set_items_game_url(::std::string&& value) {
  set_has_items_game_url();
  items_game_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientWelcome.items_game_url)
}
#endif
void CMsgClientWelcome::set_items_game_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_items_game_url();
  items_game_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientWelcome.items_game_url)
}
void CMsgClientWelcome::set_items_game_url(const char* value, size_t size) {
  set_has_items_game_url();
  items_game_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientWelcome.items_game_url)
}
::std::string* CMsgClientWelcome::mutable_items_game_url() {
  set_has_items_game_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientWelcome.items_game_url)
  return items_game_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientWelcome::release_items_game_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientWelcome.items_game_url)
  clear_has_items_game_url();
  return items_game_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientWelcome::set_allocated_items_game_url(::std::string* items_game_url) {
  if (items_game_url != NULL) {
    set_has_items_game_url();
  } else {
    clear_has_items_game_url();
  }
  items_game_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), items_game_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientWelcome.items_game_url)
}

// optional uint32 gc_socache_file_version = 9;
bool CMsgClientWelcome::has_gc_socache_file_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientWelcome::set_has_gc_socache_file_version() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientWelcome::clear_has_gc_socache_file_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientWelcome::clear_gc_socache_file_version() {
  gc_socache_file_version_ = 0u;
  clear_has_gc_socache_file_version();
}
::google::protobuf::uint32 CMsgClientWelcome::gc_socache_file_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientWelcome.gc_socache_file_version)
  return gc_socache_file_version_;
}
void CMsgClientWelcome::set_gc_socache_file_version(::google::protobuf::uint32 value) {
  set_has_gc_socache_file_version();
  gc_socache_file_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientWelcome.gc_socache_file_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConnectionStatus::kStatusFieldNumber;
const int CMsgConnectionStatus::kClientSessionNeedFieldNumber;
const int CMsgConnectionStatus::kQueuePositionFieldNumber;
const int CMsgConnectionStatus::kQueueSizeFieldNumber;
const int CMsgConnectionStatus::kWaitSecondsFieldNumber;
const int CMsgConnectionStatus::kEstimatedWaitSecondsRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConnectionStatus::CMsgConnectionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConnectionStatus)
}
CMsgConnectionStatus::CMsgConnectionStatus(const CMsgConnectionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
    reinterpret_cast<char*>(&status_) + sizeof(estimated_wait_seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConnectionStatus)
}

void CMsgConnectionStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&status_, 0, reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
    reinterpret_cast<char*>(&status_) + sizeof(estimated_wait_seconds_remaining_));
}

CMsgConnectionStatus::~CMsgConnectionStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConnectionStatus)
  SharedDtor();
}

void CMsgConnectionStatus::SharedDtor() {
}

void CMsgConnectionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectionStatus::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgConnectionStatus& CMsgConnectionStatus::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgConnectionStatus* CMsgConnectionStatus::New(::google::protobuf::Arena* arena) const {
  CMsgConnectionStatus* n = new CMsgConnectionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgConnectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConnectionStatus)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
      reinterpret_cast<char*>(&status_) + sizeof(estimated_wait_seconds_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgConnectionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConnectionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::GCConnectionStatus_IsValid(value)) {
            set_status(static_cast< ::proto::dota::GCConnectionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_session_need = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_session_need();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 queue_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_queue_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 queue_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_queue_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wait_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_wait_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 estimated_wait_seconds_remaining = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_estimated_wait_seconds_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_wait_seconds_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConnectionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConnectionStatus)
  return false;
#undef DO_
}

void CMsgConnectionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConnectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint32 client_session_need = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_session_need(), output);
  }

  // optional int32 queue_position = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queue_position(), output);
  }

  // optional int32 queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->queue_size(), output);
  }

  // optional int32 wait_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wait_seconds(), output);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->estimated_wait_seconds_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConnectionStatus)
}

::google::protobuf::uint8* CMsgConnectionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConnectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint32 client_session_need = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_session_need(), target);
  }

  // optional int32 queue_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->queue_position(), target);
  }

  // optional int32 queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->queue_size(), target);
  }

  // optional int32 wait_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wait_seconds(), target);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->estimated_wait_seconds_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConnectionStatus)
  return target;
}

size_t CMsgConnectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConnectionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 client_session_need = 2;
    if (has_client_session_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional int32 queue_position = 3;
    if (has_queue_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_position());
    }

    // optional int32 queue_size = 4;
    if (has_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_size());
    }

    // optional int32 wait_seconds = 5;
    if (has_wait_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_seconds());
    }

    // optional int32 estimated_wait_seconds_remaining = 6;
    if (has_estimated_wait_seconds_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estimated_wait_seconds_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConnectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgConnectionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConnectionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConnectionStatus)
    MergeFrom(*source);
  }
}

void CMsgConnectionStatus::MergeFrom(const CMsgConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConnectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_session_need_ = from.client_session_need_;
    }
    if (cached_has_bits & 0x00000004u) {
      queue_position_ = from.queue_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      queue_size_ = from.queue_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      wait_seconds_ = from.wait_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      estimated_wait_seconds_remaining_ = from.estimated_wait_seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConnectionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectionStatus::CopyFrom(const CMsgConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectionStatus::IsInitialized() const {
  return true;
}

void CMsgConnectionStatus::Swap(CMsgConnectionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConnectionStatus::InternalSwap(CMsgConnectionStatus* other) {
  std::swap(status_, other->status_);
  std::swap(client_session_need_, other->client_session_need_);
  std::swap(queue_position_, other->queue_position_);
  std::swap(queue_size_, other->queue_size_);
  std::swap(wait_seconds_, other->wait_seconds_);
  std::swap(estimated_wait_seconds_remaining_, other->estimated_wait_seconds_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgConnectionStatus::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgConnectionStatus

// optional .proto.dota.GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
bool CMsgConnectionStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgConnectionStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgConnectionStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgConnectionStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
::proto::dota::GCConnectionStatus CMsgConnectionStatus::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectionStatus.status)
  return static_cast< ::proto::dota::GCConnectionStatus >(status_);
}
void CMsgConnectionStatus::set_status(::proto::dota::GCConnectionStatus value) {
  assert(::proto::dota::GCConnectionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectionStatus.status)
}

// optional uint32 client_session_need = 2;
bool CMsgConnectionStatus::has_client_session_need() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgConnectionStatus::set_has_client_session_need() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgConnectionStatus::clear_has_client_session_need() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgConnectionStatus::clear_client_session_need() {
  client_session_need_ = 0u;
  clear_has_client_session_need();
}
::google::protobuf::uint32 CMsgConnectionStatus::client_session_need() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectionStatus.client_session_need)
  return client_session_need_;
}
void CMsgConnectionStatus::set_client_session_need(::google::protobuf::uint32 value) {
  set_has_client_session_need();
  client_session_need_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectionStatus.client_session_need)
}

// optional int32 queue_position = 3;
bool CMsgConnectionStatus::has_queue_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgConnectionStatus::set_has_queue_position() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgConnectionStatus::clear_has_queue_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgConnectionStatus::clear_queue_position() {
  queue_position_ = 0;
  clear_has_queue_position();
}
::google::protobuf::int32 CMsgConnectionStatus::queue_position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectionStatus.queue_position)
  return queue_position_;
}
void CMsgConnectionStatus::set_queue_position(::google::protobuf::int32 value) {
  set_has_queue_position();
  queue_position_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectionStatus.queue_position)
}

// optional int32 queue_size = 4;
bool CMsgConnectionStatus::has_queue_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgConnectionStatus::set_has_queue_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgConnectionStatus::clear_has_queue_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgConnectionStatus::clear_queue_size() {
  queue_size_ = 0;
  clear_has_queue_size();
}
::google::protobuf::int32 CMsgConnectionStatus::queue_size() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectionStatus.queue_size)
  return queue_size_;
}
void CMsgConnectionStatus::set_queue_size(::google::protobuf::int32 value) {
  set_has_queue_size();
  queue_size_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectionStatus.queue_size)
}

// optional int32 wait_seconds = 5;
bool CMsgConnectionStatus::has_wait_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgConnectionStatus::set_has_wait_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgConnectionStatus::clear_has_wait_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgConnectionStatus::clear_wait_seconds() {
  wait_seconds_ = 0;
  clear_has_wait_seconds();
}
::google::protobuf::int32 CMsgConnectionStatus::wait_seconds() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectionStatus.wait_seconds)
  return wait_seconds_;
}
void CMsgConnectionStatus::set_wait_seconds(::google::protobuf::int32 value) {
  set_has_wait_seconds();
  wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectionStatus.wait_seconds)
}

// optional int32 estimated_wait_seconds_remaining = 6;
bool CMsgConnectionStatus::has_estimated_wait_seconds_remaining() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgConnectionStatus::set_has_estimated_wait_seconds_remaining() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgConnectionStatus::clear_has_estimated_wait_seconds_remaining() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgConnectionStatus::clear_estimated_wait_seconds_remaining() {
  estimated_wait_seconds_remaining_ = 0;
  clear_has_estimated_wait_seconds_remaining();
}
::google::protobuf::int32 CMsgConnectionStatus::estimated_wait_seconds_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgConnectionStatus.estimated_wait_seconds_remaining)
  return estimated_wait_seconds_remaining_;
}
void CMsgConnectionStatus::set_estimated_wait_seconds_remaining(::google::protobuf::int32 value) {
  set_has_estimated_wait_seconds_remaining();
  estimated_wait_seconds_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgConnectionStatus.estimated_wait_seconds_remaining)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::kServiceIdFieldNumber;
const int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}
CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_) + sizeof(service_id_));
}

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::~CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  SharedDtor();
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedDtor() {
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* n = new CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&version_) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return false;
#undef DO_
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return target;
}

size_t CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional uint32 service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Swap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InternalSwap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
  std::swap(version_, other->version_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions

// optional uint32 service_id = 1;
bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::has_service_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_has_service_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::service_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.service_id)
  return service_id_;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.service_id)
}

// optional uint64 version = 2;
bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.version)
  return version_;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSOCacheSubscribe::kSubscriberFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSubscribeToIdFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSyncVersionFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kHaveVersionsFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSubscribeToTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCSOCacheSubscribe)
}
CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe(const CMsgGCToGCSOCacheSubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      have_versions_(from.have_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subscriber_, &from.subscriber_,
    reinterpret_cast<char*>(&subscribe_to_type_) -
    reinterpret_cast<char*>(&subscriber_) + sizeof(subscribe_to_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCSOCacheSubscribe)
}

void CMsgGCToGCSOCacheSubscribe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&subscriber_, 0, reinterpret_cast<char*>(&subscribe_to_type_) -
    reinterpret_cast<char*>(&subscriber_) + sizeof(subscribe_to_type_));
}

CMsgGCToGCSOCacheSubscribe::~CMsgGCToGCSOCacheSubscribe() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCSOCacheSubscribe)
  SharedDtor();
}

void CMsgGCToGCSOCacheSubscribe::SharedDtor() {
}

void CMsgGCToGCSOCacheSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheSubscribe::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCSOCacheSubscribe& CMsgGCToGCSOCacheSubscribe::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCSOCacheSubscribe* CMsgGCToGCSOCacheSubscribe::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCSOCacheSubscribe* n = new CMsgGCToGCSOCacheSubscribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCSOCacheSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  have_versions_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&subscriber_, 0, reinterpret_cast<char*>(&subscribe_to_type_) -
      reinterpret_cast<char*>(&subscriber_) + sizeof(subscribe_to_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCSOCacheSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_subscriber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 subscribe_to_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_subscribe_to_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscribe_to_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sync_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_sync_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_have_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 subscribe_to_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_subscribe_to_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subscribe_to_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCSOCacheSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCSOCacheSubscribe)
  return false;
#undef DO_
}

void CMsgGCToGCSOCacheSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->subscriber(), output);
  }

  // optional fixed64 subscribe_to_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->subscribe_to_id(), output);
  }

  // optional fixed64 sync_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->sync_version(), output);
  }

  // repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  for (unsigned int i = 0, n = this->have_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->have_versions(i), output);
  }

  // optional uint32 subscribe_to_type = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subscribe_to_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCSOCacheSubscribe)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheSubscribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->subscriber(), target);
  }

  // optional fixed64 subscribe_to_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->subscribe_to_id(), target);
  }

  // optional fixed64 sync_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->sync_version(), target);
  }

  // repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  for (unsigned int i = 0, n = this->have_versions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->have_versions(i), deterministic, target);
  }

  // optional uint32 subscribe_to_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subscribe_to_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCSOCacheSubscribe)
  return target;
}

size_t CMsgGCToGCSOCacheSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  {
    unsigned int count = this->have_versions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->have_versions(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 subscriber = 1;
    if (has_subscriber()) {
      total_size += 1 + 8;
    }

    // optional fixed64 subscribe_to_id = 2;
    if (has_subscribe_to_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 3;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 subscribe_to_type = 5;
    if (has_subscribe_to_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subscribe_to_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheSubscribe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCSOCacheSubscribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCSOCacheSubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCSOCacheSubscribe)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const CMsgGCToGCSOCacheSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  have_versions_.MergeFrom(from.have_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      subscriber_ = from.subscriber_;
    }
    if (cached_has_bits & 0x00000002u) {
      subscribe_to_id_ = from.subscribe_to_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      subscribe_to_type_ = from.subscribe_to_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const CMsgGCToGCSOCacheSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCSOCacheSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheSubscribe::Swap(CMsgGCToGCSOCacheSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheSubscribe::InternalSwap(CMsgGCToGCSOCacheSubscribe* other) {
  have_versions_.InternalSwap(&other->have_versions_);
  std::swap(subscriber_, other->subscriber_);
  std::swap(subscribe_to_id_, other->subscribe_to_id_);
  std::swap(sync_version_, other->sync_version_);
  std::swap(subscribe_to_type_, other->subscribe_to_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheSubscribe::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCSOCacheSubscribe

// optional fixed64 subscriber = 1;
bool CMsgGCToGCSOCacheSubscribe::has_subscriber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCSOCacheSubscribe::set_has_subscriber() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCSOCacheSubscribe::clear_has_subscriber() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCSOCacheSubscribe::clear_subscriber() {
  subscriber_ = GOOGLE_ULONGLONG(0);
  clear_has_subscriber();
}
::google::protobuf::uint64 CMsgGCToGCSOCacheSubscribe::subscriber() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheSubscribe.subscriber)
  return subscriber_;
}
void CMsgGCToGCSOCacheSubscribe::set_subscriber(::google::protobuf::uint64 value) {
  set_has_subscriber();
  subscriber_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCSOCacheSubscribe.subscriber)
}

// optional fixed64 subscribe_to_id = 2;
bool CMsgGCToGCSOCacheSubscribe::has_subscribe_to_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCSOCacheSubscribe::set_has_subscribe_to_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCSOCacheSubscribe::clear_has_subscribe_to_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCSOCacheSubscribe::clear_subscribe_to_id() {
  subscribe_to_id_ = GOOGLE_ULONGLONG(0);
  clear_has_subscribe_to_id();
}
::google::protobuf::uint64 CMsgGCToGCSOCacheSubscribe::subscribe_to_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheSubscribe.subscribe_to_id)
  return subscribe_to_id_;
}
void CMsgGCToGCSOCacheSubscribe::set_subscribe_to_id(::google::protobuf::uint64 value) {
  set_has_subscribe_to_id();
  subscribe_to_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCSOCacheSubscribe.subscribe_to_id)
}

// optional fixed64 sync_version = 3;
bool CMsgGCToGCSOCacheSubscribe::has_sync_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToGCSOCacheSubscribe::set_has_sync_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToGCSOCacheSubscribe::clear_has_sync_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToGCSOCacheSubscribe::clear_sync_version() {
  sync_version_ = GOOGLE_ULONGLONG(0);
  clear_has_sync_version();
}
::google::protobuf::uint64 CMsgGCToGCSOCacheSubscribe::sync_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheSubscribe.sync_version)
  return sync_version_;
}
void CMsgGCToGCSOCacheSubscribe::set_sync_version(::google::protobuf::uint64 value) {
  set_has_sync_version();
  sync_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCSOCacheSubscribe.sync_version)
}

// repeated .proto.dota.CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
int CMsgGCToGCSOCacheSubscribe::have_versions_size() const {
  return have_versions_.size();
}
void CMsgGCToGCSOCacheSubscribe::clear_have_versions() {
  have_versions_.Clear();
}
const ::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& CMsgGCToGCSOCacheSubscribe::have_versions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_.Get(index);
}
::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe::mutable_have_versions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_.Mutable(index);
}
::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe::add_have_versions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >*
CMsgGCToGCSOCacheSubscribe::mutable_have_versions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToGCSOCacheSubscribe.have_versions)
  return &have_versions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >&
CMsgGCToGCSOCacheSubscribe::have_versions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_;
}

// optional uint32 subscribe_to_type = 5;
bool CMsgGCToGCSOCacheSubscribe::has_subscribe_to_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCToGCSOCacheSubscribe::set_has_subscribe_to_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCToGCSOCacheSubscribe::clear_has_subscribe_to_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCToGCSOCacheSubscribe::clear_subscribe_to_type() {
  subscribe_to_type_ = 0u;
  clear_has_subscribe_to_type();
}
::google::protobuf::uint32 CMsgGCToGCSOCacheSubscribe::subscribe_to_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheSubscribe.subscribe_to_type)
  return subscribe_to_type_;
}
void CMsgGCToGCSOCacheSubscribe::set_subscribe_to_type(::google::protobuf::uint32 value) {
  set_has_subscribe_to_type();
  subscribe_to_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCSOCacheSubscribe.subscribe_to_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCSOCacheUnsubscribe::kSubscriberFieldNumber;
const int CMsgGCToGCSOCacheUnsubscribe::kUnsubscribeFromIdFieldNumber;
const int CMsgGCToGCSOCacheUnsubscribe::kUnsubscribeFromTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
}
CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe(const CMsgGCToGCSOCacheUnsubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subscriber_, &from.subscriber_,
    reinterpret_cast<char*>(&unsubscribe_from_type_) -
    reinterpret_cast<char*>(&subscriber_) + sizeof(unsubscribe_from_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
}

void CMsgGCToGCSOCacheUnsubscribe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&subscriber_, 0, reinterpret_cast<char*>(&unsubscribe_from_type_) -
    reinterpret_cast<char*>(&subscriber_) + sizeof(unsubscribe_from_type_));
}

CMsgGCToGCSOCacheUnsubscribe::~CMsgGCToGCSOCacheUnsubscribe() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  SharedDtor();
}

void CMsgGCToGCSOCacheUnsubscribe::SharedDtor() {
}

void CMsgGCToGCSOCacheUnsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheUnsubscribe::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCSOCacheUnsubscribe& CMsgGCToGCSOCacheUnsubscribe::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCSOCacheUnsubscribe* CMsgGCToGCSOCacheUnsubscribe::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCSOCacheUnsubscribe* n = new CMsgGCToGCSOCacheUnsubscribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCSOCacheUnsubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&subscriber_, 0, reinterpret_cast<char*>(&unsubscribe_from_type_) -
      reinterpret_cast<char*>(&subscriber_) + sizeof(unsubscribe_from_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCSOCacheUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_subscriber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscriber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 unsubscribe_from_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_unsubscribe_from_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &unsubscribe_from_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unsubscribe_from_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_unsubscribe_from_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsubscribe_from_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  return false;
#undef DO_
}

void CMsgGCToGCSOCacheUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->subscriber(), output);
  }

  // optional fixed64 unsubscribe_from_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->unsubscribe_from_id(), output);
  }

  // optional uint32 unsubscribe_from_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unsubscribe_from_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheUnsubscribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->subscriber(), target);
  }

  // optional fixed64 unsubscribe_from_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->unsubscribe_from_id(), target);
  }

  // optional uint32 unsubscribe_from_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unsubscribe_from_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  return target;
}

size_t CMsgGCToGCSOCacheUnsubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 subscriber = 1;
    if (has_subscriber()) {
      total_size += 1 + 8;
    }

    // optional fixed64 unsubscribe_from_id = 2;
    if (has_unsubscribe_from_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 unsubscribe_from_type = 3;
    if (has_unsubscribe_from_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unsubscribe_from_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheUnsubscribe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCSOCacheUnsubscribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      subscriber_ = from.subscriber_;
    }
    if (cached_has_bits & 0x00000002u) {
      unsubscribe_from_id_ = from.unsubscribe_from_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unsubscribe_from_type_ = from.unsubscribe_from_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCSOCacheUnsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheUnsubscribe::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheUnsubscribe::Swap(CMsgGCToGCSOCacheUnsubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheUnsubscribe::InternalSwap(CMsgGCToGCSOCacheUnsubscribe* other) {
  std::swap(subscriber_, other->subscriber_);
  std::swap(unsubscribe_from_id_, other->unsubscribe_from_id_);
  std::swap(unsubscribe_from_type_, other->unsubscribe_from_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheUnsubscribe::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCSOCacheUnsubscribe

// optional fixed64 subscriber = 1;
bool CMsgGCToGCSOCacheUnsubscribe::has_subscriber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCSOCacheUnsubscribe::set_has_subscriber() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_has_subscriber() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_subscriber() {
  subscriber_ = GOOGLE_ULONGLONG(0);
  clear_has_subscriber();
}
::google::protobuf::uint64 CMsgGCToGCSOCacheUnsubscribe::subscriber() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheUnsubscribe.subscriber)
  return subscriber_;
}
void CMsgGCToGCSOCacheUnsubscribe::set_subscriber(::google::protobuf::uint64 value) {
  set_has_subscriber();
  subscriber_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCSOCacheUnsubscribe.subscriber)
}

// optional fixed64 unsubscribe_from_id = 2;
bool CMsgGCToGCSOCacheUnsubscribe::has_unsubscribe_from_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCSOCacheUnsubscribe::set_has_unsubscribe_from_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_has_unsubscribe_from_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_unsubscribe_from_id() {
  unsubscribe_from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_unsubscribe_from_id();
}
::google::protobuf::uint64 CMsgGCToGCSOCacheUnsubscribe::unsubscribe_from_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheUnsubscribe.unsubscribe_from_id)
  return unsubscribe_from_id_;
}
void CMsgGCToGCSOCacheUnsubscribe::set_unsubscribe_from_id(::google::protobuf::uint64 value) {
  set_has_unsubscribe_from_id();
  unsubscribe_from_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCSOCacheUnsubscribe.unsubscribe_from_id)
}

// optional uint32 unsubscribe_from_type = 3;
bool CMsgGCToGCSOCacheUnsubscribe::has_unsubscribe_from_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToGCSOCacheUnsubscribe::set_has_unsubscribe_from_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_has_unsubscribe_from_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_unsubscribe_from_type() {
  unsubscribe_from_type_ = 0u;
  clear_has_unsubscribe_from_type();
}
::google::protobuf::uint32 CMsgGCToGCSOCacheUnsubscribe::unsubscribe_from_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCSOCacheUnsubscribe.unsubscribe_from_type)
  return unsubscribe_from_type_;
}
void CMsgGCToGCSOCacheUnsubscribe::set_unsubscribe_from_type(::google::protobuf::uint32 value) {
  set_has_unsubscribe_from_type();
  unsubscribe_from_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCSOCacheUnsubscribe.unsubscribe_from_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientPing::CMsgGCClientPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientPing)
}
CMsgGCClientPing::CMsgGCClientPing(const CMsgGCClientPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientPing)
}

void CMsgGCClientPing::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCClientPing::~CMsgGCClientPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientPing)
  SharedDtor();
}

void CMsgGCClientPing::SharedDtor() {
}

void CMsgGCClientPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientPing::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCClientPing& CMsgGCClientPing::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCClientPing* CMsgGCClientPing::New(::google::protobuf::Arena* arena) const {
  CMsgGCClientPing* n = new CMsgGCClientPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCClientPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientPing)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCClientPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientPing)
  return false;
#undef DO_
}

void CMsgGCClientPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientPing)
}

::google::protobuf::uint8* CMsgGCClientPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientPing)
  return target;
}

size_t CMsgGCClientPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCClientPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientPing)
    MergeFrom(*source);
  }
}

void CMsgGCClientPing::MergeFrom(const CMsgGCClientPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCClientPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientPing::CopyFrom(const CMsgGCClientPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientPing::IsInitialized() const {
  return true;
}

void CMsgGCClientPing::Swap(CMsgGCClientPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientPing::InternalSwap(CMsgGCClientPing* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCClientPing::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCClientPing

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCForwardAccountDetails::kSteamidFieldNumber;
const int CMsgGCToGCForwardAccountDetails::kAccountDetailsFieldNumber;
const int CMsgGCToGCForwardAccountDetails::kAgeSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCForwardAccountDetails::CMsgGCToGCForwardAccountDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCForwardAccountDetails)
}
CMsgGCToGCForwardAccountDetails::CMsgGCToGCForwardAccountDetails(const CMsgGCToGCForwardAccountDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_details()) {
    account_details_ = new ::proto::dota::CGCSystemMsg_GetAccountDetails_Response(*from.account_details_);
  } else {
    account_details_ = NULL;
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&age_seconds_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(age_seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCForwardAccountDetails)
}

void CMsgGCToGCForwardAccountDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_details_, 0, reinterpret_cast<char*>(&age_seconds_) -
    reinterpret_cast<char*>(&account_details_) + sizeof(age_seconds_));
}

CMsgGCToGCForwardAccountDetails::~CMsgGCToGCForwardAccountDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCForwardAccountDetails)
  SharedDtor();
}

void CMsgGCToGCForwardAccountDetails::SharedDtor() {
  if (this != internal_default_instance()) {
    delete account_details_;
  }
}

void CMsgGCToGCForwardAccountDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCForwardAccountDetails::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCForwardAccountDetails& CMsgGCToGCForwardAccountDetails::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCForwardAccountDetails* CMsgGCToGCForwardAccountDetails::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCForwardAccountDetails* n = new CMsgGCToGCForwardAccountDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCForwardAccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  if (has_account_details()) {
    GOOGLE_DCHECK(account_details_ != NULL);
    account_details_->::proto::dota::CGCSystemMsg_GetAccountDetails_Response::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&age_seconds_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(age_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCForwardAccountDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 age_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_age_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCForwardAccountDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCForwardAccountDetails)
  return false;
#undef DO_
}

void CMsgGCToGCForwardAccountDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->account_details_, output);
  }

  // optional uint32 age_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->age_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCForwardAccountDetails)
}

::google::protobuf::uint8* CMsgGCToGCForwardAccountDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->account_details_, deterministic, target);
  }

  // optional uint32 age_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->age_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCForwardAccountDetails)
  return target;
}

size_t CMsgGCToGCForwardAccountDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
    if (has_account_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->account_details_);
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 age_seconds = 3;
    if (has_age_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCForwardAccountDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCForwardAccountDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCForwardAccountDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCForwardAccountDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCForwardAccountDetails)
    MergeFrom(*source);
  }
}

void CMsgGCToGCForwardAccountDetails::MergeFrom(const CMsgGCToGCForwardAccountDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_account_details()->::proto::dota::CGCSystemMsg_GetAccountDetails_Response::MergeFrom(from.account_details());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      age_seconds_ = from.age_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCForwardAccountDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCForwardAccountDetails::CopyFrom(const CMsgGCToGCForwardAccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCForwardAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCForwardAccountDetails::IsInitialized() const {
  return true;
}

void CMsgGCToGCForwardAccountDetails::Swap(CMsgGCToGCForwardAccountDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCForwardAccountDetails::InternalSwap(CMsgGCToGCForwardAccountDetails* other) {
  std::swap(account_details_, other->account_details_);
  std::swap(steamid_, other->steamid_);
  std::swap(age_seconds_, other->age_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCForwardAccountDetails::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCForwardAccountDetails

// optional fixed64 steamid = 1;
bool CMsgGCToGCForwardAccountDetails::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCForwardAccountDetails::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCForwardAccountDetails::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCForwardAccountDetails::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCToGCForwardAccountDetails::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCForwardAccountDetails.steamid)
  return steamid_;
}
void CMsgGCToGCForwardAccountDetails::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCForwardAccountDetails.steamid)
}

// optional .proto.dota.CGCSystemMsg_GetAccountDetails_Response account_details = 2;
bool CMsgGCToGCForwardAccountDetails::has_account_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCForwardAccountDetails::set_has_account_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCForwardAccountDetails::clear_has_account_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCForwardAccountDetails::clear_account_details() {
  if (account_details_ != NULL) account_details_->::proto::dota::CGCSystemMsg_GetAccountDetails_Response::Clear();
  clear_has_account_details();
}
const ::proto::dota::CGCSystemMsg_GetAccountDetails_Response& CMsgGCToGCForwardAccountDetails::account_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCForwardAccountDetails.account_details)
  return account_details_ != NULL ? *account_details_
                         : *::proto::dota::CGCSystemMsg_GetAccountDetails_Response::internal_default_instance();
}
::proto::dota::CGCSystemMsg_GetAccountDetails_Response* CMsgGCToGCForwardAccountDetails::mutable_account_details() {
  set_has_account_details();
  if (account_details_ == NULL) {
    account_details_ = new ::proto::dota::CGCSystemMsg_GetAccountDetails_Response;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToGCForwardAccountDetails.account_details)
  return account_details_;
}
::proto::dota::CGCSystemMsg_GetAccountDetails_Response* CMsgGCToGCForwardAccountDetails::release_account_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToGCForwardAccountDetails.account_details)
  clear_has_account_details();
  ::proto::dota::CGCSystemMsg_GetAccountDetails_Response* temp = account_details_;
  account_details_ = NULL;
  return temp;
}
void CMsgGCToGCForwardAccountDetails::set_allocated_account_details(::proto::dota::CGCSystemMsg_GetAccountDetails_Response* account_details) {
  delete account_details_;
  account_details_ = account_details;
  if (account_details) {
    set_has_account_details();
  } else {
    clear_has_account_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToGCForwardAccountDetails.account_details)
}

// optional uint32 age_seconds = 3;
bool CMsgGCToGCForwardAccountDetails::has_age_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToGCForwardAccountDetails::set_has_age_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToGCForwardAccountDetails::clear_has_age_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToGCForwardAccountDetails::clear_age_seconds() {
  age_seconds_ = 0u;
  clear_has_age_seconds();
}
::google::protobuf::uint32 CMsgGCToGCForwardAccountDetails::age_seconds() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCForwardAccountDetails.age_seconds)
  return age_seconds_;
}
void CMsgGCToGCForwardAccountDetails::set_age_seconds(::google::protobuf::uint32 value) {
  set_has_age_seconds();
  age_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCForwardAccountDetails.age_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCLoadSessionSOCache::kAccountIdFieldNumber;
const int CMsgGCToGCLoadSessionSOCache::kForwardAccountDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCLoadSessionSOCache::CMsgGCToGCLoadSessionSOCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCLoadSessionSOCache)
}
CMsgGCToGCLoadSessionSOCache::CMsgGCToGCLoadSessionSOCache(const CMsgGCToGCLoadSessionSOCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_forward_account_details()) {
    forward_account_details_ = new ::proto::dota::CMsgGCToGCForwardAccountDetails(*from.forward_account_details_);
  } else {
    forward_account_details_ = NULL;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCLoadSessionSOCache)
}

void CMsgGCToGCLoadSessionSOCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&forward_account_details_, 0, reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&forward_account_details_) + sizeof(account_id_));
}

CMsgGCToGCLoadSessionSOCache::~CMsgGCToGCLoadSessionSOCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCLoadSessionSOCache)
  SharedDtor();
}

void CMsgGCToGCLoadSessionSOCache::SharedDtor() {
  if (this != internal_default_instance()) {
    delete forward_account_details_;
  }
}

void CMsgGCToGCLoadSessionSOCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCLoadSessionSOCache::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCLoadSessionSOCache& CMsgGCToGCLoadSessionSOCache::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCLoadSessionSOCache* CMsgGCToGCLoadSessionSOCache::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCLoadSessionSOCache* n = new CMsgGCToGCLoadSessionSOCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCLoadSessionSOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  if (has_forward_account_details()) {
    GOOGLE_DCHECK(forward_account_details_ != NULL);
    forward_account_details_->::proto::dota::CMsgGCToGCForwardAccountDetails::Clear();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCLoadSessionSOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward_account_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCLoadSessionSOCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCLoadSessionSOCache)
  return false;
#undef DO_
}

void CMsgGCToGCLoadSessionSOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->forward_account_details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCLoadSessionSOCache)
}

::google::protobuf::uint8* CMsgGCToGCLoadSessionSOCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->forward_account_details_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCLoadSessionSOCache)
  return target;
}

size_t CMsgGCToGCLoadSessionSOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
    if (has_forward_account_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->forward_account_details_);
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCLoadSessionSOCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCLoadSessionSOCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCLoadSessionSOCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCLoadSessionSOCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCLoadSessionSOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCLoadSessionSOCache::MergeFrom(const CMsgGCToGCLoadSessionSOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_forward_account_details()->::proto::dota::CMsgGCToGCForwardAccountDetails::MergeFrom(from.forward_account_details());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCLoadSessionSOCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCLoadSessionSOCache::CopyFrom(const CMsgGCToGCLoadSessionSOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCLoadSessionSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCLoadSessionSOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCLoadSessionSOCache::Swap(CMsgGCToGCLoadSessionSOCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCLoadSessionSOCache::InternalSwap(CMsgGCToGCLoadSessionSOCache* other) {
  std::swap(forward_account_details_, other->forward_account_details_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCLoadSessionSOCache::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCLoadSessionSOCache

// optional uint32 account_id = 1;
bool CMsgGCToGCLoadSessionSOCache::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCLoadSessionSOCache::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCLoadSessionSOCache::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCLoadSessionSOCache::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgGCToGCLoadSessionSOCache::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCLoadSessionSOCache.account_id)
  return account_id_;
}
void CMsgGCToGCLoadSessionSOCache::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCLoadSessionSOCache.account_id)
}

// optional .proto.dota.CMsgGCToGCForwardAccountDetails forward_account_details = 2;
bool CMsgGCToGCLoadSessionSOCache::has_forward_account_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCLoadSessionSOCache::set_has_forward_account_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCLoadSessionSOCache::clear_has_forward_account_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCLoadSessionSOCache::clear_forward_account_details() {
  if (forward_account_details_ != NULL) forward_account_details_->::proto::dota::CMsgGCToGCForwardAccountDetails::Clear();
  clear_has_forward_account_details();
}
const ::proto::dota::CMsgGCToGCForwardAccountDetails& CMsgGCToGCLoadSessionSOCache::forward_account_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCLoadSessionSOCache.forward_account_details)
  return forward_account_details_ != NULL ? *forward_account_details_
                         : *::proto::dota::CMsgGCToGCForwardAccountDetails::internal_default_instance();
}
::proto::dota::CMsgGCToGCForwardAccountDetails* CMsgGCToGCLoadSessionSOCache::mutable_forward_account_details() {
  set_has_forward_account_details();
  if (forward_account_details_ == NULL) {
    forward_account_details_ = new ::proto::dota::CMsgGCToGCForwardAccountDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToGCLoadSessionSOCache.forward_account_details)
  return forward_account_details_;
}
::proto::dota::CMsgGCToGCForwardAccountDetails* CMsgGCToGCLoadSessionSOCache::release_forward_account_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToGCLoadSessionSOCache.forward_account_details)
  clear_has_forward_account_details();
  ::proto::dota::CMsgGCToGCForwardAccountDetails* temp = forward_account_details_;
  forward_account_details_ = NULL;
  return temp;
}
void CMsgGCToGCLoadSessionSOCache::set_allocated_forward_account_details(::proto::dota::CMsgGCToGCForwardAccountDetails* forward_account_details) {
  delete forward_account_details_;
  forward_account_details_ = forward_account_details;
  if (forward_account_details) {
    set_has_forward_account_details();
  } else {
    clear_has_forward_account_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToGCLoadSessionSOCache.forward_account_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCLoadSessionSOCacheResponse::CMsgGCToGCLoadSessionSOCacheResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
}
CMsgGCToGCLoadSessionSOCacheResponse::CMsgGCToGCLoadSessionSOCacheResponse(const CMsgGCToGCLoadSessionSOCacheResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
}

void CMsgGCToGCLoadSessionSOCacheResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCToGCLoadSessionSOCacheResponse::~CMsgGCToGCLoadSessionSOCacheResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  SharedDtor();
}

void CMsgGCToGCLoadSessionSOCacheResponse::SharedDtor() {
}

void CMsgGCToGCLoadSessionSOCacheResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCLoadSessionSOCacheResponse::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCLoadSessionSOCacheResponse& CMsgGCToGCLoadSessionSOCacheResponse::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCLoadSessionSOCacheResponse* CMsgGCToGCLoadSessionSOCacheResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCLoadSessionSOCacheResponse* n = new CMsgGCToGCLoadSessionSOCacheResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCLoadSessionSOCacheResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCLoadSessionSOCacheResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  return false;
#undef DO_
}

void CMsgGCToGCLoadSessionSOCacheResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
}

::google::protobuf::uint8* CMsgGCToGCLoadSessionSOCacheResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  return target;
}

size_t CMsgGCToGCLoadSessionSOCacheResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCLoadSessionSOCacheResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCLoadSessionSOCacheResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCLoadSessionSOCacheResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCLoadSessionSOCacheResponse::MergeFrom(const CMsgGCToGCLoadSessionSOCacheResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCLoadSessionSOCacheResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCLoadSessionSOCacheResponse::CopyFrom(const CMsgGCToGCLoadSessionSOCacheResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCLoadSessionSOCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCLoadSessionSOCacheResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCLoadSessionSOCacheResponse::Swap(CMsgGCToGCLoadSessionSOCacheResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCLoadSessionSOCacheResponse::InternalSwap(CMsgGCToGCLoadSessionSOCacheResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCLoadSessionSOCacheResponse::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCLoadSessionSOCacheResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCUpdateSessionStats::kUserSessionsFieldNumber;
const int CMsgGCToGCUpdateSessionStats::kServerSessionsFieldNumber;
const int CMsgGCToGCUpdateSessionStats::kInLogonSurgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCUpdateSessionStats::CMsgGCToGCUpdateSessionStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCUpdateSessionStats)
}
CMsgGCToGCUpdateSessionStats::CMsgGCToGCUpdateSessionStats(const CMsgGCToGCUpdateSessionStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_sessions_, &from.user_sessions_,
    reinterpret_cast<char*>(&in_logon_surge_) -
    reinterpret_cast<char*>(&user_sessions_) + sizeof(in_logon_surge_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCUpdateSessionStats)
}

void CMsgGCToGCUpdateSessionStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&user_sessions_, 0, reinterpret_cast<char*>(&in_logon_surge_) -
    reinterpret_cast<char*>(&user_sessions_) + sizeof(in_logon_surge_));
}

CMsgGCToGCUpdateSessionStats::~CMsgGCToGCUpdateSessionStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCUpdateSessionStats)
  SharedDtor();
}

void CMsgGCToGCUpdateSessionStats::SharedDtor() {
}

void CMsgGCToGCUpdateSessionStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCUpdateSessionStats::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCUpdateSessionStats& CMsgGCToGCUpdateSessionStats::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCUpdateSessionStats* CMsgGCToGCUpdateSessionStats::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCUpdateSessionStats* n = new CMsgGCToGCUpdateSessionStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCUpdateSessionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&user_sessions_, 0, reinterpret_cast<char*>(&in_logon_surge_) -
      reinterpret_cast<char*>(&user_sessions_) + sizeof(in_logon_surge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCUpdateSessionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_server_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_logon_surge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_in_logon_surge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_logon_surge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCUpdateSessionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCUpdateSessionStats)
  return false;
#undef DO_
}

void CMsgGCToGCUpdateSessionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_sessions(), output);
  }

  // optional uint32 server_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_sessions(), output);
  }

  // optional bool in_logon_surge = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->in_logon_surge(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCUpdateSessionStats)
}

::google::protobuf::uint8* CMsgGCToGCUpdateSessionStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_sessions(), target);
  }

  // optional uint32 server_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_sessions(), target);
  }

  // optional bool in_logon_surge = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->in_logon_surge(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCUpdateSessionStats)
  return target;
}

size_t CMsgGCToGCUpdateSessionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 user_sessions = 1;
    if (has_user_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_sessions());
    }

    // optional uint32 server_sessions = 2;
    if (has_server_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_sessions());
    }

    // optional bool in_logon_surge = 3;
    if (has_in_logon_surge()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCUpdateSessionStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUpdateSessionStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCUpdateSessionStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCUpdateSessionStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCUpdateSessionStats)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUpdateSessionStats::MergeFrom(const CMsgGCToGCUpdateSessionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      user_sessions_ = from.user_sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_sessions_ = from.server_sessions_;
    }
    if (cached_has_bits & 0x00000004u) {
      in_logon_surge_ = from.in_logon_surge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCUpdateSessionStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUpdateSessionStats::CopyFrom(const CMsgGCToGCUpdateSessionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCUpdateSessionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSessionStats::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSessionStats::Swap(CMsgGCToGCUpdateSessionStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCUpdateSessionStats::InternalSwap(CMsgGCToGCUpdateSessionStats* other) {
  std::swap(user_sessions_, other->user_sessions_);
  std::swap(server_sessions_, other->server_sessions_);
  std::swap(in_logon_surge_, other->in_logon_surge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCUpdateSessionStats::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCUpdateSessionStats

// optional uint32 user_sessions = 1;
bool CMsgGCToGCUpdateSessionStats::has_user_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCUpdateSessionStats::set_has_user_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCUpdateSessionStats::clear_has_user_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCUpdateSessionStats::clear_user_sessions() {
  user_sessions_ = 0u;
  clear_has_user_sessions();
}
::google::protobuf::uint32 CMsgGCToGCUpdateSessionStats::user_sessions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCUpdateSessionStats.user_sessions)
  return user_sessions_;
}
void CMsgGCToGCUpdateSessionStats::set_user_sessions(::google::protobuf::uint32 value) {
  set_has_user_sessions();
  user_sessions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCUpdateSessionStats.user_sessions)
}

// optional uint32 server_sessions = 2;
bool CMsgGCToGCUpdateSessionStats::has_server_sessions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCUpdateSessionStats::set_has_server_sessions() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCUpdateSessionStats::clear_has_server_sessions() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCUpdateSessionStats::clear_server_sessions() {
  server_sessions_ = 0u;
  clear_has_server_sessions();
}
::google::protobuf::uint32 CMsgGCToGCUpdateSessionStats::server_sessions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCUpdateSessionStats.server_sessions)
  return server_sessions_;
}
void CMsgGCToGCUpdateSessionStats::set_server_sessions(::google::protobuf::uint32 value) {
  set_has_server_sessions();
  server_sessions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCUpdateSessionStats.server_sessions)
}

// optional bool in_logon_surge = 3;
bool CMsgGCToGCUpdateSessionStats::has_in_logon_surge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToGCUpdateSessionStats::set_has_in_logon_surge() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToGCUpdateSessionStats::clear_has_in_logon_surge() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToGCUpdateSessionStats::clear_in_logon_surge() {
  in_logon_surge_ = false;
  clear_has_in_logon_surge();
}
bool CMsgGCToGCUpdateSessionStats::in_logon_surge() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCUpdateSessionStats.in_logon_surge)
  return in_logon_surge_;
}
void CMsgGCToGCUpdateSessionStats::set_in_logon_surge(bool value) {
  set_has_in_logon_surge();
  in_logon_surge_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCUpdateSessionStats.in_logon_surge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kGameitemidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kItemDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}
CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_description()) {
    item_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_description_);
  }
  gameitemid_ = from.gameitemid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedCtor() {
  _cached_size_ = 0;
  item_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameitemid_ = 0u;
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::~CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedDtor() {
  item_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::New(::google::protobuf::Arena* arena) const {
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* n = new CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  if (has_item_description()) {
    GOOGLE_DCHECK(!item_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*item_description_.UnsafeRawStringPointer())->clear();
  }
  gameitemid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameitemid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_gameitemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string item_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_description().data(), this->item_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return false;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gameitemid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameitemid(), output);
  }

  // optional string item_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_description().data(), this->item_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gameitemid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameitemid(), target);
  }

  // optional string item_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_description().data(), this->item_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return target;
}

size_t CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string item_description = 2;
    if (has_item_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_description());
    }

    // optional uint32 gameitemid = 1;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_item_description();
      item_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      gameitemid_ = from.gameitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::IsInitialized() const {
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Swap(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InternalSwap(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* other) {
  item_description_.Swap(&other->item_description_);
  std::swap(gameitemid_, other->gameitemid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription

// optional uint32 gameitemid = 1;
bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::has_gameitemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_has_gameitemid() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::clear_has_gameitemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::clear_gameitemid() {
  gameitemid_ = 0u;
  clear_has_gameitemid();
}
::google::protobuf::uint32 CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::gameitemid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.gameitemid)
  return gameitemid_;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_gameitemid(::google::protobuf::uint32 value) {
  set_has_gameitemid();
  gameitemid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.gameitemid)
}

// optional string item_description = 2;
bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::has_item_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_has_item_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::clear_has_item_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::clear_item_description() {
  item_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_description();
}
const ::std::string& CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::item_description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
  return item_description_.GetNoArena();
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_item_description(const ::std::string& value) {
  set_has_item_description();
  item_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
}
#if LANG_CXX11
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_item_description(::std::string&& value) {
  set_has_item_description();
  item_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
}
#endif
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_item_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_item_description();
  item_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_item_description(const char* value, size_t size) {
  set_has_item_description();
  item_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
}
::std::string* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::mutable_item_description() {
  set_has_item_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
  return item_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::release_item_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
  clear_has_item_description();
  return item_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_allocated_item_description(::std::string* item_description) {
  if (item_description != NULL) {
    set_has_item_description();
  } else {
    clear_has_item_description();
  }
  item_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kLanguageFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kDescriptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}
CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      descriptions_(from.descriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedCtor() {
  _cached_size_ = 0;
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::~CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::New(::google::protobuf::Arena* arena) const {
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* n = new CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  descriptions_.Clear();
  if (has_language()) {
    GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*language_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_descriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return false;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language(), output);
  }

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (unsigned int i = 0, n = this->descriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (unsigned int i = 0, n = this->descriptions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->descriptions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return target;
}

size_t CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  {
    unsigned int count = this->descriptions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->descriptions(i));
    }
  }

  // optional string language = 1;
  if (has_language()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descriptions_.MergeFrom(from.descriptions_);
  if (from.has_language()) {
    set_has_language();
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::IsInitialized() const {
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Swap(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InternalSwap(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* other) {
  descriptions_.InternalSwap(&other->descriptions_);
  language_.Swap(&other->language_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock

// optional string language = 1;
bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::language() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
  return language_.GetNoArena();
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
}
#if LANG_CXX11
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
}
#endif
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
}
::std::string* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::release_language() {
  // @@protoc_insertion_point(field_release:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
}

// repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptions_size() const {
  return descriptions_.size();
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::clear_descriptions() {
  descriptions_.Clear();
}
const ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return descriptions_.Get(index);
}
::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::mutable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return descriptions_.Mutable(index);
}
::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::add_descriptions() {
  // @@protoc_insertion_point(field_add:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return descriptions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription >*
CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::mutable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return &descriptions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription >&
CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return descriptions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_PopulateItemDescriptions_Request::kAppidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request::kLanguagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
}
CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request(const CWorkshop_PopulateItemDescriptions_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
}

void CWorkshop_PopulateItemDescriptions_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CWorkshop_PopulateItemDescriptions_Request::~CWorkshop_PopulateItemDescriptions_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request::SharedDtor() {
}

void CWorkshop_PopulateItemDescriptions_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CWorkshop_PopulateItemDescriptions_Request& CWorkshop_PopulateItemDescriptions_Request::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CWorkshop_PopulateItemDescriptions_Request* CWorkshop_PopulateItemDescriptions_Request::New(::google::protobuf::Arena* arena) const {
  CWorkshop_PopulateItemDescriptions_Request* n = new CWorkshop_PopulateItemDescriptions_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_PopulateItemDescriptions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  languages_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CWorkshop_PopulateItemDescriptions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_languages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  return false;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (unsigned int i = 0, n = this->languages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->languages(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (unsigned int i = 0, n = this->languages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->languages(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  return target;
}

size_t CWorkshop_PopulateItemDescriptions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  {
    unsigned int count = this->languages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->languages(i));
    }
  }

  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_PopulateItemDescriptions_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  languages_.MergeFrom(from.languages_);
  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_PopulateItemDescriptions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request::IsInitialized() const {
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request::Swap(CWorkshop_PopulateItemDescriptions_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_PopulateItemDescriptions_Request::InternalSwap(CWorkshop_PopulateItemDescriptions_Request* other) {
  languages_.InternalSwap(&other->languages_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_PopulateItemDescriptions_Request

// optional uint32 appid = 1;
bool CWorkshop_PopulateItemDescriptions_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_PopulateItemDescriptions_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CWorkshop_PopulateItemDescriptions_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_PopulateItemDescriptions_Request.appid)
  return appid_;
}
void CWorkshop_PopulateItemDescriptions_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_PopulateItemDescriptions_Request.appid)
}

// repeated .proto.dota.CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
int CWorkshop_PopulateItemDescriptions_Request::languages_size() const {
  return languages_.size();
}
void CWorkshop_PopulateItemDescriptions_Request::clear_languages() {
  languages_.Clear();
}
const ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& CWorkshop_PopulateItemDescriptions_Request::languages(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_PopulateItemDescriptions_Request.languages)
  return languages_.Get(index);
}
::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CWorkshop_PopulateItemDescriptions_Request.languages)
  return languages_.Mutable(index);
}
::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request::add_languages() {
  // @@protoc_insertion_point(field_add:proto.dota.CWorkshop_PopulateItemDescriptions_Request.languages)
  return languages_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock >*
CWorkshop_PopulateItemDescriptions_Request::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CWorkshop_PopulateItemDescriptions_Request.languages)
  return &languages_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock >&
CWorkshop_PopulateItemDescriptions_Request::languages() const {
  // @@protoc_insertion_point(field_list:proto.dota.CWorkshop_PopulateItemDescriptions_Request.languages)
  return languages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_GetContributors_Request::kAppidFieldNumber;
const int CWorkshop_GetContributors_Request::kGameitemidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_GetContributors_Request)
}
CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request(const CWorkshop_GetContributors_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&gameitemid_) -
    reinterpret_cast<char*>(&appid_) + sizeof(gameitemid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_GetContributors_Request)
}

void CWorkshop_GetContributors_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&gameitemid_) -
    reinterpret_cast<char*>(&appid_) + sizeof(gameitemid_));
}

CWorkshop_GetContributors_Request::~CWorkshop_GetContributors_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_GetContributors_Request)
  SharedDtor();
}

void CWorkshop_GetContributors_Request::SharedDtor() {
}

void CWorkshop_GetContributors_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Request::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CWorkshop_GetContributors_Request& CWorkshop_GetContributors_Request::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CWorkshop_GetContributors_Request* CWorkshop_GetContributors_Request::New(::google::protobuf::Arena* arena) const {
  CWorkshop_GetContributors_Request* n = new CWorkshop_GetContributors_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_GetContributors_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_GetContributors_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&gameitemid_) -
      reinterpret_cast<char*>(&appid_) + sizeof(gameitemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CWorkshop_GetContributors_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_GetContributors_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameitemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gameitemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_GetContributors_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_GetContributors_Request)
  return false;
#undef DO_
}

void CWorkshop_GetContributors_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_GetContributors_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_GetContributors_Request)
}

::google::protobuf::uint8* CWorkshop_GetContributors_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_GetContributors_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_GetContributors_Request)
  return target;
}

size_t CWorkshop_GetContributors_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_GetContributors_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 gameitemid = 2;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_GetContributors_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_GetContributors_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetContributors_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_GetContributors_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_GetContributors_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_GetContributors_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Request::MergeFrom(const CWorkshop_GetContributors_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_GetContributors_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gameitemid_ = from.gameitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_GetContributors_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_GetContributors_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Request::CopyFrom(const CWorkshop_GetContributors_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_GetContributors_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Request::IsInitialized() const {
  return true;
}

void CWorkshop_GetContributors_Request::Swap(CWorkshop_GetContributors_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_GetContributors_Request::InternalSwap(CWorkshop_GetContributors_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(gameitemid_, other->gameitemid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_GetContributors_Request::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_GetContributors_Request

// optional uint32 appid = 1;
bool CWorkshop_GetContributors_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_GetContributors_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_GetContributors_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_GetContributors_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CWorkshop_GetContributors_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_GetContributors_Request.appid)
  return appid_;
}
void CWorkshop_GetContributors_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_GetContributors_Request.appid)
}

// optional uint32 gameitemid = 2;
bool CWorkshop_GetContributors_Request::has_gameitemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_GetContributors_Request::set_has_gameitemid() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_GetContributors_Request::clear_has_gameitemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_GetContributors_Request::clear_gameitemid() {
  gameitemid_ = 0u;
  clear_has_gameitemid();
}
::google::protobuf::uint32 CWorkshop_GetContributors_Request::gameitemid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_GetContributors_Request.gameitemid)
  return gameitemid_;
}
void CWorkshop_GetContributors_Request::set_gameitemid(::google::protobuf::uint32 value) {
  set_has_gameitemid();
  gameitemid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_GetContributors_Request.gameitemid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_GetContributors_Response::kContributorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_GetContributors_Response)
}
CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response(const CWorkshop_GetContributors_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      contributors_(from.contributors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_GetContributors_Response)
}

void CWorkshop_GetContributors_Response::SharedCtor() {
  _cached_size_ = 0;
}

CWorkshop_GetContributors_Response::~CWorkshop_GetContributors_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_GetContributors_Response)
  SharedDtor();
}

void CWorkshop_GetContributors_Response::SharedDtor() {
}

void CWorkshop_GetContributors_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Response::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CWorkshop_GetContributors_Response& CWorkshop_GetContributors_Response::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CWorkshop_GetContributors_Response* CWorkshop_GetContributors_Response::New(::google::protobuf::Arena* arena) const {
  CWorkshop_GetContributors_Response* n = new CWorkshop_GetContributors_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_GetContributors_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_GetContributors_Response)
  contributors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CWorkshop_GetContributors_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_GetContributors_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 contributors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_contributors())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_contributors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_GetContributors_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_GetContributors_Response)
  return false;
#undef DO_
}

void CWorkshop_GetContributors_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_GetContributors_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 contributors = 1;
  for (int i = 0, n = this->contributors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->contributors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_GetContributors_Response)
}

::google::protobuf::uint8* CWorkshop_GetContributors_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_GetContributors_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 contributors = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->contributors_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_GetContributors_Response)
  return target;
}

size_t CWorkshop_GetContributors_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_GetContributors_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 contributors = 1;
  {
    unsigned int count = this->contributors_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->contributors_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_GetContributors_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_GetContributors_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetContributors_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_GetContributors_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_GetContributors_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_GetContributors_Response)
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Response::MergeFrom(const CWorkshop_GetContributors_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_GetContributors_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contributors_.MergeFrom(from.contributors_);
}

void CWorkshop_GetContributors_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_GetContributors_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Response::CopyFrom(const CWorkshop_GetContributors_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_GetContributors_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Response::IsInitialized() const {
  return true;
}

void CWorkshop_GetContributors_Response::Swap(CWorkshop_GetContributors_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_GetContributors_Response::InternalSwap(CWorkshop_GetContributors_Response* other) {
  contributors_.InternalSwap(&other->contributors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_GetContributors_Response::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_GetContributors_Response

// repeated fixed64 contributors = 1;
int CWorkshop_GetContributors_Response::contributors_size() const {
  return contributors_.size();
}
void CWorkshop_GetContributors_Response::clear_contributors() {
  contributors_.Clear();
}
::google::protobuf::uint64 CWorkshop_GetContributors_Response::contributors(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_GetContributors_Response.contributors)
  return contributors_.Get(index);
}
void CWorkshop_GetContributors_Response::set_contributors(int index, ::google::protobuf::uint64 value) {
  contributors_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_GetContributors_Response.contributors)
}
void CWorkshop_GetContributors_Response::add_contributors(::google::protobuf::uint64 value) {
  contributors_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CWorkshop_GetContributors_Response.contributors)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CWorkshop_GetContributors_Response::contributors() const {
  // @@protoc_insertion_point(field_list:proto.dota.CWorkshop_GetContributors_Response.contributors)
  return contributors_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CWorkshop_GetContributors_Response::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CWorkshop_GetContributors_Response.contributors)
  return &contributors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kWorkshopFileIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}
CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rule_description()) {
    rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
  }
  ::memcpy(&workshop_file_id_, &from.workshop_file_id_,
    reinterpret_cast<char*>(&revenue_percentage_) -
    reinterpret_cast<char*>(&workshop_file_id_) + sizeof(revenue_percentage_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedCtor() {
  _cached_size_ = 0;
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&workshop_file_id_, 0, reinterpret_cast<char*>(&revenue_percentage_) -
    reinterpret_cast<char*>(&workshop_file_id_) + sizeof(revenue_percentage_));
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedDtor() {
  rule_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::New(::google::protobuf::Arena* arena) const {
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* n = new CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  if (has_rule_description()) {
    GOOGLE_DCHECK(!rule_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*rule_description_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&workshop_file_id_, 0, reinterpret_cast<char*>(&revenue_percentage_) -
      reinterpret_cast<char*>(&workshop_file_id_) + sizeof(revenue_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 workshop_file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_workshop_file_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &workshop_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float revenue_percentage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_revenue_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rule_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rule_description().data(), this->rule_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return false;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 workshop_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->workshop_file_id(), output);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rule_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 workshop_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->workshop_file_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string rule_description = 3;
    if (has_rule_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }

    // optional uint64 workshop_file_id = 1;
    if (has_workshop_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->workshop_file_id());
    }

    // optional float revenue_percentage = 2;
    if (has_revenue_percentage()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rule_description();
      rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      workshop_file_id_ = from.workshop_file_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      revenue_percentage_ = from.revenue_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InternalSwap(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* other) {
  rule_description_.Swap(&other->rule_description_);
  std::swap(workshop_file_id_, other->workshop_file_id_);
  std::swap(revenue_percentage_, other->revenue_percentage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule

// optional uint64 workshop_file_id = 1;
bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::has_workshop_file_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_has_workshop_file_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_has_workshop_file_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_workshop_file_id() {
  workshop_file_id_ = GOOGLE_ULONGLONG(0);
  clear_has_workshop_file_id();
}
::google::protobuf::uint64 CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::workshop_file_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.workshop_file_id)
  return workshop_file_id_;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_workshop_file_id(::google::protobuf::uint64 value) {
  set_has_workshop_file_id();
  workshop_file_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.workshop_file_id)
}

// optional float revenue_percentage = 2;
bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::has_revenue_percentage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_has_revenue_percentage() {
  _has_bits_[0] |= 0x00000004u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_has_revenue_percentage() {
  _has_bits_[0] &= ~0x00000004u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_revenue_percentage() {
  revenue_percentage_ = 0;
  clear_has_revenue_percentage();
}
float CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::revenue_percentage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.revenue_percentage)
  return revenue_percentage_;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_revenue_percentage(float value) {
  set_has_revenue_percentage();
  revenue_percentage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.revenue_percentage)
}

// optional string rule_description = 3;
bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::has_rule_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_has_rule_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_has_rule_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_rule_description() {
  rule_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rule_description();
}
const ::std::string& CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::rule_description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
  return rule_description_.GetNoArena();
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_rule_description(const ::std::string& value) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
}
#if LANG_CXX11
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_rule_description(::std::string&& value) {
  set_has_rule_description();
  rule_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
}
#endif
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_rule_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_rule_description(const char* value, size_t size) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
}
::std::string* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::mutable_rule_description() {
  set_has_rule_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
  return rule_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::release_rule_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
  clear_has_rule_description();
  return rule_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_allocated_rule_description(::std::string* rule_description) {
  if (rule_description != NULL) {
    set_has_rule_description();
  } else {
    clear_has_rule_description();
  }
  rule_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rule_description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kAccountIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}
CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rule_description()) {
    rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&revenue_percentage_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(revenue_percentage_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedCtor() {
  _cached_size_ = 0;
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&revenue_percentage_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(revenue_percentage_));
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedDtor() {
  rule_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::New(::google::protobuf::Arena* arena) const {
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* n = new CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  if (has_rule_description()) {
    GOOGLE_DCHECK(!rule_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*rule_description_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&revenue_percentage_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(revenue_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float revenue_percentage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_revenue_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rule_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rule_description().data(), this->rule_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return false;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rule_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string rule_description = 3;
    if (has_rule_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float revenue_percentage = 2;
    if (has_revenue_percentage()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rule_description();
      rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      revenue_percentage_ = from.revenue_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InternalSwap(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* other) {
  rule_description_.Swap(&other->rule_description_);
  std::swap(account_id_, other->account_id_);
  std::swap(revenue_percentage_, other->revenue_percentage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule

// optional uint32 account_id = 1;
bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.account_id)
  return account_id_;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.account_id)
}

// optional float revenue_percentage = 2;
bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::has_revenue_percentage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_has_revenue_percentage() {
  _has_bits_[0] |= 0x00000004u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_has_revenue_percentage() {
  _has_bits_[0] &= ~0x00000004u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_revenue_percentage() {
  revenue_percentage_ = 0;
  clear_has_revenue_percentage();
}
float CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::revenue_percentage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.revenue_percentage)
  return revenue_percentage_;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_revenue_percentage(float value) {
  set_has_revenue_percentage();
  revenue_percentage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.revenue_percentage)
}

// optional string rule_description = 3;
bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::has_rule_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_has_rule_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_has_rule_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_rule_description() {
  rule_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rule_description();
}
const ::std::string& CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::rule_description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
  return rule_description_.GetNoArena();
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_rule_description(const ::std::string& value) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
}
#if LANG_CXX11
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_rule_description(::std::string&& value) {
  set_has_rule_description();
  rule_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
}
#endif
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_rule_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_rule_description(const char* value, size_t size) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
}
::std::string* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::mutable_rule_description() {
  set_has_rule_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
  return rule_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::release_rule_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
  clear_has_rule_description();
  return rule_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_allocated_rule_description(::std::string* rule_description) {
  if (rule_description != NULL) {
    set_has_rule_description();
  } else {
    clear_has_rule_description();
  }
  rule_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rule_description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorkshop_SetItemPaymentRules_Request::kAppidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kGameitemidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kAssociatedWorkshopFilesFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kPartnerAccountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request)
}
CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request(const CWorkshop_SetItemPaymentRules_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      associated_workshop_files_(from.associated_workshop_files_),
      partner_accounts_(from.partner_accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&gameitemid_) -
    reinterpret_cast<char*>(&appid_) + sizeof(gameitemid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_SetItemPaymentRules_Request)
}

void CWorkshop_SetItemPaymentRules_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&gameitemid_) -
    reinterpret_cast<char*>(&appid_) + sizeof(gameitemid_));
}

CWorkshop_SetItemPaymentRules_Request::~CWorkshop_SetItemPaymentRules_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request::SharedDtor() {
}

void CWorkshop_SetItemPaymentRules_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CWorkshop_SetItemPaymentRules_Request& CWorkshop_SetItemPaymentRules_Request::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CWorkshop_SetItemPaymentRules_Request* CWorkshop_SetItemPaymentRules_Request::New(::google::protobuf::Arena* arena) const {
  CWorkshop_SetItemPaymentRules_Request* n = new CWorkshop_SetItemPaymentRules_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_SetItemPaymentRules_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  associated_workshop_files_.Clear();
  partner_accounts_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&gameitemid_) -
      reinterpret_cast<char*>(&appid_) + sizeof(gameitemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CWorkshop_SetItemPaymentRules_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameitemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gameitemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_associated_workshop_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  return false;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (unsigned int i = 0, n = this->associated_workshop_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->associated_workshop_files(i), output);
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (unsigned int i = 0, n = this->partner_accounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partner_accounts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_SetItemPaymentRules_Request)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (unsigned int i = 0, n = this->associated_workshop_files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->associated_workshop_files(i), deterministic, target);
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (unsigned int i = 0, n = this->partner_accounts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->partner_accounts(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  {
    unsigned int count = this->associated_workshop_files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->associated_workshop_files(i));
    }
  }

  // repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  {
    unsigned int count = this->partner_accounts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partner_accounts(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 gameitemid = 2;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_SetItemPaymentRules_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_SetItemPaymentRules_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_SetItemPaymentRules_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  associated_workshop_files_.MergeFrom(from.associated_workshop_files_);
  partner_accounts_.MergeFrom(from.partner_accounts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gameitemid_ = from.gameitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request::Swap(CWorkshop_SetItemPaymentRules_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Request::InternalSwap(CWorkshop_SetItemPaymentRules_Request* other) {
  associated_workshop_files_.InternalSwap(&other->associated_workshop_files_);
  partner_accounts_.InternalSwap(&other->partner_accounts_);
  std::swap(appid_, other->appid_);
  std::swap(gameitemid_, other->gameitemid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_SetItemPaymentRules_Request

// optional uint32 appid = 1;
bool CWorkshop_SetItemPaymentRules_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CWorkshop_SetItemPaymentRules_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.appid)
  return appid_;
}
void CWorkshop_SetItemPaymentRules_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_SetItemPaymentRules_Request.appid)
}

// optional uint32 gameitemid = 2;
bool CWorkshop_SetItemPaymentRules_Request::has_gameitemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request::set_has_gameitemid() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request::clear_has_gameitemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request::clear_gameitemid() {
  gameitemid_ = 0u;
  clear_has_gameitemid();
}
::google::protobuf::uint32 CWorkshop_SetItemPaymentRules_Request::gameitemid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.gameitemid)
  return gameitemid_;
}
void CWorkshop_SetItemPaymentRules_Request::set_gameitemid(::google::protobuf::uint32 value) {
  set_has_gameitemid();
  gameitemid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CWorkshop_SetItemPaymentRules_Request.gameitemid)
}

// repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
int CWorkshop_SetItemPaymentRules_Request::associated_workshop_files_size() const {
  return associated_workshop_files_.size();
}
void CWorkshop_SetItemPaymentRules_Request::clear_associated_workshop_files() {
  associated_workshop_files_.Clear();
}
const ::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& CWorkshop_SetItemPaymentRules_Request::associated_workshop_files(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return associated_workshop_files_.Get(index);
}
::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request::mutable_associated_workshop_files(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return associated_workshop_files_.Mutable(index);
}
::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request::add_associated_workshop_files() {
  // @@protoc_insertion_point(field_add:proto.dota.CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return associated_workshop_files_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule >*
CWorkshop_SetItemPaymentRules_Request::mutable_associated_workshop_files() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return &associated_workshop_files_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule >&
CWorkshop_SetItemPaymentRules_Request::associated_workshop_files() const {
  // @@protoc_insertion_point(field_list:proto.dota.CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return associated_workshop_files_;
}

// repeated .proto.dota.CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
int CWorkshop_SetItemPaymentRules_Request::partner_accounts_size() const {
  return partner_accounts_.size();
}
void CWorkshop_SetItemPaymentRules_Request::clear_partner_accounts() {
  partner_accounts_.Clear();
}
const ::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& CWorkshop_SetItemPaymentRules_Request::partner_accounts(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return partner_accounts_.Get(index);
}
::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request::mutable_partner_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return partner_accounts_.Mutable(index);
}
::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request::add_partner_accounts() {
  // @@protoc_insertion_point(field_add:proto.dota.CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return partner_accounts_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule >*
CWorkshop_SetItemPaymentRules_Request::mutable_partner_accounts() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return &partner_accounts_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule >&
CWorkshop_SetItemPaymentRules_Request::partner_accounts() const {
  // @@protoc_insertion_point(field_list:proto.dota.CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return partner_accounts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CWorkshop_SetItemPaymentRules_Response)
}
CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response(const CWorkshop_SetItemPaymentRules_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CWorkshop_SetItemPaymentRules_Response)
}

void CWorkshop_SetItemPaymentRules_Response::SharedCtor() {
  _cached_size_ = 0;
}

CWorkshop_SetItemPaymentRules_Response::~CWorkshop_SetItemPaymentRules_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Response::SharedDtor() {
}

void CWorkshop_SetItemPaymentRules_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Response::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CWorkshop_SetItemPaymentRules_Response& CWorkshop_SetItemPaymentRules_Response::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CWorkshop_SetItemPaymentRules_Response* CWorkshop_SetItemPaymentRules_Response::New(::google::protobuf::Arena* arena) const {
  CWorkshop_SetItemPaymentRules_Response* n = new CWorkshop_SetItemPaymentRules_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_SetItemPaymentRules_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CWorkshop_SetItemPaymentRules_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  return false;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CWorkshop_SetItemPaymentRules_Response)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_SetItemPaymentRules_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CWorkshop_SetItemPaymentRules_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CWorkshop_SetItemPaymentRules_Response)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CWorkshop_SetItemPaymentRules_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Response::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Response::Swap(CWorkshop_SetItemPaymentRules_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Response::InternalSwap(CWorkshop_SetItemPaymentRules_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Response::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_SetItemPaymentRules_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_PostGameDataFrame_Request::kAppidFieldNumber;
const int CBroadcast_PostGameDataFrame_Request::kSteamidFieldNumber;
const int CBroadcast_PostGameDataFrame_Request::kBroadcastIdFieldNumber;
const int CBroadcast_PostGameDataFrame_Request::kFrameDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_PostGameDataFrame_Request::CBroadcast_PostGameDataFrame_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CBroadcast_PostGameDataFrame_Request)
}
CBroadcast_PostGameDataFrame_Request::CBroadcast_PostGameDataFrame_Request(const CBroadcast_PostGameDataFrame_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_data()) {
    frame_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_data_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CBroadcast_PostGameDataFrame_Request)
}

void CBroadcast_PostGameDataFrame_Request::SharedCtor() {
  _cached_size_ = 0;
  frame_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CBroadcast_PostGameDataFrame_Request::~CBroadcast_PostGameDataFrame_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CBroadcast_PostGameDataFrame_Request)
  SharedDtor();
}

void CBroadcast_PostGameDataFrame_Request::SharedDtor() {
  frame_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostGameDataFrame_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_PostGameDataFrame_Request::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_PostGameDataFrame_Request& CBroadcast_PostGameDataFrame_Request::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_PostGameDataFrame_Request* CBroadcast_PostGameDataFrame_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_PostGameDataFrame_Request* n = new CBroadcast_PostGameDataFrame_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_PostGameDataFrame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  if (has_frame_data()) {
    GOOGLE_DCHECK(!frame_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*frame_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_PostGameDataFrame_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes frame_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CBroadcast_PostGameDataFrame_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CBroadcast_PostGameDataFrame_Request)
  return false;
#undef DO_
}

void CBroadcast_PostGameDataFrame_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->broadcast_id(), output);
  }

  // optional bytes frame_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->frame_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CBroadcast_PostGameDataFrame_Request)
}

::google::protobuf::uint8* CBroadcast_PostGameDataFrame_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->broadcast_id(), target);
  }

  // optional bytes frame_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->frame_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CBroadcast_PostGameDataFrame_Request)
  return target;
}

size_t CBroadcast_PostGameDataFrame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes frame_data = 4;
    if (has_frame_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame_data());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 3;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_PostGameDataFrame_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_PostGameDataFrame_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_PostGameDataFrame_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CBroadcast_PostGameDataFrame_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CBroadcast_PostGameDataFrame_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_PostGameDataFrame_Request::MergeFrom(const CBroadcast_PostGameDataFrame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_frame_data();
      frame_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_PostGameDataFrame_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostGameDataFrame_Request::CopyFrom(const CBroadcast_PostGameDataFrame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CBroadcast_PostGameDataFrame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostGameDataFrame_Request::IsInitialized() const {
  return true;
}

void CBroadcast_PostGameDataFrame_Request::Swap(CBroadcast_PostGameDataFrame_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_PostGameDataFrame_Request::InternalSwap(CBroadcast_PostGameDataFrame_Request* other) {
  frame_data_.Swap(&other->frame_data_);
  std::swap(steamid_, other->steamid_);
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_PostGameDataFrame_Request::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_PostGameDataFrame_Request

// optional uint32 appid = 1;
bool CBroadcast_PostGameDataFrame_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_PostGameDataFrame_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_PostGameDataFrame_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_PostGameDataFrame_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CBroadcast_PostGameDataFrame_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CBroadcast_PostGameDataFrame_Request.appid)
  return appid_;
}
void CBroadcast_PostGameDataFrame_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CBroadcast_PostGameDataFrame_Request.appid)
}

// optional fixed64 steamid = 2;
bool CBroadcast_PostGameDataFrame_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_PostGameDataFrame_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_PostGameDataFrame_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_PostGameDataFrame_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CBroadcast_PostGameDataFrame_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CBroadcast_PostGameDataFrame_Request.steamid)
  return steamid_;
}
void CBroadcast_PostGameDataFrame_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CBroadcast_PostGameDataFrame_Request.steamid)
}

// optional fixed64 broadcast_id = 3;
bool CBroadcast_PostGameDataFrame_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_PostGameDataFrame_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_PostGameDataFrame_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_PostGameDataFrame_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_PostGameDataFrame_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CBroadcast_PostGameDataFrame_Request.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_PostGameDataFrame_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CBroadcast_PostGameDataFrame_Request.broadcast_id)
}

// optional bytes frame_data = 4;
bool CBroadcast_PostGameDataFrame_Request::has_frame_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_PostGameDataFrame_Request::set_has_frame_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_PostGameDataFrame_Request::clear_has_frame_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_PostGameDataFrame_Request::clear_frame_data() {
  frame_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_data();
}
const ::std::string& CBroadcast_PostGameDataFrame_Request::frame_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CBroadcast_PostGameDataFrame_Request.frame_data)
  return frame_data_.GetNoArena();
}
void CBroadcast_PostGameDataFrame_Request::set_frame_data(const ::std::string& value) {
  set_has_frame_data();
  frame_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CBroadcast_PostGameDataFrame_Request.frame_data)
}
#if LANG_CXX11
void CBroadcast_PostGameDataFrame_Request::set_frame_data(::std::string&& value) {
  set_has_frame_data();
  frame_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CBroadcast_PostGameDataFrame_Request.frame_data)
}
#endif
void CBroadcast_PostGameDataFrame_Request::set_frame_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_data();
  frame_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CBroadcast_PostGameDataFrame_Request.frame_data)
}
void CBroadcast_PostGameDataFrame_Request::set_frame_data(const void* value, size_t size) {
  set_has_frame_data();
  frame_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CBroadcast_PostGameDataFrame_Request.frame_data)
}
::std::string* CBroadcast_PostGameDataFrame_Request::mutable_frame_data() {
  set_has_frame_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CBroadcast_PostGameDataFrame_Request.frame_data)
  return frame_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_PostGameDataFrame_Request::release_frame_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CBroadcast_PostGameDataFrame_Request.frame_data)
  clear_has_frame_data();
  return frame_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_PostGameDataFrame_Request::set_allocated_frame_data(::std::string* frame_data) {
  if (frame_data != NULL) {
    set_has_frame_data();
  } else {
    clear_has_frame_data();
  }
  frame_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CBroadcast_PostGameDataFrame_Request.frame_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSerializedSOCache_TypeCache::kTypeFieldNumber;
const int CMsgSerializedSOCache_TypeCache::kObjectsFieldNumber;
const int CMsgSerializedSOCache_TypeCache::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSerializedSOCache_TypeCache::CMsgSerializedSOCache_TypeCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSerializedSOCache.TypeCache)
}
CMsgSerializedSOCache_TypeCache::CMsgSerializedSOCache_TypeCache(const CMsgSerializedSOCache_TypeCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&type_) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSerializedSOCache.TypeCache)
}

void CMsgSerializedSOCache_TypeCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&type_) + sizeof(service_id_));
}

CMsgSerializedSOCache_TypeCache::~CMsgSerializedSOCache_TypeCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSerializedSOCache.TypeCache)
  SharedDtor();
}

void CMsgSerializedSOCache_TypeCache::SharedDtor() {
}

void CMsgSerializedSOCache_TypeCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSerializedSOCache_TypeCache::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSerializedSOCache_TypeCache& CMsgSerializedSOCache_TypeCache::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSerializedSOCache_TypeCache* CMsgSerializedSOCache_TypeCache::New(::google::protobuf::Arena* arena) const {
  CMsgSerializedSOCache_TypeCache* n = new CMsgSerializedSOCache_TypeCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSerializedSOCache_TypeCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  objects_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&type_) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSerializedSOCache_TypeCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes objects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSerializedSOCache.TypeCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSerializedSOCache.TypeCache)
  return false;
#undef DO_
}

void CMsgSerializedSOCache_TypeCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated bytes objects = 2;
  for (int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->objects(i), output);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSerializedSOCache.TypeCache)
}

::google::protobuf::uint8* CMsgSerializedSOCache_TypeCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated bytes objects = 2;
  for (int i = 0, n = this->objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->objects(i), target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSerializedSOCache.TypeCache)
  return target;
}

size_t CMsgSerializedSOCache_TypeCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes objects = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->objects_size());
  for (int i = 0, n = this->objects_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->objects(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSerializedSOCache_TypeCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache_TypeCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSerializedSOCache_TypeCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSerializedSOCache.TypeCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSerializedSOCache.TypeCache)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache_TypeCache::MergeFrom(const CMsgSerializedSOCache_TypeCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache_TypeCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache_TypeCache::CopyFrom(const CMsgSerializedSOCache_TypeCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSerializedSOCache.TypeCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache_TypeCache::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache_TypeCache::Swap(CMsgSerializedSOCache_TypeCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSerializedSOCache_TypeCache::InternalSwap(CMsgSerializedSOCache_TypeCache* other) {
  objects_.InternalSwap(&other->objects_);
  std::swap(type_, other->type_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSerializedSOCache_TypeCache::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSerializedSOCache_TypeCache

// optional uint32 type = 1;
bool CMsgSerializedSOCache_TypeCache::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSerializedSOCache_TypeCache::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSerializedSOCache_TypeCache::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSerializedSOCache_TypeCache::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CMsgSerializedSOCache_TypeCache::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.TypeCache.type)
  return type_;
}
void CMsgSerializedSOCache_TypeCache::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.TypeCache.type)
}

// repeated bytes objects = 2;
int CMsgSerializedSOCache_TypeCache::objects_size() const {
  return objects_.size();
}
void CMsgSerializedSOCache_TypeCache::clear_objects() {
  objects_.Clear();
}
const ::std::string& CMsgSerializedSOCache_TypeCache::objects(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
  return objects_.Get(index);
}
::std::string* CMsgSerializedSOCache_TypeCache::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
  return objects_.Mutable(index);
}
void CMsgSerializedSOCache_TypeCache::set_objects(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
  objects_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgSerializedSOCache_TypeCache::set_objects(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
  objects_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgSerializedSOCache_TypeCache::set_objects(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  objects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
}
void CMsgSerializedSOCache_TypeCache::set_objects(int index, const void* value, size_t size) {
  objects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
}
::std::string* CMsgSerializedSOCache_TypeCache::add_objects() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
  return objects_.Add();
}
void CMsgSerializedSOCache_TypeCache::add_objects(const ::std::string& value) {
  objects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
}
#if LANG_CXX11
void CMsgSerializedSOCache_TypeCache::add_objects(::std::string&& value) {
  objects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
}
#endif
void CMsgSerializedSOCache_TypeCache::add_objects(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  objects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
}
void CMsgSerializedSOCache_TypeCache::add_objects(const void* value, size_t size) {
  objects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgSerializedSOCache_TypeCache::objects() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
  return objects_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgSerializedSOCache_TypeCache::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSerializedSOCache.TypeCache.objects)
  return &objects_;
}

// optional uint32 service_id = 3;
bool CMsgSerializedSOCache_TypeCache::has_service_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSerializedSOCache_TypeCache::set_has_service_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSerializedSOCache_TypeCache::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSerializedSOCache_TypeCache::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 CMsgSerializedSOCache_TypeCache::service_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.TypeCache.service_id)
  return service_id_;
}
void CMsgSerializedSOCache_TypeCache::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.TypeCache.service_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSerializedSOCache_Cache_Version::kServiceFieldNumber;
const int CMsgSerializedSOCache_Cache_Version::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSerializedSOCache_Cache_Version::CMsgSerializedSOCache_Cache_Version()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSerializedSOCache.Cache.Version)
}
CMsgSerializedSOCache_Cache_Version::CMsgSerializedSOCache_Cache_Version(const CMsgSerializedSOCache_Cache_Version& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&service_) -
    reinterpret_cast<char*>(&version_) + sizeof(service_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSerializedSOCache.Cache.Version)
}

void CMsgSerializedSOCache_Cache_Version::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, reinterpret_cast<char*>(&service_) -
    reinterpret_cast<char*>(&version_) + sizeof(service_));
}

CMsgSerializedSOCache_Cache_Version::~CMsgSerializedSOCache_Cache_Version() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSerializedSOCache.Cache.Version)
  SharedDtor();
}

void CMsgSerializedSOCache_Cache_Version::SharedDtor() {
}

void CMsgSerializedSOCache_Cache_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSerializedSOCache_Cache_Version::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSerializedSOCache_Cache_Version& CMsgSerializedSOCache_Cache_Version::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSerializedSOCache_Cache_Version* CMsgSerializedSOCache_Cache_Version::New(::google::protobuf::Arena* arena) const {
  CMsgSerializedSOCache_Cache_Version* n = new CMsgSerializedSOCache_Cache_Version;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSerializedSOCache_Cache_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&service_) -
      reinterpret_cast<char*>(&version_) + sizeof(service_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSerializedSOCache_Cache_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_service();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSerializedSOCache.Cache.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSerializedSOCache.Cache.Version)
  return false;
#undef DO_
}

void CMsgSerializedSOCache_Cache_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service(), output);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSerializedSOCache.Cache.Version)
}

::google::protobuf::uint8* CMsgSerializedSOCache_Cache_Version::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service(), target);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSerializedSOCache.Cache.Version)
  return target;
}

size_t CMsgSerializedSOCache_Cache_Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional uint32 service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSerializedSOCache_Cache_Version::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache_Cache_Version* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSerializedSOCache_Cache_Version>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSerializedSOCache.Cache.Version)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSerializedSOCache.Cache.Version)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache_Cache_Version::MergeFrom(const CMsgSerializedSOCache_Cache_Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_ = from.service_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache_Cache_Version::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache_Cache_Version::CopyFrom(const CMsgSerializedSOCache_Cache_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSerializedSOCache.Cache.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache_Cache_Version::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache_Cache_Version::Swap(CMsgSerializedSOCache_Cache_Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSerializedSOCache_Cache_Version::InternalSwap(CMsgSerializedSOCache_Cache_Version* other) {
  std::swap(version_, other->version_);
  std::swap(service_, other->service_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSerializedSOCache_Cache_Version::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSerializedSOCache_Cache_Version

// optional uint32 service = 1;
bool CMsgSerializedSOCache_Cache_Version::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSerializedSOCache_Cache_Version::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSerializedSOCache_Cache_Version::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSerializedSOCache_Cache_Version::clear_service() {
  service_ = 0u;
  clear_has_service();
}
::google::protobuf::uint32 CMsgSerializedSOCache_Cache_Version::service() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.Cache.Version.service)
  return service_;
}
void CMsgSerializedSOCache_Cache_Version::set_service(::google::protobuf::uint32 value) {
  set_has_service();
  service_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.Cache.Version.service)
}

// optional uint64 version = 2;
bool CMsgSerializedSOCache_Cache_Version::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSerializedSOCache_Cache_Version::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSerializedSOCache_Cache_Version::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSerializedSOCache_Cache_Version::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 CMsgSerializedSOCache_Cache_Version::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.Cache.Version.version)
  return version_;
}
void CMsgSerializedSOCache_Cache_Version::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.Cache.Version.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSerializedSOCache_Cache::kTypeFieldNumber;
const int CMsgSerializedSOCache_Cache::kIdFieldNumber;
const int CMsgSerializedSOCache_Cache::kVersionsFieldNumber;
const int CMsgSerializedSOCache_Cache::kTypeCachesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSerializedSOCache_Cache::CMsgSerializedSOCache_Cache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSerializedSOCache.Cache)
}
CMsgSerializedSOCache_Cache::CMsgSerializedSOCache_Cache(const CMsgSerializedSOCache_Cache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      versions_(from.versions_),
      type_caches_(from.type_caches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSerializedSOCache.Cache)
}

void CMsgSerializedSOCache_Cache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
}

CMsgSerializedSOCache_Cache::~CMsgSerializedSOCache_Cache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSerializedSOCache.Cache)
  SharedDtor();
}

void CMsgSerializedSOCache_Cache::SharedDtor() {
}

void CMsgSerializedSOCache_Cache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSerializedSOCache_Cache::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSerializedSOCache_Cache& CMsgSerializedSOCache_Cache::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSerializedSOCache_Cache* CMsgSerializedSOCache_Cache::New(::google::protobuf::Arena* arena) const {
  CMsgSerializedSOCache_Cache* n = new CMsgSerializedSOCache_Cache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSerializedSOCache_Cache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSerializedSOCache.Cache)
  versions_.Clear();
  type_caches_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSerializedSOCache_Cache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSerializedSOCache.Cache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_type_caches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSerializedSOCache.Cache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSerializedSOCache.Cache)
  return false;
#undef DO_
}

void CMsgSerializedSOCache_Cache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSerializedSOCache.Cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
  for (unsigned int i = 0, n = this->versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->versions(i), output);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
  for (unsigned int i = 0, n = this->type_caches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->type_caches(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSerializedSOCache.Cache)
}

::google::protobuf::uint8* CMsgSerializedSOCache_Cache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSerializedSOCache.Cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
  for (unsigned int i = 0, n = this->versions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->versions(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
  for (unsigned int i = 0, n = this->type_caches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->type_caches(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSerializedSOCache.Cache)
  return target;
}

size_t CMsgSerializedSOCache_Cache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSerializedSOCache.Cache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
  {
    unsigned int count = this->versions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->versions(i));
    }
  }

  // repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
  {
    unsigned int count = this->type_caches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_caches(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSerializedSOCache_Cache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSerializedSOCache.Cache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache_Cache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSerializedSOCache_Cache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSerializedSOCache.Cache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSerializedSOCache.Cache)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache_Cache::MergeFrom(const CMsgSerializedSOCache_Cache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSerializedSOCache.Cache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  type_caches_.MergeFrom(from.type_caches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache_Cache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSerializedSOCache.Cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache_Cache::CopyFrom(const CMsgSerializedSOCache_Cache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSerializedSOCache.Cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache_Cache::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache_Cache::Swap(CMsgSerializedSOCache_Cache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSerializedSOCache_Cache::InternalSwap(CMsgSerializedSOCache_Cache* other) {
  versions_.InternalSwap(&other->versions_);
  type_caches_.InternalSwap(&other->type_caches_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSerializedSOCache_Cache::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSerializedSOCache_Cache

// optional uint32 type = 1;
bool CMsgSerializedSOCache_Cache::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSerializedSOCache_Cache::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSerializedSOCache_Cache::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSerializedSOCache_Cache::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CMsgSerializedSOCache_Cache::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.Cache.type)
  return type_;
}
void CMsgSerializedSOCache_Cache::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.Cache.type)
}

// optional uint64 id = 2;
bool CMsgSerializedSOCache_Cache::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSerializedSOCache_Cache::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSerializedSOCache_Cache::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSerializedSOCache_Cache::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CMsgSerializedSOCache_Cache::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.Cache.id)
  return id_;
}
void CMsgSerializedSOCache_Cache::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.Cache.id)
}

// repeated .proto.dota.CMsgSerializedSOCache.Cache.Version versions = 3;
int CMsgSerializedSOCache_Cache::versions_size() const {
  return versions_.size();
}
void CMsgSerializedSOCache_Cache::clear_versions() {
  versions_.Clear();
}
const ::proto::dota::CMsgSerializedSOCache_Cache_Version& CMsgSerializedSOCache_Cache::versions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.Cache.versions)
  return versions_.Get(index);
}
::proto::dota::CMsgSerializedSOCache_Cache_Version* CMsgSerializedSOCache_Cache::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSerializedSOCache.Cache.versions)
  return versions_.Mutable(index);
}
::proto::dota::CMsgSerializedSOCache_Cache_Version* CMsgSerializedSOCache_Cache::add_versions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSerializedSOCache.Cache.versions)
  return versions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSerializedSOCache_Cache_Version >*
CMsgSerializedSOCache_Cache::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSerializedSOCache.Cache.versions)
  return &versions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSerializedSOCache_Cache_Version >&
CMsgSerializedSOCache_Cache::versions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSerializedSOCache.Cache.versions)
  return versions_;
}

// repeated .proto.dota.CMsgSerializedSOCache.TypeCache type_caches = 4;
int CMsgSerializedSOCache_Cache::type_caches_size() const {
  return type_caches_.size();
}
void CMsgSerializedSOCache_Cache::clear_type_caches() {
  type_caches_.Clear();
}
const ::proto::dota::CMsgSerializedSOCache_TypeCache& CMsgSerializedSOCache_Cache::type_caches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.Cache.type_caches)
  return type_caches_.Get(index);
}
::proto::dota::CMsgSerializedSOCache_TypeCache* CMsgSerializedSOCache_Cache::mutable_type_caches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSerializedSOCache.Cache.type_caches)
  return type_caches_.Mutable(index);
}
::proto::dota::CMsgSerializedSOCache_TypeCache* CMsgSerializedSOCache_Cache::add_type_caches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSerializedSOCache.Cache.type_caches)
  return type_caches_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSerializedSOCache_TypeCache >*
CMsgSerializedSOCache_Cache::mutable_type_caches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSerializedSOCache.Cache.type_caches)
  return &type_caches_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSerializedSOCache_TypeCache >&
CMsgSerializedSOCache_Cache::type_caches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSerializedSOCache.Cache.type_caches)
  return type_caches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSerializedSOCache::kFileVersionFieldNumber;
const int CMsgSerializedSOCache::kCachesFieldNumber;
const int CMsgSerializedSOCache::kGcSocacheFileVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSerializedSOCache::CMsgSerializedSOCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSerializedSOCache)
}
CMsgSerializedSOCache::CMsgSerializedSOCache(const CMsgSerializedSOCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      caches_(from.caches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_version_, &from.file_version_,
    reinterpret_cast<char*>(&gc_socache_file_version_) -
    reinterpret_cast<char*>(&file_version_) + sizeof(gc_socache_file_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSerializedSOCache)
}

void CMsgSerializedSOCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&file_version_, 0, reinterpret_cast<char*>(&gc_socache_file_version_) -
    reinterpret_cast<char*>(&file_version_) + sizeof(gc_socache_file_version_));
}

CMsgSerializedSOCache::~CMsgSerializedSOCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSerializedSOCache)
  SharedDtor();
}

void CMsgSerializedSOCache::SharedDtor() {
}

void CMsgSerializedSOCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSerializedSOCache::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSerializedSOCache& CMsgSerializedSOCache::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSerializedSOCache* CMsgSerializedSOCache::New(::google::protobuf::Arena* arena) const {
  CMsgSerializedSOCache* n = new CMsgSerializedSOCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSerializedSOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSerializedSOCache)
  caches_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&file_version_, 0, reinterpret_cast<char*>(&gc_socache_file_version_) -
      reinterpret_cast<char*>(&file_version_) + sizeof(gc_socache_file_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSerializedSOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSerializedSOCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 file_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_file_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_caches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gc_socache_file_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gc_socache_file_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_socache_file_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSerializedSOCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSerializedSOCache)
  return false;
#undef DO_
}

void CMsgSerializedSOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSerializedSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 file_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->file_version(), output);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
  for (unsigned int i = 0, n = this->caches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->caches(i), output);
  }

  // optional uint32 gc_socache_file_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gc_socache_file_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSerializedSOCache)
}

::google::protobuf::uint8* CMsgSerializedSOCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSerializedSOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 file_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_version(), target);
  }

  // repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
  for (unsigned int i = 0, n = this->caches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->caches(i), deterministic, target);
  }

  // optional uint32 gc_socache_file_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gc_socache_file_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSerializedSOCache)
  return target;
}

size_t CMsgSerializedSOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSerializedSOCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
  {
    unsigned int count = this->caches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caches(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 file_version = 1;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_version());
    }

    // optional uint32 gc_socache_file_version = 3;
    if (has_gc_socache_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_socache_file_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSerializedSOCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSerializedSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSerializedSOCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSerializedSOCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSerializedSOCache)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache::MergeFrom(const CMsgSerializedSOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSerializedSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  caches_.MergeFrom(from.caches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      file_version_ = from.file_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      gc_socache_file_version_ = from.gc_socache_file_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSerializedSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache::CopyFrom(const CMsgSerializedSOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSerializedSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache::Swap(CMsgSerializedSOCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSerializedSOCache::InternalSwap(CMsgSerializedSOCache* other) {
  caches_.InternalSwap(&other->caches_);
  std::swap(file_version_, other->file_version_);
  std::swap(gc_socache_file_version_, other->gc_socache_file_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSerializedSOCache::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSerializedSOCache

// optional uint32 file_version = 1;
bool CMsgSerializedSOCache::has_file_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSerializedSOCache::set_has_file_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSerializedSOCache::clear_has_file_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSerializedSOCache::clear_file_version() {
  file_version_ = 0u;
  clear_has_file_version();
}
::google::protobuf::uint32 CMsgSerializedSOCache::file_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.file_version)
  return file_version_;
}
void CMsgSerializedSOCache::set_file_version(::google::protobuf::uint32 value) {
  set_has_file_version();
  file_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.file_version)
}

// repeated .proto.dota.CMsgSerializedSOCache.Cache caches = 2;
int CMsgSerializedSOCache::caches_size() const {
  return caches_.size();
}
void CMsgSerializedSOCache::clear_caches() {
  caches_.Clear();
}
const ::proto::dota::CMsgSerializedSOCache_Cache& CMsgSerializedSOCache::caches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.caches)
  return caches_.Get(index);
}
::proto::dota::CMsgSerializedSOCache_Cache* CMsgSerializedSOCache::mutable_caches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSerializedSOCache.caches)
  return caches_.Mutable(index);
}
::proto::dota::CMsgSerializedSOCache_Cache* CMsgSerializedSOCache::add_caches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSerializedSOCache.caches)
  return caches_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSerializedSOCache_Cache >*
CMsgSerializedSOCache::mutable_caches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSerializedSOCache.caches)
  return &caches_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSerializedSOCache_Cache >&
CMsgSerializedSOCache::caches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSerializedSOCache.caches)
  return caches_;
}

// optional uint32 gc_socache_file_version = 3;
bool CMsgSerializedSOCache::has_gc_socache_file_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSerializedSOCache::set_has_gc_socache_file_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSerializedSOCache::clear_has_gc_socache_file_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSerializedSOCache::clear_gc_socache_file_version() {
  gc_socache_file_version_ = 0u;
  clear_has_gc_socache_file_version();
}
::google::protobuf::uint32 CMsgSerializedSOCache::gc_socache_file_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSerializedSOCache.gc_socache_file_version)
  return gc_socache_file_version_;
}
void CMsgSerializedSOCache::set_gc_socache_file_version(::google::protobuf::uint32 value) {
  set_has_gc_socache_file_version();
  gc_socache_file_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSerializedSOCache.gc_socache_file_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPollConvarRequest::kConvarNameFieldNumber;
const int CMsgGCToClientPollConvarRequest::kPollIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPollConvarRequest::CMsgGCToClientPollConvarRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPollConvarRequest)
}
CMsgGCToClientPollConvarRequest::CMsgGCToClientPollConvarRequest(const CMsgGCToClientPollConvarRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  convar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_convar_name()) {
    convar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convar_name_);
  }
  poll_id_ = from.poll_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPollConvarRequest)
}

void CMsgGCToClientPollConvarRequest::SharedCtor() {
  _cached_size_ = 0;
  convar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poll_id_ = 0u;
}

CMsgGCToClientPollConvarRequest::~CMsgGCToClientPollConvarRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPollConvarRequest)
  SharedDtor();
}

void CMsgGCToClientPollConvarRequest::SharedDtor() {
  convar_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPollConvarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPollConvarRequest::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientPollConvarRequest& CMsgGCToClientPollConvarRequest::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientPollConvarRequest* CMsgGCToClientPollConvarRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientPollConvarRequest* n = new CMsgGCToClientPollConvarRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientPollConvarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPollConvarRequest)
  if (has_convar_name()) {
    GOOGLE_DCHECK(!convar_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*convar_name_.UnsafeRawStringPointer())->clear();
  }
  poll_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientPollConvarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPollConvarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string convar_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_convar_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->convar_name().data(), this->convar_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPollConvarRequest.convar_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 poll_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_poll_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPollConvarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPollConvarRequest)
  return false;
#undef DO_
}

void CMsgGCToClientPollConvarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPollConvarRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string convar_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->convar_name().data(), this->convar_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollConvarRequest.convar_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->convar_name(), output);
  }

  // optional uint32 poll_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->poll_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPollConvarRequest)
}

::google::protobuf::uint8* CMsgGCToClientPollConvarRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPollConvarRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string convar_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->convar_name().data(), this->convar_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollConvarRequest.convar_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->convar_name(), target);
  }

  // optional uint32 poll_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->poll_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPollConvarRequest)
  return target;
}

size_t CMsgGCToClientPollConvarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPollConvarRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string convar_name = 1;
    if (has_convar_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->convar_name());
    }

    // optional uint32 poll_id = 2;
    if (has_poll_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPollConvarRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPollConvarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollConvarRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientPollConvarRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPollConvarRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPollConvarRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollConvarRequest::MergeFrom(const CMsgGCToClientPollConvarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPollConvarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_convar_name();
      convar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convar_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      poll_id_ = from.poll_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollConvarRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPollConvarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollConvarRequest::CopyFrom(const CMsgGCToClientPollConvarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPollConvarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollConvarRequest::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollConvarRequest::Swap(CMsgGCToClientPollConvarRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPollConvarRequest::InternalSwap(CMsgGCToClientPollConvarRequest* other) {
  convar_name_.Swap(&other->convar_name_);
  std::swap(poll_id_, other->poll_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientPollConvarRequest::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientPollConvarRequest

// optional string convar_name = 1;
bool CMsgGCToClientPollConvarRequest::has_convar_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientPollConvarRequest::set_has_convar_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientPollConvarRequest::clear_has_convar_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientPollConvarRequest::clear_convar_name() {
  convar_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_convar_name();
}
const ::std::string& CMsgGCToClientPollConvarRequest::convar_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPollConvarRequest.convar_name)
  return convar_name_.GetNoArena();
}
void CMsgGCToClientPollConvarRequest::set_convar_name(const ::std::string& value) {
  set_has_convar_name();
  convar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPollConvarRequest.convar_name)
}
#if LANG_CXX11
void CMsgGCToClientPollConvarRequest::set_convar_name(::std::string&& value) {
  set_has_convar_name();
  convar_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPollConvarRequest.convar_name)
}
#endif
void CMsgGCToClientPollConvarRequest::set_convar_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_convar_name();
  convar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPollConvarRequest.convar_name)
}
void CMsgGCToClientPollConvarRequest::set_convar_name(const char* value, size_t size) {
  set_has_convar_name();
  convar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPollConvarRequest.convar_name)
}
::std::string* CMsgGCToClientPollConvarRequest::mutable_convar_name() {
  set_has_convar_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPollConvarRequest.convar_name)
  return convar_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientPollConvarRequest::release_convar_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPollConvarRequest.convar_name)
  clear_has_convar_name();
  return convar_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientPollConvarRequest::set_allocated_convar_name(::std::string* convar_name) {
  if (convar_name != NULL) {
    set_has_convar_name();
  } else {
    clear_has_convar_name();
  }
  convar_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), convar_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPollConvarRequest.convar_name)
}

// optional uint32 poll_id = 2;
bool CMsgGCToClientPollConvarRequest::has_poll_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientPollConvarRequest::set_has_poll_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientPollConvarRequest::clear_has_poll_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientPollConvarRequest::clear_poll_id() {
  poll_id_ = 0u;
  clear_has_poll_id();
}
::google::protobuf::uint32 CMsgGCToClientPollConvarRequest::poll_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPollConvarRequest.poll_id)
  return poll_id_;
}
void CMsgGCToClientPollConvarRequest::set_poll_id(::google::protobuf::uint32 value) {
  set_has_poll_id();
  poll_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPollConvarRequest.poll_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPollConvarResponse::kPollIdFieldNumber;
const int CMsgGCToClientPollConvarResponse::kConvarValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPollConvarResponse::CMsgGCToClientPollConvarResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPollConvarResponse)
}
CMsgGCToClientPollConvarResponse::CMsgGCToClientPollConvarResponse(const CMsgGCToClientPollConvarResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  convar_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_convar_value()) {
    convar_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convar_value_);
  }
  poll_id_ = from.poll_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPollConvarResponse)
}

void CMsgGCToClientPollConvarResponse::SharedCtor() {
  _cached_size_ = 0;
  convar_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poll_id_ = 0u;
}

CMsgGCToClientPollConvarResponse::~CMsgGCToClientPollConvarResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPollConvarResponse)
  SharedDtor();
}

void CMsgGCToClientPollConvarResponse::SharedDtor() {
  convar_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPollConvarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPollConvarResponse::descriptor() {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientPollConvarResponse& CMsgGCToClientPollConvarResponse::default_instance() {
  protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientPollConvarResponse* CMsgGCToClientPollConvarResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientPollConvarResponse* n = new CMsgGCToClientPollConvarResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientPollConvarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPollConvarResponse)
  if (has_convar_value()) {
    GOOGLE_DCHECK(!convar_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*convar_value_.UnsafeRawStringPointer())->clear();
  }
  poll_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientPollConvarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPollConvarResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 poll_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_poll_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string convar_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_convar_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->convar_value().data(), this->convar_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPollConvarResponse.convar_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPollConvarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPollConvarResponse)
  return false;
#undef DO_
}

void CMsgGCToClientPollConvarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPollConvarResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->poll_id(), output);
  }

  // optional string convar_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->convar_value().data(), this->convar_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollConvarResponse.convar_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->convar_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPollConvarResponse)
}

::google::protobuf::uint8* CMsgGCToClientPollConvarResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPollConvarResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->poll_id(), target);
  }

  // optional string convar_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->convar_value().data(), this->convar_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollConvarResponse.convar_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->convar_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPollConvarResponse)
  return target;
}

size_t CMsgGCToClientPollConvarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPollConvarResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string convar_value = 2;
    if (has_convar_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->convar_value());
    }

    // optional uint32 poll_id = 1;
    if (has_poll_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPollConvarResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPollConvarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollConvarResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientPollConvarResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPollConvarResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPollConvarResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollConvarResponse::MergeFrom(const CMsgGCToClientPollConvarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPollConvarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_convar_value();
      convar_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.convar_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      poll_id_ = from.poll_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollConvarResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPollConvarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollConvarResponse::CopyFrom(const CMsgGCToClientPollConvarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPollConvarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollConvarResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollConvarResponse::Swap(CMsgGCToClientPollConvarResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPollConvarResponse::InternalSwap(CMsgGCToClientPollConvarResponse* other) {
  convar_value_.Swap(&other->convar_value_);
  std::swap(poll_id_, other->poll_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientPollConvarResponse::GetMetadata() const {
  protobuf_gcsdk_5fgcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsdk_5fgcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientPollConvarResponse

// optional uint32 poll_id = 1;
bool CMsgGCToClientPollConvarResponse::has_poll_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientPollConvarResponse::set_has_poll_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientPollConvarResponse::clear_has_poll_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientPollConvarResponse::clear_poll_id() {
  poll_id_ = 0u;
  clear_has_poll_id();
}
::google::protobuf::uint32 CMsgGCToClientPollConvarResponse::poll_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPollConvarResponse.poll_id)
  return poll_id_;
}
void CMsgGCToClientPollConvarResponse::set_poll_id(::google::protobuf::uint32 value) {
  set_has_poll_id();
  poll_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPollConvarResponse.poll_id)
}

// optional string convar_value = 2;
bool CMsgGCToClientPollConvarResponse::has_convar_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientPollConvarResponse::set_has_convar_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientPollConvarResponse::clear_has_convar_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientPollConvarResponse::clear_convar_value() {
  convar_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_convar_value();
}
const ::std::string& CMsgGCToClientPollConvarResponse::convar_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPollConvarResponse.convar_value)
  return convar_value_.GetNoArena();
}
void CMsgGCToClientPollConvarResponse::set_convar_value(const ::std::string& value) {
  set_has_convar_value();
  convar_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPollConvarResponse.convar_value)
}
#if LANG_CXX11
void CMsgGCToClientPollConvarResponse::set_convar_value(::std::string&& value) {
  set_has_convar_value();
  convar_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPollConvarResponse.convar_value)
}
#endif
void CMsgGCToClientPollConvarResponse::set_convar_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_convar_value();
  convar_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPollConvarResponse.convar_value)
}
void CMsgGCToClientPollConvarResponse::set_convar_value(const char* value, size_t size) {
  set_has_convar_value();
  convar_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPollConvarResponse.convar_value)
}
::std::string* CMsgGCToClientPollConvarResponse::mutable_convar_value() {
  set_has_convar_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPollConvarResponse.convar_value)
  return convar_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientPollConvarResponse::release_convar_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPollConvarResponse.convar_value)
  clear_has_convar_value();
  return convar_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientPollConvarResponse::set_allocated_convar_value(::std::string* convar_value) {
  if (convar_value != NULL) {
    set_has_convar_value();
  } else {
    clear_has_convar_value();
  }
  convar_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), convar_value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPollConvarResponse.convar_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
