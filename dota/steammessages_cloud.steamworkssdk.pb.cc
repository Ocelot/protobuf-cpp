// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamworkssdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_cloud.steamworkssdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CCloud_GetUploadServerInfo_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetUploadServerInfo_Request> {
} _CCloud_GetUploadServerInfo_Request_default_instance_;
class CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetUploadServerInfo_Response> {
} _CCloud_GetUploadServerInfo_Response_default_instance_;
class CCloud_GetFileDetails_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetFileDetails_Request> {
} _CCloud_GetFileDetails_Request_default_instance_;
class CCloud_UserFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_UserFile> {
} _CCloud_UserFile_default_instance_;
class CCloud_GetFileDetails_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetFileDetails_Response> {
} _CCloud_GetFileDetails_Response_default_instance_;
class CCloud_EnumerateUserFiles_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserFiles_Request> {
} _CCloud_EnumerateUserFiles_Request_default_instance_;
class CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserFiles_Response> {
} _CCloud_EnumerateUserFiles_Response_default_instance_;
class CCloud_Delete_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_Delete_Request> {
} _CCloud_Delete_Request_default_instance_;
class CCloud_Delete_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_Delete_Response> {
} _CCloud_Delete_Response_default_instance_;

namespace protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, server_url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, ugcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, ugcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, steamid_creator_),
  3,
  2,
  0,
  5,
  4,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Response, details_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, extended_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, start_index_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, total_files_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CCloud_GetUploadServerInfo_Request)},
  { 7, 13, sizeof(CCloud_GetUploadServerInfo_Response)},
  { 14, 21, sizeof(CCloud_GetFileDetails_Request)},
  { 23, 35, sizeof(CCloud_UserFile)},
  { 42, 48, sizeof(CCloud_GetFileDetails_Response)},
  { 49, 58, sizeof(CCloud_EnumerateUserFiles_Request)},
  { 62, 69, sizeof(CCloud_EnumerateUserFiles_Response)},
  { 71, 78, sizeof(CCloud_Delete_Request)},
  { 80, 85, sizeof(CCloud_Delete_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetUploadServerInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetUploadServerInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetFileDetails_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_UserFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetFileDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_EnumerateUserFiles_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_EnumerateUserFiles_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_Delete_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_Delete_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_cloud.steamworkssdk.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _CCloud_GetUploadServerInfo_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CCloud_GetUploadServerInfo_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CCloud_GetFileDetails_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CCloud_UserFile_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CCloud_GetFileDetails_Response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CCloud_EnumerateUserFiles_Request_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CCloud_EnumerateUserFiles_Response_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CCloud_Delete_Request_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CCloud_Delete_Response_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_steammessages_5funified_5fbase_2esteamworkssdk_2eproto::InitDefaults();
  _CCloud_GetUploadServerInfo_Request_default_instance_.DefaultConstruct();
  _CCloud_GetUploadServerInfo_Response_default_instance_.DefaultConstruct();
  _CCloud_GetFileDetails_Request_default_instance_.DefaultConstruct();
  _CCloud_UserFile_default_instance_.DefaultConstruct();
  _CCloud_GetFileDetails_Response_default_instance_.DefaultConstruct();
  _CCloud_EnumerateUserFiles_Request_default_instance_.DefaultConstruct();
  _CCloud_EnumerateUserFiles_Response_default_instance_.DefaultConstruct();
  _CCloud_Delete_Request_default_instance_.DefaultConstruct();
  _CCloud_Delete_Response_default_instance_.DefaultConstruct();
  _CCloud_GetFileDetails_Response_default_instance_.get_mutable()->details_ = const_cast< ::proto::dota::CCloud_UserFile*>(
      ::proto::dota::CCloud_UserFile::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'steammessages_cloud.steamworkssdk.prot"
      "o\022\nproto.dota\032.steammessages_unified_bas"
      "e.steamworkssdk.proto\"d\n\"CCloud_GetUploa"
      "dServerInfo_Request\022>\n\005appid\030\001 \001(\rB/\202\265\030+"
      "App ID to which a file will be uploaded "
      "to.\"9\n#CCloud_GetUploadServerInfo_Respon"
      "se\022\022\n\nserver_url\030\001 \001(\t\"\214\001\n\035CCloud_GetFil"
      "eDetails_Request\022;\n\005ugcid\030\001 \001(\004B,\202\265\030(ID "
      "of the Cloud file to get details for.\022.\n"
      "\005appid\030\002 \001(\rB\037\202\265\030\033App ID the file belong"
      "s to.\"\215\001\n\017CCloud_UserFile\022\r\n\005appid\030\001 \001(\r"
      "\022\r\n\005ugcid\030\002 \001(\004\022\020\n\010filename\030\003 \001(\t\022\021\n\ttim"
      "estamp\030\004 \001(\004\022\021\n\tfile_size\030\005 \001(\r\022\013\n\003url\030\006"
      " \001(\t\022\027\n\017steamid_creator\030\007 \001(\006\"N\n\036CCloud_"
      "GetFileDetails_Response\022,\n\007details\030\001 \001(\013"
      "2\033.proto.dota.CCloud_UserFile\"\351\003\n!CCloud"
      "_EnumerateUserFiles_Request\0224\n\005appid\030\001 \001"
      "(\rB%\202\265\030!App ID to enumerate the files of"
      ".\022\233\001\n\020extended_details\030\002 \001(\010B\200\001\202\265\030|(Opti"
      "onal) Get extended details back on the f"
      "iles found. Defaults to only returned th"
      "e app Id and UGC Id of the files found.\022"
      "|\n\005count\030\003 \001(\rBm\202\265\030i(Optional) Maximum n"
      "umber of results to return on this call."
      " Defaults to a maximum of 500 files retu"
      "rned.\022r\n\013start_index\030\004 \001(\rB]\202\265\030Y(Optiona"
      "l) Starting index to begin enumeration a"
      "t. Defaults to the beginning of the list"
      ".\"e\n\"CCloud_EnumerateUserFiles_Response\022"
      "*\n\005files\030\001 \003(\0132\033.proto.dota.CCloud_UserF"
      "ile\022\023\n\013total_files\030\002 \001(\r\"Y\n\025CCloud_Delet"
      "e_Request\022\020\n\010filename\030\001 \001(\t\022.\n\005appid\030\002 \001"
      "(\rB\037\202\265\030\033App ID the file belongs to.\"\030\n\026C"
      "Cloud_Delete_Response2\306\005\n\005Cloud\022\262\001\n\023GetU"
      "ploadServerInfo\022..proto.dota.CCloud_GetU"
      "ploadServerInfo_Request\032/.proto.dota.CCl"
      "oud_GetUploadServerInfo_Response\":\202\265\0306Re"
      "turns the URL of the proper cloud server"
      " for a user.\022\215\001\n\016GetFileDetails\022).proto."
      "dota.CCloud_GetFileDetails_Request\032*.pro"
      "to.dota.CCloud_GetFileDetails_Response\"$"
      "\202\265\030 Returns details on a Cloud file.\022\320\001\n"
      "\022EnumerateUserFiles\022-.proto.dota.CCloud_"
      "EnumerateUserFiles_Request\032..proto.dota."
      "CCloud_EnumerateUserFiles_Response\"[\202\265\030W"
      "Enumerates Cloud files for a user of a g"
      "iven app ID. Returns up to 500 files at "
      "a time.\022z\n\006Delete\022!.proto.dota.CCloud_De"
      "lete_Request\032\".proto.dota.CCloud_Delete_"
      "Response\")\202\265\030%Deletes a file from the us"
      "er\'s cloud.\032)\202\265\030%A service for Steam Clo"
      "ud operations."
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2054);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_cloud.steamworkssdk.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_steammessages_5funified_5fbase_2esteamworkssdk_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetUploadServerInfo_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_GetUploadServerInfo_Request)
}
CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_GetUploadServerInfo_Request)
}

void CCloud_GetUploadServerInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CCloud_GetUploadServerInfo_Request::~CCloud_GetUploadServerInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_GetUploadServerInfo_Request)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Request::SharedDtor() {
}

void CCloud_GetUploadServerInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetUploadServerInfo_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetUploadServerInfo_Request& CCloud_GetUploadServerInfo_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetUploadServerInfo_Request* CCloud_GetUploadServerInfo_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_GetUploadServerInfo_Request* n = new CCloud_GetUploadServerInfo_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetUploadServerInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetUploadServerInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_GetUploadServerInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_GetUploadServerInfo_Request)
  return false;
#undef DO_
}

void CCloud_GetUploadServerInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_GetUploadServerInfo_Request)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_GetUploadServerInfo_Request)
  return target;
}

size_t CCloud_GetUploadServerInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetUploadServerInfo_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_GetUploadServerInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_GetUploadServerInfo_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Request::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Request::Swap(CCloud_GetUploadServerInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetUploadServerInfo_Request::InternalSwap(CCloud_GetUploadServerInfo_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetUploadServerInfo_Request

// optional uint32 appid = 1 [(.proto.dota.description) = "App ID to which a file will be uploaded to."];
bool CCloud_GetUploadServerInfo_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_GetUploadServerInfo_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_GetUploadServerInfo_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_GetUploadServerInfo_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_GetUploadServerInfo_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_GetUploadServerInfo_Request.appid)
  return appid_;
}
void CCloud_GetUploadServerInfo_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_GetUploadServerInfo_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetUploadServerInfo_Response::kServerUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_GetUploadServerInfo_Response)
}
CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_url()) {
    server_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_url_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_GetUploadServerInfo_Response)
}

void CCloud_GetUploadServerInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  server_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCloud_GetUploadServerInfo_Response::~CCloud_GetUploadServerInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_GetUploadServerInfo_Response)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Response::SharedDtor() {
  server_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_GetUploadServerInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetUploadServerInfo_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetUploadServerInfo_Response& CCloud_GetUploadServerInfo_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetUploadServerInfo_Response* CCloud_GetUploadServerInfo_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_GetUploadServerInfo_Response* n = new CCloud_GetUploadServerInfo_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetUploadServerInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  if (has_server_url()) {
    GOOGLE_DCHECK(!server_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*server_url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetUploadServerInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_url().data(), this->server_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCloud_GetUploadServerInfo_Response.server_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_GetUploadServerInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_GetUploadServerInfo_Response)
  return false;
#undef DO_
}

void CCloud_GetUploadServerInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), this->server_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_GetUploadServerInfo_Response.server_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_GetUploadServerInfo_Response)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), this->server_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_GetUploadServerInfo_Response.server_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_GetUploadServerInfo_Response)
  return target;
}

size_t CCloud_GetUploadServerInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string server_url = 1;
  if (has_server_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetUploadServerInfo_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_GetUploadServerInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_GetUploadServerInfo_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_url()) {
    set_has_server_url();
    server_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_url_);
  }
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Response::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Response::Swap(CCloud_GetUploadServerInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetUploadServerInfo_Response::InternalSwap(CCloud_GetUploadServerInfo_Response* other) {
  server_url_.Swap(&other->server_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetUploadServerInfo_Response

// optional string server_url = 1;
bool CCloud_GetUploadServerInfo_Response::has_server_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_GetUploadServerInfo_Response::set_has_server_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_GetUploadServerInfo_Response::clear_has_server_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_GetUploadServerInfo_Response::clear_server_url() {
  server_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_url();
}
const ::std::string& CCloud_GetUploadServerInfo_Response::server_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_GetUploadServerInfo_Response.server_url)
  return server_url_.GetNoArena();
}
void CCloud_GetUploadServerInfo_Response::set_server_url(const ::std::string& value) {
  set_has_server_url();
  server_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_GetUploadServerInfo_Response.server_url)
}
#if LANG_CXX11
void CCloud_GetUploadServerInfo_Response::set_server_url(::std::string&& value) {
  set_has_server_url();
  server_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CCloud_GetUploadServerInfo_Response.server_url)
}
#endif
void CCloud_GetUploadServerInfo_Response::set_server_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_url();
  server_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CCloud_GetUploadServerInfo_Response.server_url)
}
void CCloud_GetUploadServerInfo_Response::set_server_url(const char* value, size_t size) {
  set_has_server_url();
  server_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CCloud_GetUploadServerInfo_Response.server_url)
}
::std::string* CCloud_GetUploadServerInfo_Response::mutable_server_url() {
  set_has_server_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CCloud_GetUploadServerInfo_Response.server_url)
  return server_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_GetUploadServerInfo_Response::release_server_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CCloud_GetUploadServerInfo_Response.server_url)
  clear_has_server_url();
  return server_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_GetUploadServerInfo_Response::set_allocated_server_url(::std::string* server_url) {
  if (server_url != NULL) {
    set_has_server_url();
  } else {
    clear_has_server_url();
  }
  server_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CCloud_GetUploadServerInfo_Response.server_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetFileDetails_Request::kUgcidFieldNumber;
const int CCloud_GetFileDetails_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_GetFileDetails_Request)
}
CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugcid_, &from.ugcid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_GetFileDetails_Request)
}

void CCloud_GetFileDetails_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ugcid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(appid_));
}

CCloud_GetFileDetails_Request::~CCloud_GetFileDetails_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_GetFileDetails_Request)
  SharedDtor();
}

void CCloud_GetFileDetails_Request::SharedDtor() {
}

void CCloud_GetFileDetails_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetFileDetails_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetFileDetails_Request& CCloud_GetFileDetails_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetFileDetails_Request* CCloud_GetFileDetails_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_GetFileDetails_Request* n = new CCloud_GetFileDetails_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetFileDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_GetFileDetails_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ugcid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&ugcid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetFileDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_GetFileDetails_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ugcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_GetFileDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_GetFileDetails_Request)
  return false;
#undef DO_
}

void CCloud_GetFileDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ugcid(), output);
  }

  // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_GetFileDetails_Request)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ugcid(), target);
  }

  // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_GetFileDetails_Request)
  return target;
}

size_t CCloud_GetFileDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_GetFileDetails_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
    if (has_ugcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetFileDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_GetFileDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetFileDetails_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetFileDetails_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_GetFileDetails_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_GetFileDetails_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Request::MergeFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_GetFileDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_GetFileDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Request::CopyFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Request::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Request::Swap(CCloud_GetFileDetails_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetFileDetails_Request::InternalSwap(CCloud_GetFileDetails_Request* other) {
  std::swap(ugcid_, other->ugcid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetFileDetails_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetFileDetails_Request

// optional uint64 ugcid = 1 [(.proto.dota.description) = "ID of the Cloud file to get details for."];
bool CCloud_GetFileDetails_Request::has_ugcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_GetFileDetails_Request::set_has_ugcid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_GetFileDetails_Request::clear_has_ugcid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_GetFileDetails_Request::clear_ugcid() {
  ugcid_ = GOOGLE_ULONGLONG(0);
  clear_has_ugcid();
}
::google::protobuf::uint64 CCloud_GetFileDetails_Request::ugcid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_GetFileDetails_Request.ugcid)
  return ugcid_;
}
void CCloud_GetFileDetails_Request::set_ugcid(::google::protobuf::uint64 value) {
  set_has_ugcid();
  ugcid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_GetFileDetails_Request.ugcid)
}

// optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
bool CCloud_GetFileDetails_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_GetFileDetails_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_GetFileDetails_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_GetFileDetails_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_GetFileDetails_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_GetFileDetails_Request.appid)
  return appid_;
}
void CCloud_GetFileDetails_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_GetFileDetails_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_UserFile::kAppidFieldNumber;
const int CCloud_UserFile::kUgcidFieldNumber;
const int CCloud_UserFile::kFilenameFieldNumber;
const int CCloud_UserFile::kTimestampFieldNumber;
const int CCloud_UserFile::kFileSizeFieldNumber;
const int CCloud_UserFile::kUrlFieldNumber;
const int CCloud_UserFile::kSteamidCreatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_UserFile::CCloud_UserFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_UserFile)
}
CCloud_UserFile::CCloud_UserFile(const CCloud_UserFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&ugcid_, &from.ugcid_,
    reinterpret_cast<char*>(&steamid_creator_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(steamid_creator_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_UserFile)
}

void CCloud_UserFile::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ugcid_, 0, reinterpret_cast<char*>(&steamid_creator_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(steamid_creator_));
}

CCloud_UserFile::~CCloud_UserFile() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_UserFile)
  SharedDtor();
}

void CCloud_UserFile::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_UserFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_UserFile::descriptor() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_UserFile& CCloud_UserFile::default_instance() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_UserFile* CCloud_UserFile::New(::google::protobuf::Arena* arena) const {
  CCloud_UserFile* n = new CCloud_UserFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_UserFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_UserFile)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&ugcid_, 0, reinterpret_cast<char*>(&steamid_creator_) -
      reinterpret_cast<char*>(&ugcid_) + sizeof(steamid_creator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_UserFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_UserFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugcid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ugcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCloud_UserFile.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCloud_UserFile.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_creator = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_steamid_creator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_UserFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_UserFile)
  return false;
#undef DO_
}

void CCloud_UserFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ugcid(), output);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_UserFile.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_UserFile.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steamid_creator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_UserFile)
}

::google::protobuf::uint8* CCloud_UserFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ugcid(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_UserFile.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->file_size(), target);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_UserFile.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->steamid_creator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_UserFile)
  return target;
}

size_t CCloud_UserFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_UserFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 ugcid = 2;
    if (has_ugcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 5;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional fixed64 steamid_creator = 7;
    if (has_steamid_creator()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_UserFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_UserFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_UserFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_UserFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_UserFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_UserFile)
    MergeFrom(*source);
  }
}

void CCloud_UserFile::MergeFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_UserFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_creator_ = from.steamid_creator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_UserFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_UserFile::CopyFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_UserFile::IsInitialized() const {
  return true;
}

void CCloud_UserFile::Swap(CCloud_UserFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_UserFile::InternalSwap(CCloud_UserFile* other) {
  filename_.Swap(&other->filename_);
  url_.Swap(&other->url_);
  std::swap(ugcid_, other->ugcid_);
  std::swap(appid_, other->appid_);
  std::swap(file_size_, other->file_size_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(steamid_creator_, other->steamid_creator_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_UserFile::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_UserFile

// optional uint32 appid = 1;
bool CCloud_UserFile::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_UserFile::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_UserFile::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_UserFile::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_UserFile::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_UserFile.appid)
  return appid_;
}
void CCloud_UserFile::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_UserFile.appid)
}

// optional uint64 ugcid = 2;
bool CCloud_UserFile::has_ugcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_UserFile::set_has_ugcid() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_UserFile::clear_has_ugcid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_UserFile::clear_ugcid() {
  ugcid_ = GOOGLE_ULONGLONG(0);
  clear_has_ugcid();
}
::google::protobuf::uint64 CCloud_UserFile::ugcid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_UserFile.ugcid)
  return ugcid_;
}
void CCloud_UserFile::set_ugcid(::google::protobuf::uint64 value) {
  set_has_ugcid();
  ugcid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_UserFile.ugcid)
}

// optional string filename = 3;
bool CCloud_UserFile::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_UserFile::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_UserFile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_UserFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_UserFile::filename() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_UserFile.filename)
  return filename_.GetNoArena();
}
void CCloud_UserFile::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_UserFile.filename)
}
#if LANG_CXX11
void CCloud_UserFile::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CCloud_UserFile.filename)
}
#endif
void CCloud_UserFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CCloud_UserFile.filename)
}
void CCloud_UserFile::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CCloud_UserFile.filename)
}
::std::string* CCloud_UserFile::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.dota.CCloud_UserFile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_UserFile::release_filename() {
  // @@protoc_insertion_point(field_release:proto.dota.CCloud_UserFile.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_UserFile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CCloud_UserFile.filename)
}

// optional uint64 timestamp = 4;
bool CCloud_UserFile::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCloud_UserFile::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void CCloud_UserFile::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCloud_UserFile::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 CCloud_UserFile::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_UserFile.timestamp)
  return timestamp_;
}
void CCloud_UserFile::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_UserFile.timestamp)
}

// optional uint32 file_size = 5;
bool CCloud_UserFile::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCloud_UserFile::set_has_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
void CCloud_UserFile::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCloud_UserFile::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
::google::protobuf::uint32 CCloud_UserFile::file_size() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_UserFile.file_size)
  return file_size_;
}
void CCloud_UserFile::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_UserFile.file_size)
}

// optional string url = 6;
bool CCloud_UserFile::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_UserFile::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_UserFile::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_UserFile::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CCloud_UserFile::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_UserFile.url)
  return url_.GetNoArena();
}
void CCloud_UserFile::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_UserFile.url)
}
#if LANG_CXX11
void CCloud_UserFile::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CCloud_UserFile.url)
}
#endif
void CCloud_UserFile::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CCloud_UserFile.url)
}
void CCloud_UserFile::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CCloud_UserFile.url)
}
::std::string* CCloud_UserFile::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CCloud_UserFile.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_UserFile::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CCloud_UserFile.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_UserFile::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CCloud_UserFile.url)
}

// optional fixed64 steamid_creator = 7;
bool CCloud_UserFile::has_steamid_creator() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CCloud_UserFile::set_has_steamid_creator() {
  _has_bits_[0] |= 0x00000040u;
}
void CCloud_UserFile::clear_has_steamid_creator() {
  _has_bits_[0] &= ~0x00000040u;
}
void CCloud_UserFile::clear_steamid_creator() {
  steamid_creator_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_creator();
}
::google::protobuf::uint64 CCloud_UserFile::steamid_creator() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_UserFile.steamid_creator)
  return steamid_creator_;
}
void CCloud_UserFile::set_steamid_creator(::google::protobuf::uint64 value) {
  set_has_steamid_creator();
  steamid_creator_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_UserFile.steamid_creator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetFileDetails_Response::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_GetFileDetails_Response)
}
CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_details()) {
    details_ = new ::proto::dota::CCloud_UserFile(*from.details_);
  } else {
    details_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_GetFileDetails_Response)
}

void CCloud_GetFileDetails_Response::SharedCtor() {
  _cached_size_ = 0;
  details_ = NULL;
}

CCloud_GetFileDetails_Response::~CCloud_GetFileDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_GetFileDetails_Response)
  SharedDtor();
}

void CCloud_GetFileDetails_Response::SharedDtor() {
  if (this != internal_default_instance()) {
    delete details_;
  }
}

void CCloud_GetFileDetails_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetFileDetails_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetFileDetails_Response& CCloud_GetFileDetails_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetFileDetails_Response* CCloud_GetFileDetails_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_GetFileDetails_Response* n = new CCloud_GetFileDetails_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetFileDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_GetFileDetails_Response)
  if (has_details()) {
    GOOGLE_DCHECK(details_ != NULL);
    details_->::proto::dota::CCloud_UserFile::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetFileDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_GetFileDetails_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CCloud_UserFile details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_GetFileDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_GetFileDetails_Response)
  return false;
#undef DO_
}

void CCloud_GetFileDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_GetFileDetails_Response)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->details_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_GetFileDetails_Response)
  return target;
}

size_t CCloud_GetFileDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_GetFileDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CCloud_UserFile details = 1;
  if (has_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetFileDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_GetFileDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetFileDetails_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetFileDetails_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_GetFileDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_GetFileDetails_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Response::MergeFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_GetFileDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_details()) {
    mutable_details()->::proto::dota::CCloud_UserFile::MergeFrom(from.details());
  }
}

void CCloud_GetFileDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Response::CopyFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Response::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Response::Swap(CCloud_GetFileDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetFileDetails_Response::InternalSwap(CCloud_GetFileDetails_Response* other) {
  std::swap(details_, other->details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetFileDetails_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetFileDetails_Response

// optional .proto.dota.CCloud_UserFile details = 1;
bool CCloud_GetFileDetails_Response::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_GetFileDetails_Response::set_has_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_GetFileDetails_Response::clear_has_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_GetFileDetails_Response::clear_details() {
  if (details_ != NULL) details_->::proto::dota::CCloud_UserFile::Clear();
  clear_has_details();
}
const ::proto::dota::CCloud_UserFile& CCloud_GetFileDetails_Response::details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_GetFileDetails_Response.details)
  return details_ != NULL ? *details_
                         : *::proto::dota::CCloud_UserFile::internal_default_instance();
}
::proto::dota::CCloud_UserFile* CCloud_GetFileDetails_Response::mutable_details() {
  set_has_details();
  if (details_ == NULL) {
    details_ = new ::proto::dota::CCloud_UserFile;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CCloud_GetFileDetails_Response.details)
  return details_;
}
::proto::dota::CCloud_UserFile* CCloud_GetFileDetails_Response::release_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CCloud_GetFileDetails_Response.details)
  clear_has_details();
  ::proto::dota::CCloud_UserFile* temp = details_;
  details_ = NULL;
  return temp;
}
void CCloud_GetFileDetails_Response::set_allocated_details(::proto::dota::CCloud_UserFile* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CCloud_GetFileDetails_Response.details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserFiles_Request::kAppidFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kExtendedDetailsFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kCountFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kStartIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_EnumerateUserFiles_Request)
}
CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&start_index_) -
    reinterpret_cast<char*>(&appid_) + sizeof(start_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_EnumerateUserFiles_Request)
}

void CCloud_EnumerateUserFiles_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&start_index_) -
    reinterpret_cast<char*>(&appid_) + sizeof(start_index_));
}

CCloud_EnumerateUserFiles_Request::~CCloud_EnumerateUserFiles_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_EnumerateUserFiles_Request)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Request::SharedDtor() {
}

void CCloud_EnumerateUserFiles_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_EnumerateUserFiles_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_EnumerateUserFiles_Request& CCloud_EnumerateUserFiles_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_EnumerateUserFiles_Request* CCloud_EnumerateUserFiles_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_EnumerateUserFiles_Request* n = new CCloud_EnumerateUserFiles_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_EnumerateUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&start_index_) -
      reinterpret_cast<char*>(&appid_) + sizeof(start_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_EnumerateUserFiles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_extended_details();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extended_details_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_start_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_EnumerateUserFiles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_EnumerateUserFiles_Request)
  return false;
#undef DO_
}

void CCloud_EnumerateUserFiles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->extended_details(), output);
  }

  // optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_EnumerateUserFiles_Request)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->extended_details(), target);
  }

  // optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_EnumerateUserFiles_Request)
  return target;
}

size_t CCloud_EnumerateUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
    if (has_extended_details()) {
      total_size += 1 + 1;
    }

    // optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_EnumerateUserFiles_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_EnumerateUserFiles_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_EnumerateUserFiles_Request)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      extended_details_ = from.extended_details_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_index_ = from.start_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Request::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Request::Swap(CCloud_EnumerateUserFiles_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserFiles_Request::InternalSwap(CCloud_EnumerateUserFiles_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(extended_details_, other->extended_details_);
  std::swap(count_, other->count_);
  std::swap(start_index_, other->start_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_EnumerateUserFiles_Request

// optional uint32 appid = 1 [(.proto.dota.description) = "App ID to enumerate the files of."];
bool CCloud_EnumerateUserFiles_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_EnumerateUserFiles_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_EnumerateUserFiles_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_EnumerateUserFiles_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_EnumerateUserFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_EnumerateUserFiles_Request.appid)
  return appid_;
}
void CCloud_EnumerateUserFiles_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_EnumerateUserFiles_Request.appid)
}

// optional bool extended_details = 2 [(.proto.dota.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
bool CCloud_EnumerateUserFiles_Request::has_extended_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_EnumerateUserFiles_Request::set_has_extended_details() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_EnumerateUserFiles_Request::clear_has_extended_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_EnumerateUserFiles_Request::clear_extended_details() {
  extended_details_ = false;
  clear_has_extended_details();
}
bool CCloud_EnumerateUserFiles_Request::extended_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_EnumerateUserFiles_Request.extended_details)
  return extended_details_;
}
void CCloud_EnumerateUserFiles_Request::set_extended_details(bool value) {
  set_has_extended_details();
  extended_details_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_EnumerateUserFiles_Request.extended_details)
}

// optional uint32 count = 3 [(.proto.dota.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
bool CCloud_EnumerateUserFiles_Request::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_EnumerateUserFiles_Request::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_EnumerateUserFiles_Request::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_EnumerateUserFiles_Request::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CCloud_EnumerateUserFiles_Request::count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_EnumerateUserFiles_Request.count)
  return count_;
}
void CCloud_EnumerateUserFiles_Request::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_EnumerateUserFiles_Request.count)
}

// optional uint32 start_index = 4 [(.proto.dota.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
bool CCloud_EnumerateUserFiles_Request::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_EnumerateUserFiles_Request::set_has_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_EnumerateUserFiles_Request::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_EnumerateUserFiles_Request::clear_start_index() {
  start_index_ = 0u;
  clear_has_start_index();
}
::google::protobuf::uint32 CCloud_EnumerateUserFiles_Request::start_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_EnumerateUserFiles_Request.start_index)
  return start_index_;
}
void CCloud_EnumerateUserFiles_Request::set_start_index(::google::protobuf::uint32 value) {
  set_has_start_index();
  start_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_EnumerateUserFiles_Request.start_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserFiles_Response::kFilesFieldNumber;
const int CCloud_EnumerateUserFiles_Response::kTotalFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_EnumerateUserFiles_Response)
}
CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_files_ = from.total_files_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_EnumerateUserFiles_Response)
}

void CCloud_EnumerateUserFiles_Response::SharedCtor() {
  _cached_size_ = 0;
  total_files_ = 0u;
}

CCloud_EnumerateUserFiles_Response::~CCloud_EnumerateUserFiles_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_EnumerateUserFiles_Response)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Response::SharedDtor() {
}

void CCloud_EnumerateUserFiles_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_EnumerateUserFiles_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_EnumerateUserFiles_Response& CCloud_EnumerateUserFiles_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_EnumerateUserFiles_Response* CCloud_EnumerateUserFiles_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_EnumerateUserFiles_Response* n = new CCloud_EnumerateUserFiles_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_EnumerateUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  files_.Clear();
  total_files_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_EnumerateUserFiles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CCloud_UserFile files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_total_files();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_files_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_EnumerateUserFiles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_EnumerateUserFiles_Response)
  return false;
#undef DO_
}

void CCloud_EnumerateUserFiles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCloud_UserFile files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->files(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_files(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_EnumerateUserFiles_Response)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCloud_UserFile files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->files(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_files(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_EnumerateUserFiles_Response)
  return target;
}

size_t CCloud_EnumerateUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CCloud_UserFile files = 1;
  {
    unsigned int count = this->files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->files(i));
    }
  }

  // optional uint32 total_files = 2;
  if (has_total_files()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_files());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_EnumerateUserFiles_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_EnumerateUserFiles_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_EnumerateUserFiles_Response)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.has_total_files()) {
    set_total_files(from.total_files());
  }
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Response::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Response::Swap(CCloud_EnumerateUserFiles_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserFiles_Response::InternalSwap(CCloud_EnumerateUserFiles_Response* other) {
  files_.InternalSwap(&other->files_);
  std::swap(total_files_, other->total_files_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_EnumerateUserFiles_Response

// repeated .proto.dota.CCloud_UserFile files = 1;
int CCloud_EnumerateUserFiles_Response::files_size() const {
  return files_.size();
}
void CCloud_EnumerateUserFiles_Response::clear_files() {
  files_.Clear();
}
const ::proto::dota::CCloud_UserFile& CCloud_EnumerateUserFiles_Response::files(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_EnumerateUserFiles_Response.files)
  return files_.Get(index);
}
::proto::dota::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CCloud_EnumerateUserFiles_Response.files)
  return files_.Mutable(index);
}
::proto::dota::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::add_files() {
  // @@protoc_insertion_point(field_add:proto.dota.CCloud_EnumerateUserFiles_Response.files)
  return files_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CCloud_UserFile >*
CCloud_EnumerateUserFiles_Response::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CCloud_EnumerateUserFiles_Response.files)
  return &files_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CCloud_UserFile >&
CCloud_EnumerateUserFiles_Response::files() const {
  // @@protoc_insertion_point(field_list:proto.dota.CCloud_EnumerateUserFiles_Response.files)
  return files_;
}

// optional uint32 total_files = 2;
bool CCloud_EnumerateUserFiles_Response::has_total_files() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_EnumerateUserFiles_Response::set_has_total_files() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_EnumerateUserFiles_Response::clear_has_total_files() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_EnumerateUserFiles_Response::clear_total_files() {
  total_files_ = 0u;
  clear_has_total_files();
}
::google::protobuf::uint32 CCloud_EnumerateUserFiles_Response::total_files() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_EnumerateUserFiles_Response.total_files)
  return total_files_;
}
void CCloud_EnumerateUserFiles_Response::set_total_files(::google::protobuf::uint32 value) {
  set_has_total_files();
  total_files_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_EnumerateUserFiles_Response.total_files)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_Delete_Request::kFilenameFieldNumber;
const int CCloud_Delete_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_Delete_Request::CCloud_Delete_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_Delete_Request)
}
CCloud_Delete_Request::CCloud_Delete_Request(const CCloud_Delete_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_Delete_Request)
}

void CCloud_Delete_Request::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CCloud_Delete_Request::~CCloud_Delete_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_Delete_Request)
  SharedDtor();
}

void CCloud_Delete_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_Delete_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_Delete_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_Delete_Request& CCloud_Delete_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_Delete_Request* CCloud_Delete_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_Delete_Request* n = new CCloud_Delete_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_Delete_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_Delete_Request)
  if (has_filename()) {
    GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*filename_.UnsafeRawStringPointer())->clear();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_Delete_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_Delete_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCloud_Delete_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_Delete_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_Delete_Request)
  return false;
#undef DO_
}

void CCloud_Delete_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_Delete_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_Delete_Request)
}

::google::protobuf::uint8* CCloud_Delete_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCloud_Delete_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_Delete_Request)
  return target;
}

size_t CCloud_Delete_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_Delete_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_Delete_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_Delete_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_Delete_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_Delete_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_Delete_Request)
    MergeFrom(*source);
  }
}

void CCloud_Delete_Request::MergeFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_Delete_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Request::CopyFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Request::IsInitialized() const {
  return true;
}

void CCloud_Delete_Request::Swap(CCloud_Delete_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_Delete_Request::InternalSwap(CCloud_Delete_Request* other) {
  filename_.Swap(&other->filename_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_Delete_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_Delete_Request

// optional string filename = 1;
bool CCloud_Delete_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_Delete_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_Delete_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_Delete_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_Delete_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_Delete_Request.filename)
  return filename_.GetNoArena();
}
void CCloud_Delete_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_Delete_Request.filename)
}
#if LANG_CXX11
void CCloud_Delete_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CCloud_Delete_Request.filename)
}
#endif
void CCloud_Delete_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CCloud_Delete_Request.filename)
}
void CCloud_Delete_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CCloud_Delete_Request.filename)
}
::std::string* CCloud_Delete_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.dota.CCloud_Delete_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_Delete_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.dota.CCloud_Delete_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_Delete_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CCloud_Delete_Request.filename)
}

// optional uint32 appid = 2 [(.proto.dota.description) = "App ID the file belongs to."];
bool CCloud_Delete_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_Delete_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_Delete_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_Delete_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_Delete_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCloud_Delete_Request.appid)
  return appid_;
}
void CCloud_Delete_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCloud_Delete_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_Delete_Response::CCloud_Delete_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCloud_Delete_Response)
}
CCloud_Delete_Response::CCloud_Delete_Response(const CCloud_Delete_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCloud_Delete_Response)
}

void CCloud_Delete_Response::SharedCtor() {
  _cached_size_ = 0;
}

CCloud_Delete_Response::~CCloud_Delete_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CCloud_Delete_Response)
  SharedDtor();
}

void CCloud_Delete_Response::SharedDtor() {
}

void CCloud_Delete_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_Delete_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_Delete_Response& CCloud_Delete_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_Delete_Response* CCloud_Delete_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_Delete_Response* n = new CCloud_Delete_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_Delete_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCloud_Delete_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_Delete_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCloud_Delete_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCloud_Delete_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCloud_Delete_Response)
  return false;
#undef DO_
}

void CCloud_Delete_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCloud_Delete_Response)
}

::google::protobuf::uint8* CCloud_Delete_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCloud_Delete_Response)
  return target;
}

size_t CCloud_Delete_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCloud_Delete_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_Delete_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCloud_Delete_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_Delete_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_Delete_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCloud_Delete_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCloud_Delete_Response)
    MergeFrom(*source);
  }
}

void CCloud_Delete_Response::MergeFrom(const CCloud_Delete_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCloud_Delete_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCloud_Delete_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCloud_Delete_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Response::CopyFrom(const CCloud_Delete_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCloud_Delete_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Response::IsInitialized() const {
  return true;
}

void CCloud_Delete_Response::Swap(CCloud_Delete_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_Delete_Response::InternalSwap(CCloud_Delete_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_Delete_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_Delete_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
