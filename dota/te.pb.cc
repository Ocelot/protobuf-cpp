// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: te.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "te.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgTEArmorRicochetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEArmorRicochet> {
} _CMsgTEArmorRicochet_default_instance_;
class CMsgTEBaseBeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBaseBeam> {
} _CMsgTEBaseBeam_default_instance_;
class CMsgTEBeamEntPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBeamEntPoint> {
} _CMsgTEBeamEntPoint_default_instance_;
class CMsgTEBeamEntsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBeamEnts> {
} _CMsgTEBeamEnts_default_instance_;
class CMsgTEBeamPointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBeamPoints> {
} _CMsgTEBeamPoints_default_instance_;
class CMsgTEBeamRingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBeamRing> {
} _CMsgTEBeamRing_default_instance_;
class CMsgTEBreakModelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBreakModel> {
} _CMsgTEBreakModel_default_instance_;
class CMsgTEBSPDecalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBSPDecal> {
} _CMsgTEBSPDecal_default_instance_;
class CMsgTEBubblesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBubbles> {
} _CMsgTEBubbles_default_instance_;
class CMsgTEBubbleTrailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBubbleTrail> {
} _CMsgTEBubbleTrail_default_instance_;
class CMsgTEDecalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEDecal> {
} _CMsgTEDecal_default_instance_;
class CMsgEffectDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgEffectData> {
} _CMsgEffectData_default_instance_;
class CMsgTEEffectDispatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEEffectDispatch> {
} _CMsgTEEffectDispatch_default_instance_;
class CMsgTEEnergySplashDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEEnergySplash> {
} _CMsgTEEnergySplash_default_instance_;
class CMsgTEFizzDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEFizz> {
} _CMsgTEFizz_default_instance_;
class CMsgTEShatterSurfaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEShatterSurface> {
} _CMsgTEShatterSurface_default_instance_;
class CMsgTEGlowSpriteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEGlowSprite> {
} _CMsgTEGlowSprite_default_instance_;
class CMsgTEImpactDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEImpact> {
} _CMsgTEImpact_default_instance_;
class CMsgTEMuzzleFlashDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEMuzzleFlash> {
} _CMsgTEMuzzleFlash_default_instance_;
class CMsgTEBloodStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEBloodStream> {
} _CMsgTEBloodStream_default_instance_;
class CMsgTEExplosionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEExplosion> {
} _CMsgTEExplosion_default_instance_;
class CMsgTEDustDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEDust> {
} _CMsgTEDust_default_instance_;
class CMsgTELargeFunnelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTELargeFunnel> {
} _CMsgTELargeFunnel_default_instance_;
class CMsgTESparksDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTESparks> {
} _CMsgTESparks_default_instance_;
class CMsgTEPhysicsPropDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEPhysicsProp> {
} _CMsgTEPhysicsProp_default_instance_;
class CMsgTEPlayerDecalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEPlayerDecal> {
} _CMsgTEPlayerDecal_default_instance_;
class CMsgTEProjectedDecalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEProjectedDecal> {
} _CMsgTEProjectedDecal_default_instance_;
class CMsgTESmokeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTESmoke> {
} _CMsgTESmoke_default_instance_;
class CMsgTEWorldDecalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTEWorldDecal> {
} _CMsgTEWorldDecal_default_instance_;

namespace protobuf_te_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[29];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEArmorRicochet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEArmorRicochet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEArmorRicochet, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEArmorRicochet, dir_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, modelindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, haloindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, startframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, framerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, life_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, endwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, fadelength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, amplitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBaseBeam, flags_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEntPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEntPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEntPoint, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEntPoint, startentity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEntPoint, endentity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEntPoint, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEntPoint, end_),
  0,
  3,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEnts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEnts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEnts, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEnts, startentity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamEnts, endentity_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamPoints, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamPoints, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamPoints, end_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamRing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamRing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamRing, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamRing, startentity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBeamRing, endentity_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, randomization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, modelindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBreakModel, flags_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBSPDecal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBSPDecal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBSPDecal, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBSPDecal, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBSPDecal, saxis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBSPDecal, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBSPDecal, index_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbles, mins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbles, maxs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbles, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbles, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbles, speed_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbleTrail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbleTrail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbleTrail, mins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbleTrail, maxs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbleTrail, waterz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbleTrail, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBubbleTrail, speed_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDecal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDecal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDecal, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDecal, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDecal, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDecal, hitbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDecal, index_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, otherentity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, magnitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, surfaceprop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, effectindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, damagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, material_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, hitbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, attachmentindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, effectname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEffectData, attachmentname_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEEffectDispatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEEffectDispatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEEffectDispatch, effectdata_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEEnergySplash, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEEnergySplash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEEnergySplash, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEEnergySplash, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEEnergySplash, explosive_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEFizz, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEFizz, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEFizz, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEFizz, density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEFizz, current_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, forcepos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, shardsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, surfacetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, frontcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEShatterSurface, backcolor_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEGlowSprite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEGlowSprite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEGlowSprite, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEGlowSprite, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEGlowSprite, life_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEGlowSprite, brightness_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEImpact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEImpact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEImpact, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEImpact, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEImpact, type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEMuzzleFlash, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEMuzzleFlash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEMuzzleFlash, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEMuzzleFlash, angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEMuzzleFlash, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEMuzzleFlash, type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBloodStream, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBloodStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBloodStream, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBloodStream, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBloodStream, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEBloodStream, amount_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, framerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, materialtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, magnitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEExplosion, affect_ragdolls_),
  0,
  2,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDust, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDust, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDust, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDust, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDust, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEDust, direction_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTELargeFunnel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTELargeFunnel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTELargeFunnel, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTELargeFunnel, reversed_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESparks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESparks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESparks, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESparks, magnitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESparks, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESparks, direction_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, skin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, effects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, modelindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, breakmodelsnottomake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPhysicsProp, scale_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPlayerDecal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPlayerDecal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPlayerDecal, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPlayerDecal, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEPlayerDecal, entity_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEProjectedDecal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEProjectedDecal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEProjectedDecal, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEProjectedDecal, angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEProjectedDecal, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEProjectedDecal, distance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESmoke, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESmoke, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESmoke, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTESmoke, scale_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEWorldDecal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEWorldDecal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEWorldDecal, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEWorldDecal, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTEWorldDecal, index_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CMsgTEArmorRicochet)},
  { 9, 26, sizeof(CMsgTEBaseBeam)},
  { 38, 48, sizeof(CMsgTEBeamEntPoint)},
  { 53, 61, sizeof(CMsgTEBeamEnts)},
  { 64, 72, sizeof(CMsgTEBeamPoints)},
  { 75, 83, sizeof(CMsgTEBeamRing)},
  { 86, 100, sizeof(CMsgTEBreakModel)},
  { 109, 119, sizeof(CMsgTEBSPDecal)},
  { 124, 134, sizeof(CMsgTEBubbles)},
  { 139, 149, sizeof(CMsgTEBubbleTrail)},
  { 154, 164, sizeof(CMsgTEDecal)},
  { 169, 193, sizeof(CMsgEffectData)},
  { 212, 218, sizeof(CMsgTEEffectDispatch)},
  { 219, 227, sizeof(CMsgTEEnergySplash)},
  { 230, 238, sizeof(CMsgTEFizz)},
  { 241, 256, sizeof(CMsgTEShatterSurface)},
  { 266, 275, sizeof(CMsgTEGlowSprite)},
  { 279, 287, sizeof(CMsgTEImpact)},
  { 290, 299, sizeof(CMsgTEMuzzleFlash)},
  { 303, 312, sizeof(CMsgTEBloodStream)},
  { 316, 330, sizeof(CMsgTEExplosion)},
  { 339, 348, sizeof(CMsgTEDust)},
  { 352, 359, sizeof(CMsgTELargeFunnel)},
  { 361, 370, sizeof(CMsgTESparks)},
  { 374, 389, sizeof(CMsgTEPhysicsProp)},
  { 399, 407, sizeof(CMsgTEPlayerDecal)},
  { 410, 419, sizeof(CMsgTEProjectedDecal)},
  { 423, 430, sizeof(CMsgTESmoke)},
  { 432, 440, sizeof(CMsgTEWorldDecal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEArmorRicochet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBaseBeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBeamEntPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBeamEnts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBeamPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBeamRing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBreakModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBSPDecal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBubbles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBubbleTrail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEDecal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgEffectData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEEffectDispatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEEnergySplash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEFizz_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEShatterSurface_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEGlowSprite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEImpact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEMuzzleFlash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEBloodStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEExplosion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEDust_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTELargeFunnel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTESparks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEPhysicsProp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEPlayerDecal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEProjectedDecal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTESmoke_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTEWorldDecal_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "te.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 29);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgTEArmorRicochet_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgTEBaseBeam_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgTEBeamEntPoint_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgTEBeamEnts_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgTEBeamPoints_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgTEBeamRing_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgTEBreakModel_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgTEBSPDecal_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgTEBubbles_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgTEBubbleTrail_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgTEDecal_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgEffectData_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgTEEffectDispatch_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgTEEnergySplash_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgTEFizz_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgTEShatterSurface_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgTEGlowSprite_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgTEImpact_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgTEMuzzleFlash_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgTEBloodStream_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgTEExplosion_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgTEDust_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgTELargeFunnel_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgTESparks_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgTEPhysicsProp_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgTEPlayerDecal_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgTEProjectedDecal_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgTESmoke_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgTEWorldDecal_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_networkbasetypes_2eproto::InitDefaults();
  _CMsgTEArmorRicochet_default_instance_.DefaultConstruct();
  _CMsgTEBaseBeam_default_instance_.DefaultConstruct();
  _CMsgTEBeamEntPoint_default_instance_.DefaultConstruct();
  _CMsgTEBeamEnts_default_instance_.DefaultConstruct();
  _CMsgTEBeamPoints_default_instance_.DefaultConstruct();
  _CMsgTEBeamRing_default_instance_.DefaultConstruct();
  _CMsgTEBreakModel_default_instance_.DefaultConstruct();
  _CMsgTEBSPDecal_default_instance_.DefaultConstruct();
  _CMsgTEBubbles_default_instance_.DefaultConstruct();
  _CMsgTEBubbleTrail_default_instance_.DefaultConstruct();
  _CMsgTEDecal_default_instance_.DefaultConstruct();
  _CMsgEffectData_default_instance_.DefaultConstruct();
  _CMsgTEEffectDispatch_default_instance_.DefaultConstruct();
  _CMsgTEEnergySplash_default_instance_.DefaultConstruct();
  _CMsgTEFizz_default_instance_.DefaultConstruct();
  _CMsgTEShatterSurface_default_instance_.DefaultConstruct();
  _CMsgTEGlowSprite_default_instance_.DefaultConstruct();
  _CMsgTEImpact_default_instance_.DefaultConstruct();
  _CMsgTEMuzzleFlash_default_instance_.DefaultConstruct();
  _CMsgTEBloodStream_default_instance_.DefaultConstruct();
  _CMsgTEExplosion_default_instance_.DefaultConstruct();
  _CMsgTEDust_default_instance_.DefaultConstruct();
  _CMsgTELargeFunnel_default_instance_.DefaultConstruct();
  _CMsgTESparks_default_instance_.DefaultConstruct();
  _CMsgTEPhysicsProp_default_instance_.DefaultConstruct();
  _CMsgTEPlayerDecal_default_instance_.DefaultConstruct();
  _CMsgTEProjectedDecal_default_instance_.DefaultConstruct();
  _CMsgTESmoke_default_instance_.DefaultConstruct();
  _CMsgTEWorldDecal_default_instance_.DefaultConstruct();
  _CMsgTEArmorRicochet_default_instance_.get_mutable()->pos_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEArmorRicochet_default_instance_.get_mutable()->dir_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBeamEntPoint_default_instance_.get_mutable()->base_ = const_cast< ::proto::dota::CMsgTEBaseBeam*>(
      ::proto::dota::CMsgTEBaseBeam::internal_default_instance());
  _CMsgTEBeamEntPoint_default_instance_.get_mutable()->start_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBeamEntPoint_default_instance_.get_mutable()->end_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBeamEnts_default_instance_.get_mutable()->base_ = const_cast< ::proto::dota::CMsgTEBaseBeam*>(
      ::proto::dota::CMsgTEBaseBeam::internal_default_instance());
  _CMsgTEBeamPoints_default_instance_.get_mutable()->base_ = const_cast< ::proto::dota::CMsgTEBaseBeam*>(
      ::proto::dota::CMsgTEBaseBeam::internal_default_instance());
  _CMsgTEBeamPoints_default_instance_.get_mutable()->start_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBeamPoints_default_instance_.get_mutable()->end_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBeamRing_default_instance_.get_mutable()->base_ = const_cast< ::proto::dota::CMsgTEBaseBeam*>(
      ::proto::dota::CMsgTEBaseBeam::internal_default_instance());
  _CMsgTEBreakModel_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBreakModel_default_instance_.get_mutable()->angles_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
  _CMsgTEBreakModel_default_instance_.get_mutable()->size_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBreakModel_default_instance_.get_mutable()->velocity_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBSPDecal_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBSPDecal_default_instance_.get_mutable()->normal_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBSPDecal_default_instance_.get_mutable()->saxis_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBubbles_default_instance_.get_mutable()->mins_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBubbles_default_instance_.get_mutable()->maxs_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBubbleTrail_default_instance_.get_mutable()->mins_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBubbleTrail_default_instance_.get_mutable()->maxs_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEDecal_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEDecal_default_instance_.get_mutable()->start_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgEffectData_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgEffectData_default_instance_.get_mutable()->start_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgEffectData_default_instance_.get_mutable()->normal_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgEffectData_default_instance_.get_mutable()->angles_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
  _CMsgTEEffectDispatch_default_instance_.get_mutable()->effectdata_ = const_cast< ::proto::dota::CMsgEffectData*>(
      ::proto::dota::CMsgEffectData::internal_default_instance());
  _CMsgTEEnergySplash_default_instance_.get_mutable()->pos_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEEnergySplash_default_instance_.get_mutable()->dir_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEShatterSurface_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEShatterSurface_default_instance_.get_mutable()->angles_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
  _CMsgTEShatterSurface_default_instance_.get_mutable()->force_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEShatterSurface_default_instance_.get_mutable()->forcepos_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEGlowSprite_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEImpact_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEImpact_default_instance_.get_mutable()->normal_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEMuzzleFlash_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEMuzzleFlash_default_instance_.get_mutable()->angles_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
  _CMsgTEBloodStream_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEBloodStream_default_instance_.get_mutable()->direction_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEExplosion_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEExplosion_default_instance_.get_mutable()->normal_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEDust_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEDust_default_instance_.get_mutable()->direction_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTELargeFunnel_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTESparks_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTESparks_default_instance_.get_mutable()->direction_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEPhysicsProp_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEPhysicsProp_default_instance_.get_mutable()->velocity_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEPhysicsProp_default_instance_.get_mutable()->angles_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
  _CMsgTEPlayerDecal_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEProjectedDecal_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEProjectedDecal_default_instance_.get_mutable()->angles_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
  _CMsgTESmoke_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEWorldDecal_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgTEWorldDecal_default_instance_.get_mutable()->normal_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\010te.proto\022\nproto.dota\032\026networkbasetypes"
      ".proto\"_\n\023CMsgTEArmorRicochet\022#\n\003pos\030\001 \001"
      "(\0132\026.proto.dota.CMsgVector\022#\n\003dir\030\002 \001(\0132"
      "\026.proto.dota.CMsgVector\"\341\001\n\016CMsgTEBaseBe"
      "am\022\022\n\nmodelindex\030\001 \001(\006\022\021\n\thaloindex\030\002 \001("
      "\006\022\022\n\nstartframe\030\003 \001(\r\022\021\n\tframerate\030\004 \001(\r"
      "\022\014\n\004life\030\005 \001(\002\022\r\n\005width\030\006 \001(\002\022\020\n\010endwidt"
      "h\030\007 \001(\002\022\022\n\nfadelength\030\010 \001(\r\022\021\n\tamplitude"
      "\030\t \001(\002\022\r\n\005color\030\n \001(\007\022\r\n\005speed\030\013 \001(\r\022\r\n\005"
      "flags\030\014 \001(\r\"\262\001\n\022CMsgTEBeamEntPoint\022(\n\004ba"
      "se\030\001 \001(\0132\032.proto.dota.CMsgTEBaseBeam\022\023\n\013"
      "startentity\030\002 \001(\r\022\021\n\tendentity\030\003 \001(\r\022%\n\005"
      "start\030\004 \001(\0132\026.proto.dota.CMsgVector\022#\n\003e"
      "nd\030\005 \001(\0132\026.proto.dota.CMsgVector\"b\n\016CMsg"
      "TEBeamEnts\022(\n\004base\030\001 \001(\0132\032.proto.dota.CM"
      "sgTEBaseBeam\022\023\n\013startentity\030\002 \001(\r\022\021\n\tend"
      "entity\030\003 \001(\r\"\210\001\n\020CMsgTEBeamPoints\022(\n\004bas"
      "e\030\001 \001(\0132\032.proto.dota.CMsgTEBaseBeam\022%\n\005s"
      "tart\030\002 \001(\0132\026.proto.dota.CMsgVector\022#\n\003en"
      "d\030\003 \001(\0132\026.proto.dota.CMsgVector\"b\n\016CMsgT"
      "EBeamRing\022(\n\004base\030\001 \001(\0132\032.proto.dota.CMs"
      "gTEBaseBeam\022\023\n\013startentity\030\002 \001(\r\022\021\n\tende"
      "ntity\030\003 \001(\r\"\211\002\n\020CMsgTEBreakModel\022&\n\006orig"
      "in\030\001 \001(\0132\026.proto.dota.CMsgVector\022&\n\006angl"
      "es\030\002 \001(\0132\026.proto.dota.CMsgQAngle\022$\n\004size"
      "\030\003 \001(\0132\026.proto.dota.CMsgVector\022(\n\010veloci"
      "ty\030\004 \001(\0132\026.proto.dota.CMsgVector\022\025\n\rrand"
      "omization\030\005 \001(\r\022\022\n\nmodelindex\030\006 \001(\006\022\r\n\005c"
      "ount\030\007 \001(\r\022\014\n\004time\030\010 \001(\002\022\r\n\005flags\030\t \001(\r\""
      "\246\001\n\016CMsgTEBSPDecal\022&\n\006origin\030\001 \001(\0132\026.pro"
      "to.dota.CMsgVector\022&\n\006normal\030\002 \001(\0132\026.pro"
      "to.dota.CMsgVector\022%\n\005saxis\030\003 \001(\0132\026.prot"
      "o.dota.CMsgVector\022\016\n\006entity\030\004 \001(\r\022\r\n\005ind"
      "ex\030\005 \001(\r\"\211\001\n\rCMsgTEBubbles\022$\n\004mins\030\001 \001(\013"
      "2\026.proto.dota.CMsgVector\022$\n\004maxs\030\002 \001(\0132\026"
      ".proto.dota.CMsgVector\022\016\n\006height\030\003 \001(\002\022\r"
      "\n\005count\030\004 \001(\r\022\r\n\005speed\030\005 \001(\002\"\215\001\n\021CMsgTEB"
      "ubbleTrail\022$\n\004mins\030\001 \001(\0132\026.proto.dota.CM"
      "sgVector\022$\n\004maxs\030\002 \001(\0132\026.proto.dota.CMsg"
      "Vector\022\016\n\006waterz\030\003 \001(\002\022\r\n\005count\030\004 \001(\r\022\r\n"
      "\005speed\030\005 \001(\002\"\213\001\n\013CMsgTEDecal\022&\n\006origin\030\001"
      " \001(\0132\026.proto.dota.CMsgVector\022%\n\005start\030\002 "
      "\001(\0132\026.proto.dota.CMsgVector\022\016\n\006entity\030\003 "
      "\001(\r\022\016\n\006hitbox\030\004 \001(\r\022\r\n\005index\030\005 \001(\r\"\311\003\n\016C"
      "MsgEffectData\022&\n\006origin\030\001 \001(\0132\026.proto.do"
      "ta.CMsgVector\022%\n\005start\030\002 \001(\0132\026.proto.dot"
      "a.CMsgVector\022&\n\006normal\030\003 \001(\0132\026.proto.dot"
      "a.CMsgVector\022&\n\006angles\030\004 \001(\0132\026.proto.dot"
      "a.CMsgQAngle\022\016\n\006entity\030\005 \001(\007\022\023\n\013otherent"
      "ity\030\006 \001(\007\022\r\n\005scale\030\007 \001(\002\022\021\n\tmagnitude\030\010 "
      "\001(\002\022\016\n\006radius\030\t \001(\002\022\023\n\013surfaceprop\030\n \001(\007"
      "\022\023\n\013effectindex\030\013 \001(\006\022\022\n\ndamagetype\030\014 \001("
      "\r\022\020\n\010material\030\r \001(\r\022\016\n\006hitbox\030\016 \001(\r\022\r\n\005c"
      "olor\030\017 \001(\r\022\r\n\005flags\030\020 \001(\r\022\027\n\017attachmenti"
      "ndex\030\021 \001(\005\022\022\n\neffectname\030\022 \001(\r\022\026\n\016attach"
      "mentname\030\023 \001(\r\"F\n\024CMsgTEEffectDispatch\022."
      "\n\neffectdata\030\001 \001(\0132\032.proto.dota.CMsgEffe"
      "ctData\"q\n\022CMsgTEEnergySplash\022#\n\003pos\030\001 \001("
      "\0132\026.proto.dota.CMsgVector\022#\n\003dir\030\002 \001(\0132\026"
      ".proto.dota.CMsgVector\022\021\n\texplosive\030\003 \001("
      "\010\">\n\nCMsgTEFizz\022\016\n\006entity\030\001 \001(\r\022\017\n\007densi"
      "ty\030\002 \001(\r\022\017\n\007current\030\003 \001(\005\"\245\002\n\024CMsgTEShat"
      "terSurface\022&\n\006origin\030\001 \001(\0132\026.proto.dota."
      "CMsgVector\022&\n\006angles\030\002 \001(\0132\026.proto.dota."
      "CMsgQAngle\022%\n\005force\030\003 \001(\0132\026.proto.dota.C"
      "MsgVector\022(\n\010forcepos\030\004 \001(\0132\026.proto.dota"
      ".CMsgVector\022\r\n\005width\030\005 \001(\002\022\016\n\006height\030\006 \001"
      "(\002\022\021\n\tshardsize\030\007 \001(\002\022\023\n\013surfacetype\030\010 \001"
      "(\r\022\022\n\nfrontcolor\030\t \001(\007\022\021\n\tbackcolor\030\n \001("
      "\007\"k\n\020CMsgTEGlowSprite\022&\n\006origin\030\001 \001(\0132\026."
      "proto.dota.CMsgVector\022\r\n\005scale\030\002 \001(\002\022\014\n\004"
      "life\030\003 \001(\002\022\022\n\nbrightness\030\004 \001(\r\"l\n\014CMsgTE"
      "Impact\022&\n\006origin\030\001 \001(\0132\026.proto.dota.CMsg"
      "Vector\022&\n\006normal\030\002 \001(\0132\026.proto.dota.CMsg"
      "Vector\022\014\n\004type\030\003 \001(\r\"\200\001\n\021CMsgTEMuzzleFla"
      "sh\022&\n\006origin\030\001 \001(\0132\026.proto.dota.CMsgVect"
      "or\022&\n\006angles\030\002 \001(\0132\026.proto.dota.CMsgQAng"
      "le\022\r\n\005scale\030\003 \001(\002\022\014\n\004type\030\004 \001(\r\"\205\001\n\021CMsg"
      "TEBloodStream\022&\n\006origin\030\001 \001(\0132\026.proto.do"
      "ta.CMsgVector\022)\n\tdirection\030\002 \001(\0132\026.proto"
      ".dota.CMsgVector\022\r\n\005color\030\003 \001(\007\022\016\n\006amoun"
      "t\030\004 \001(\r\"\344\001\n\017CMsgTEExplosion\022&\n\006origin\030\001 "
      "\001(\0132\026.proto.dota.CMsgVector\022\021\n\tframerate"
      "\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022&\n\006normal\030\004 \001(\0132\026."
      "proto.dota.CMsgVector\022\024\n\014materialtype\030\005 "
      "\001(\r\022\016\n\006radius\030\006 \001(\r\022\021\n\tmagnitude\030\007 \001(\r\022\r"
      "\n\005scale\030\010 \001(\002\022\027\n\017affect_ragdolls\030\t \001(\010\"|"
      "\n\nCMsgTEDust\022&\n\006origin\030\001 \001(\0132\026.proto.dot"
      "a.CMsgVector\022\014\n\004size\030\002 \001(\002\022\r\n\005speed\030\003 \001("
      "\002\022)\n\tdirection\030\004 \001(\0132\026.proto.dota.CMsgVe"
      "ctor\"M\n\021CMsgTELargeFunnel\022&\n\006origin\030\001 \001("
      "\0132\026.proto.dota.CMsgVector\022\020\n\010reversed\030\002 "
      "\001(\r\"\204\001\n\014CMsgTESparks\022&\n\006origin\030\001 \001(\0132\026.p"
      "roto.dota.CMsgVector\022\021\n\tmagnitude\030\002 \001(\r\022"
      "\016\n\006length\030\003 \001(\r\022)\n\tdirection\030\004 \001(\0132\026.pro"
      "to.dota.CMsgVector\"\213\002\n\021CMsgTEPhysicsProp"
      "\022&\n\006origin\030\001 \001(\0132\026.proto.dota.CMsgVector"
      "\022(\n\010velocity\030\002 \001(\0132\026.proto.dota.CMsgVect"
      "or\022&\n\006angles\030\003 \001(\0132\026.proto.dota.CMsgQAng"
      "le\022\014\n\004skin\030\004 \001(\007\022\r\n\005flags\030\005 \001(\r\022\017\n\007effec"
      "ts\030\006 \001(\r\022\r\n\005color\030\007 \001(\007\022\022\n\nmodelindex\030\010 "
      "\001(\006\022\034\n\024breakmodelsnottomake\030\t \001(\r\022\r\n\005sca"
      "le\030\n \001(\002\"[\n\021CMsgTEPlayerDecal\022&\n\006origin\030"
      "\001 \001(\0132\026.proto.dota.CMsgVector\022\016\n\006player\030"
      "\002 \001(\r\022\016\n\006entity\030\003 \001(\r\"\207\001\n\024CMsgTEProjecte"
      "dDecal\022&\n\006origin\030\001 \001(\0132\026.proto.dota.CMsg"
      "Vector\022&\n\006angles\030\002 \001(\0132\026.proto.dota.CMsg"
      "QAngle\022\r\n\005index\030\003 \001(\r\022\020\n\010distance\030\004 \001(\002\""
      "D\n\013CMsgTESmoke\022&\n\006origin\030\001 \001(\0132\026.proto.d"
      "ota.CMsgVector\022\r\n\005scale\030\002 \001(\002\"q\n\020CMsgTEW"
      "orldDecal\022&\n\006origin\030\001 \001(\0132\026.proto.dota.C"
      "MsgVector\022&\n\006normal\030\002 \001(\0132\026.proto.dota.C"
      "MsgVector\022\r\n\005index\030\003 \001(\r*\323\004\n\016ETEProtobuf"
      "Ids\022\030\n\023TE_EffectDispatchId\020\220\003\022\027\n\022TE_Armo"
      "rRicochetId\020\221\003\022\026\n\021TE_BeamEntPointId\020\222\003\022\022"
      "\n\rTE_BeamEntsId\020\223\003\022\024\n\017TE_BeamPointsId\020\224\003"
      "\022\022\n\rTE_BeamRingId\020\225\003\022\024\n\017TE_BreakModelId\020"
      "\226\003\022\022\n\rTE_BSPDecalId\020\227\003\022\021\n\014TE_BubblesId\020\230"
      "\003\022\025\n\020TE_BubbleTrailId\020\231\003\022\017\n\nTE_DecalId\020\232"
      "\003\022\024\n\017TE_WorldDecalId\020\233\003\022\026\n\021TE_EnergySpla"
      "shId\020\234\003\022\016\n\tTE_FizzId\020\235\003\022\030\n\023TE_ShatterSur"
      "faceId\020\236\003\022\024\n\017TE_GlowSpriteId\020\237\003\022\020\n\013TE_Im"
      "pactId\020\240\003\022\025\n\020TE_MuzzleFlashId\020\241\003\022\025\n\020TE_B"
      "loodStreamId\020\242\003\022\023\n\016TE_ExplosionId\020\243\003\022\016\n\t"
      "TE_DustId\020\244\003\022\025\n\020TE_LargeFunnelId\020\245\003\022\020\n\013T"
      "E_SparksId\020\246\003\022\025\n\020TE_PhysicsPropId\020\247\003\022\025\n\020"
      "TE_PlayerDecalId\020\250\003\022\030\n\023TE_ProjectedDecal"
      "Id\020\251\003\022\017\n\nTE_SmokeId\020\252\003B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "te.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_networkbasetypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_te_2eproto

const ::google::protobuf::EnumDescriptor* ETEProtobufIds_descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_enum_descriptors[0];
}
bool ETEProtobufIds_IsValid(int value) {
  switch (value) {
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEArmorRicochet::kPosFieldNumber;
const int CMsgTEArmorRicochet::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEArmorRicochet::CMsgTEArmorRicochet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEArmorRicochet)
}
CMsgTEArmorRicochet::CMsgTEArmorRicochet(const CMsgTEArmorRicochet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::dota::CMsgVector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::proto::dota::CMsgVector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEArmorRicochet)
}

void CMsgTEArmorRicochet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&pos_) + sizeof(dir_));
}

CMsgTEArmorRicochet::~CMsgTEArmorRicochet() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEArmorRicochet)
  SharedDtor();
}

void CMsgTEArmorRicochet::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void CMsgTEArmorRicochet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEArmorRicochet::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEArmorRicochet& CMsgTEArmorRicochet::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEArmorRicochet* CMsgTEArmorRicochet::New(::google::protobuf::Arena* arena) const {
  CMsgTEArmorRicochet* n = new CMsgTEArmorRicochet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEArmorRicochet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEArmorRicochet)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::proto::dota::CMsgVector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::proto::dota::CMsgVector::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEArmorRicochet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEArmorRicochet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector dir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEArmorRicochet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEArmorRicochet)
  return false;
#undef DO_
}

void CMsgTEArmorRicochet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEArmorRicochet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // optional .proto.dota.CMsgVector dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dir_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEArmorRicochet)
}

::google::protobuf::uint8* CMsgTEArmorRicochet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEArmorRicochet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector dir = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dir_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEArmorRicochet)
  return target;
}

size_t CMsgTEArmorRicochet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEArmorRicochet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .proto.dota.CMsgVector dir = 2;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dir_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEArmorRicochet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEArmorRicochet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEArmorRicochet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEArmorRicochet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEArmorRicochet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEArmorRicochet)
    MergeFrom(*source);
  }
}

void CMsgTEArmorRicochet::MergeFrom(const CMsgTEArmorRicochet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEArmorRicochet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::proto::dota::CMsgVector::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dir()->::proto::dota::CMsgVector::MergeFrom(from.dir());
    }
  }
}

void CMsgTEArmorRicochet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEArmorRicochet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEArmorRicochet::CopyFrom(const CMsgTEArmorRicochet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEArmorRicochet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEArmorRicochet::IsInitialized() const {
  return true;
}

void CMsgTEArmorRicochet::Swap(CMsgTEArmorRicochet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEArmorRicochet::InternalSwap(CMsgTEArmorRicochet* other) {
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEArmorRicochet::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEArmorRicochet

// optional .proto.dota.CMsgVector pos = 1;
bool CMsgTEArmorRicochet::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEArmorRicochet::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEArmorRicochet::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEArmorRicochet::clear_pos() {
  if (pos_ != NULL) pos_->::proto::dota::CMsgVector::Clear();
  clear_has_pos();
}
const ::proto::dota::CMsgVector& CMsgTEArmorRicochet::pos() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEArmorRicochet.pos)
  return pos_ != NULL ? *pos_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEArmorRicochet::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEArmorRicochet.pos)
  return pos_;
}
::proto::dota::CMsgVector* CMsgTEArmorRicochet::release_pos() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEArmorRicochet.pos)
  clear_has_pos();
  ::proto::dota::CMsgVector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void CMsgTEArmorRicochet::set_allocated_pos(::proto::dota::CMsgVector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEArmorRicochet.pos)
}

// optional .proto.dota.CMsgVector dir = 2;
bool CMsgTEArmorRicochet::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEArmorRicochet::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEArmorRicochet::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEArmorRicochet::clear_dir() {
  if (dir_ != NULL) dir_->::proto::dota::CMsgVector::Clear();
  clear_has_dir();
}
const ::proto::dota::CMsgVector& CMsgTEArmorRicochet::dir() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEArmorRicochet.dir)
  return dir_ != NULL ? *dir_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEArmorRicochet::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEArmorRicochet.dir)
  return dir_;
}
::proto::dota::CMsgVector* CMsgTEArmorRicochet::release_dir() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEArmorRicochet.dir)
  clear_has_dir();
  ::proto::dota::CMsgVector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void CMsgTEArmorRicochet::set_allocated_dir(::proto::dota::CMsgVector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEArmorRicochet.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBaseBeam::kModelindexFieldNumber;
const int CMsgTEBaseBeam::kHaloindexFieldNumber;
const int CMsgTEBaseBeam::kStartframeFieldNumber;
const int CMsgTEBaseBeam::kFramerateFieldNumber;
const int CMsgTEBaseBeam::kLifeFieldNumber;
const int CMsgTEBaseBeam::kWidthFieldNumber;
const int CMsgTEBaseBeam::kEndwidthFieldNumber;
const int CMsgTEBaseBeam::kFadelengthFieldNumber;
const int CMsgTEBaseBeam::kAmplitudeFieldNumber;
const int CMsgTEBaseBeam::kColorFieldNumber;
const int CMsgTEBaseBeam::kSpeedFieldNumber;
const int CMsgTEBaseBeam::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBaseBeam::CMsgTEBaseBeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBaseBeam)
}
CMsgTEBaseBeam::CMsgTEBaseBeam(const CMsgTEBaseBeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&modelindex_, &from.modelindex_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&modelindex_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBaseBeam)
}

void CMsgTEBaseBeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&modelindex_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&modelindex_) + sizeof(flags_));
}

CMsgTEBaseBeam::~CMsgTEBaseBeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBaseBeam)
  SharedDtor();
}

void CMsgTEBaseBeam::SharedDtor() {
}

void CMsgTEBaseBeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBaseBeam::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBaseBeam& CMsgTEBaseBeam::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBaseBeam* CMsgTEBaseBeam::New(::google::protobuf::Arena* arena) const {
  CMsgTEBaseBeam* n = new CMsgTEBaseBeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBaseBeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBaseBeam)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&modelindex_, 0, reinterpret_cast<char*>(&fadelength_) -
      reinterpret_cast<char*>(&modelindex_) + sizeof(fadelength_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&amplitude_, 0, reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&amplitude_) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBaseBeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBaseBeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 modelindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_modelindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &modelindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 haloindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_haloindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &haloindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 startframe = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_startframe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 framerate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_framerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float life = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_life();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &life_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float endwidth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_endwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fadelength = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_fadelength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fadelength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float amplitude = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_amplitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBaseBeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBaseBeam)
  return false;
#undef DO_
}

void CMsgTEBaseBeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBaseBeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 modelindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->modelindex(), output);
  }

  // optional fixed64 haloindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->haloindex(), output);
  }

  // optional uint32 startframe = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->startframe(), output);
  }

  // optional uint32 framerate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->framerate(), output);
  }

  // optional float life = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->life(), output);
  }

  // optional float width = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->width(), output);
  }

  // optional float endwidth = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->endwidth(), output);
  }

  // optional uint32 fadelength = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fadelength(), output);
  }

  // optional float amplitude = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->amplitude(), output);
  }

  // optional fixed32 color = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->color(), output);
  }

  // optional uint32 speed = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->speed(), output);
  }

  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBaseBeam)
}

::google::protobuf::uint8* CMsgTEBaseBeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBaseBeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 modelindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->modelindex(), target);
  }

  // optional fixed64 haloindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->haloindex(), target);
  }

  // optional uint32 startframe = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->startframe(), target);
  }

  // optional uint32 framerate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->framerate(), target);
  }

  // optional float life = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->life(), target);
  }

  // optional float width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->width(), target);
  }

  // optional float endwidth = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->endwidth(), target);
  }

  // optional uint32 fadelength = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fadelength(), target);
  }

  // optional float amplitude = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->amplitude(), target);
  }

  // optional fixed32 color = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->color(), target);
  }

  // optional uint32 speed = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->speed(), target);
  }

  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBaseBeam)
  return target;
}

size_t CMsgTEBaseBeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBaseBeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 modelindex = 1;
    if (has_modelindex()) {
      total_size += 1 + 8;
    }

    // optional fixed64 haloindex = 2;
    if (has_haloindex()) {
      total_size += 1 + 8;
    }

    // optional uint32 startframe = 3;
    if (has_startframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startframe());
    }

    // optional uint32 framerate = 4;
    if (has_framerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framerate());
    }

    // optional float life = 5;
    if (has_life()) {
      total_size += 1 + 4;
    }

    // optional float width = 6;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float endwidth = 7;
    if (has_endwidth()) {
      total_size += 1 + 4;
    }

    // optional uint32 fadelength = 8;
    if (has_fadelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fadelength());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float amplitude = 9;
    if (has_amplitude()) {
      total_size += 1 + 4;
    }

    // optional fixed32 color = 10;
    if (has_color()) {
      total_size += 1 + 4;
    }

    // optional uint32 speed = 11;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 flags = 12;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBaseBeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBaseBeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBaseBeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBaseBeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBaseBeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBaseBeam)
    MergeFrom(*source);
  }
}

void CMsgTEBaseBeam::MergeFrom(const CMsgTEBaseBeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBaseBeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      modelindex_ = from.modelindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      haloindex_ = from.haloindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      startframe_ = from.startframe_;
    }
    if (cached_has_bits & 0x00000008u) {
      framerate_ = from.framerate_;
    }
    if (cached_has_bits & 0x00000010u) {
      life_ = from.life_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      endwidth_ = from.endwidth_;
    }
    if (cached_has_bits & 0x00000080u) {
      fadelength_ = from.fadelength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      amplitude_ = from.amplitude_;
    }
    if (cached_has_bits & 0x00000200u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEBaseBeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBaseBeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBaseBeam::CopyFrom(const CMsgTEBaseBeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBaseBeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBaseBeam::IsInitialized() const {
  return true;
}

void CMsgTEBaseBeam::Swap(CMsgTEBaseBeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBaseBeam::InternalSwap(CMsgTEBaseBeam* other) {
  std::swap(modelindex_, other->modelindex_);
  std::swap(haloindex_, other->haloindex_);
  std::swap(startframe_, other->startframe_);
  std::swap(framerate_, other->framerate_);
  std::swap(life_, other->life_);
  std::swap(width_, other->width_);
  std::swap(endwidth_, other->endwidth_);
  std::swap(fadelength_, other->fadelength_);
  std::swap(amplitude_, other->amplitude_);
  std::swap(color_, other->color_);
  std::swap(speed_, other->speed_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBaseBeam::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBaseBeam

// optional fixed64 modelindex = 1;
bool CMsgTEBaseBeam::has_modelindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBaseBeam::set_has_modelindex() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBaseBeam::clear_has_modelindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBaseBeam::clear_modelindex() {
  modelindex_ = GOOGLE_ULONGLONG(0);
  clear_has_modelindex();
}
::google::protobuf::uint64 CMsgTEBaseBeam::modelindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.modelindex)
  return modelindex_;
}
void CMsgTEBaseBeam::set_modelindex(::google::protobuf::uint64 value) {
  set_has_modelindex();
  modelindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.modelindex)
}

// optional fixed64 haloindex = 2;
bool CMsgTEBaseBeam::has_haloindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBaseBeam::set_has_haloindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBaseBeam::clear_has_haloindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBaseBeam::clear_haloindex() {
  haloindex_ = GOOGLE_ULONGLONG(0);
  clear_has_haloindex();
}
::google::protobuf::uint64 CMsgTEBaseBeam::haloindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.haloindex)
  return haloindex_;
}
void CMsgTEBaseBeam::set_haloindex(::google::protobuf::uint64 value) {
  set_has_haloindex();
  haloindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.haloindex)
}

// optional uint32 startframe = 3;
bool CMsgTEBaseBeam::has_startframe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBaseBeam::set_has_startframe() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBaseBeam::clear_has_startframe() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBaseBeam::clear_startframe() {
  startframe_ = 0u;
  clear_has_startframe();
}
::google::protobuf::uint32 CMsgTEBaseBeam::startframe() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.startframe)
  return startframe_;
}
void CMsgTEBaseBeam::set_startframe(::google::protobuf::uint32 value) {
  set_has_startframe();
  startframe_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.startframe)
}

// optional uint32 framerate = 4;
bool CMsgTEBaseBeam::has_framerate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEBaseBeam::set_has_framerate() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEBaseBeam::clear_has_framerate() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEBaseBeam::clear_framerate() {
  framerate_ = 0u;
  clear_has_framerate();
}
::google::protobuf::uint32 CMsgTEBaseBeam::framerate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.framerate)
  return framerate_;
}
void CMsgTEBaseBeam::set_framerate(::google::protobuf::uint32 value) {
  set_has_framerate();
  framerate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.framerate)
}

// optional float life = 5;
bool CMsgTEBaseBeam::has_life() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEBaseBeam::set_has_life() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEBaseBeam::clear_has_life() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEBaseBeam::clear_life() {
  life_ = 0;
  clear_has_life();
}
float CMsgTEBaseBeam::life() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.life)
  return life_;
}
void CMsgTEBaseBeam::set_life(float value) {
  set_has_life();
  life_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.life)
}

// optional float width = 6;
bool CMsgTEBaseBeam::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgTEBaseBeam::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgTEBaseBeam::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgTEBaseBeam::clear_width() {
  width_ = 0;
  clear_has_width();
}
float CMsgTEBaseBeam::width() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.width)
  return width_;
}
void CMsgTEBaseBeam::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.width)
}

// optional float endwidth = 7;
bool CMsgTEBaseBeam::has_endwidth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgTEBaseBeam::set_has_endwidth() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgTEBaseBeam::clear_has_endwidth() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgTEBaseBeam::clear_endwidth() {
  endwidth_ = 0;
  clear_has_endwidth();
}
float CMsgTEBaseBeam::endwidth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.endwidth)
  return endwidth_;
}
void CMsgTEBaseBeam::set_endwidth(float value) {
  set_has_endwidth();
  endwidth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.endwidth)
}

// optional uint32 fadelength = 8;
bool CMsgTEBaseBeam::has_fadelength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgTEBaseBeam::set_has_fadelength() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgTEBaseBeam::clear_has_fadelength() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgTEBaseBeam::clear_fadelength() {
  fadelength_ = 0u;
  clear_has_fadelength();
}
::google::protobuf::uint32 CMsgTEBaseBeam::fadelength() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.fadelength)
  return fadelength_;
}
void CMsgTEBaseBeam::set_fadelength(::google::protobuf::uint32 value) {
  set_has_fadelength();
  fadelength_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.fadelength)
}

// optional float amplitude = 9;
bool CMsgTEBaseBeam::has_amplitude() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgTEBaseBeam::set_has_amplitude() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgTEBaseBeam::clear_has_amplitude() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgTEBaseBeam::clear_amplitude() {
  amplitude_ = 0;
  clear_has_amplitude();
}
float CMsgTEBaseBeam::amplitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.amplitude)
  return amplitude_;
}
void CMsgTEBaseBeam::set_amplitude(float value) {
  set_has_amplitude();
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.amplitude)
}

// optional fixed32 color = 10;
bool CMsgTEBaseBeam::has_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgTEBaseBeam::set_has_color() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgTEBaseBeam::clear_has_color() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgTEBaseBeam::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CMsgTEBaseBeam::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.color)
  return color_;
}
void CMsgTEBaseBeam::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.color)
}

// optional uint32 speed = 11;
bool CMsgTEBaseBeam::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgTEBaseBeam::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgTEBaseBeam::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgTEBaseBeam::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
::google::protobuf::uint32 CMsgTEBaseBeam::speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.speed)
  return speed_;
}
void CMsgTEBaseBeam::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.speed)
}

// optional uint32 flags = 12;
bool CMsgTEBaseBeam::has_flags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgTEBaseBeam::set_has_flags() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgTEBaseBeam::clear_has_flags() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgTEBaseBeam::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CMsgTEBaseBeam::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBaseBeam.flags)
  return flags_;
}
void CMsgTEBaseBeam::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBaseBeam.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBeamEntPoint::kBaseFieldNumber;
const int CMsgTEBeamEntPoint::kStartentityFieldNumber;
const int CMsgTEBeamEntPoint::kEndentityFieldNumber;
const int CMsgTEBeamEntPoint::kStartFieldNumber;
const int CMsgTEBeamEntPoint::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBeamEntPoint::CMsgTEBeamEntPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBeamEntPoint)
}
CMsgTEBeamEntPoint::CMsgTEBeamEntPoint(const CMsgTEBeamEntPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::proto::dota::CMsgTEBaseBeam(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_start()) {
    start_ = new ::proto::dota::CMsgVector(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::proto::dota::CMsgVector(*from.end_);
  } else {
    end_ = NULL;
  }
  ::memcpy(&startentity_, &from.startentity_,
    reinterpret_cast<char*>(&endentity_) -
    reinterpret_cast<char*>(&startentity_) + sizeof(endentity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBeamEntPoint)
}

void CMsgTEBeamEntPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&base_, 0, reinterpret_cast<char*>(&endentity_) -
    reinterpret_cast<char*>(&base_) + sizeof(endentity_));
}

CMsgTEBeamEntPoint::~CMsgTEBeamEntPoint() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBeamEntPoint)
  SharedDtor();
}

void CMsgTEBeamEntPoint::SharedDtor() {
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete start_;
  }
  if (this != internal_default_instance()) {
    delete end_;
  }
}

void CMsgTEBeamEntPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBeamEntPoint::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBeamEntPoint& CMsgTEBeamEntPoint::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBeamEntPoint* CMsgTEBeamEntPoint::New(::google::protobuf::Arena* arena) const {
  CMsgTEBeamEntPoint* n = new CMsgTEBeamEntPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBeamEntPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBeamEntPoint)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_base()) {
      GOOGLE_DCHECK(base_ != NULL);
      base_->::proto::dota::CMsgTEBaseBeam::Clear();
    }
    if (has_start()) {
      GOOGLE_DCHECK(start_ != NULL);
      start_->::proto::dota::CMsgVector::Clear();
    }
    if (has_end()) {
      GOOGLE_DCHECK(end_ != NULL);
      end_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&startentity_, 0, reinterpret_cast<char*>(&endentity_) -
      reinterpret_cast<char*>(&startentity_) + sizeof(endentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBeamEntPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBeamEntPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgTEBaseBeam base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 startentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 endentity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_endentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector start = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector end = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBeamEntPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBeamEntPoint)
  return false;
#undef DO_
}

void CMsgTEBeamEntPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBeamEntPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgTEBaseBeam base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional uint32 startentity = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startentity(), output);
  }

  // optional uint32 endentity = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endentity(), output);
  }

  // optional .proto.dota.CMsgVector start = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_, output);
  }

  // optional .proto.dota.CMsgVector end = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->end_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBeamEntPoint)
}

::google::protobuf::uint8* CMsgTEBeamEntPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBeamEntPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgTEBaseBeam base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, deterministic, target);
  }

  // optional uint32 startentity = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startentity(), target);
  }

  // optional uint32 endentity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endentity(), target);
  }

  // optional .proto.dota.CMsgVector start = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->start_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector end = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->end_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBeamEntPoint)
  return target;
}

size_t CMsgTEBeamEntPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBeamEntPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgTEBaseBeam base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional .proto.dota.CMsgVector start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_);
    }

    // optional .proto.dota.CMsgVector end = 5;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->end_);
    }

    // optional uint32 startentity = 2;
    if (has_startentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startentity());
    }

    // optional uint32 endentity = 3;
    if (has_endentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endentity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBeamEntPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBeamEntPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBeamEntPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBeamEntPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBeamEntPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBeamEntPoint)
    MergeFrom(*source);
  }
}

void CMsgTEBeamEntPoint::MergeFrom(const CMsgTEBeamEntPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBeamEntPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::proto::dota::CMsgTEBaseBeam::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_start()->::proto::dota::CMsgVector::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_end()->::proto::dota::CMsgVector::MergeFrom(from.end());
    }
    if (cached_has_bits & 0x00000008u) {
      startentity_ = from.startentity_;
    }
    if (cached_has_bits & 0x00000010u) {
      endentity_ = from.endentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEBeamEntPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBeamEntPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBeamEntPoint::CopyFrom(const CMsgTEBeamEntPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBeamEntPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBeamEntPoint::IsInitialized() const {
  return true;
}

void CMsgTEBeamEntPoint::Swap(CMsgTEBeamEntPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBeamEntPoint::InternalSwap(CMsgTEBeamEntPoint* other) {
  std::swap(base_, other->base_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(startentity_, other->startentity_);
  std::swap(endentity_, other->endentity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBeamEntPoint::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBeamEntPoint

// optional .proto.dota.CMsgTEBaseBeam base = 1;
bool CMsgTEBeamEntPoint::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBeamEntPoint::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBeamEntPoint::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBeamEntPoint::clear_base() {
  if (base_ != NULL) base_->::proto::dota::CMsgTEBaseBeam::Clear();
  clear_has_base();
}
const ::proto::dota::CMsgTEBaseBeam& CMsgTEBeamEntPoint::base() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamEntPoint.base)
  return base_ != NULL ? *base_
                         : *::proto::dota::CMsgTEBaseBeam::internal_default_instance();
}
::proto::dota::CMsgTEBaseBeam* CMsgTEBeamEntPoint::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::proto::dota::CMsgTEBaseBeam;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBeamEntPoint.base)
  return base_;
}
::proto::dota::CMsgTEBaseBeam* CMsgTEBeamEntPoint::release_base() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBeamEntPoint.base)
  clear_has_base();
  ::proto::dota::CMsgTEBaseBeam* temp = base_;
  base_ = NULL;
  return temp;
}
void CMsgTEBeamEntPoint::set_allocated_base(::proto::dota::CMsgTEBaseBeam* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBeamEntPoint.base)
}

// optional uint32 startentity = 2;
bool CMsgTEBeamEntPoint::has_startentity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEBeamEntPoint::set_has_startentity() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEBeamEntPoint::clear_has_startentity() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEBeamEntPoint::clear_startentity() {
  startentity_ = 0u;
  clear_has_startentity();
}
::google::protobuf::uint32 CMsgTEBeamEntPoint::startentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamEntPoint.startentity)
  return startentity_;
}
void CMsgTEBeamEntPoint::set_startentity(::google::protobuf::uint32 value) {
  set_has_startentity();
  startentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBeamEntPoint.startentity)
}

// optional uint32 endentity = 3;
bool CMsgTEBeamEntPoint::has_endentity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEBeamEntPoint::set_has_endentity() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEBeamEntPoint::clear_has_endentity() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEBeamEntPoint::clear_endentity() {
  endentity_ = 0u;
  clear_has_endentity();
}
::google::protobuf::uint32 CMsgTEBeamEntPoint::endentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamEntPoint.endentity)
  return endentity_;
}
void CMsgTEBeamEntPoint::set_endentity(::google::protobuf::uint32 value) {
  set_has_endentity();
  endentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBeamEntPoint.endentity)
}

// optional .proto.dota.CMsgVector start = 4;
bool CMsgTEBeamEntPoint::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBeamEntPoint::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBeamEntPoint::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBeamEntPoint::clear_start() {
  if (start_ != NULL) start_->::proto::dota::CMsgVector::Clear();
  clear_has_start();
}
const ::proto::dota::CMsgVector& CMsgTEBeamEntPoint::start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamEntPoint.start)
  return start_ != NULL ? *start_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBeamEntPoint::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBeamEntPoint.start)
  return start_;
}
::proto::dota::CMsgVector* CMsgTEBeamEntPoint::release_start() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBeamEntPoint.start)
  clear_has_start();
  ::proto::dota::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
void CMsgTEBeamEntPoint::set_allocated_start(::proto::dota::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBeamEntPoint.start)
}

// optional .proto.dota.CMsgVector end = 5;
bool CMsgTEBeamEntPoint::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBeamEntPoint::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBeamEntPoint::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBeamEntPoint::clear_end() {
  if (end_ != NULL) end_->::proto::dota::CMsgVector::Clear();
  clear_has_end();
}
const ::proto::dota::CMsgVector& CMsgTEBeamEntPoint::end() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamEntPoint.end)
  return end_ != NULL ? *end_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBeamEntPoint::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    end_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBeamEntPoint.end)
  return end_;
}
::proto::dota::CMsgVector* CMsgTEBeamEntPoint::release_end() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBeamEntPoint.end)
  clear_has_end();
  ::proto::dota::CMsgVector* temp = end_;
  end_ = NULL;
  return temp;
}
void CMsgTEBeamEntPoint::set_allocated_end(::proto::dota::CMsgVector* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBeamEntPoint.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBeamEnts::kBaseFieldNumber;
const int CMsgTEBeamEnts::kStartentityFieldNumber;
const int CMsgTEBeamEnts::kEndentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBeamEnts::CMsgTEBeamEnts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBeamEnts)
}
CMsgTEBeamEnts::CMsgTEBeamEnts(const CMsgTEBeamEnts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::proto::dota::CMsgTEBaseBeam(*from.base_);
  } else {
    base_ = NULL;
  }
  ::memcpy(&startentity_, &from.startentity_,
    reinterpret_cast<char*>(&endentity_) -
    reinterpret_cast<char*>(&startentity_) + sizeof(endentity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBeamEnts)
}

void CMsgTEBeamEnts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&base_, 0, reinterpret_cast<char*>(&endentity_) -
    reinterpret_cast<char*>(&base_) + sizeof(endentity_));
}

CMsgTEBeamEnts::~CMsgTEBeamEnts() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBeamEnts)
  SharedDtor();
}

void CMsgTEBeamEnts::SharedDtor() {
  if (this != internal_default_instance()) {
    delete base_;
  }
}

void CMsgTEBeamEnts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBeamEnts::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBeamEnts& CMsgTEBeamEnts::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBeamEnts* CMsgTEBeamEnts::New(::google::protobuf::Arena* arena) const {
  CMsgTEBeamEnts* n = new CMsgTEBeamEnts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBeamEnts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBeamEnts)
  if (has_base()) {
    GOOGLE_DCHECK(base_ != NULL);
    base_->::proto::dota::CMsgTEBaseBeam::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&startentity_, 0, reinterpret_cast<char*>(&endentity_) -
      reinterpret_cast<char*>(&startentity_) + sizeof(endentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBeamEnts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBeamEnts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgTEBaseBeam base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 startentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 endentity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_endentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBeamEnts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBeamEnts)
  return false;
#undef DO_
}

void CMsgTEBeamEnts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBeamEnts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgTEBaseBeam base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional uint32 startentity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startentity(), output);
  }

  // optional uint32 endentity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endentity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBeamEnts)
}

::google::protobuf::uint8* CMsgTEBeamEnts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBeamEnts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgTEBaseBeam base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, deterministic, target);
  }

  // optional uint32 startentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startentity(), target);
  }

  // optional uint32 endentity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endentity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBeamEnts)
  return target;
}

size_t CMsgTEBeamEnts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBeamEnts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgTEBaseBeam base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional uint32 startentity = 2;
    if (has_startentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startentity());
    }

    // optional uint32 endentity = 3;
    if (has_endentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endentity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBeamEnts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBeamEnts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBeamEnts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBeamEnts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBeamEnts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBeamEnts)
    MergeFrom(*source);
  }
}

void CMsgTEBeamEnts::MergeFrom(const CMsgTEBeamEnts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBeamEnts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::proto::dota::CMsgTEBaseBeam::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      startentity_ = from.startentity_;
    }
    if (cached_has_bits & 0x00000004u) {
      endentity_ = from.endentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEBeamEnts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBeamEnts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBeamEnts::CopyFrom(const CMsgTEBeamEnts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBeamEnts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBeamEnts::IsInitialized() const {
  return true;
}

void CMsgTEBeamEnts::Swap(CMsgTEBeamEnts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBeamEnts::InternalSwap(CMsgTEBeamEnts* other) {
  std::swap(base_, other->base_);
  std::swap(startentity_, other->startentity_);
  std::swap(endentity_, other->endentity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBeamEnts::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBeamEnts

// optional .proto.dota.CMsgTEBaseBeam base = 1;
bool CMsgTEBeamEnts::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBeamEnts::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBeamEnts::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBeamEnts::clear_base() {
  if (base_ != NULL) base_->::proto::dota::CMsgTEBaseBeam::Clear();
  clear_has_base();
}
const ::proto::dota::CMsgTEBaseBeam& CMsgTEBeamEnts::base() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamEnts.base)
  return base_ != NULL ? *base_
                         : *::proto::dota::CMsgTEBaseBeam::internal_default_instance();
}
::proto::dota::CMsgTEBaseBeam* CMsgTEBeamEnts::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::proto::dota::CMsgTEBaseBeam;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBeamEnts.base)
  return base_;
}
::proto::dota::CMsgTEBaseBeam* CMsgTEBeamEnts::release_base() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBeamEnts.base)
  clear_has_base();
  ::proto::dota::CMsgTEBaseBeam* temp = base_;
  base_ = NULL;
  return temp;
}
void CMsgTEBeamEnts::set_allocated_base(::proto::dota::CMsgTEBaseBeam* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBeamEnts.base)
}

// optional uint32 startentity = 2;
bool CMsgTEBeamEnts::has_startentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBeamEnts::set_has_startentity() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBeamEnts::clear_has_startentity() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBeamEnts::clear_startentity() {
  startentity_ = 0u;
  clear_has_startentity();
}
::google::protobuf::uint32 CMsgTEBeamEnts::startentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamEnts.startentity)
  return startentity_;
}
void CMsgTEBeamEnts::set_startentity(::google::protobuf::uint32 value) {
  set_has_startentity();
  startentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBeamEnts.startentity)
}

// optional uint32 endentity = 3;
bool CMsgTEBeamEnts::has_endentity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBeamEnts::set_has_endentity() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBeamEnts::clear_has_endentity() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBeamEnts::clear_endentity() {
  endentity_ = 0u;
  clear_has_endentity();
}
::google::protobuf::uint32 CMsgTEBeamEnts::endentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamEnts.endentity)
  return endentity_;
}
void CMsgTEBeamEnts::set_endentity(::google::protobuf::uint32 value) {
  set_has_endentity();
  endentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBeamEnts.endentity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBeamPoints::kBaseFieldNumber;
const int CMsgTEBeamPoints::kStartFieldNumber;
const int CMsgTEBeamPoints::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBeamPoints::CMsgTEBeamPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBeamPoints)
}
CMsgTEBeamPoints::CMsgTEBeamPoints(const CMsgTEBeamPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::proto::dota::CMsgTEBaseBeam(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_start()) {
    start_ = new ::proto::dota::CMsgVector(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::proto::dota::CMsgVector(*from.end_);
  } else {
    end_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBeamPoints)
}

void CMsgTEBeamPoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&base_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&base_) + sizeof(end_));
}

CMsgTEBeamPoints::~CMsgTEBeamPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBeamPoints)
  SharedDtor();
}

void CMsgTEBeamPoints::SharedDtor() {
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete start_;
  }
  if (this != internal_default_instance()) {
    delete end_;
  }
}

void CMsgTEBeamPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBeamPoints::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBeamPoints& CMsgTEBeamPoints::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBeamPoints* CMsgTEBeamPoints::New(::google::protobuf::Arena* arena) const {
  CMsgTEBeamPoints* n = new CMsgTEBeamPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBeamPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBeamPoints)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_base()) {
      GOOGLE_DCHECK(base_ != NULL);
      base_->::proto::dota::CMsgTEBaseBeam::Clear();
    }
    if (has_start()) {
      GOOGLE_DCHECK(start_ != NULL);
      start_->::proto::dota::CMsgVector::Clear();
    }
    if (has_end()) {
      GOOGLE_DCHECK(end_ != NULL);
      end_->::proto::dota::CMsgVector::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBeamPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBeamPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgTEBaseBeam base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBeamPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBeamPoints)
  return false;
#undef DO_
}

void CMsgTEBeamPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBeamPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgTEBaseBeam base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional .proto.dota.CMsgVector start = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_, output);
  }

  // optional .proto.dota.CMsgVector end = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->end_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBeamPoints)
}

::google::protobuf::uint8* CMsgTEBeamPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBeamPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgTEBaseBeam base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->start_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector end = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->end_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBeamPoints)
  return target;
}

size_t CMsgTEBeamPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBeamPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgTEBaseBeam base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional .proto.dota.CMsgVector start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_);
    }

    // optional .proto.dota.CMsgVector end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->end_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBeamPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBeamPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBeamPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBeamPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBeamPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBeamPoints)
    MergeFrom(*source);
  }
}

void CMsgTEBeamPoints::MergeFrom(const CMsgTEBeamPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBeamPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::proto::dota::CMsgTEBaseBeam::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_start()->::proto::dota::CMsgVector::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_end()->::proto::dota::CMsgVector::MergeFrom(from.end());
    }
  }
}

void CMsgTEBeamPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBeamPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBeamPoints::CopyFrom(const CMsgTEBeamPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBeamPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBeamPoints::IsInitialized() const {
  return true;
}

void CMsgTEBeamPoints::Swap(CMsgTEBeamPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBeamPoints::InternalSwap(CMsgTEBeamPoints* other) {
  std::swap(base_, other->base_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBeamPoints::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBeamPoints

// optional .proto.dota.CMsgTEBaseBeam base = 1;
bool CMsgTEBeamPoints::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBeamPoints::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBeamPoints::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBeamPoints::clear_base() {
  if (base_ != NULL) base_->::proto::dota::CMsgTEBaseBeam::Clear();
  clear_has_base();
}
const ::proto::dota::CMsgTEBaseBeam& CMsgTEBeamPoints::base() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamPoints.base)
  return base_ != NULL ? *base_
                         : *::proto::dota::CMsgTEBaseBeam::internal_default_instance();
}
::proto::dota::CMsgTEBaseBeam* CMsgTEBeamPoints::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::proto::dota::CMsgTEBaseBeam;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBeamPoints.base)
  return base_;
}
::proto::dota::CMsgTEBaseBeam* CMsgTEBeamPoints::release_base() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBeamPoints.base)
  clear_has_base();
  ::proto::dota::CMsgTEBaseBeam* temp = base_;
  base_ = NULL;
  return temp;
}
void CMsgTEBeamPoints::set_allocated_base(::proto::dota::CMsgTEBaseBeam* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBeamPoints.base)
}

// optional .proto.dota.CMsgVector start = 2;
bool CMsgTEBeamPoints::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBeamPoints::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBeamPoints::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBeamPoints::clear_start() {
  if (start_ != NULL) start_->::proto::dota::CMsgVector::Clear();
  clear_has_start();
}
const ::proto::dota::CMsgVector& CMsgTEBeamPoints::start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamPoints.start)
  return start_ != NULL ? *start_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBeamPoints::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBeamPoints.start)
  return start_;
}
::proto::dota::CMsgVector* CMsgTEBeamPoints::release_start() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBeamPoints.start)
  clear_has_start();
  ::proto::dota::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
void CMsgTEBeamPoints::set_allocated_start(::proto::dota::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBeamPoints.start)
}

// optional .proto.dota.CMsgVector end = 3;
bool CMsgTEBeamPoints::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBeamPoints::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBeamPoints::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBeamPoints::clear_end() {
  if (end_ != NULL) end_->::proto::dota::CMsgVector::Clear();
  clear_has_end();
}
const ::proto::dota::CMsgVector& CMsgTEBeamPoints::end() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamPoints.end)
  return end_ != NULL ? *end_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBeamPoints::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    end_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBeamPoints.end)
  return end_;
}
::proto::dota::CMsgVector* CMsgTEBeamPoints::release_end() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBeamPoints.end)
  clear_has_end();
  ::proto::dota::CMsgVector* temp = end_;
  end_ = NULL;
  return temp;
}
void CMsgTEBeamPoints::set_allocated_end(::proto::dota::CMsgVector* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBeamPoints.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBeamRing::kBaseFieldNumber;
const int CMsgTEBeamRing::kStartentityFieldNumber;
const int CMsgTEBeamRing::kEndentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBeamRing::CMsgTEBeamRing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBeamRing)
}
CMsgTEBeamRing::CMsgTEBeamRing(const CMsgTEBeamRing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::proto::dota::CMsgTEBaseBeam(*from.base_);
  } else {
    base_ = NULL;
  }
  ::memcpy(&startentity_, &from.startentity_,
    reinterpret_cast<char*>(&endentity_) -
    reinterpret_cast<char*>(&startentity_) + sizeof(endentity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBeamRing)
}

void CMsgTEBeamRing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&base_, 0, reinterpret_cast<char*>(&endentity_) -
    reinterpret_cast<char*>(&base_) + sizeof(endentity_));
}

CMsgTEBeamRing::~CMsgTEBeamRing() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBeamRing)
  SharedDtor();
}

void CMsgTEBeamRing::SharedDtor() {
  if (this != internal_default_instance()) {
    delete base_;
  }
}

void CMsgTEBeamRing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBeamRing::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBeamRing& CMsgTEBeamRing::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBeamRing* CMsgTEBeamRing::New(::google::protobuf::Arena* arena) const {
  CMsgTEBeamRing* n = new CMsgTEBeamRing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBeamRing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBeamRing)
  if (has_base()) {
    GOOGLE_DCHECK(base_ != NULL);
    base_->::proto::dota::CMsgTEBaseBeam::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&startentity_, 0, reinterpret_cast<char*>(&endentity_) -
      reinterpret_cast<char*>(&startentity_) + sizeof(endentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBeamRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBeamRing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgTEBaseBeam base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 startentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 endentity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_endentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBeamRing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBeamRing)
  return false;
#undef DO_
}

void CMsgTEBeamRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBeamRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgTEBaseBeam base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional uint32 startentity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startentity(), output);
  }

  // optional uint32 endentity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endentity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBeamRing)
}

::google::protobuf::uint8* CMsgTEBeamRing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBeamRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgTEBaseBeam base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, deterministic, target);
  }

  // optional uint32 startentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startentity(), target);
  }

  // optional uint32 endentity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endentity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBeamRing)
  return target;
}

size_t CMsgTEBeamRing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBeamRing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgTEBaseBeam base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_);
    }

    // optional uint32 startentity = 2;
    if (has_startentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startentity());
    }

    // optional uint32 endentity = 3;
    if (has_endentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endentity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBeamRing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBeamRing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBeamRing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBeamRing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBeamRing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBeamRing)
    MergeFrom(*source);
  }
}

void CMsgTEBeamRing::MergeFrom(const CMsgTEBeamRing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBeamRing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::proto::dota::CMsgTEBaseBeam::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      startentity_ = from.startentity_;
    }
    if (cached_has_bits & 0x00000004u) {
      endentity_ = from.endentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEBeamRing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBeamRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBeamRing::CopyFrom(const CMsgTEBeamRing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBeamRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBeamRing::IsInitialized() const {
  return true;
}

void CMsgTEBeamRing::Swap(CMsgTEBeamRing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBeamRing::InternalSwap(CMsgTEBeamRing* other) {
  std::swap(base_, other->base_);
  std::swap(startentity_, other->startentity_);
  std::swap(endentity_, other->endentity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBeamRing::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBeamRing

// optional .proto.dota.CMsgTEBaseBeam base = 1;
bool CMsgTEBeamRing::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBeamRing::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBeamRing::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBeamRing::clear_base() {
  if (base_ != NULL) base_->::proto::dota::CMsgTEBaseBeam::Clear();
  clear_has_base();
}
const ::proto::dota::CMsgTEBaseBeam& CMsgTEBeamRing::base() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamRing.base)
  return base_ != NULL ? *base_
                         : *::proto::dota::CMsgTEBaseBeam::internal_default_instance();
}
::proto::dota::CMsgTEBaseBeam* CMsgTEBeamRing::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::proto::dota::CMsgTEBaseBeam;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBeamRing.base)
  return base_;
}
::proto::dota::CMsgTEBaseBeam* CMsgTEBeamRing::release_base() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBeamRing.base)
  clear_has_base();
  ::proto::dota::CMsgTEBaseBeam* temp = base_;
  base_ = NULL;
  return temp;
}
void CMsgTEBeamRing::set_allocated_base(::proto::dota::CMsgTEBaseBeam* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBeamRing.base)
}

// optional uint32 startentity = 2;
bool CMsgTEBeamRing::has_startentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBeamRing::set_has_startentity() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBeamRing::clear_has_startentity() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBeamRing::clear_startentity() {
  startentity_ = 0u;
  clear_has_startentity();
}
::google::protobuf::uint32 CMsgTEBeamRing::startentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamRing.startentity)
  return startentity_;
}
void CMsgTEBeamRing::set_startentity(::google::protobuf::uint32 value) {
  set_has_startentity();
  startentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBeamRing.startentity)
}

// optional uint32 endentity = 3;
bool CMsgTEBeamRing::has_endentity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBeamRing::set_has_endentity() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBeamRing::clear_has_endentity() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBeamRing::clear_endentity() {
  endentity_ = 0u;
  clear_has_endentity();
}
::google::protobuf::uint32 CMsgTEBeamRing::endentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBeamRing.endentity)
  return endentity_;
}
void CMsgTEBeamRing::set_endentity(::google::protobuf::uint32 value) {
  set_has_endentity();
  endentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBeamRing.endentity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBreakModel::kOriginFieldNumber;
const int CMsgTEBreakModel::kAnglesFieldNumber;
const int CMsgTEBreakModel::kSizeFieldNumber;
const int CMsgTEBreakModel::kVelocityFieldNumber;
const int CMsgTEBreakModel::kRandomizationFieldNumber;
const int CMsgTEBreakModel::kModelindexFieldNumber;
const int CMsgTEBreakModel::kCountFieldNumber;
const int CMsgTEBreakModel::kTimeFieldNumber;
const int CMsgTEBreakModel::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBreakModel::CMsgTEBreakModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBreakModel)
}
CMsgTEBreakModel::CMsgTEBreakModel(const CMsgTEBreakModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_angles()) {
    angles_ = new ::proto::dota::CMsgQAngle(*from.angles_);
  } else {
    angles_ = NULL;
  }
  if (from.has_size()) {
    size_ = new ::proto::dota::CMsgVector(*from.size_);
  } else {
    size_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::proto::dota::CMsgVector(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  ::memcpy(&modelindex_, &from.modelindex_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&modelindex_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBreakModel)
}

void CMsgTEBreakModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&origin_) + sizeof(flags_));
}

CMsgTEBreakModel::~CMsgTEBreakModel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBreakModel)
  SharedDtor();
}

void CMsgTEBreakModel::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete angles_;
  }
  if (this != internal_default_instance()) {
    delete size_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
}

void CMsgTEBreakModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBreakModel::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBreakModel& CMsgTEBreakModel::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBreakModel* CMsgTEBreakModel::New(::google::protobuf::Arena* arena) const {
  CMsgTEBreakModel* n = new CMsgTEBreakModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBreakModel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBreakModel)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_angles()) {
      GOOGLE_DCHECK(angles_ != NULL);
      angles_->::proto::dota::CMsgQAngle::Clear();
    }
    if (has_size()) {
      GOOGLE_DCHECK(size_ != NULL);
      size_->::proto::dota::CMsgVector::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&modelindex_, 0, reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&modelindex_) + sizeof(time_));
  }
  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBreakModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBreakModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle angles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 randomization = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_randomization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randomization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 modelindex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_modelindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &modelindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBreakModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBreakModel)
  return false;
#undef DO_
}

void CMsgTEBreakModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBreakModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angles_, output);
  }

  // optional .proto.dota.CMsgVector size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->size_, output);
  }

  // optional .proto.dota.CMsgVector velocity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->velocity_, output);
  }

  // optional uint32 randomization = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->randomization(), output);
  }

  // optional fixed64 modelindex = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->modelindex(), output);
  }

  // optional uint32 count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  // optional float time = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->time(), output);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBreakModel)
}

::google::protobuf::uint8* CMsgTEBreakModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBreakModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angles_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->size_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector velocity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->velocity_, deterministic, target);
  }

  // optional uint32 randomization = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->randomization(), target);
  }

  // optional fixed64 modelindex = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->modelindex(), target);
  }

  // optional uint32 count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  // optional float time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->time(), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBreakModel)
  return target;
}

size_t CMsgTEBreakModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBreakModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgQAngle angles = 2;
    if (has_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angles_);
    }

    // optional .proto.dota.CMsgVector size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->size_);
    }

    // optional .proto.dota.CMsgVector velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional fixed64 modelindex = 6;
    if (has_modelindex()) {
      total_size += 1 + 8;
    }

    // optional uint32 randomization = 5;
    if (has_randomization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randomization());
    }

    // optional uint32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional float time = 8;
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  // optional uint32 flags = 9;
  if (has_flags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBreakModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBreakModel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBreakModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBreakModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBreakModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBreakModel)
    MergeFrom(*source);
  }
}

void CMsgTEBreakModel::MergeFrom(const CMsgTEBreakModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBreakModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angles()->::proto::dota::CMsgQAngle::MergeFrom(from.angles());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_size()->::proto::dota::CMsgVector::MergeFrom(from.size());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_velocity()->::proto::dota::CMsgVector::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      modelindex_ = from.modelindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      randomization_ = from.randomization_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_flags(from.flags());
  }
}

void CMsgTEBreakModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBreakModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBreakModel::CopyFrom(const CMsgTEBreakModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBreakModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBreakModel::IsInitialized() const {
  return true;
}

void CMsgTEBreakModel::Swap(CMsgTEBreakModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBreakModel::InternalSwap(CMsgTEBreakModel* other) {
  std::swap(origin_, other->origin_);
  std::swap(angles_, other->angles_);
  std::swap(size_, other->size_);
  std::swap(velocity_, other->velocity_);
  std::swap(modelindex_, other->modelindex_);
  std::swap(randomization_, other->randomization_);
  std::swap(count_, other->count_);
  std::swap(time_, other->time_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBreakModel::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBreakModel

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEBreakModel::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBreakModel::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBreakModel::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBreakModel::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEBreakModel::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBreakModel.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBreakModel::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBreakModel.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEBreakModel::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBreakModel.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEBreakModel::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBreakModel.origin)
}

// optional .proto.dota.CMsgQAngle angles = 2;
bool CMsgTEBreakModel::has_angles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBreakModel::set_has_angles() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBreakModel::clear_has_angles() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBreakModel::clear_angles() {
  if (angles_ != NULL) angles_->::proto::dota::CMsgQAngle::Clear();
  clear_has_angles();
}
const ::proto::dota::CMsgQAngle& CMsgTEBreakModel::angles() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBreakModel.angles)
  return angles_ != NULL ? *angles_
                         : *::proto::dota::CMsgQAngle::internal_default_instance();
}
::proto::dota::CMsgQAngle* CMsgTEBreakModel::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::proto::dota::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBreakModel.angles)
  return angles_;
}
::proto::dota::CMsgQAngle* CMsgTEBreakModel::release_angles() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBreakModel.angles)
  clear_has_angles();
  ::proto::dota::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
void CMsgTEBreakModel::set_allocated_angles(::proto::dota::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBreakModel.angles)
}

// optional .proto.dota.CMsgVector size = 3;
bool CMsgTEBreakModel::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBreakModel::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBreakModel::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBreakModel::clear_size() {
  if (size_ != NULL) size_->::proto::dota::CMsgVector::Clear();
  clear_has_size();
}
const ::proto::dota::CMsgVector& CMsgTEBreakModel::size() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBreakModel.size)
  return size_ != NULL ? *size_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBreakModel::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBreakModel.size)
  return size_;
}
::proto::dota::CMsgVector* CMsgTEBreakModel::release_size() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBreakModel.size)
  clear_has_size();
  ::proto::dota::CMsgVector* temp = size_;
  size_ = NULL;
  return temp;
}
void CMsgTEBreakModel::set_allocated_size(::proto::dota::CMsgVector* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBreakModel.size)
}

// optional .proto.dota.CMsgVector velocity = 4;
bool CMsgTEBreakModel::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEBreakModel::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEBreakModel::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEBreakModel::clear_velocity() {
  if (velocity_ != NULL) velocity_->::proto::dota::CMsgVector::Clear();
  clear_has_velocity();
}
const ::proto::dota::CMsgVector& CMsgTEBreakModel::velocity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBreakModel.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBreakModel::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBreakModel.velocity)
  return velocity_;
}
::proto::dota::CMsgVector* CMsgTEBreakModel::release_velocity() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBreakModel.velocity)
  clear_has_velocity();
  ::proto::dota::CMsgVector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void CMsgTEBreakModel::set_allocated_velocity(::proto::dota::CMsgVector* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBreakModel.velocity)
}

// optional uint32 randomization = 5;
bool CMsgTEBreakModel::has_randomization() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgTEBreakModel::set_has_randomization() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgTEBreakModel::clear_has_randomization() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgTEBreakModel::clear_randomization() {
  randomization_ = 0u;
  clear_has_randomization();
}
::google::protobuf::uint32 CMsgTEBreakModel::randomization() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBreakModel.randomization)
  return randomization_;
}
void CMsgTEBreakModel::set_randomization(::google::protobuf::uint32 value) {
  set_has_randomization();
  randomization_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBreakModel.randomization)
}

// optional fixed64 modelindex = 6;
bool CMsgTEBreakModel::has_modelindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEBreakModel::set_has_modelindex() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEBreakModel::clear_has_modelindex() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEBreakModel::clear_modelindex() {
  modelindex_ = GOOGLE_ULONGLONG(0);
  clear_has_modelindex();
}
::google::protobuf::uint64 CMsgTEBreakModel::modelindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBreakModel.modelindex)
  return modelindex_;
}
void CMsgTEBreakModel::set_modelindex(::google::protobuf::uint64 value) {
  set_has_modelindex();
  modelindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBreakModel.modelindex)
}

// optional uint32 count = 7;
bool CMsgTEBreakModel::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgTEBreakModel::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgTEBreakModel::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgTEBreakModel::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CMsgTEBreakModel::count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBreakModel.count)
  return count_;
}
void CMsgTEBreakModel::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBreakModel.count)
}

// optional float time = 8;
bool CMsgTEBreakModel::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgTEBreakModel::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgTEBreakModel::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgTEBreakModel::clear_time() {
  time_ = 0;
  clear_has_time();
}
float CMsgTEBreakModel::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBreakModel.time)
  return time_;
}
void CMsgTEBreakModel::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBreakModel.time)
}

// optional uint32 flags = 9;
bool CMsgTEBreakModel::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgTEBreakModel::set_has_flags() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgTEBreakModel::clear_has_flags() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgTEBreakModel::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CMsgTEBreakModel::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBreakModel.flags)
  return flags_;
}
void CMsgTEBreakModel::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBreakModel.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBSPDecal::kOriginFieldNumber;
const int CMsgTEBSPDecal::kNormalFieldNumber;
const int CMsgTEBSPDecal::kSaxisFieldNumber;
const int CMsgTEBSPDecal::kEntityFieldNumber;
const int CMsgTEBSPDecal::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBSPDecal::CMsgTEBSPDecal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBSPDecal)
}
CMsgTEBSPDecal::CMsgTEBSPDecal(const CMsgTEBSPDecal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::proto::dota::CMsgVector(*from.normal_);
  } else {
    normal_ = NULL;
  }
  if (from.has_saxis()) {
    saxis_ = new ::proto::dota::CMsgVector(*from.saxis_);
  } else {
    saxis_ = NULL;
  }
  ::memcpy(&entity_, &from.entity_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&entity_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBSPDecal)
}

void CMsgTEBSPDecal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&origin_) + sizeof(index_));
}

CMsgTEBSPDecal::~CMsgTEBSPDecal() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBSPDecal)
  SharedDtor();
}

void CMsgTEBSPDecal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete normal_;
  }
  if (this != internal_default_instance()) {
    delete saxis_;
  }
}

void CMsgTEBSPDecal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBSPDecal::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBSPDecal& CMsgTEBSPDecal::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBSPDecal* CMsgTEBSPDecal::New(::google::protobuf::Arena* arena) const {
  CMsgTEBSPDecal* n = new CMsgTEBSPDecal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBSPDecal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBSPDecal)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_normal()) {
      GOOGLE_DCHECK(normal_ != NULL);
      normal_->::proto::dota::CMsgVector::Clear();
    }
    if (has_saxis()) {
      GOOGLE_DCHECK(saxis_ != NULL);
      saxis_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&entity_, 0, reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&entity_) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBSPDecal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBSPDecal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector normal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector saxis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saxis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 entity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBSPDecal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBSPDecal)
  return false;
#undef DO_
}

void CMsgTEBSPDecal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBSPDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->normal_, output);
  }

  // optional .proto.dota.CMsgVector saxis = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->saxis_, output);
  }

  // optional uint32 entity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->entity(), output);
  }

  // optional uint32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBSPDecal)
}

::google::protobuf::uint8* CMsgTEBSPDecal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBSPDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->normal_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector saxis = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->saxis_, deterministic, target);
  }

  // optional uint32 entity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->entity(), target);
  }

  // optional uint32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBSPDecal)
  return target;
}

size_t CMsgTEBSPDecal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBSPDecal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector normal = 2;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->normal_);
    }

    // optional .proto.dota.CMsgVector saxis = 3;
    if (has_saxis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->saxis_);
    }

    // optional uint32 entity = 4;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entity());
    }

    // optional uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBSPDecal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBSPDecal)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBSPDecal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBSPDecal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBSPDecal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBSPDecal)
    MergeFrom(*source);
  }
}

void CMsgTEBSPDecal::MergeFrom(const CMsgTEBSPDecal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBSPDecal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_normal()->::proto::dota::CMsgVector::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_saxis()->::proto::dota::CMsgVector::MergeFrom(from.saxis());
    }
    if (cached_has_bits & 0x00000008u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEBSPDecal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBSPDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBSPDecal::CopyFrom(const CMsgTEBSPDecal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBSPDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBSPDecal::IsInitialized() const {
  return true;
}

void CMsgTEBSPDecal::Swap(CMsgTEBSPDecal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBSPDecal::InternalSwap(CMsgTEBSPDecal* other) {
  std::swap(origin_, other->origin_);
  std::swap(normal_, other->normal_);
  std::swap(saxis_, other->saxis_);
  std::swap(entity_, other->entity_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBSPDecal::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBSPDecal

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEBSPDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBSPDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBSPDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBSPDecal::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEBSPDecal::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBSPDecal.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBSPDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBSPDecal.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEBSPDecal::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBSPDecal.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEBSPDecal::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBSPDecal.origin)
}

// optional .proto.dota.CMsgVector normal = 2;
bool CMsgTEBSPDecal::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBSPDecal::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBSPDecal::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBSPDecal::clear_normal() {
  if (normal_ != NULL) normal_->::proto::dota::CMsgVector::Clear();
  clear_has_normal();
}
const ::proto::dota::CMsgVector& CMsgTEBSPDecal::normal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBSPDecal.normal)
  return normal_ != NULL ? *normal_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBSPDecal::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBSPDecal.normal)
  return normal_;
}
::proto::dota::CMsgVector* CMsgTEBSPDecal::release_normal() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBSPDecal.normal)
  clear_has_normal();
  ::proto::dota::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
void CMsgTEBSPDecal::set_allocated_normal(::proto::dota::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBSPDecal.normal)
}

// optional .proto.dota.CMsgVector saxis = 3;
bool CMsgTEBSPDecal::has_saxis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBSPDecal::set_has_saxis() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBSPDecal::clear_has_saxis() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBSPDecal::clear_saxis() {
  if (saxis_ != NULL) saxis_->::proto::dota::CMsgVector::Clear();
  clear_has_saxis();
}
const ::proto::dota::CMsgVector& CMsgTEBSPDecal::saxis() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBSPDecal.saxis)
  return saxis_ != NULL ? *saxis_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBSPDecal::mutable_saxis() {
  set_has_saxis();
  if (saxis_ == NULL) {
    saxis_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBSPDecal.saxis)
  return saxis_;
}
::proto::dota::CMsgVector* CMsgTEBSPDecal::release_saxis() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBSPDecal.saxis)
  clear_has_saxis();
  ::proto::dota::CMsgVector* temp = saxis_;
  saxis_ = NULL;
  return temp;
}
void CMsgTEBSPDecal::set_allocated_saxis(::proto::dota::CMsgVector* saxis) {
  delete saxis_;
  saxis_ = saxis;
  if (saxis) {
    set_has_saxis();
  } else {
    clear_has_saxis();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBSPDecal.saxis)
}

// optional uint32 entity = 4;
bool CMsgTEBSPDecal::has_entity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEBSPDecal::set_has_entity() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEBSPDecal::clear_has_entity() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEBSPDecal::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
::google::protobuf::uint32 CMsgTEBSPDecal::entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBSPDecal.entity)
  return entity_;
}
void CMsgTEBSPDecal::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBSPDecal.entity)
}

// optional uint32 index = 5;
bool CMsgTEBSPDecal::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEBSPDecal::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEBSPDecal::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEBSPDecal::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 CMsgTEBSPDecal::index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBSPDecal.index)
  return index_;
}
void CMsgTEBSPDecal::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBSPDecal.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBubbles::kMinsFieldNumber;
const int CMsgTEBubbles::kMaxsFieldNumber;
const int CMsgTEBubbles::kHeightFieldNumber;
const int CMsgTEBubbles::kCountFieldNumber;
const int CMsgTEBubbles::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBubbles::CMsgTEBubbles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBubbles)
}
CMsgTEBubbles::CMsgTEBubbles(const CMsgTEBubbles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mins()) {
    mins_ = new ::proto::dota::CMsgVector(*from.mins_);
  } else {
    mins_ = NULL;
  }
  if (from.has_maxs()) {
    maxs_ = new ::proto::dota::CMsgVector(*from.maxs_);
  } else {
    maxs_ = NULL;
  }
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&height_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBubbles)
}

void CMsgTEBubbles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mins_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&mins_) + sizeof(speed_));
}

CMsgTEBubbles::~CMsgTEBubbles() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBubbles)
  SharedDtor();
}

void CMsgTEBubbles::SharedDtor() {
  if (this != internal_default_instance()) {
    delete mins_;
  }
  if (this != internal_default_instance()) {
    delete maxs_;
  }
}

void CMsgTEBubbles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBubbles::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBubbles& CMsgTEBubbles::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBubbles* CMsgTEBubbles::New(::google::protobuf::Arena* arena) const {
  CMsgTEBubbles* n = new CMsgTEBubbles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBubbles::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBubbles)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_mins()) {
      GOOGLE_DCHECK(mins_ != NULL);
      mins_->::proto::dota::CMsgVector::Clear();
    }
    if (has_maxs()) {
      GOOGLE_DCHECK(maxs_ != NULL);
      maxs_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&height_, 0, reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&height_) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBubbles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBubbles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector mins = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector maxs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBubbles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBubbles)
  return false;
#undef DO_
}

void CMsgTEBubbles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBubbles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector mins = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mins_, output);
  }

  // optional .proto.dota.CMsgVector maxs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->maxs_, output);
  }

  // optional float height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional float speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBubbles)
}

::google::protobuf::uint8* CMsgTEBubbles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBubbles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector mins = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mins_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector maxs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->maxs_, deterministic, target);
  }

  // optional float height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional float speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBubbles)
  return target;
}

size_t CMsgTEBubbles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBubbles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgVector mins = 1;
    if (has_mins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mins_);
    }

    // optional .proto.dota.CMsgVector maxs = 2;
    if (has_maxs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->maxs_);
    }

    // optional float height = 3;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional float speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBubbles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBubbles)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBubbles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBubbles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBubbles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBubbles)
    MergeFrom(*source);
  }
}

void CMsgTEBubbles::MergeFrom(const CMsgTEBubbles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBubbles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mins()->::proto::dota::CMsgVector::MergeFrom(from.mins());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_maxs()->::proto::dota::CMsgVector::MergeFrom(from.maxs());
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEBubbles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBubbles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBubbles::CopyFrom(const CMsgTEBubbles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBubbles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBubbles::IsInitialized() const {
  return true;
}

void CMsgTEBubbles::Swap(CMsgTEBubbles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBubbles::InternalSwap(CMsgTEBubbles* other) {
  std::swap(mins_, other->mins_);
  std::swap(maxs_, other->maxs_);
  std::swap(height_, other->height_);
  std::swap(count_, other->count_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBubbles::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBubbles

// optional .proto.dota.CMsgVector mins = 1;
bool CMsgTEBubbles::has_mins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBubbles::set_has_mins() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBubbles::clear_has_mins() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBubbles::clear_mins() {
  if (mins_ != NULL) mins_->::proto::dota::CMsgVector::Clear();
  clear_has_mins();
}
const ::proto::dota::CMsgVector& CMsgTEBubbles::mins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbles.mins)
  return mins_ != NULL ? *mins_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBubbles::mutable_mins() {
  set_has_mins();
  if (mins_ == NULL) {
    mins_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBubbles.mins)
  return mins_;
}
::proto::dota::CMsgVector* CMsgTEBubbles::release_mins() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBubbles.mins)
  clear_has_mins();
  ::proto::dota::CMsgVector* temp = mins_;
  mins_ = NULL;
  return temp;
}
void CMsgTEBubbles::set_allocated_mins(::proto::dota::CMsgVector* mins) {
  delete mins_;
  mins_ = mins;
  if (mins) {
    set_has_mins();
  } else {
    clear_has_mins();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBubbles.mins)
}

// optional .proto.dota.CMsgVector maxs = 2;
bool CMsgTEBubbles::has_maxs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBubbles::set_has_maxs() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBubbles::clear_has_maxs() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBubbles::clear_maxs() {
  if (maxs_ != NULL) maxs_->::proto::dota::CMsgVector::Clear();
  clear_has_maxs();
}
const ::proto::dota::CMsgVector& CMsgTEBubbles::maxs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbles.maxs)
  return maxs_ != NULL ? *maxs_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBubbles::mutable_maxs() {
  set_has_maxs();
  if (maxs_ == NULL) {
    maxs_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBubbles.maxs)
  return maxs_;
}
::proto::dota::CMsgVector* CMsgTEBubbles::release_maxs() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBubbles.maxs)
  clear_has_maxs();
  ::proto::dota::CMsgVector* temp = maxs_;
  maxs_ = NULL;
  return temp;
}
void CMsgTEBubbles::set_allocated_maxs(::proto::dota::CMsgVector* maxs) {
  delete maxs_;
  maxs_ = maxs;
  if (maxs) {
    set_has_maxs();
  } else {
    clear_has_maxs();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBubbles.maxs)
}

// optional float height = 3;
bool CMsgTEBubbles::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBubbles::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBubbles::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBubbles::clear_height() {
  height_ = 0;
  clear_has_height();
}
float CMsgTEBubbles::height() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbles.height)
  return height_;
}
void CMsgTEBubbles::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBubbles.height)
}

// optional uint32 count = 4;
bool CMsgTEBubbles::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEBubbles::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEBubbles::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEBubbles::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CMsgTEBubbles::count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbles.count)
  return count_;
}
void CMsgTEBubbles::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBubbles.count)
}

// optional float speed = 5;
bool CMsgTEBubbles::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEBubbles::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEBubbles::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEBubbles::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
float CMsgTEBubbles::speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbles.speed)
  return speed_;
}
void CMsgTEBubbles::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBubbles.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBubbleTrail::kMinsFieldNumber;
const int CMsgTEBubbleTrail::kMaxsFieldNumber;
const int CMsgTEBubbleTrail::kWaterzFieldNumber;
const int CMsgTEBubbleTrail::kCountFieldNumber;
const int CMsgTEBubbleTrail::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBubbleTrail::CMsgTEBubbleTrail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBubbleTrail)
}
CMsgTEBubbleTrail::CMsgTEBubbleTrail(const CMsgTEBubbleTrail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mins()) {
    mins_ = new ::proto::dota::CMsgVector(*from.mins_);
  } else {
    mins_ = NULL;
  }
  if (from.has_maxs()) {
    maxs_ = new ::proto::dota::CMsgVector(*from.maxs_);
  } else {
    maxs_ = NULL;
  }
  ::memcpy(&waterz_, &from.waterz_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&waterz_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBubbleTrail)
}

void CMsgTEBubbleTrail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mins_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&mins_) + sizeof(speed_));
}

CMsgTEBubbleTrail::~CMsgTEBubbleTrail() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBubbleTrail)
  SharedDtor();
}

void CMsgTEBubbleTrail::SharedDtor() {
  if (this != internal_default_instance()) {
    delete mins_;
  }
  if (this != internal_default_instance()) {
    delete maxs_;
  }
}

void CMsgTEBubbleTrail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBubbleTrail::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBubbleTrail& CMsgTEBubbleTrail::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBubbleTrail* CMsgTEBubbleTrail::New(::google::protobuf::Arena* arena) const {
  CMsgTEBubbleTrail* n = new CMsgTEBubbleTrail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBubbleTrail::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBubbleTrail)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_mins()) {
      GOOGLE_DCHECK(mins_ != NULL);
      mins_->::proto::dota::CMsgVector::Clear();
    }
    if (has_maxs()) {
      GOOGLE_DCHECK(maxs_ != NULL);
      maxs_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&waterz_, 0, reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&waterz_) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBubbleTrail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBubbleTrail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector mins = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector maxs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float waterz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_waterz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waterz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBubbleTrail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBubbleTrail)
  return false;
#undef DO_
}

void CMsgTEBubbleTrail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBubbleTrail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector mins = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mins_, output);
  }

  // optional .proto.dota.CMsgVector maxs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->maxs_, output);
  }

  // optional float waterz = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->waterz(), output);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional float speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBubbleTrail)
}

::google::protobuf::uint8* CMsgTEBubbleTrail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBubbleTrail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector mins = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mins_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector maxs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->maxs_, deterministic, target);
  }

  // optional float waterz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->waterz(), target);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional float speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBubbleTrail)
  return target;
}

size_t CMsgTEBubbleTrail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBubbleTrail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgVector mins = 1;
    if (has_mins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mins_);
    }

    // optional .proto.dota.CMsgVector maxs = 2;
    if (has_maxs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->maxs_);
    }

    // optional float waterz = 3;
    if (has_waterz()) {
      total_size += 1 + 4;
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional float speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBubbleTrail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBubbleTrail)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBubbleTrail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBubbleTrail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBubbleTrail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBubbleTrail)
    MergeFrom(*source);
  }
}

void CMsgTEBubbleTrail::MergeFrom(const CMsgTEBubbleTrail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBubbleTrail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mins()->::proto::dota::CMsgVector::MergeFrom(from.mins());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_maxs()->::proto::dota::CMsgVector::MergeFrom(from.maxs());
    }
    if (cached_has_bits & 0x00000004u) {
      waterz_ = from.waterz_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEBubbleTrail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBubbleTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBubbleTrail::CopyFrom(const CMsgTEBubbleTrail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBubbleTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBubbleTrail::IsInitialized() const {
  return true;
}

void CMsgTEBubbleTrail::Swap(CMsgTEBubbleTrail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBubbleTrail::InternalSwap(CMsgTEBubbleTrail* other) {
  std::swap(mins_, other->mins_);
  std::swap(maxs_, other->maxs_);
  std::swap(waterz_, other->waterz_);
  std::swap(count_, other->count_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBubbleTrail::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBubbleTrail

// optional .proto.dota.CMsgVector mins = 1;
bool CMsgTEBubbleTrail::has_mins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBubbleTrail::set_has_mins() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBubbleTrail::clear_has_mins() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBubbleTrail::clear_mins() {
  if (mins_ != NULL) mins_->::proto::dota::CMsgVector::Clear();
  clear_has_mins();
}
const ::proto::dota::CMsgVector& CMsgTEBubbleTrail::mins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbleTrail.mins)
  return mins_ != NULL ? *mins_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBubbleTrail::mutable_mins() {
  set_has_mins();
  if (mins_ == NULL) {
    mins_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBubbleTrail.mins)
  return mins_;
}
::proto::dota::CMsgVector* CMsgTEBubbleTrail::release_mins() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBubbleTrail.mins)
  clear_has_mins();
  ::proto::dota::CMsgVector* temp = mins_;
  mins_ = NULL;
  return temp;
}
void CMsgTEBubbleTrail::set_allocated_mins(::proto::dota::CMsgVector* mins) {
  delete mins_;
  mins_ = mins;
  if (mins) {
    set_has_mins();
  } else {
    clear_has_mins();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBubbleTrail.mins)
}

// optional .proto.dota.CMsgVector maxs = 2;
bool CMsgTEBubbleTrail::has_maxs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBubbleTrail::set_has_maxs() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBubbleTrail::clear_has_maxs() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBubbleTrail::clear_maxs() {
  if (maxs_ != NULL) maxs_->::proto::dota::CMsgVector::Clear();
  clear_has_maxs();
}
const ::proto::dota::CMsgVector& CMsgTEBubbleTrail::maxs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbleTrail.maxs)
  return maxs_ != NULL ? *maxs_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBubbleTrail::mutable_maxs() {
  set_has_maxs();
  if (maxs_ == NULL) {
    maxs_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBubbleTrail.maxs)
  return maxs_;
}
::proto::dota::CMsgVector* CMsgTEBubbleTrail::release_maxs() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBubbleTrail.maxs)
  clear_has_maxs();
  ::proto::dota::CMsgVector* temp = maxs_;
  maxs_ = NULL;
  return temp;
}
void CMsgTEBubbleTrail::set_allocated_maxs(::proto::dota::CMsgVector* maxs) {
  delete maxs_;
  maxs_ = maxs;
  if (maxs) {
    set_has_maxs();
  } else {
    clear_has_maxs();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBubbleTrail.maxs)
}

// optional float waterz = 3;
bool CMsgTEBubbleTrail::has_waterz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBubbleTrail::set_has_waterz() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBubbleTrail::clear_has_waterz() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBubbleTrail::clear_waterz() {
  waterz_ = 0;
  clear_has_waterz();
}
float CMsgTEBubbleTrail::waterz() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbleTrail.waterz)
  return waterz_;
}
void CMsgTEBubbleTrail::set_waterz(float value) {
  set_has_waterz();
  waterz_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBubbleTrail.waterz)
}

// optional uint32 count = 4;
bool CMsgTEBubbleTrail::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEBubbleTrail::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEBubbleTrail::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEBubbleTrail::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CMsgTEBubbleTrail::count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbleTrail.count)
  return count_;
}
void CMsgTEBubbleTrail::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBubbleTrail.count)
}

// optional float speed = 5;
bool CMsgTEBubbleTrail::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEBubbleTrail::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEBubbleTrail::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEBubbleTrail::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
float CMsgTEBubbleTrail::speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBubbleTrail.speed)
  return speed_;
}
void CMsgTEBubbleTrail::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBubbleTrail.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEDecal::kOriginFieldNumber;
const int CMsgTEDecal::kStartFieldNumber;
const int CMsgTEDecal::kEntityFieldNumber;
const int CMsgTEDecal::kHitboxFieldNumber;
const int CMsgTEDecal::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEDecal::CMsgTEDecal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEDecal)
}
CMsgTEDecal::CMsgTEDecal(const CMsgTEDecal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_start()) {
    start_ = new ::proto::dota::CMsgVector(*from.start_);
  } else {
    start_ = NULL;
  }
  ::memcpy(&entity_, &from.entity_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&entity_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEDecal)
}

void CMsgTEDecal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&origin_) + sizeof(index_));
}

CMsgTEDecal::~CMsgTEDecal() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEDecal)
  SharedDtor();
}

void CMsgTEDecal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete start_;
  }
}

void CMsgTEDecal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEDecal::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEDecal& CMsgTEDecal::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEDecal* CMsgTEDecal::New(::google::protobuf::Arena* arena) const {
  CMsgTEDecal* n = new CMsgTEDecal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEDecal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEDecal)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_start()) {
      GOOGLE_DCHECK(start_ != NULL);
      start_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&entity_, 0, reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&entity_) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEDecal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEDecal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 entity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hitbox = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_hitbox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEDecal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEDecal)
  return false;
#undef DO_
}

void CMsgTEDecal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgVector start = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_, output);
  }

  // optional uint32 entity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entity(), output);
  }

  // optional uint32 hitbox = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hitbox(), output);
  }

  // optional uint32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEDecal)
}

::google::protobuf::uint8* CMsgTEDecal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->start_, deterministic, target);
  }

  // optional uint32 entity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->entity(), target);
  }

  // optional uint32 hitbox = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hitbox(), target);
  }

  // optional uint32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEDecal)
  return target;
}

size_t CMsgTEDecal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEDecal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_);
    }

    // optional uint32 entity = 3;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entity());
    }

    // optional uint32 hitbox = 4;
    if (has_hitbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitbox());
    }

    // optional uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEDecal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEDecal)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEDecal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEDecal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEDecal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEDecal)
    MergeFrom(*source);
  }
}

void CMsgTEDecal::MergeFrom(const CMsgTEDecal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEDecal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_start()->::proto::dota::CMsgVector::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000004u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000008u) {
      hitbox_ = from.hitbox_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEDecal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEDecal::CopyFrom(const CMsgTEDecal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEDecal::IsInitialized() const {
  return true;
}

void CMsgTEDecal::Swap(CMsgTEDecal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEDecal::InternalSwap(CMsgTEDecal* other) {
  std::swap(origin_, other->origin_);
  std::swap(start_, other->start_);
  std::swap(entity_, other->entity_);
  std::swap(hitbox_, other->hitbox_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEDecal::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEDecal

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEDecal::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEDecal::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEDecal.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEDecal.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEDecal::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEDecal.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEDecal::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEDecal.origin)
}

// optional .proto.dota.CMsgVector start = 2;
bool CMsgTEDecal::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEDecal::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEDecal::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEDecal::clear_start() {
  if (start_ != NULL) start_->::proto::dota::CMsgVector::Clear();
  clear_has_start();
}
const ::proto::dota::CMsgVector& CMsgTEDecal::start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEDecal.start)
  return start_ != NULL ? *start_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEDecal::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEDecal.start)
  return start_;
}
::proto::dota::CMsgVector* CMsgTEDecal::release_start() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEDecal.start)
  clear_has_start();
  ::proto::dota::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
void CMsgTEDecal::set_allocated_start(::proto::dota::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEDecal.start)
}

// optional uint32 entity = 3;
bool CMsgTEDecal::has_entity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEDecal::set_has_entity() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEDecal::clear_has_entity() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEDecal::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
::google::protobuf::uint32 CMsgTEDecal::entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEDecal.entity)
  return entity_;
}
void CMsgTEDecal::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEDecal.entity)
}

// optional uint32 hitbox = 4;
bool CMsgTEDecal::has_hitbox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEDecal::set_has_hitbox() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEDecal::clear_has_hitbox() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEDecal::clear_hitbox() {
  hitbox_ = 0u;
  clear_has_hitbox();
}
::google::protobuf::uint32 CMsgTEDecal::hitbox() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEDecal.hitbox)
  return hitbox_;
}
void CMsgTEDecal::set_hitbox(::google::protobuf::uint32 value) {
  set_has_hitbox();
  hitbox_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEDecal.hitbox)
}

// optional uint32 index = 5;
bool CMsgTEDecal::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEDecal::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEDecal::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEDecal::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 CMsgTEDecal::index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEDecal.index)
  return index_;
}
void CMsgTEDecal::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEDecal.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgEffectData::kOriginFieldNumber;
const int CMsgEffectData::kStartFieldNumber;
const int CMsgEffectData::kNormalFieldNumber;
const int CMsgEffectData::kAnglesFieldNumber;
const int CMsgEffectData::kEntityFieldNumber;
const int CMsgEffectData::kOtherentityFieldNumber;
const int CMsgEffectData::kScaleFieldNumber;
const int CMsgEffectData::kMagnitudeFieldNumber;
const int CMsgEffectData::kRadiusFieldNumber;
const int CMsgEffectData::kSurfacepropFieldNumber;
const int CMsgEffectData::kEffectindexFieldNumber;
const int CMsgEffectData::kDamagetypeFieldNumber;
const int CMsgEffectData::kMaterialFieldNumber;
const int CMsgEffectData::kHitboxFieldNumber;
const int CMsgEffectData::kColorFieldNumber;
const int CMsgEffectData::kFlagsFieldNumber;
const int CMsgEffectData::kAttachmentindexFieldNumber;
const int CMsgEffectData::kEffectnameFieldNumber;
const int CMsgEffectData::kAttachmentnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgEffectData::CMsgEffectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgEffectData)
}
CMsgEffectData::CMsgEffectData(const CMsgEffectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_start()) {
    start_ = new ::proto::dota::CMsgVector(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::proto::dota::CMsgVector(*from.normal_);
  } else {
    normal_ = NULL;
  }
  if (from.has_angles()) {
    angles_ = new ::proto::dota::CMsgQAngle(*from.angles_);
  } else {
    angles_ = NULL;
  }
  ::memcpy(&entity_, &from.entity_,
    reinterpret_cast<char*>(&attachmentname_) -
    reinterpret_cast<char*>(&entity_) + sizeof(attachmentname_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgEffectData)
}

void CMsgEffectData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&attachmentname_) -
    reinterpret_cast<char*>(&origin_) + sizeof(attachmentname_));
}

CMsgEffectData::~CMsgEffectData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgEffectData)
  SharedDtor();
}

void CMsgEffectData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete start_;
  }
  if (this != internal_default_instance()) {
    delete normal_;
  }
  if (this != internal_default_instance()) {
    delete angles_;
  }
}

void CMsgEffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEffectData::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgEffectData& CMsgEffectData::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgEffectData* CMsgEffectData::New(::google::protobuf::Arena* arena) const {
  CMsgEffectData* n = new CMsgEffectData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgEffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgEffectData)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_start()) {
      GOOGLE_DCHECK(start_ != NULL);
      start_->::proto::dota::CMsgVector::Clear();
    }
    if (has_normal()) {
      GOOGLE_DCHECK(normal_ != NULL);
      normal_->::proto::dota::CMsgVector::Clear();
    }
    if (has_angles()) {
      GOOGLE_DCHECK(angles_ != NULL);
      angles_->::proto::dota::CMsgQAngle::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&entity_, 0, reinterpret_cast<char*>(&magnitude_) -
      reinterpret_cast<char*>(&entity_) + sizeof(magnitude_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&radius_, 0, reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&radius_) + sizeof(flags_));
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ::memset(&attachmentindex_, 0, reinterpret_cast<char*>(&attachmentname_) -
      reinterpret_cast<char*>(&attachmentindex_) + sizeof(attachmentname_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgEffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgEffectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector normal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle angles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 entity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 otherentity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_otherentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &otherentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float magnitude = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_magnitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magnitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 surfaceprop = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_surfaceprop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &surfaceprop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 effectindex = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_effectindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &effectindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damagetype = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_damagetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damagetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 material = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_material();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &material_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hitbox = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_hitbox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 color = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attachmentindex = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_attachmentindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachmentindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 effectname = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_effectname();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectname_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attachmentname = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_attachmentname();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attachmentname_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgEffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgEffectData)
  return false;
#undef DO_
}

void CMsgEffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgEffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgVector start = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_, output);
  }

  // optional .proto.dota.CMsgVector normal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->normal_, output);
  }

  // optional .proto.dota.CMsgQAngle angles = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angles_, output);
  }

  // optional fixed32 entity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->entity(), output);
  }

  // optional fixed32 otherentity = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->otherentity(), output);
  }

  // optional float scale = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scale(), output);
  }

  // optional float magnitude = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->magnitude(), output);
  }

  // optional float radius = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->radius(), output);
  }

  // optional fixed32 surfaceprop = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->surfaceprop(), output);
  }

  // optional fixed64 effectindex = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->effectindex(), output);
  }

  // optional uint32 damagetype = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->damagetype(), output);
  }

  // optional uint32 material = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->material(), output);
  }

  // optional uint32 hitbox = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->hitbox(), output);
  }

  // optional uint32 color = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->color(), output);
  }

  // optional uint32 flags = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->flags(), output);
  }

  // optional int32 attachmentindex = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->attachmentindex(), output);
  }

  // optional uint32 effectname = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->effectname(), output);
  }

  // optional uint32 attachmentname = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->attachmentname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgEffectData)
}

::google::protobuf::uint8* CMsgEffectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgEffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->start_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector normal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->normal_, deterministic, target);
  }

  // optional .proto.dota.CMsgQAngle angles = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->angles_, deterministic, target);
  }

  // optional fixed32 entity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->entity(), target);
  }

  // optional fixed32 otherentity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->otherentity(), target);
  }

  // optional float scale = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->scale(), target);
  }

  // optional float magnitude = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->magnitude(), target);
  }

  // optional float radius = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->radius(), target);
  }

  // optional fixed32 surfaceprop = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->surfaceprop(), target);
  }

  // optional fixed64 effectindex = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->effectindex(), target);
  }

  // optional uint32 damagetype = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->damagetype(), target);
  }

  // optional uint32 material = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->material(), target);
  }

  // optional uint32 hitbox = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->hitbox(), target);
  }

  // optional uint32 color = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->color(), target);
  }

  // optional uint32 flags = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->flags(), target);
  }

  // optional int32 attachmentindex = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->attachmentindex(), target);
  }

  // optional uint32 effectname = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->effectname(), target);
  }

  // optional uint32 attachmentname = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->attachmentname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgEffectData)
  return target;
}

size_t CMsgEffectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgEffectData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_);
    }

    // optional .proto.dota.CMsgVector normal = 3;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->normal_);
    }

    // optional .proto.dota.CMsgQAngle angles = 4;
    if (has_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angles_);
    }

    // optional fixed32 entity = 5;
    if (has_entity()) {
      total_size += 1 + 4;
    }

    // optional fixed32 otherentity = 6;
    if (has_otherentity()) {
      total_size += 1 + 4;
    }

    // optional float scale = 7;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float magnitude = 8;
    if (has_magnitude()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float radius = 9;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional fixed32 surfaceprop = 10;
    if (has_surfaceprop()) {
      total_size += 1 + 4;
    }

    // optional fixed64 effectindex = 11;
    if (has_effectindex()) {
      total_size += 1 + 8;
    }

    // optional uint32 damagetype = 12;
    if (has_damagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damagetype());
    }

    // optional uint32 material = 13;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->material());
    }

    // optional uint32 hitbox = 14;
    if (has_hitbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitbox());
    }

    // optional uint32 color = 15;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint32 flags = 16;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int32 attachmentindex = 17;
    if (has_attachmentindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachmentindex());
    }

    // optional uint32 effectname = 18;
    if (has_effectname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectname());
    }

    // optional uint32 attachmentname = 19;
    if (has_attachmentname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attachmentname());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEffectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgEffectData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgEffectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgEffectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgEffectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgEffectData)
    MergeFrom(*source);
  }
}

void CMsgEffectData::MergeFrom(const CMsgEffectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgEffectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_start()->::proto::dota::CMsgVector::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_normal()->::proto::dota::CMsgVector::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_angles()->::proto::dota::CMsgQAngle::MergeFrom(from.angles());
    }
    if (cached_has_bits & 0x00000010u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000020u) {
      otherentity_ = from.otherentity_;
    }
    if (cached_has_bits & 0x00000040u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      magnitude_ = from.magnitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000200u) {
      surfaceprop_ = from.surfaceprop_;
    }
    if (cached_has_bits & 0x00000400u) {
      effectindex_ = from.effectindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      damagetype_ = from.damagetype_;
    }
    if (cached_has_bits & 0x00001000u) {
      material_ = from.material_;
    }
    if (cached_has_bits & 0x00002000u) {
      hitbox_ = from.hitbox_;
    }
    if (cached_has_bits & 0x00004000u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00008000u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      attachmentindex_ = from.attachmentindex_;
    }
    if (cached_has_bits & 0x00020000u) {
      effectname_ = from.effectname_;
    }
    if (cached_has_bits & 0x00040000u) {
      attachmentname_ = from.attachmentname_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgEffectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgEffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEffectData::CopyFrom(const CMsgEffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgEffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEffectData::IsInitialized() const {
  return true;
}

void CMsgEffectData::Swap(CMsgEffectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgEffectData::InternalSwap(CMsgEffectData* other) {
  std::swap(origin_, other->origin_);
  std::swap(start_, other->start_);
  std::swap(normal_, other->normal_);
  std::swap(angles_, other->angles_);
  std::swap(entity_, other->entity_);
  std::swap(otherentity_, other->otherentity_);
  std::swap(scale_, other->scale_);
  std::swap(magnitude_, other->magnitude_);
  std::swap(radius_, other->radius_);
  std::swap(surfaceprop_, other->surfaceprop_);
  std::swap(effectindex_, other->effectindex_);
  std::swap(damagetype_, other->damagetype_);
  std::swap(material_, other->material_);
  std::swap(hitbox_, other->hitbox_);
  std::swap(color_, other->color_);
  std::swap(flags_, other->flags_);
  std::swap(attachmentindex_, other->attachmentindex_);
  std::swap(effectname_, other->effectname_);
  std::swap(attachmentname_, other->attachmentname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgEffectData::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgEffectData

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgEffectData::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgEffectData::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgEffectData::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgEffectData::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgEffectData::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgEffectData::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgEffectData.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgEffectData::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgEffectData.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgEffectData::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgEffectData.origin)
}

// optional .proto.dota.CMsgVector start = 2;
bool CMsgEffectData::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgEffectData::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgEffectData::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgEffectData::clear_start() {
  if (start_ != NULL) start_->::proto::dota::CMsgVector::Clear();
  clear_has_start();
}
const ::proto::dota::CMsgVector& CMsgEffectData::start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.start)
  return start_ != NULL ? *start_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgEffectData::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgEffectData.start)
  return start_;
}
::proto::dota::CMsgVector* CMsgEffectData::release_start() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgEffectData.start)
  clear_has_start();
  ::proto::dota::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
void CMsgEffectData::set_allocated_start(::proto::dota::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgEffectData.start)
}

// optional .proto.dota.CMsgVector normal = 3;
bool CMsgEffectData::has_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgEffectData::set_has_normal() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgEffectData::clear_has_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgEffectData::clear_normal() {
  if (normal_ != NULL) normal_->::proto::dota::CMsgVector::Clear();
  clear_has_normal();
}
const ::proto::dota::CMsgVector& CMsgEffectData::normal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.normal)
  return normal_ != NULL ? *normal_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgEffectData::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgEffectData.normal)
  return normal_;
}
::proto::dota::CMsgVector* CMsgEffectData::release_normal() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgEffectData.normal)
  clear_has_normal();
  ::proto::dota::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
void CMsgEffectData::set_allocated_normal(::proto::dota::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgEffectData.normal)
}

// optional .proto.dota.CMsgQAngle angles = 4;
bool CMsgEffectData::has_angles() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgEffectData::set_has_angles() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgEffectData::clear_has_angles() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgEffectData::clear_angles() {
  if (angles_ != NULL) angles_->::proto::dota::CMsgQAngle::Clear();
  clear_has_angles();
}
const ::proto::dota::CMsgQAngle& CMsgEffectData::angles() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.angles)
  return angles_ != NULL ? *angles_
                         : *::proto::dota::CMsgQAngle::internal_default_instance();
}
::proto::dota::CMsgQAngle* CMsgEffectData::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::proto::dota::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgEffectData.angles)
  return angles_;
}
::proto::dota::CMsgQAngle* CMsgEffectData::release_angles() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgEffectData.angles)
  clear_has_angles();
  ::proto::dota::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
void CMsgEffectData::set_allocated_angles(::proto::dota::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgEffectData.angles)
}

// optional fixed32 entity = 5;
bool CMsgEffectData::has_entity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgEffectData::set_has_entity() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgEffectData::clear_has_entity() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgEffectData::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
::google::protobuf::uint32 CMsgEffectData::entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.entity)
  return entity_;
}
void CMsgEffectData::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.entity)
}

// optional fixed32 otherentity = 6;
bool CMsgEffectData::has_otherentity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgEffectData::set_has_otherentity() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgEffectData::clear_has_otherentity() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgEffectData::clear_otherentity() {
  otherentity_ = 0u;
  clear_has_otherentity();
}
::google::protobuf::uint32 CMsgEffectData::otherentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.otherentity)
  return otherentity_;
}
void CMsgEffectData::set_otherentity(::google::protobuf::uint32 value) {
  set_has_otherentity();
  otherentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.otherentity)
}

// optional float scale = 7;
bool CMsgEffectData::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgEffectData::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgEffectData::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgEffectData::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float CMsgEffectData::scale() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.scale)
  return scale_;
}
void CMsgEffectData::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.scale)
}

// optional float magnitude = 8;
bool CMsgEffectData::has_magnitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgEffectData::set_has_magnitude() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgEffectData::clear_has_magnitude() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgEffectData::clear_magnitude() {
  magnitude_ = 0;
  clear_has_magnitude();
}
float CMsgEffectData::magnitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.magnitude)
  return magnitude_;
}
void CMsgEffectData::set_magnitude(float value) {
  set_has_magnitude();
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.magnitude)
}

// optional float radius = 9;
bool CMsgEffectData::has_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgEffectData::set_has_radius() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgEffectData::clear_has_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgEffectData::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
float CMsgEffectData::radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.radius)
  return radius_;
}
void CMsgEffectData::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.radius)
}

// optional fixed32 surfaceprop = 10;
bool CMsgEffectData::has_surfaceprop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgEffectData::set_has_surfaceprop() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgEffectData::clear_has_surfaceprop() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgEffectData::clear_surfaceprop() {
  surfaceprop_ = 0u;
  clear_has_surfaceprop();
}
::google::protobuf::uint32 CMsgEffectData::surfaceprop() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.surfaceprop)
  return surfaceprop_;
}
void CMsgEffectData::set_surfaceprop(::google::protobuf::uint32 value) {
  set_has_surfaceprop();
  surfaceprop_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.surfaceprop)
}

// optional fixed64 effectindex = 11;
bool CMsgEffectData::has_effectindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgEffectData::set_has_effectindex() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgEffectData::clear_has_effectindex() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgEffectData::clear_effectindex() {
  effectindex_ = GOOGLE_ULONGLONG(0);
  clear_has_effectindex();
}
::google::protobuf::uint64 CMsgEffectData::effectindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.effectindex)
  return effectindex_;
}
void CMsgEffectData::set_effectindex(::google::protobuf::uint64 value) {
  set_has_effectindex();
  effectindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.effectindex)
}

// optional uint32 damagetype = 12;
bool CMsgEffectData::has_damagetype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgEffectData::set_has_damagetype() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgEffectData::clear_has_damagetype() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgEffectData::clear_damagetype() {
  damagetype_ = 0u;
  clear_has_damagetype();
}
::google::protobuf::uint32 CMsgEffectData::damagetype() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.damagetype)
  return damagetype_;
}
void CMsgEffectData::set_damagetype(::google::protobuf::uint32 value) {
  set_has_damagetype();
  damagetype_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.damagetype)
}

// optional uint32 material = 13;
bool CMsgEffectData::has_material() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgEffectData::set_has_material() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgEffectData::clear_has_material() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgEffectData::clear_material() {
  material_ = 0u;
  clear_has_material();
}
::google::protobuf::uint32 CMsgEffectData::material() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.material)
  return material_;
}
void CMsgEffectData::set_material(::google::protobuf::uint32 value) {
  set_has_material();
  material_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.material)
}

// optional uint32 hitbox = 14;
bool CMsgEffectData::has_hitbox() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgEffectData::set_has_hitbox() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgEffectData::clear_has_hitbox() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgEffectData::clear_hitbox() {
  hitbox_ = 0u;
  clear_has_hitbox();
}
::google::protobuf::uint32 CMsgEffectData::hitbox() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.hitbox)
  return hitbox_;
}
void CMsgEffectData::set_hitbox(::google::protobuf::uint32 value) {
  set_has_hitbox();
  hitbox_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.hitbox)
}

// optional uint32 color = 15;
bool CMsgEffectData::has_color() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgEffectData::set_has_color() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgEffectData::clear_has_color() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgEffectData::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CMsgEffectData::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.color)
  return color_;
}
void CMsgEffectData::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.color)
}

// optional uint32 flags = 16;
bool CMsgEffectData::has_flags() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgEffectData::set_has_flags() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgEffectData::clear_has_flags() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgEffectData::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CMsgEffectData::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.flags)
  return flags_;
}
void CMsgEffectData::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.flags)
}

// optional int32 attachmentindex = 17;
bool CMsgEffectData::has_attachmentindex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgEffectData::set_has_attachmentindex() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgEffectData::clear_has_attachmentindex() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgEffectData::clear_attachmentindex() {
  attachmentindex_ = 0;
  clear_has_attachmentindex();
}
::google::protobuf::int32 CMsgEffectData::attachmentindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.attachmentindex)
  return attachmentindex_;
}
void CMsgEffectData::set_attachmentindex(::google::protobuf::int32 value) {
  set_has_attachmentindex();
  attachmentindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.attachmentindex)
}

// optional uint32 effectname = 18;
bool CMsgEffectData::has_effectname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgEffectData::set_has_effectname() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgEffectData::clear_has_effectname() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgEffectData::clear_effectname() {
  effectname_ = 0u;
  clear_has_effectname();
}
::google::protobuf::uint32 CMsgEffectData::effectname() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.effectname)
  return effectname_;
}
void CMsgEffectData::set_effectname(::google::protobuf::uint32 value) {
  set_has_effectname();
  effectname_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.effectname)
}

// optional uint32 attachmentname = 19;
bool CMsgEffectData::has_attachmentname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgEffectData::set_has_attachmentname() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgEffectData::clear_has_attachmentname() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgEffectData::clear_attachmentname() {
  attachmentname_ = 0u;
  clear_has_attachmentname();
}
::google::protobuf::uint32 CMsgEffectData::attachmentname() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEffectData.attachmentname)
  return attachmentname_;
}
void CMsgEffectData::set_attachmentname(::google::protobuf::uint32 value) {
  set_has_attachmentname();
  attachmentname_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEffectData.attachmentname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEEffectDispatch::kEffectdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEEffectDispatch::CMsgTEEffectDispatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEEffectDispatch)
}
CMsgTEEffectDispatch::CMsgTEEffectDispatch(const CMsgTEEffectDispatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_effectdata()) {
    effectdata_ = new ::proto::dota::CMsgEffectData(*from.effectdata_);
  } else {
    effectdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEEffectDispatch)
}

void CMsgTEEffectDispatch::SharedCtor() {
  _cached_size_ = 0;
  effectdata_ = NULL;
}

CMsgTEEffectDispatch::~CMsgTEEffectDispatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEEffectDispatch)
  SharedDtor();
}

void CMsgTEEffectDispatch::SharedDtor() {
  if (this != internal_default_instance()) {
    delete effectdata_;
  }
}

void CMsgTEEffectDispatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEEffectDispatch::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEEffectDispatch& CMsgTEEffectDispatch::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEEffectDispatch* CMsgTEEffectDispatch::New(::google::protobuf::Arena* arena) const {
  CMsgTEEffectDispatch* n = new CMsgTEEffectDispatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEEffectDispatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEEffectDispatch)
  if (has_effectdata()) {
    GOOGLE_DCHECK(effectdata_ != NULL);
    effectdata_->::proto::dota::CMsgEffectData::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEEffectDispatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEEffectDispatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgEffectData effectdata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEEffectDispatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEEffectDispatch)
  return false;
#undef DO_
}

void CMsgTEEffectDispatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEEffectDispatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgEffectData effectdata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->effectdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEEffectDispatch)
}

::google::protobuf::uint8* CMsgTEEffectDispatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEEffectDispatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgEffectData effectdata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->effectdata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEEffectDispatch)
  return target;
}

size_t CMsgTEEffectDispatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEEffectDispatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgEffectData effectdata = 1;
  if (has_effectdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->effectdata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEEffectDispatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEEffectDispatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEEffectDispatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEEffectDispatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEEffectDispatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEEffectDispatch)
    MergeFrom(*source);
  }
}

void CMsgTEEffectDispatch::MergeFrom(const CMsgTEEffectDispatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEEffectDispatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_effectdata()) {
    mutable_effectdata()->::proto::dota::CMsgEffectData::MergeFrom(from.effectdata());
  }
}

void CMsgTEEffectDispatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEEffectDispatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEEffectDispatch::CopyFrom(const CMsgTEEffectDispatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEEffectDispatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEEffectDispatch::IsInitialized() const {
  return true;
}

void CMsgTEEffectDispatch::Swap(CMsgTEEffectDispatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEEffectDispatch::InternalSwap(CMsgTEEffectDispatch* other) {
  std::swap(effectdata_, other->effectdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEEffectDispatch::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEEffectDispatch

// optional .proto.dota.CMsgEffectData effectdata = 1;
bool CMsgTEEffectDispatch::has_effectdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEEffectDispatch::set_has_effectdata() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEEffectDispatch::clear_has_effectdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEEffectDispatch::clear_effectdata() {
  if (effectdata_ != NULL) effectdata_->::proto::dota::CMsgEffectData::Clear();
  clear_has_effectdata();
}
const ::proto::dota::CMsgEffectData& CMsgTEEffectDispatch::effectdata() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEEffectDispatch.effectdata)
  return effectdata_ != NULL ? *effectdata_
                         : *::proto::dota::CMsgEffectData::internal_default_instance();
}
::proto::dota::CMsgEffectData* CMsgTEEffectDispatch::mutable_effectdata() {
  set_has_effectdata();
  if (effectdata_ == NULL) {
    effectdata_ = new ::proto::dota::CMsgEffectData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEEffectDispatch.effectdata)
  return effectdata_;
}
::proto::dota::CMsgEffectData* CMsgTEEffectDispatch::release_effectdata() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEEffectDispatch.effectdata)
  clear_has_effectdata();
  ::proto::dota::CMsgEffectData* temp = effectdata_;
  effectdata_ = NULL;
  return temp;
}
void CMsgTEEffectDispatch::set_allocated_effectdata(::proto::dota::CMsgEffectData* effectdata) {
  delete effectdata_;
  effectdata_ = effectdata;
  if (effectdata) {
    set_has_effectdata();
  } else {
    clear_has_effectdata();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEEffectDispatch.effectdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEEnergySplash::kPosFieldNumber;
const int CMsgTEEnergySplash::kDirFieldNumber;
const int CMsgTEEnergySplash::kExplosiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEEnergySplash::CMsgTEEnergySplash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEEnergySplash)
}
CMsgTEEnergySplash::CMsgTEEnergySplash(const CMsgTEEnergySplash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::dota::CMsgVector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::proto::dota::CMsgVector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  explosive_ = from.explosive_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEEnergySplash)
}

void CMsgTEEnergySplash::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&explosive_) -
    reinterpret_cast<char*>(&pos_) + sizeof(explosive_));
}

CMsgTEEnergySplash::~CMsgTEEnergySplash() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEEnergySplash)
  SharedDtor();
}

void CMsgTEEnergySplash::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void CMsgTEEnergySplash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEEnergySplash::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEEnergySplash& CMsgTEEnergySplash::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEEnergySplash* CMsgTEEnergySplash::New(::google::protobuf::Arena* arena) const {
  CMsgTEEnergySplash* n = new CMsgTEEnergySplash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEEnergySplash::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEEnergySplash)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::proto::dota::CMsgVector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::proto::dota::CMsgVector::Clear();
    }
  }
  explosive_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEEnergySplash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEEnergySplash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector dir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool explosive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_explosive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explosive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEEnergySplash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEEnergySplash)
  return false;
#undef DO_
}

void CMsgTEEnergySplash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEEnergySplash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // optional .proto.dota.CMsgVector dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dir_, output);
  }

  // optional bool explosive = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->explosive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEEnergySplash)
}

::google::protobuf::uint8* CMsgTEEnergySplash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEEnergySplash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector dir = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dir_, deterministic, target);
  }

  // optional bool explosive = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->explosive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEEnergySplash)
  return target;
}

size_t CMsgTEEnergySplash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEEnergySplash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgVector pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .proto.dota.CMsgVector dir = 2;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dir_);
    }

    // optional bool explosive = 3;
    if (has_explosive()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEEnergySplash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEEnergySplash)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEEnergySplash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEEnergySplash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEEnergySplash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEEnergySplash)
    MergeFrom(*source);
  }
}

void CMsgTEEnergySplash::MergeFrom(const CMsgTEEnergySplash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEEnergySplash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::proto::dota::CMsgVector::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dir()->::proto::dota::CMsgVector::MergeFrom(from.dir());
    }
    if (cached_has_bits & 0x00000004u) {
      explosive_ = from.explosive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEEnergySplash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEEnergySplash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEEnergySplash::CopyFrom(const CMsgTEEnergySplash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEEnergySplash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEEnergySplash::IsInitialized() const {
  return true;
}

void CMsgTEEnergySplash::Swap(CMsgTEEnergySplash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEEnergySplash::InternalSwap(CMsgTEEnergySplash* other) {
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(explosive_, other->explosive_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEEnergySplash::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEEnergySplash

// optional .proto.dota.CMsgVector pos = 1;
bool CMsgTEEnergySplash::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEEnergySplash::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEEnergySplash::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEEnergySplash::clear_pos() {
  if (pos_ != NULL) pos_->::proto::dota::CMsgVector::Clear();
  clear_has_pos();
}
const ::proto::dota::CMsgVector& CMsgTEEnergySplash::pos() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEEnergySplash.pos)
  return pos_ != NULL ? *pos_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEEnergySplash::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEEnergySplash.pos)
  return pos_;
}
::proto::dota::CMsgVector* CMsgTEEnergySplash::release_pos() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEEnergySplash.pos)
  clear_has_pos();
  ::proto::dota::CMsgVector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void CMsgTEEnergySplash::set_allocated_pos(::proto::dota::CMsgVector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEEnergySplash.pos)
}

// optional .proto.dota.CMsgVector dir = 2;
bool CMsgTEEnergySplash::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEEnergySplash::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEEnergySplash::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEEnergySplash::clear_dir() {
  if (dir_ != NULL) dir_->::proto::dota::CMsgVector::Clear();
  clear_has_dir();
}
const ::proto::dota::CMsgVector& CMsgTEEnergySplash::dir() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEEnergySplash.dir)
  return dir_ != NULL ? *dir_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEEnergySplash::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEEnergySplash.dir)
  return dir_;
}
::proto::dota::CMsgVector* CMsgTEEnergySplash::release_dir() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEEnergySplash.dir)
  clear_has_dir();
  ::proto::dota::CMsgVector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void CMsgTEEnergySplash::set_allocated_dir(::proto::dota::CMsgVector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEEnergySplash.dir)
}

// optional bool explosive = 3;
bool CMsgTEEnergySplash::has_explosive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEEnergySplash::set_has_explosive() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEEnergySplash::clear_has_explosive() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEEnergySplash::clear_explosive() {
  explosive_ = false;
  clear_has_explosive();
}
bool CMsgTEEnergySplash::explosive() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEEnergySplash.explosive)
  return explosive_;
}
void CMsgTEEnergySplash::set_explosive(bool value) {
  set_has_explosive();
  explosive_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEEnergySplash.explosive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEFizz::kEntityFieldNumber;
const int CMsgTEFizz::kDensityFieldNumber;
const int CMsgTEFizz::kCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEFizz::CMsgTEFizz()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEFizz)
}
CMsgTEFizz::CMsgTEFizz(const CMsgTEFizz& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entity_, &from.entity_,
    reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&entity_) + sizeof(current_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEFizz)
}

void CMsgTEFizz::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&entity_, 0, reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&entity_) + sizeof(current_));
}

CMsgTEFizz::~CMsgTEFizz() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEFizz)
  SharedDtor();
}

void CMsgTEFizz::SharedDtor() {
}

void CMsgTEFizz::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEFizz::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEFizz& CMsgTEFizz::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEFizz* CMsgTEFizz::New(::google::protobuf::Arena* arena) const {
  CMsgTEFizz* n = new CMsgTEFizz;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEFizz::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEFizz)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&entity_, 0, reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&entity_) + sizeof(current_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEFizz::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEFizz)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 entity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 density = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_density();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &density_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEFizz)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEFizz)
  return false;
#undef DO_
}

void CMsgTEFizz::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEFizz)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entity(), output);
  }

  // optional uint32 density = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->density(), output);
  }

  // optional int32 current = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEFizz)
}

::google::protobuf::uint8* CMsgTEFizz::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEFizz)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entity(), target);
  }

  // optional uint32 density = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->density(), target);
  }

  // optional int32 current = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEFizz)
  return target;
}

size_t CMsgTEFizz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEFizz)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entity());
    }

    // optional uint32 density = 2;
    if (has_density()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->density());
    }

    // optional int32 current = 3;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEFizz::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEFizz)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEFizz* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEFizz>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEFizz)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEFizz)
    MergeFrom(*source);
  }
}

void CMsgTEFizz::MergeFrom(const CMsgTEFizz& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEFizz)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000002u) {
      density_ = from.density_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_ = from.current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEFizz::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEFizz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEFizz::CopyFrom(const CMsgTEFizz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEFizz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEFizz::IsInitialized() const {
  return true;
}

void CMsgTEFizz::Swap(CMsgTEFizz* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEFizz::InternalSwap(CMsgTEFizz* other) {
  std::swap(entity_, other->entity_);
  std::swap(density_, other->density_);
  std::swap(current_, other->current_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEFizz::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEFizz

// optional uint32 entity = 1;
bool CMsgTEFizz::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEFizz::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEFizz::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEFizz::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
::google::protobuf::uint32 CMsgTEFizz::entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEFizz.entity)
  return entity_;
}
void CMsgTEFizz::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEFizz.entity)
}

// optional uint32 density = 2;
bool CMsgTEFizz::has_density() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEFizz::set_has_density() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEFizz::clear_has_density() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEFizz::clear_density() {
  density_ = 0u;
  clear_has_density();
}
::google::protobuf::uint32 CMsgTEFizz::density() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEFizz.density)
  return density_;
}
void CMsgTEFizz::set_density(::google::protobuf::uint32 value) {
  set_has_density();
  density_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEFizz.density)
}

// optional int32 current = 3;
bool CMsgTEFizz::has_current() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEFizz::set_has_current() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEFizz::clear_has_current() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEFizz::clear_current() {
  current_ = 0;
  clear_has_current();
}
::google::protobuf::int32 CMsgTEFizz::current() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEFizz.current)
  return current_;
}
void CMsgTEFizz::set_current(::google::protobuf::int32 value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEFizz.current)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEShatterSurface::kOriginFieldNumber;
const int CMsgTEShatterSurface::kAnglesFieldNumber;
const int CMsgTEShatterSurface::kForceFieldNumber;
const int CMsgTEShatterSurface::kForceposFieldNumber;
const int CMsgTEShatterSurface::kWidthFieldNumber;
const int CMsgTEShatterSurface::kHeightFieldNumber;
const int CMsgTEShatterSurface::kShardsizeFieldNumber;
const int CMsgTEShatterSurface::kSurfacetypeFieldNumber;
const int CMsgTEShatterSurface::kFrontcolorFieldNumber;
const int CMsgTEShatterSurface::kBackcolorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEShatterSurface::CMsgTEShatterSurface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEShatterSurface)
}
CMsgTEShatterSurface::CMsgTEShatterSurface(const CMsgTEShatterSurface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_angles()) {
    angles_ = new ::proto::dota::CMsgQAngle(*from.angles_);
  } else {
    angles_ = NULL;
  }
  if (from.has_force()) {
    force_ = new ::proto::dota::CMsgVector(*from.force_);
  } else {
    force_ = NULL;
  }
  if (from.has_forcepos()) {
    forcepos_ = new ::proto::dota::CMsgVector(*from.forcepos_);
  } else {
    forcepos_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&backcolor_) -
    reinterpret_cast<char*>(&width_) + sizeof(backcolor_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEShatterSurface)
}

void CMsgTEShatterSurface::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&backcolor_) -
    reinterpret_cast<char*>(&origin_) + sizeof(backcolor_));
}

CMsgTEShatterSurface::~CMsgTEShatterSurface() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEShatterSurface)
  SharedDtor();
}

void CMsgTEShatterSurface::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete angles_;
  }
  if (this != internal_default_instance()) {
    delete force_;
  }
  if (this != internal_default_instance()) {
    delete forcepos_;
  }
}

void CMsgTEShatterSurface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEShatterSurface::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEShatterSurface& CMsgTEShatterSurface::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEShatterSurface* CMsgTEShatterSurface::New(::google::protobuf::Arena* arena) const {
  CMsgTEShatterSurface* n = new CMsgTEShatterSurface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEShatterSurface::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEShatterSurface)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_angles()) {
      GOOGLE_DCHECK(angles_ != NULL);
      angles_->::proto::dota::CMsgQAngle::Clear();
    }
    if (has_force()) {
      GOOGLE_DCHECK(force_ != NULL);
      force_->::proto::dota::CMsgVector::Clear();
    }
    if (has_forcepos()) {
      GOOGLE_DCHECK(forcepos_ != NULL);
      forcepos_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&width_, 0, reinterpret_cast<char*>(&surfacetype_) -
      reinterpret_cast<char*>(&width_) + sizeof(surfacetype_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&frontcolor_, 0, reinterpret_cast<char*>(&backcolor_) -
      reinterpret_cast<char*>(&frontcolor_) + sizeof(backcolor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEShatterSurface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEShatterSurface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle angles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector force = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector forcepos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forcepos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shardsize = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_shardsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shardsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 surfacetype = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_surfacetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surfacetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 frontcolor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_frontcolor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &frontcolor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 backcolor = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_backcolor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &backcolor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEShatterSurface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEShatterSurface)
  return false;
#undef DO_
}

void CMsgTEShatterSurface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEShatterSurface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angles_, output);
  }

  // optional .proto.dota.CMsgVector force = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->force_, output);
  }

  // optional .proto.dota.CMsgVector forcepos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->forcepos_, output);
  }

  // optional float width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->width(), output);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->height(), output);
  }

  // optional float shardsize = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->shardsize(), output);
  }

  // optional uint32 surfacetype = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->surfacetype(), output);
  }

  // optional fixed32 frontcolor = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->frontcolor(), output);
  }

  // optional fixed32 backcolor = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->backcolor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEShatterSurface)
}

::google::protobuf::uint8* CMsgTEShatterSurface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEShatterSurface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angles_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector force = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->force_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector forcepos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->forcepos_, deterministic, target);
  }

  // optional float width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->width(), target);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->height(), target);
  }

  // optional float shardsize = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->shardsize(), target);
  }

  // optional uint32 surfacetype = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->surfacetype(), target);
  }

  // optional fixed32 frontcolor = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->frontcolor(), target);
  }

  // optional fixed32 backcolor = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->backcolor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEShatterSurface)
  return target;
}

size_t CMsgTEShatterSurface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEShatterSurface)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgQAngle angles = 2;
    if (has_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angles_);
    }

    // optional .proto.dota.CMsgVector force = 3;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->force_);
    }

    // optional .proto.dota.CMsgVector forcepos = 4;
    if (has_forcepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->forcepos_);
    }

    // optional float width = 5;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 6;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional float shardsize = 7;
    if (has_shardsize()) {
      total_size += 1 + 4;
    }

    // optional uint32 surfacetype = 8;
    if (has_surfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surfacetype());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional fixed32 frontcolor = 9;
    if (has_frontcolor()) {
      total_size += 1 + 4;
    }

    // optional fixed32 backcolor = 10;
    if (has_backcolor()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEShatterSurface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEShatterSurface)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEShatterSurface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEShatterSurface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEShatterSurface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEShatterSurface)
    MergeFrom(*source);
  }
}

void CMsgTEShatterSurface::MergeFrom(const CMsgTEShatterSurface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEShatterSurface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angles()->::proto::dota::CMsgQAngle::MergeFrom(from.angles());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_force()->::proto::dota::CMsgVector::MergeFrom(from.force());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_forcepos()->::proto::dota::CMsgVector::MergeFrom(from.forcepos());
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      shardsize_ = from.shardsize_;
    }
    if (cached_has_bits & 0x00000080u) {
      surfacetype_ = from.surfacetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      frontcolor_ = from.frontcolor_;
    }
    if (cached_has_bits & 0x00000200u) {
      backcolor_ = from.backcolor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEShatterSurface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEShatterSurface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEShatterSurface::CopyFrom(const CMsgTEShatterSurface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEShatterSurface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEShatterSurface::IsInitialized() const {
  return true;
}

void CMsgTEShatterSurface::Swap(CMsgTEShatterSurface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEShatterSurface::InternalSwap(CMsgTEShatterSurface* other) {
  std::swap(origin_, other->origin_);
  std::swap(angles_, other->angles_);
  std::swap(force_, other->force_);
  std::swap(forcepos_, other->forcepos_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(shardsize_, other->shardsize_);
  std::swap(surfacetype_, other->surfacetype_);
  std::swap(frontcolor_, other->frontcolor_);
  std::swap(backcolor_, other->backcolor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEShatterSurface::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEShatterSurface

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEShatterSurface::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEShatterSurface::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEShatterSurface::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEShatterSurface::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEShatterSurface::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEShatterSurface::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEShatterSurface.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEShatterSurface::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEShatterSurface.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEShatterSurface::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEShatterSurface.origin)
}

// optional .proto.dota.CMsgQAngle angles = 2;
bool CMsgTEShatterSurface::has_angles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEShatterSurface::set_has_angles() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEShatterSurface::clear_has_angles() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEShatterSurface::clear_angles() {
  if (angles_ != NULL) angles_->::proto::dota::CMsgQAngle::Clear();
  clear_has_angles();
}
const ::proto::dota::CMsgQAngle& CMsgTEShatterSurface::angles() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.angles)
  return angles_ != NULL ? *angles_
                         : *::proto::dota::CMsgQAngle::internal_default_instance();
}
::proto::dota::CMsgQAngle* CMsgTEShatterSurface::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::proto::dota::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEShatterSurface.angles)
  return angles_;
}
::proto::dota::CMsgQAngle* CMsgTEShatterSurface::release_angles() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEShatterSurface.angles)
  clear_has_angles();
  ::proto::dota::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
void CMsgTEShatterSurface::set_allocated_angles(::proto::dota::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEShatterSurface.angles)
}

// optional .proto.dota.CMsgVector force = 3;
bool CMsgTEShatterSurface::has_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEShatterSurface::set_has_force() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEShatterSurface::clear_has_force() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEShatterSurface::clear_force() {
  if (force_ != NULL) force_->::proto::dota::CMsgVector::Clear();
  clear_has_force();
}
const ::proto::dota::CMsgVector& CMsgTEShatterSurface::force() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.force)
  return force_ != NULL ? *force_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEShatterSurface::mutable_force() {
  set_has_force();
  if (force_ == NULL) {
    force_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEShatterSurface.force)
  return force_;
}
::proto::dota::CMsgVector* CMsgTEShatterSurface::release_force() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEShatterSurface.force)
  clear_has_force();
  ::proto::dota::CMsgVector* temp = force_;
  force_ = NULL;
  return temp;
}
void CMsgTEShatterSurface::set_allocated_force(::proto::dota::CMsgVector* force) {
  delete force_;
  force_ = force;
  if (force) {
    set_has_force();
  } else {
    clear_has_force();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEShatterSurface.force)
}

// optional .proto.dota.CMsgVector forcepos = 4;
bool CMsgTEShatterSurface::has_forcepos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEShatterSurface::set_has_forcepos() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEShatterSurface::clear_has_forcepos() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEShatterSurface::clear_forcepos() {
  if (forcepos_ != NULL) forcepos_->::proto::dota::CMsgVector::Clear();
  clear_has_forcepos();
}
const ::proto::dota::CMsgVector& CMsgTEShatterSurface::forcepos() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.forcepos)
  return forcepos_ != NULL ? *forcepos_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEShatterSurface::mutable_forcepos() {
  set_has_forcepos();
  if (forcepos_ == NULL) {
    forcepos_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEShatterSurface.forcepos)
  return forcepos_;
}
::proto::dota::CMsgVector* CMsgTEShatterSurface::release_forcepos() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEShatterSurface.forcepos)
  clear_has_forcepos();
  ::proto::dota::CMsgVector* temp = forcepos_;
  forcepos_ = NULL;
  return temp;
}
void CMsgTEShatterSurface::set_allocated_forcepos(::proto::dota::CMsgVector* forcepos) {
  delete forcepos_;
  forcepos_ = forcepos;
  if (forcepos) {
    set_has_forcepos();
  } else {
    clear_has_forcepos();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEShatterSurface.forcepos)
}

// optional float width = 5;
bool CMsgTEShatterSurface::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEShatterSurface::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEShatterSurface::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEShatterSurface::clear_width() {
  width_ = 0;
  clear_has_width();
}
float CMsgTEShatterSurface::width() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.width)
  return width_;
}
void CMsgTEShatterSurface::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEShatterSurface.width)
}

// optional float height = 6;
bool CMsgTEShatterSurface::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgTEShatterSurface::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgTEShatterSurface::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgTEShatterSurface::clear_height() {
  height_ = 0;
  clear_has_height();
}
float CMsgTEShatterSurface::height() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.height)
  return height_;
}
void CMsgTEShatterSurface::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEShatterSurface.height)
}

// optional float shardsize = 7;
bool CMsgTEShatterSurface::has_shardsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgTEShatterSurface::set_has_shardsize() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgTEShatterSurface::clear_has_shardsize() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgTEShatterSurface::clear_shardsize() {
  shardsize_ = 0;
  clear_has_shardsize();
}
float CMsgTEShatterSurface::shardsize() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.shardsize)
  return shardsize_;
}
void CMsgTEShatterSurface::set_shardsize(float value) {
  set_has_shardsize();
  shardsize_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEShatterSurface.shardsize)
}

// optional uint32 surfacetype = 8;
bool CMsgTEShatterSurface::has_surfacetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgTEShatterSurface::set_has_surfacetype() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgTEShatterSurface::clear_has_surfacetype() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgTEShatterSurface::clear_surfacetype() {
  surfacetype_ = 0u;
  clear_has_surfacetype();
}
::google::protobuf::uint32 CMsgTEShatterSurface::surfacetype() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.surfacetype)
  return surfacetype_;
}
void CMsgTEShatterSurface::set_surfacetype(::google::protobuf::uint32 value) {
  set_has_surfacetype();
  surfacetype_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEShatterSurface.surfacetype)
}

// optional fixed32 frontcolor = 9;
bool CMsgTEShatterSurface::has_frontcolor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgTEShatterSurface::set_has_frontcolor() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgTEShatterSurface::clear_has_frontcolor() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgTEShatterSurface::clear_frontcolor() {
  frontcolor_ = 0u;
  clear_has_frontcolor();
}
::google::protobuf::uint32 CMsgTEShatterSurface::frontcolor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.frontcolor)
  return frontcolor_;
}
void CMsgTEShatterSurface::set_frontcolor(::google::protobuf::uint32 value) {
  set_has_frontcolor();
  frontcolor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEShatterSurface.frontcolor)
}

// optional fixed32 backcolor = 10;
bool CMsgTEShatterSurface::has_backcolor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgTEShatterSurface::set_has_backcolor() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgTEShatterSurface::clear_has_backcolor() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgTEShatterSurface::clear_backcolor() {
  backcolor_ = 0u;
  clear_has_backcolor();
}
::google::protobuf::uint32 CMsgTEShatterSurface::backcolor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEShatterSurface.backcolor)
  return backcolor_;
}
void CMsgTEShatterSurface::set_backcolor(::google::protobuf::uint32 value) {
  set_has_backcolor();
  backcolor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEShatterSurface.backcolor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEGlowSprite::kOriginFieldNumber;
const int CMsgTEGlowSprite::kScaleFieldNumber;
const int CMsgTEGlowSprite::kLifeFieldNumber;
const int CMsgTEGlowSprite::kBrightnessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEGlowSprite::CMsgTEGlowSprite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEGlowSprite)
}
CMsgTEGlowSprite::CMsgTEGlowSprite(const CMsgTEGlowSprite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  ::memcpy(&scale_, &from.scale_,
    reinterpret_cast<char*>(&brightness_) -
    reinterpret_cast<char*>(&scale_) + sizeof(brightness_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEGlowSprite)
}

void CMsgTEGlowSprite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&brightness_) -
    reinterpret_cast<char*>(&origin_) + sizeof(brightness_));
}

CMsgTEGlowSprite::~CMsgTEGlowSprite() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEGlowSprite)
  SharedDtor();
}

void CMsgTEGlowSprite::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
}

void CMsgTEGlowSprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEGlowSprite::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEGlowSprite& CMsgTEGlowSprite::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEGlowSprite* CMsgTEGlowSprite::New(::google::protobuf::Arena* arena) const {
  CMsgTEGlowSprite* n = new CMsgTEGlowSprite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEGlowSprite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEGlowSprite)
  if (has_origin()) {
    GOOGLE_DCHECK(origin_ != NULL);
    origin_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&scale_, 0, reinterpret_cast<char*>(&brightness_) -
      reinterpret_cast<char*>(&scale_) + sizeof(brightness_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEGlowSprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEGlowSprite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float life = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_life();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &life_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 brightness = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_brightness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brightness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEGlowSprite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEGlowSprite)
  return false;
#undef DO_
}

void CMsgTEGlowSprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEGlowSprite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float life = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->life(), output);
  }

  // optional uint32 brightness = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->brightness(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEGlowSprite)
}

::google::protobuf::uint8* CMsgTEGlowSprite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEGlowSprite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float life = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->life(), target);
  }

  // optional uint32 brightness = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->brightness(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEGlowSprite)
  return target;
}

size_t CMsgTEGlowSprite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEGlowSprite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional float scale = 2;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float life = 3;
    if (has_life()) {
      total_size += 1 + 4;
    }

    // optional uint32 brightness = 4;
    if (has_brightness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->brightness());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEGlowSprite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEGlowSprite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEGlowSprite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEGlowSprite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEGlowSprite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEGlowSprite)
    MergeFrom(*source);
  }
}

void CMsgTEGlowSprite::MergeFrom(const CMsgTEGlowSprite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEGlowSprite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      life_ = from.life_;
    }
    if (cached_has_bits & 0x00000008u) {
      brightness_ = from.brightness_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEGlowSprite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEGlowSprite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEGlowSprite::CopyFrom(const CMsgTEGlowSprite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEGlowSprite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEGlowSprite::IsInitialized() const {
  return true;
}

void CMsgTEGlowSprite::Swap(CMsgTEGlowSprite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEGlowSprite::InternalSwap(CMsgTEGlowSprite* other) {
  std::swap(origin_, other->origin_);
  std::swap(scale_, other->scale_);
  std::swap(life_, other->life_);
  std::swap(brightness_, other->brightness_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEGlowSprite::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEGlowSprite

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEGlowSprite::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEGlowSprite::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEGlowSprite::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEGlowSprite::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEGlowSprite::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEGlowSprite.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEGlowSprite::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEGlowSprite.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEGlowSprite::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEGlowSprite.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEGlowSprite::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEGlowSprite.origin)
}

// optional float scale = 2;
bool CMsgTEGlowSprite::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEGlowSprite::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEGlowSprite::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEGlowSprite::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float CMsgTEGlowSprite::scale() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEGlowSprite.scale)
  return scale_;
}
void CMsgTEGlowSprite::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEGlowSprite.scale)
}

// optional float life = 3;
bool CMsgTEGlowSprite::has_life() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEGlowSprite::set_has_life() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEGlowSprite::clear_has_life() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEGlowSprite::clear_life() {
  life_ = 0;
  clear_has_life();
}
float CMsgTEGlowSprite::life() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEGlowSprite.life)
  return life_;
}
void CMsgTEGlowSprite::set_life(float value) {
  set_has_life();
  life_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEGlowSprite.life)
}

// optional uint32 brightness = 4;
bool CMsgTEGlowSprite::has_brightness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEGlowSprite::set_has_brightness() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEGlowSprite::clear_has_brightness() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEGlowSprite::clear_brightness() {
  brightness_ = 0u;
  clear_has_brightness();
}
::google::protobuf::uint32 CMsgTEGlowSprite::brightness() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEGlowSprite.brightness)
  return brightness_;
}
void CMsgTEGlowSprite::set_brightness(::google::protobuf::uint32 value) {
  set_has_brightness();
  brightness_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEGlowSprite.brightness)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEImpact::kOriginFieldNumber;
const int CMsgTEImpact::kNormalFieldNumber;
const int CMsgTEImpact::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEImpact::CMsgTEImpact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEImpact)
}
CMsgTEImpact::CMsgTEImpact(const CMsgTEImpact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::proto::dota::CMsgVector(*from.normal_);
  } else {
    normal_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEImpact)
}

void CMsgTEImpact::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&origin_) + sizeof(type_));
}

CMsgTEImpact::~CMsgTEImpact() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEImpact)
  SharedDtor();
}

void CMsgTEImpact::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete normal_;
  }
}

void CMsgTEImpact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEImpact::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEImpact& CMsgTEImpact::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEImpact* CMsgTEImpact::New(::google::protobuf::Arena* arena) const {
  CMsgTEImpact* n = new CMsgTEImpact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEImpact)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_normal()) {
      GOOGLE_DCHECK(normal_ != NULL);
      normal_->::proto::dota::CMsgVector::Clear();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEImpact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEImpact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector normal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEImpact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEImpact)
  return false;
#undef DO_
}

void CMsgTEImpact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEImpact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->normal_, output);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEImpact)
}

::google::protobuf::uint8* CMsgTEImpact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEImpact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->normal_, deterministic, target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEImpact)
  return target;
}

size_t CMsgTEImpact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEImpact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector normal = 2;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->normal_);
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEImpact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEImpact)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEImpact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEImpact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEImpact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEImpact)
    MergeFrom(*source);
  }
}

void CMsgTEImpact::MergeFrom(const CMsgTEImpact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEImpact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_normal()->::proto::dota::CMsgVector::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEImpact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEImpact::CopyFrom(const CMsgTEImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEImpact::IsInitialized() const {
  return true;
}

void CMsgTEImpact::Swap(CMsgTEImpact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEImpact::InternalSwap(CMsgTEImpact* other) {
  std::swap(origin_, other->origin_);
  std::swap(normal_, other->normal_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEImpact::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEImpact

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEImpact::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEImpact::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEImpact::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEImpact::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEImpact::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEImpact.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEImpact::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEImpact.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEImpact::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEImpact.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEImpact::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEImpact.origin)
}

// optional .proto.dota.CMsgVector normal = 2;
bool CMsgTEImpact::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEImpact::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEImpact::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEImpact::clear_normal() {
  if (normal_ != NULL) normal_->::proto::dota::CMsgVector::Clear();
  clear_has_normal();
}
const ::proto::dota::CMsgVector& CMsgTEImpact::normal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEImpact.normal)
  return normal_ != NULL ? *normal_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEImpact::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEImpact.normal)
  return normal_;
}
::proto::dota::CMsgVector* CMsgTEImpact::release_normal() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEImpact.normal)
  clear_has_normal();
  ::proto::dota::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
void CMsgTEImpact::set_allocated_normal(::proto::dota::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEImpact.normal)
}

// optional uint32 type = 3;
bool CMsgTEImpact::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEImpact::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEImpact::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEImpact::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CMsgTEImpact::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEImpact.type)
  return type_;
}
void CMsgTEImpact::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEImpact.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEMuzzleFlash::kOriginFieldNumber;
const int CMsgTEMuzzleFlash::kAnglesFieldNumber;
const int CMsgTEMuzzleFlash::kScaleFieldNumber;
const int CMsgTEMuzzleFlash::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEMuzzleFlash::CMsgTEMuzzleFlash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEMuzzleFlash)
}
CMsgTEMuzzleFlash::CMsgTEMuzzleFlash(const CMsgTEMuzzleFlash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_angles()) {
    angles_ = new ::proto::dota::CMsgQAngle(*from.angles_);
  } else {
    angles_ = NULL;
  }
  ::memcpy(&scale_, &from.scale_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&scale_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEMuzzleFlash)
}

void CMsgTEMuzzleFlash::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&origin_) + sizeof(type_));
}

CMsgTEMuzzleFlash::~CMsgTEMuzzleFlash() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEMuzzleFlash)
  SharedDtor();
}

void CMsgTEMuzzleFlash::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete angles_;
  }
}

void CMsgTEMuzzleFlash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEMuzzleFlash::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEMuzzleFlash& CMsgTEMuzzleFlash::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEMuzzleFlash* CMsgTEMuzzleFlash::New(::google::protobuf::Arena* arena) const {
  CMsgTEMuzzleFlash* n = new CMsgTEMuzzleFlash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEMuzzleFlash::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEMuzzleFlash)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_angles()) {
      GOOGLE_DCHECK(angles_ != NULL);
      angles_->::proto::dota::CMsgQAngle::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&scale_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&scale_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEMuzzleFlash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEMuzzleFlash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle angles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEMuzzleFlash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEMuzzleFlash)
  return false;
#undef DO_
}

void CMsgTEMuzzleFlash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEMuzzleFlash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angles_, output);
  }

  // optional float scale = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale(), output);
  }

  // optional uint32 type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEMuzzleFlash)
}

::google::protobuf::uint8* CMsgTEMuzzleFlash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEMuzzleFlash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angles_, deterministic, target);
  }

  // optional float scale = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale(), target);
  }

  // optional uint32 type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEMuzzleFlash)
  return target;
}

size_t CMsgTEMuzzleFlash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEMuzzleFlash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgQAngle angles = 2;
    if (has_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angles_);
    }

    // optional float scale = 3;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEMuzzleFlash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEMuzzleFlash)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEMuzzleFlash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEMuzzleFlash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEMuzzleFlash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEMuzzleFlash)
    MergeFrom(*source);
  }
}

void CMsgTEMuzzleFlash::MergeFrom(const CMsgTEMuzzleFlash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEMuzzleFlash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angles()->::proto::dota::CMsgQAngle::MergeFrom(from.angles());
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEMuzzleFlash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEMuzzleFlash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEMuzzleFlash::CopyFrom(const CMsgTEMuzzleFlash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEMuzzleFlash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEMuzzleFlash::IsInitialized() const {
  return true;
}

void CMsgTEMuzzleFlash::Swap(CMsgTEMuzzleFlash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEMuzzleFlash::InternalSwap(CMsgTEMuzzleFlash* other) {
  std::swap(origin_, other->origin_);
  std::swap(angles_, other->angles_);
  std::swap(scale_, other->scale_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEMuzzleFlash::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEMuzzleFlash

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEMuzzleFlash::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEMuzzleFlash::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEMuzzleFlash::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEMuzzleFlash::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEMuzzleFlash::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEMuzzleFlash.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEMuzzleFlash::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEMuzzleFlash.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEMuzzleFlash::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEMuzzleFlash.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEMuzzleFlash::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEMuzzleFlash.origin)
}

// optional .proto.dota.CMsgQAngle angles = 2;
bool CMsgTEMuzzleFlash::has_angles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEMuzzleFlash::set_has_angles() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEMuzzleFlash::clear_has_angles() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEMuzzleFlash::clear_angles() {
  if (angles_ != NULL) angles_->::proto::dota::CMsgQAngle::Clear();
  clear_has_angles();
}
const ::proto::dota::CMsgQAngle& CMsgTEMuzzleFlash::angles() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEMuzzleFlash.angles)
  return angles_ != NULL ? *angles_
                         : *::proto::dota::CMsgQAngle::internal_default_instance();
}
::proto::dota::CMsgQAngle* CMsgTEMuzzleFlash::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::proto::dota::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEMuzzleFlash.angles)
  return angles_;
}
::proto::dota::CMsgQAngle* CMsgTEMuzzleFlash::release_angles() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEMuzzleFlash.angles)
  clear_has_angles();
  ::proto::dota::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
void CMsgTEMuzzleFlash::set_allocated_angles(::proto::dota::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEMuzzleFlash.angles)
}

// optional float scale = 3;
bool CMsgTEMuzzleFlash::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEMuzzleFlash::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEMuzzleFlash::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEMuzzleFlash::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float CMsgTEMuzzleFlash::scale() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEMuzzleFlash.scale)
  return scale_;
}
void CMsgTEMuzzleFlash::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEMuzzleFlash.scale)
}

// optional uint32 type = 4;
bool CMsgTEMuzzleFlash::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEMuzzleFlash::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEMuzzleFlash::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEMuzzleFlash::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CMsgTEMuzzleFlash::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEMuzzleFlash.type)
  return type_;
}
void CMsgTEMuzzleFlash::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEMuzzleFlash.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEBloodStream::kOriginFieldNumber;
const int CMsgTEBloodStream::kDirectionFieldNumber;
const int CMsgTEBloodStream::kColorFieldNumber;
const int CMsgTEBloodStream::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEBloodStream::CMsgTEBloodStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEBloodStream)
}
CMsgTEBloodStream::CMsgTEBloodStream(const CMsgTEBloodStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::proto::dota::CMsgVector(*from.direction_);
  } else {
    direction_ = NULL;
  }
  ::memcpy(&color_, &from.color_,
    reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&color_) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEBloodStream)
}

void CMsgTEBloodStream::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&origin_) + sizeof(amount_));
}

CMsgTEBloodStream::~CMsgTEBloodStream() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEBloodStream)
  SharedDtor();
}

void CMsgTEBloodStream::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete direction_;
  }
}

void CMsgTEBloodStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEBloodStream::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEBloodStream& CMsgTEBloodStream::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEBloodStream* CMsgTEBloodStream::New(::google::protobuf::Arena* arena) const {
  CMsgTEBloodStream* n = new CMsgTEBloodStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEBloodStream::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEBloodStream)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_direction()) {
      GOOGLE_DCHECK(direction_ != NULL);
      direction_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&color_, 0, reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&color_) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEBloodStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEBloodStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 amount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEBloodStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEBloodStream)
  return false;
#undef DO_
}

void CMsgTEBloodStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEBloodStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgVector direction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->direction_, output);
  }

  // optional fixed32 color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->color(), output);
  }

  // optional uint32 amount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEBloodStream)
}

::google::protobuf::uint8* CMsgTEBloodStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEBloodStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->direction_, deterministic, target);
  }

  // optional fixed32 color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->color(), target);
  }

  // optional uint32 amount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEBloodStream)
  return target;
}

size_t CMsgTEBloodStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEBloodStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_);
    }

    // optional fixed32 color = 3;
    if (has_color()) {
      total_size += 1 + 4;
    }

    // optional uint32 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEBloodStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEBloodStream)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEBloodStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEBloodStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEBloodStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEBloodStream)
    MergeFrom(*source);
  }
}

void CMsgTEBloodStream::MergeFrom(const CMsgTEBloodStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEBloodStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_direction()->::proto::dota::CMsgVector::MergeFrom(from.direction());
    }
    if (cached_has_bits & 0x00000004u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEBloodStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEBloodStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEBloodStream::CopyFrom(const CMsgTEBloodStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEBloodStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEBloodStream::IsInitialized() const {
  return true;
}

void CMsgTEBloodStream::Swap(CMsgTEBloodStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEBloodStream::InternalSwap(CMsgTEBloodStream* other) {
  std::swap(origin_, other->origin_);
  std::swap(direction_, other->direction_);
  std::swap(color_, other->color_);
  std::swap(amount_, other->amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEBloodStream::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEBloodStream

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEBloodStream::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEBloodStream::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEBloodStream::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEBloodStream::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEBloodStream::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBloodStream.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBloodStream::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBloodStream.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEBloodStream::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBloodStream.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEBloodStream::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBloodStream.origin)
}

// optional .proto.dota.CMsgVector direction = 2;
bool CMsgTEBloodStream::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEBloodStream::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEBloodStream::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEBloodStream::clear_direction() {
  if (direction_ != NULL) direction_->::proto::dota::CMsgVector::Clear();
  clear_has_direction();
}
const ::proto::dota::CMsgVector& CMsgTEBloodStream::direction() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBloodStream.direction)
  return direction_ != NULL ? *direction_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEBloodStream::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEBloodStream.direction)
  return direction_;
}
::proto::dota::CMsgVector* CMsgTEBloodStream::release_direction() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEBloodStream.direction)
  clear_has_direction();
  ::proto::dota::CMsgVector* temp = direction_;
  direction_ = NULL;
  return temp;
}
void CMsgTEBloodStream::set_allocated_direction(::proto::dota::CMsgVector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEBloodStream.direction)
}

// optional fixed32 color = 3;
bool CMsgTEBloodStream::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEBloodStream::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEBloodStream::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEBloodStream::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CMsgTEBloodStream::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBloodStream.color)
  return color_;
}
void CMsgTEBloodStream::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBloodStream.color)
}

// optional uint32 amount = 4;
bool CMsgTEBloodStream::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEBloodStream::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEBloodStream::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEBloodStream::clear_amount() {
  amount_ = 0u;
  clear_has_amount();
}
::google::protobuf::uint32 CMsgTEBloodStream::amount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEBloodStream.amount)
  return amount_;
}
void CMsgTEBloodStream::set_amount(::google::protobuf::uint32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEBloodStream.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEExplosion::kOriginFieldNumber;
const int CMsgTEExplosion::kFramerateFieldNumber;
const int CMsgTEExplosion::kFlagsFieldNumber;
const int CMsgTEExplosion::kNormalFieldNumber;
const int CMsgTEExplosion::kMaterialtypeFieldNumber;
const int CMsgTEExplosion::kRadiusFieldNumber;
const int CMsgTEExplosion::kMagnitudeFieldNumber;
const int CMsgTEExplosion::kScaleFieldNumber;
const int CMsgTEExplosion::kAffectRagdollsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEExplosion::CMsgTEExplosion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEExplosion)
}
CMsgTEExplosion::CMsgTEExplosion(const CMsgTEExplosion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::proto::dota::CMsgVector(*from.normal_);
  } else {
    normal_ = NULL;
  }
  ::memcpy(&framerate_, &from.framerate_,
    reinterpret_cast<char*>(&affect_ragdolls_) -
    reinterpret_cast<char*>(&framerate_) + sizeof(affect_ragdolls_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEExplosion)
}

void CMsgTEExplosion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&affect_ragdolls_) -
    reinterpret_cast<char*>(&origin_) + sizeof(affect_ragdolls_));
}

CMsgTEExplosion::~CMsgTEExplosion() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEExplosion)
  SharedDtor();
}

void CMsgTEExplosion::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete normal_;
  }
}

void CMsgTEExplosion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEExplosion::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEExplosion& CMsgTEExplosion::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEExplosion* CMsgTEExplosion::New(::google::protobuf::Arena* arena) const {
  CMsgTEExplosion* n = new CMsgTEExplosion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEExplosion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEExplosion)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_normal()) {
      GOOGLE_DCHECK(normal_ != NULL);
      normal_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&framerate_, 0, reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&framerate_) + sizeof(scale_));
  }
  affect_ragdolls_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEExplosion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEExplosion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 framerate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_framerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector normal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 materialtype = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_materialtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &materialtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radius = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 magnitude = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_magnitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magnitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool affect_ragdolls = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_affect_ragdolls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &affect_ragdolls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEExplosion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEExplosion)
  return false;
#undef DO_
}

void CMsgTEExplosion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEExplosion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional uint32 framerate = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->framerate(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional .proto.dota.CMsgVector normal = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->normal_, output);
  }

  // optional uint32 materialtype = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->materialtype(), output);
  }

  // optional uint32 radius = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->radius(), output);
  }

  // optional uint32 magnitude = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->magnitude(), output);
  }

  // optional float scale = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->scale(), output);
  }

  // optional bool affect_ragdolls = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->affect_ragdolls(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEExplosion)
}

::google::protobuf::uint8* CMsgTEExplosion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEExplosion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional uint32 framerate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->framerate(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional .proto.dota.CMsgVector normal = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->normal_, deterministic, target);
  }

  // optional uint32 materialtype = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->materialtype(), target);
  }

  // optional uint32 radius = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->radius(), target);
  }

  // optional uint32 magnitude = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->magnitude(), target);
  }

  // optional float scale = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->scale(), target);
  }

  // optional bool affect_ragdolls = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->affect_ragdolls(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEExplosion)
  return target;
}

size_t CMsgTEExplosion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEExplosion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector normal = 4;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->normal_);
    }

    // optional uint32 framerate = 2;
    if (has_framerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framerate());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 materialtype = 5;
    if (has_materialtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->materialtype());
    }

    // optional uint32 radius = 6;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radius());
    }

    // optional uint32 magnitude = 7;
    if (has_magnitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magnitude());
    }

    // optional float scale = 8;
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  // optional bool affect_ragdolls = 9;
  if (has_affect_ragdolls()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEExplosion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEExplosion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEExplosion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEExplosion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEExplosion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEExplosion)
    MergeFrom(*source);
  }
}

void CMsgTEExplosion::MergeFrom(const CMsgTEExplosion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEExplosion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_normal()->::proto::dota::CMsgVector::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000004u) {
      framerate_ = from.framerate_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      materialtype_ = from.materialtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000040u) {
      magnitude_ = from.magnitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_affect_ragdolls(from.affect_ragdolls());
  }
}

void CMsgTEExplosion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEExplosion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEExplosion::CopyFrom(const CMsgTEExplosion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEExplosion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEExplosion::IsInitialized() const {
  return true;
}

void CMsgTEExplosion::Swap(CMsgTEExplosion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEExplosion::InternalSwap(CMsgTEExplosion* other) {
  std::swap(origin_, other->origin_);
  std::swap(normal_, other->normal_);
  std::swap(framerate_, other->framerate_);
  std::swap(flags_, other->flags_);
  std::swap(materialtype_, other->materialtype_);
  std::swap(radius_, other->radius_);
  std::swap(magnitude_, other->magnitude_);
  std::swap(scale_, other->scale_);
  std::swap(affect_ragdolls_, other->affect_ragdolls_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEExplosion::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEExplosion

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEExplosion::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEExplosion::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEExplosion::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEExplosion::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEExplosion::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEExplosion.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEExplosion::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEExplosion.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEExplosion::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEExplosion.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEExplosion::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEExplosion.origin)
}

// optional uint32 framerate = 2;
bool CMsgTEExplosion::has_framerate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEExplosion::set_has_framerate() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEExplosion::clear_has_framerate() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEExplosion::clear_framerate() {
  framerate_ = 0u;
  clear_has_framerate();
}
::google::protobuf::uint32 CMsgTEExplosion::framerate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEExplosion.framerate)
  return framerate_;
}
void CMsgTEExplosion::set_framerate(::google::protobuf::uint32 value) {
  set_has_framerate();
  framerate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEExplosion.framerate)
}

// optional uint32 flags = 3;
bool CMsgTEExplosion::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEExplosion::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEExplosion::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEExplosion::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CMsgTEExplosion::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEExplosion.flags)
  return flags_;
}
void CMsgTEExplosion::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEExplosion.flags)
}

// optional .proto.dota.CMsgVector normal = 4;
bool CMsgTEExplosion::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEExplosion::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEExplosion::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEExplosion::clear_normal() {
  if (normal_ != NULL) normal_->::proto::dota::CMsgVector::Clear();
  clear_has_normal();
}
const ::proto::dota::CMsgVector& CMsgTEExplosion::normal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEExplosion.normal)
  return normal_ != NULL ? *normal_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEExplosion::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEExplosion.normal)
  return normal_;
}
::proto::dota::CMsgVector* CMsgTEExplosion::release_normal() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEExplosion.normal)
  clear_has_normal();
  ::proto::dota::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
void CMsgTEExplosion::set_allocated_normal(::proto::dota::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEExplosion.normal)
}

// optional uint32 materialtype = 5;
bool CMsgTEExplosion::has_materialtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEExplosion::set_has_materialtype() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEExplosion::clear_has_materialtype() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEExplosion::clear_materialtype() {
  materialtype_ = 0u;
  clear_has_materialtype();
}
::google::protobuf::uint32 CMsgTEExplosion::materialtype() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEExplosion.materialtype)
  return materialtype_;
}
void CMsgTEExplosion::set_materialtype(::google::protobuf::uint32 value) {
  set_has_materialtype();
  materialtype_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEExplosion.materialtype)
}

// optional uint32 radius = 6;
bool CMsgTEExplosion::has_radius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgTEExplosion::set_has_radius() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgTEExplosion::clear_has_radius() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgTEExplosion::clear_radius() {
  radius_ = 0u;
  clear_has_radius();
}
::google::protobuf::uint32 CMsgTEExplosion::radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEExplosion.radius)
  return radius_;
}
void CMsgTEExplosion::set_radius(::google::protobuf::uint32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEExplosion.radius)
}

// optional uint32 magnitude = 7;
bool CMsgTEExplosion::has_magnitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgTEExplosion::set_has_magnitude() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgTEExplosion::clear_has_magnitude() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgTEExplosion::clear_magnitude() {
  magnitude_ = 0u;
  clear_has_magnitude();
}
::google::protobuf::uint32 CMsgTEExplosion::magnitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEExplosion.magnitude)
  return magnitude_;
}
void CMsgTEExplosion::set_magnitude(::google::protobuf::uint32 value) {
  set_has_magnitude();
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEExplosion.magnitude)
}

// optional float scale = 8;
bool CMsgTEExplosion::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgTEExplosion::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgTEExplosion::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgTEExplosion::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float CMsgTEExplosion::scale() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEExplosion.scale)
  return scale_;
}
void CMsgTEExplosion::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEExplosion.scale)
}

// optional bool affect_ragdolls = 9;
bool CMsgTEExplosion::has_affect_ragdolls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgTEExplosion::set_has_affect_ragdolls() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgTEExplosion::clear_has_affect_ragdolls() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgTEExplosion::clear_affect_ragdolls() {
  affect_ragdolls_ = false;
  clear_has_affect_ragdolls();
}
bool CMsgTEExplosion::affect_ragdolls() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEExplosion.affect_ragdolls)
  return affect_ragdolls_;
}
void CMsgTEExplosion::set_affect_ragdolls(bool value) {
  set_has_affect_ragdolls();
  affect_ragdolls_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEExplosion.affect_ragdolls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEDust::kOriginFieldNumber;
const int CMsgTEDust::kSizeFieldNumber;
const int CMsgTEDust::kSpeedFieldNumber;
const int CMsgTEDust::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEDust::CMsgTEDust()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEDust)
}
CMsgTEDust::CMsgTEDust(const CMsgTEDust& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::proto::dota::CMsgVector(*from.direction_);
  } else {
    direction_ = NULL;
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&size_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEDust)
}

void CMsgTEDust::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&origin_) + sizeof(speed_));
}

CMsgTEDust::~CMsgTEDust() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEDust)
  SharedDtor();
}

void CMsgTEDust::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete direction_;
  }
}

void CMsgTEDust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEDust::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEDust& CMsgTEDust::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEDust* CMsgTEDust::New(::google::protobuf::Arena* arena) const {
  CMsgTEDust* n = new CMsgTEDust;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEDust::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEDust)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_direction()) {
      GOOGLE_DCHECK(direction_ != NULL);
      direction_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&size_) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEDust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEDust)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEDust)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEDust)
  return false;
#undef DO_
}

void CMsgTEDust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEDust)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional float size = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->size(), output);
  }

  // optional float speed = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  // optional .proto.dota.CMsgVector direction = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->direction_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEDust)
}

::google::protobuf::uint8* CMsgTEDust::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEDust)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional float size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->size(), target);
  }

  // optional float speed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  // optional .proto.dota.CMsgVector direction = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->direction_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEDust)
  return target;
}

size_t CMsgTEDust::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEDust)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_);
    }

    // optional float size = 2;
    if (has_size()) {
      total_size += 1 + 4;
    }

    // optional float speed = 3;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEDust::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEDust)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEDust* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEDust>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEDust)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEDust)
    MergeFrom(*source);
  }
}

void CMsgTEDust::MergeFrom(const CMsgTEDust& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEDust)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_direction()->::proto::dota::CMsgVector::MergeFrom(from.direction());
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEDust::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEDust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEDust::CopyFrom(const CMsgTEDust& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEDust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEDust::IsInitialized() const {
  return true;
}

void CMsgTEDust::Swap(CMsgTEDust* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEDust::InternalSwap(CMsgTEDust* other) {
  std::swap(origin_, other->origin_);
  std::swap(direction_, other->direction_);
  std::swap(size_, other->size_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEDust::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEDust

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEDust::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEDust::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEDust::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEDust::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEDust::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEDust.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEDust::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEDust.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEDust::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEDust.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEDust::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEDust.origin)
}

// optional float size = 2;
bool CMsgTEDust::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEDust::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEDust::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEDust::clear_size() {
  size_ = 0;
  clear_has_size();
}
float CMsgTEDust::size() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEDust.size)
  return size_;
}
void CMsgTEDust::set_size(float value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEDust.size)
}

// optional float speed = 3;
bool CMsgTEDust::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEDust::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEDust::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEDust::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
float CMsgTEDust::speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEDust.speed)
  return speed_;
}
void CMsgTEDust::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEDust.speed)
}

// optional .proto.dota.CMsgVector direction = 4;
bool CMsgTEDust::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEDust::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEDust::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEDust::clear_direction() {
  if (direction_ != NULL) direction_->::proto::dota::CMsgVector::Clear();
  clear_has_direction();
}
const ::proto::dota::CMsgVector& CMsgTEDust::direction() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEDust.direction)
  return direction_ != NULL ? *direction_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEDust::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEDust.direction)
  return direction_;
}
::proto::dota::CMsgVector* CMsgTEDust::release_direction() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEDust.direction)
  clear_has_direction();
  ::proto::dota::CMsgVector* temp = direction_;
  direction_ = NULL;
  return temp;
}
void CMsgTEDust::set_allocated_direction(::proto::dota::CMsgVector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEDust.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTELargeFunnel::kOriginFieldNumber;
const int CMsgTELargeFunnel::kReversedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTELargeFunnel::CMsgTELargeFunnel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTELargeFunnel)
}
CMsgTELargeFunnel::CMsgTELargeFunnel(const CMsgTELargeFunnel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  reversed_ = from.reversed_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTELargeFunnel)
}

void CMsgTELargeFunnel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&reversed_) -
    reinterpret_cast<char*>(&origin_) + sizeof(reversed_));
}

CMsgTELargeFunnel::~CMsgTELargeFunnel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTELargeFunnel)
  SharedDtor();
}

void CMsgTELargeFunnel::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
}

void CMsgTELargeFunnel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTELargeFunnel::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTELargeFunnel& CMsgTELargeFunnel::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTELargeFunnel* CMsgTELargeFunnel::New(::google::protobuf::Arena* arena) const {
  CMsgTELargeFunnel* n = new CMsgTELargeFunnel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTELargeFunnel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTELargeFunnel)
  if (has_origin()) {
    GOOGLE_DCHECK(origin_ != NULL);
    origin_->::proto::dota::CMsgVector::Clear();
  }
  reversed_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTELargeFunnel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTELargeFunnel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reversed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_reversed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reversed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTELargeFunnel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTELargeFunnel)
  return false;
#undef DO_
}

void CMsgTELargeFunnel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTELargeFunnel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional uint32 reversed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reversed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTELargeFunnel)
}

::google::protobuf::uint8* CMsgTELargeFunnel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTELargeFunnel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional uint32 reversed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reversed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTELargeFunnel)
  return target;
}

size_t CMsgTELargeFunnel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTELargeFunnel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional uint32 reversed = 2;
    if (has_reversed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reversed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTELargeFunnel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTELargeFunnel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTELargeFunnel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTELargeFunnel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTELargeFunnel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTELargeFunnel)
    MergeFrom(*source);
  }
}

void CMsgTELargeFunnel::MergeFrom(const CMsgTELargeFunnel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTELargeFunnel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      reversed_ = from.reversed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTELargeFunnel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTELargeFunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTELargeFunnel::CopyFrom(const CMsgTELargeFunnel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTELargeFunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTELargeFunnel::IsInitialized() const {
  return true;
}

void CMsgTELargeFunnel::Swap(CMsgTELargeFunnel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTELargeFunnel::InternalSwap(CMsgTELargeFunnel* other) {
  std::swap(origin_, other->origin_);
  std::swap(reversed_, other->reversed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTELargeFunnel::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTELargeFunnel

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTELargeFunnel::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTELargeFunnel::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTELargeFunnel::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTELargeFunnel::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTELargeFunnel::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTELargeFunnel.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTELargeFunnel::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTELargeFunnel.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTELargeFunnel::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTELargeFunnel.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTELargeFunnel::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTELargeFunnel.origin)
}

// optional uint32 reversed = 2;
bool CMsgTELargeFunnel::has_reversed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTELargeFunnel::set_has_reversed() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTELargeFunnel::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTELargeFunnel::clear_reversed() {
  reversed_ = 0u;
  clear_has_reversed();
}
::google::protobuf::uint32 CMsgTELargeFunnel::reversed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTELargeFunnel.reversed)
  return reversed_;
}
void CMsgTELargeFunnel::set_reversed(::google::protobuf::uint32 value) {
  set_has_reversed();
  reversed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTELargeFunnel.reversed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTESparks::kOriginFieldNumber;
const int CMsgTESparks::kMagnitudeFieldNumber;
const int CMsgTESparks::kLengthFieldNumber;
const int CMsgTESparks::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTESparks::CMsgTESparks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTESparks)
}
CMsgTESparks::CMsgTESparks(const CMsgTESparks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::proto::dota::CMsgVector(*from.direction_);
  } else {
    direction_ = NULL;
  }
  ::memcpy(&magnitude_, &from.magnitude_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&magnitude_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTESparks)
}

void CMsgTESparks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&origin_) + sizeof(length_));
}

CMsgTESparks::~CMsgTESparks() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTESparks)
  SharedDtor();
}

void CMsgTESparks::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete direction_;
  }
}

void CMsgTESparks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTESparks::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTESparks& CMsgTESparks::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTESparks* CMsgTESparks::New(::google::protobuf::Arena* arena) const {
  CMsgTESparks* n = new CMsgTESparks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTESparks::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTESparks)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_direction()) {
      GOOGLE_DCHECK(direction_ != NULL);
      direction_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&magnitude_, 0, reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&magnitude_) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTESparks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTESparks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 magnitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_magnitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magnitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTESparks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTESparks)
  return false;
#undef DO_
}

void CMsgTESparks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTESparks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional uint32 magnitude = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magnitude(), output);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // optional .proto.dota.CMsgVector direction = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->direction_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTESparks)
}

::google::protobuf::uint8* CMsgTESparks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTESparks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional uint32 magnitude = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->magnitude(), target);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // optional .proto.dota.CMsgVector direction = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->direction_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTESparks)
  return target;
}

size_t CMsgTESparks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTESparks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_);
    }

    // optional uint32 magnitude = 2;
    if (has_magnitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magnitude());
    }

    // optional uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTESparks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTESparks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTESparks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTESparks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTESparks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTESparks)
    MergeFrom(*source);
  }
}

void CMsgTESparks::MergeFrom(const CMsgTESparks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTESparks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_direction()->::proto::dota::CMsgVector::MergeFrom(from.direction());
    }
    if (cached_has_bits & 0x00000004u) {
      magnitude_ = from.magnitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTESparks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTESparks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTESparks::CopyFrom(const CMsgTESparks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTESparks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTESparks::IsInitialized() const {
  return true;
}

void CMsgTESparks::Swap(CMsgTESparks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTESparks::InternalSwap(CMsgTESparks* other) {
  std::swap(origin_, other->origin_);
  std::swap(direction_, other->direction_);
  std::swap(magnitude_, other->magnitude_);
  std::swap(length_, other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTESparks::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTESparks

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTESparks::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTESparks::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTESparks::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTESparks::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTESparks::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTESparks.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTESparks::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTESparks.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTESparks::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTESparks.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTESparks::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTESparks.origin)
}

// optional uint32 magnitude = 2;
bool CMsgTESparks::has_magnitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTESparks::set_has_magnitude() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTESparks::clear_has_magnitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTESparks::clear_magnitude() {
  magnitude_ = 0u;
  clear_has_magnitude();
}
::google::protobuf::uint32 CMsgTESparks::magnitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTESparks.magnitude)
  return magnitude_;
}
void CMsgTESparks::set_magnitude(::google::protobuf::uint32 value) {
  set_has_magnitude();
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTESparks.magnitude)
}

// optional uint32 length = 3;
bool CMsgTESparks::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTESparks::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTESparks::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTESparks::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 CMsgTESparks::length() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTESparks.length)
  return length_;
}
void CMsgTESparks::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTESparks.length)
}

// optional .proto.dota.CMsgVector direction = 4;
bool CMsgTESparks::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTESparks::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTESparks::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTESparks::clear_direction() {
  if (direction_ != NULL) direction_->::proto::dota::CMsgVector::Clear();
  clear_has_direction();
}
const ::proto::dota::CMsgVector& CMsgTESparks::direction() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTESparks.direction)
  return direction_ != NULL ? *direction_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTESparks::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTESparks.direction)
  return direction_;
}
::proto::dota::CMsgVector* CMsgTESparks::release_direction() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTESparks.direction)
  clear_has_direction();
  ::proto::dota::CMsgVector* temp = direction_;
  direction_ = NULL;
  return temp;
}
void CMsgTESparks::set_allocated_direction(::proto::dota::CMsgVector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTESparks.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEPhysicsProp::kOriginFieldNumber;
const int CMsgTEPhysicsProp::kVelocityFieldNumber;
const int CMsgTEPhysicsProp::kAnglesFieldNumber;
const int CMsgTEPhysicsProp::kSkinFieldNumber;
const int CMsgTEPhysicsProp::kFlagsFieldNumber;
const int CMsgTEPhysicsProp::kEffectsFieldNumber;
const int CMsgTEPhysicsProp::kColorFieldNumber;
const int CMsgTEPhysicsProp::kModelindexFieldNumber;
const int CMsgTEPhysicsProp::kBreakmodelsnottomakeFieldNumber;
const int CMsgTEPhysicsProp::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEPhysicsProp::CMsgTEPhysicsProp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEPhysicsProp)
}
CMsgTEPhysicsProp::CMsgTEPhysicsProp(const CMsgTEPhysicsProp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::proto::dota::CMsgVector(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_angles()) {
    angles_ = new ::proto::dota::CMsgQAngle(*from.angles_);
  } else {
    angles_ = NULL;
  }
  ::memcpy(&skin_, &from.skin_,
    reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&skin_) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEPhysicsProp)
}

void CMsgTEPhysicsProp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&origin_) + sizeof(scale_));
}

CMsgTEPhysicsProp::~CMsgTEPhysicsProp() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEPhysicsProp)
  SharedDtor();
}

void CMsgTEPhysicsProp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
  if (this != internal_default_instance()) {
    delete angles_;
  }
}

void CMsgTEPhysicsProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEPhysicsProp::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEPhysicsProp& CMsgTEPhysicsProp::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEPhysicsProp* CMsgTEPhysicsProp::New(::google::protobuf::Arena* arena) const {
  CMsgTEPhysicsProp* n = new CMsgTEPhysicsProp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEPhysicsProp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEPhysicsProp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::proto::dota::CMsgVector::Clear();
    }
    if (has_angles()) {
      GOOGLE_DCHECK(angles_ != NULL);
      angles_->::proto::dota::CMsgQAngle::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&skin_, 0, reinterpret_cast<char*>(&modelindex_) -
      reinterpret_cast<char*>(&skin_) + sizeof(modelindex_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&breakmodelsnottomake_, 0, reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&breakmodelsnottomake_) + sizeof(scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEPhysicsProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEPhysicsProp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle angles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 skin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_skin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &skin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 effects = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_effects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 modelindex = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_modelindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &modelindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 breakmodelsnottomake = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_breakmodelsnottomake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breakmodelsnottomake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEPhysicsProp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEPhysicsProp)
  return false;
#undef DO_
}

void CMsgTEPhysicsProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEPhysicsProp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgVector velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->velocity_, output);
  }

  // optional .proto.dota.CMsgQAngle angles = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->angles_, output);
  }

  // optional fixed32 skin = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->skin(), output);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional uint32 effects = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->effects(), output);
  }

  // optional fixed32 color = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->color(), output);
  }

  // optional fixed64 modelindex = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->modelindex(), output);
  }

  // optional uint32 breakmodelsnottomake = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->breakmodelsnottomake(), output);
  }

  // optional float scale = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEPhysicsProp)
}

::google::protobuf::uint8* CMsgTEPhysicsProp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEPhysicsProp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->velocity_, deterministic, target);
  }

  // optional .proto.dota.CMsgQAngle angles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->angles_, deterministic, target);
  }

  // optional fixed32 skin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->skin(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // optional uint32 effects = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->effects(), target);
  }

  // optional fixed32 color = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->color(), target);
  }

  // optional fixed64 modelindex = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->modelindex(), target);
  }

  // optional uint32 breakmodelsnottomake = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->breakmodelsnottomake(), target);
  }

  // optional float scale = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEPhysicsProp)
  return target;
}

size_t CMsgTEPhysicsProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEPhysicsProp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector velocity = 2;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .proto.dota.CMsgQAngle angles = 3;
    if (has_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angles_);
    }

    // optional fixed32 skin = 4;
    if (has_skin()) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 effects = 6;
    if (has_effects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effects());
    }

    // optional fixed32 color = 7;
    if (has_color()) {
      total_size += 1 + 4;
    }

    // optional fixed64 modelindex = 8;
    if (has_modelindex()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 breakmodelsnottomake = 9;
    if (has_breakmodelsnottomake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breakmodelsnottomake());
    }

    // optional float scale = 10;
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEPhysicsProp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEPhysicsProp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEPhysicsProp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEPhysicsProp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEPhysicsProp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEPhysicsProp)
    MergeFrom(*source);
  }
}

void CMsgTEPhysicsProp::MergeFrom(const CMsgTEPhysicsProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEPhysicsProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::proto::dota::CMsgVector::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_angles()->::proto::dota::CMsgQAngle::MergeFrom(from.angles());
    }
    if (cached_has_bits & 0x00000008u) {
      skin_ = from.skin_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      effects_ = from.effects_;
    }
    if (cached_has_bits & 0x00000040u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000080u) {
      modelindex_ = from.modelindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      breakmodelsnottomake_ = from.breakmodelsnottomake_;
    }
    if (cached_has_bits & 0x00000200u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEPhysicsProp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEPhysicsProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEPhysicsProp::CopyFrom(const CMsgTEPhysicsProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEPhysicsProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEPhysicsProp::IsInitialized() const {
  return true;
}

void CMsgTEPhysicsProp::Swap(CMsgTEPhysicsProp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEPhysicsProp::InternalSwap(CMsgTEPhysicsProp* other) {
  std::swap(origin_, other->origin_);
  std::swap(velocity_, other->velocity_);
  std::swap(angles_, other->angles_);
  std::swap(skin_, other->skin_);
  std::swap(flags_, other->flags_);
  std::swap(effects_, other->effects_);
  std::swap(color_, other->color_);
  std::swap(modelindex_, other->modelindex_);
  std::swap(breakmodelsnottomake_, other->breakmodelsnottomake_);
  std::swap(scale_, other->scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEPhysicsProp::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEPhysicsProp

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEPhysicsProp::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEPhysicsProp::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEPhysicsProp::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEPhysicsProp::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEPhysicsProp::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEPhysicsProp::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEPhysicsProp.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEPhysicsProp::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEPhysicsProp.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEPhysicsProp::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEPhysicsProp.origin)
}

// optional .proto.dota.CMsgVector velocity = 2;
bool CMsgTEPhysicsProp::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEPhysicsProp::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEPhysicsProp::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEPhysicsProp::clear_velocity() {
  if (velocity_ != NULL) velocity_->::proto::dota::CMsgVector::Clear();
  clear_has_velocity();
}
const ::proto::dota::CMsgVector& CMsgTEPhysicsProp::velocity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEPhysicsProp::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEPhysicsProp.velocity)
  return velocity_;
}
::proto::dota::CMsgVector* CMsgTEPhysicsProp::release_velocity() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEPhysicsProp.velocity)
  clear_has_velocity();
  ::proto::dota::CMsgVector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void CMsgTEPhysicsProp::set_allocated_velocity(::proto::dota::CMsgVector* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEPhysicsProp.velocity)
}

// optional .proto.dota.CMsgQAngle angles = 3;
bool CMsgTEPhysicsProp::has_angles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEPhysicsProp::set_has_angles() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEPhysicsProp::clear_has_angles() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEPhysicsProp::clear_angles() {
  if (angles_ != NULL) angles_->::proto::dota::CMsgQAngle::Clear();
  clear_has_angles();
}
const ::proto::dota::CMsgQAngle& CMsgTEPhysicsProp::angles() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.angles)
  return angles_ != NULL ? *angles_
                         : *::proto::dota::CMsgQAngle::internal_default_instance();
}
::proto::dota::CMsgQAngle* CMsgTEPhysicsProp::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::proto::dota::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEPhysicsProp.angles)
  return angles_;
}
::proto::dota::CMsgQAngle* CMsgTEPhysicsProp::release_angles() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEPhysicsProp.angles)
  clear_has_angles();
  ::proto::dota::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
void CMsgTEPhysicsProp::set_allocated_angles(::proto::dota::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEPhysicsProp.angles)
}

// optional fixed32 skin = 4;
bool CMsgTEPhysicsProp::has_skin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEPhysicsProp::set_has_skin() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEPhysicsProp::clear_has_skin() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEPhysicsProp::clear_skin() {
  skin_ = 0u;
  clear_has_skin();
}
::google::protobuf::uint32 CMsgTEPhysicsProp::skin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.skin)
  return skin_;
}
void CMsgTEPhysicsProp::set_skin(::google::protobuf::uint32 value) {
  set_has_skin();
  skin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEPhysicsProp.skin)
}

// optional uint32 flags = 5;
bool CMsgTEPhysicsProp::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgTEPhysicsProp::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgTEPhysicsProp::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgTEPhysicsProp::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CMsgTEPhysicsProp::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.flags)
  return flags_;
}
void CMsgTEPhysicsProp::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEPhysicsProp.flags)
}

// optional uint32 effects = 6;
bool CMsgTEPhysicsProp::has_effects() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgTEPhysicsProp::set_has_effects() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgTEPhysicsProp::clear_has_effects() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgTEPhysicsProp::clear_effects() {
  effects_ = 0u;
  clear_has_effects();
}
::google::protobuf::uint32 CMsgTEPhysicsProp::effects() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.effects)
  return effects_;
}
void CMsgTEPhysicsProp::set_effects(::google::protobuf::uint32 value) {
  set_has_effects();
  effects_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEPhysicsProp.effects)
}

// optional fixed32 color = 7;
bool CMsgTEPhysicsProp::has_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgTEPhysicsProp::set_has_color() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgTEPhysicsProp::clear_has_color() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgTEPhysicsProp::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CMsgTEPhysicsProp::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.color)
  return color_;
}
void CMsgTEPhysicsProp::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEPhysicsProp.color)
}

// optional fixed64 modelindex = 8;
bool CMsgTEPhysicsProp::has_modelindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgTEPhysicsProp::set_has_modelindex() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgTEPhysicsProp::clear_has_modelindex() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgTEPhysicsProp::clear_modelindex() {
  modelindex_ = GOOGLE_ULONGLONG(0);
  clear_has_modelindex();
}
::google::protobuf::uint64 CMsgTEPhysicsProp::modelindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.modelindex)
  return modelindex_;
}
void CMsgTEPhysicsProp::set_modelindex(::google::protobuf::uint64 value) {
  set_has_modelindex();
  modelindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEPhysicsProp.modelindex)
}

// optional uint32 breakmodelsnottomake = 9;
bool CMsgTEPhysicsProp::has_breakmodelsnottomake() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgTEPhysicsProp::set_has_breakmodelsnottomake() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgTEPhysicsProp::clear_has_breakmodelsnottomake() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgTEPhysicsProp::clear_breakmodelsnottomake() {
  breakmodelsnottomake_ = 0u;
  clear_has_breakmodelsnottomake();
}
::google::protobuf::uint32 CMsgTEPhysicsProp::breakmodelsnottomake() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.breakmodelsnottomake)
  return breakmodelsnottomake_;
}
void CMsgTEPhysicsProp::set_breakmodelsnottomake(::google::protobuf::uint32 value) {
  set_has_breakmodelsnottomake();
  breakmodelsnottomake_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEPhysicsProp.breakmodelsnottomake)
}

// optional float scale = 10;
bool CMsgTEPhysicsProp::has_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgTEPhysicsProp::set_has_scale() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgTEPhysicsProp::clear_has_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgTEPhysicsProp::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float CMsgTEPhysicsProp::scale() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPhysicsProp.scale)
  return scale_;
}
void CMsgTEPhysicsProp::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEPhysicsProp.scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEPlayerDecal::kOriginFieldNumber;
const int CMsgTEPlayerDecal::kPlayerFieldNumber;
const int CMsgTEPlayerDecal::kEntityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEPlayerDecal::CMsgTEPlayerDecal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEPlayerDecal)
}
CMsgTEPlayerDecal::CMsgTEPlayerDecal(const CMsgTEPlayerDecal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  ::memcpy(&player_, &from.player_,
    reinterpret_cast<char*>(&entity_) -
    reinterpret_cast<char*>(&player_) + sizeof(entity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEPlayerDecal)
}

void CMsgTEPlayerDecal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&entity_) -
    reinterpret_cast<char*>(&origin_) + sizeof(entity_));
}

CMsgTEPlayerDecal::~CMsgTEPlayerDecal() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEPlayerDecal)
  SharedDtor();
}

void CMsgTEPlayerDecal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
}

void CMsgTEPlayerDecal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEPlayerDecal::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEPlayerDecal& CMsgTEPlayerDecal::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEPlayerDecal* CMsgTEPlayerDecal::New(::google::protobuf::Arena* arena) const {
  CMsgTEPlayerDecal* n = new CMsgTEPlayerDecal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEPlayerDecal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEPlayerDecal)
  if (has_origin()) {
    GOOGLE_DCHECK(origin_ != NULL);
    origin_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&player_, 0, reinterpret_cast<char*>(&entity_) -
      reinterpret_cast<char*>(&player_) + sizeof(entity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEPlayerDecal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEPlayerDecal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 entity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEPlayerDecal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEPlayerDecal)
  return false;
#undef DO_
}

void CMsgTEPlayerDecal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEPlayerDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional uint32 player = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player(), output);
  }

  // optional uint32 entity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEPlayerDecal)
}

::google::protobuf::uint8* CMsgTEPlayerDecal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEPlayerDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional uint32 player = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player(), target);
  }

  // optional uint32 entity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->entity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEPlayerDecal)
  return target;
}

size_t CMsgTEPlayerDecal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEPlayerDecal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional uint32 player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player());
    }

    // optional uint32 entity = 3;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEPlayerDecal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEPlayerDecal)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEPlayerDecal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEPlayerDecal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEPlayerDecal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEPlayerDecal)
    MergeFrom(*source);
  }
}

void CMsgTEPlayerDecal::MergeFrom(const CMsgTEPlayerDecal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEPlayerDecal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_ = from.entity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEPlayerDecal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEPlayerDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEPlayerDecal::CopyFrom(const CMsgTEPlayerDecal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEPlayerDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEPlayerDecal::IsInitialized() const {
  return true;
}

void CMsgTEPlayerDecal::Swap(CMsgTEPlayerDecal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEPlayerDecal::InternalSwap(CMsgTEPlayerDecal* other) {
  std::swap(origin_, other->origin_);
  std::swap(player_, other->player_);
  std::swap(entity_, other->entity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEPlayerDecal::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEPlayerDecal

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEPlayerDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEPlayerDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEPlayerDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEPlayerDecal::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEPlayerDecal::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPlayerDecal.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEPlayerDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEPlayerDecal.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEPlayerDecal::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEPlayerDecal.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEPlayerDecal::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEPlayerDecal.origin)
}

// optional uint32 player = 2;
bool CMsgTEPlayerDecal::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEPlayerDecal::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEPlayerDecal::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEPlayerDecal::clear_player() {
  player_ = 0u;
  clear_has_player();
}
::google::protobuf::uint32 CMsgTEPlayerDecal::player() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPlayerDecal.player)
  return player_;
}
void CMsgTEPlayerDecal::set_player(::google::protobuf::uint32 value) {
  set_has_player();
  player_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEPlayerDecal.player)
}

// optional uint32 entity = 3;
bool CMsgTEPlayerDecal::has_entity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEPlayerDecal::set_has_entity() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEPlayerDecal::clear_has_entity() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEPlayerDecal::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
::google::protobuf::uint32 CMsgTEPlayerDecal::entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEPlayerDecal.entity)
  return entity_;
}
void CMsgTEPlayerDecal::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEPlayerDecal.entity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEProjectedDecal::kOriginFieldNumber;
const int CMsgTEProjectedDecal::kAnglesFieldNumber;
const int CMsgTEProjectedDecal::kIndexFieldNumber;
const int CMsgTEProjectedDecal::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEProjectedDecal::CMsgTEProjectedDecal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEProjectedDecal)
}
CMsgTEProjectedDecal::CMsgTEProjectedDecal(const CMsgTEProjectedDecal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_angles()) {
    angles_ = new ::proto::dota::CMsgQAngle(*from.angles_);
  } else {
    angles_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&index_) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEProjectedDecal)
}

void CMsgTEProjectedDecal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&origin_) + sizeof(distance_));
}

CMsgTEProjectedDecal::~CMsgTEProjectedDecal() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEProjectedDecal)
  SharedDtor();
}

void CMsgTEProjectedDecal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete angles_;
  }
}

void CMsgTEProjectedDecal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEProjectedDecal::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEProjectedDecal& CMsgTEProjectedDecal::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEProjectedDecal* CMsgTEProjectedDecal::New(::google::protobuf::Arena* arena) const {
  CMsgTEProjectedDecal* n = new CMsgTEProjectedDecal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEProjectedDecal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEProjectedDecal)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_angles()) {
      GOOGLE_DCHECK(angles_ != NULL);
      angles_->::proto::dota::CMsgQAngle::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&index_, 0, reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&index_) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEProjectedDecal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEProjectedDecal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle angles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEProjectedDecal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEProjectedDecal)
  return false;
#undef DO_
}

void CMsgTEProjectedDecal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEProjectedDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angles_, output);
  }

  // optional uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEProjectedDecal)
}

::google::protobuf::uint8* CMsgTEProjectedDecal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEProjectedDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angles_, deterministic, target);
  }

  // optional uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEProjectedDecal)
  return target;
}

size_t CMsgTEProjectedDecal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEProjectedDecal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgQAngle angles = 2;
    if (has_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angles_);
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEProjectedDecal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEProjectedDecal)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEProjectedDecal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEProjectedDecal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEProjectedDecal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEProjectedDecal)
    MergeFrom(*source);
  }
}

void CMsgTEProjectedDecal::MergeFrom(const CMsgTEProjectedDecal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEProjectedDecal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angles()->::proto::dota::CMsgQAngle::MergeFrom(from.angles());
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEProjectedDecal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEProjectedDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEProjectedDecal::CopyFrom(const CMsgTEProjectedDecal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEProjectedDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEProjectedDecal::IsInitialized() const {
  return true;
}

void CMsgTEProjectedDecal::Swap(CMsgTEProjectedDecal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEProjectedDecal::InternalSwap(CMsgTEProjectedDecal* other) {
  std::swap(origin_, other->origin_);
  std::swap(angles_, other->angles_);
  std::swap(index_, other->index_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEProjectedDecal::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEProjectedDecal

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEProjectedDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEProjectedDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEProjectedDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEProjectedDecal::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEProjectedDecal::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEProjectedDecal.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEProjectedDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEProjectedDecal.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEProjectedDecal::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEProjectedDecal.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEProjectedDecal::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEProjectedDecal.origin)
}

// optional .proto.dota.CMsgQAngle angles = 2;
bool CMsgTEProjectedDecal::has_angles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEProjectedDecal::set_has_angles() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEProjectedDecal::clear_has_angles() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEProjectedDecal::clear_angles() {
  if (angles_ != NULL) angles_->::proto::dota::CMsgQAngle::Clear();
  clear_has_angles();
}
const ::proto::dota::CMsgQAngle& CMsgTEProjectedDecal::angles() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEProjectedDecal.angles)
  return angles_ != NULL ? *angles_
                         : *::proto::dota::CMsgQAngle::internal_default_instance();
}
::proto::dota::CMsgQAngle* CMsgTEProjectedDecal::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::proto::dota::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEProjectedDecal.angles)
  return angles_;
}
::proto::dota::CMsgQAngle* CMsgTEProjectedDecal::release_angles() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEProjectedDecal.angles)
  clear_has_angles();
  ::proto::dota::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
void CMsgTEProjectedDecal::set_allocated_angles(::proto::dota::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEProjectedDecal.angles)
}

// optional uint32 index = 3;
bool CMsgTEProjectedDecal::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEProjectedDecal::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEProjectedDecal::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEProjectedDecal::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 CMsgTEProjectedDecal::index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEProjectedDecal.index)
  return index_;
}
void CMsgTEProjectedDecal::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEProjectedDecal.index)
}

// optional float distance = 4;
bool CMsgTEProjectedDecal::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgTEProjectedDecal::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgTEProjectedDecal::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgTEProjectedDecal::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float CMsgTEProjectedDecal::distance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEProjectedDecal.distance)
  return distance_;
}
void CMsgTEProjectedDecal::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEProjectedDecal.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTESmoke::kOriginFieldNumber;
const int CMsgTESmoke::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTESmoke::CMsgTESmoke()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTESmoke)
}
CMsgTESmoke::CMsgTESmoke(const CMsgTESmoke& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTESmoke)
}

void CMsgTESmoke::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&origin_) + sizeof(scale_));
}

CMsgTESmoke::~CMsgTESmoke() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTESmoke)
  SharedDtor();
}

void CMsgTESmoke::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
}

void CMsgTESmoke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTESmoke::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTESmoke& CMsgTESmoke::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTESmoke* CMsgTESmoke::New(::google::protobuf::Arena* arena) const {
  CMsgTESmoke* n = new CMsgTESmoke;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTESmoke::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTESmoke)
  if (has_origin()) {
    GOOGLE_DCHECK(origin_ != NULL);
    origin_->::proto::dota::CMsgVector::Clear();
  }
  scale_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTESmoke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTESmoke)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTESmoke)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTESmoke)
  return false;
#undef DO_
}

void CMsgTESmoke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTESmoke)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTESmoke)
}

::google::protobuf::uint8* CMsgTESmoke::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTESmoke)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTESmoke)
  return target;
}

size_t CMsgTESmoke::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTESmoke)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional float scale = 2;
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTESmoke::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTESmoke)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTESmoke* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTESmoke>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTESmoke)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTESmoke)
    MergeFrom(*source);
  }
}

void CMsgTESmoke::MergeFrom(const CMsgTESmoke& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTESmoke)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTESmoke::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTESmoke)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTESmoke::CopyFrom(const CMsgTESmoke& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTESmoke)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTESmoke::IsInitialized() const {
  return true;
}

void CMsgTESmoke::Swap(CMsgTESmoke* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTESmoke::InternalSwap(CMsgTESmoke* other) {
  std::swap(origin_, other->origin_);
  std::swap(scale_, other->scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTESmoke::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTESmoke

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTESmoke::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTESmoke::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTESmoke::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTESmoke::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTESmoke::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTESmoke.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTESmoke::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTESmoke.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTESmoke::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTESmoke.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTESmoke::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTESmoke.origin)
}

// optional float scale = 2;
bool CMsgTESmoke::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTESmoke::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTESmoke::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTESmoke::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float CMsgTESmoke::scale() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTESmoke.scale)
  return scale_;
}
void CMsgTESmoke::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTESmoke.scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTEWorldDecal::kOriginFieldNumber;
const int CMsgTEWorldDecal::kNormalFieldNumber;
const int CMsgTEWorldDecal::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTEWorldDecal::CMsgTEWorldDecal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_te_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgTEWorldDecal)
}
CMsgTEWorldDecal::CMsgTEWorldDecal(const CMsgTEWorldDecal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::proto::dota::CMsgVector(*from.normal_);
  } else {
    normal_ = NULL;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgTEWorldDecal)
}

void CMsgTEWorldDecal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&origin_) + sizeof(index_));
}

CMsgTEWorldDecal::~CMsgTEWorldDecal() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgTEWorldDecal)
  SharedDtor();
}

void CMsgTEWorldDecal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete normal_;
  }
}

void CMsgTEWorldDecal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTEWorldDecal::descriptor() {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTEWorldDecal& CMsgTEWorldDecal::default_instance() {
  protobuf_te_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTEWorldDecal* CMsgTEWorldDecal::New(::google::protobuf::Arena* arena) const {
  CMsgTEWorldDecal* n = new CMsgTEWorldDecal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTEWorldDecal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgTEWorldDecal)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_normal()) {
      GOOGLE_DCHECK(normal_ != NULL);
      normal_->::proto::dota::CMsgVector::Clear();
    }
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTEWorldDecal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgTEWorldDecal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector normal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgTEWorldDecal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgTEWorldDecal)
  return false;
#undef DO_
}

void CMsgTEWorldDecal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgTEWorldDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->normal_, output);
  }

  // optional uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgTEWorldDecal)
}

::google::protobuf::uint8* CMsgTEWorldDecal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgTEWorldDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->normal_, deterministic, target);
  }

  // optional uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgTEWorldDecal)
  return target;
}

size_t CMsgTEWorldDecal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgTEWorldDecal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector normal = 2;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->normal_);
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTEWorldDecal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgTEWorldDecal)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTEWorldDecal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTEWorldDecal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgTEWorldDecal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgTEWorldDecal)
    MergeFrom(*source);
  }
}

void CMsgTEWorldDecal::MergeFrom(const CMsgTEWorldDecal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgTEWorldDecal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_normal()->::proto::dota::CMsgVector::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTEWorldDecal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgTEWorldDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTEWorldDecal::CopyFrom(const CMsgTEWorldDecal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgTEWorldDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTEWorldDecal::IsInitialized() const {
  return true;
}

void CMsgTEWorldDecal::Swap(CMsgTEWorldDecal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTEWorldDecal::InternalSwap(CMsgTEWorldDecal* other) {
  std::swap(origin_, other->origin_);
  std::swap(normal_, other->normal_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTEWorldDecal::GetMetadata() const {
  protobuf_te_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_te_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEWorldDecal

// optional .proto.dota.CMsgVector origin = 1;
bool CMsgTEWorldDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTEWorldDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTEWorldDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTEWorldDecal::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CMsgTEWorldDecal::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEWorldDecal.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEWorldDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEWorldDecal.origin)
  return origin_;
}
::proto::dota::CMsgVector* CMsgTEWorldDecal::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEWorldDecal.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CMsgTEWorldDecal::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEWorldDecal.origin)
}

// optional .proto.dota.CMsgVector normal = 2;
bool CMsgTEWorldDecal::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgTEWorldDecal::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgTEWorldDecal::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgTEWorldDecal::clear_normal() {
  if (normal_ != NULL) normal_->::proto::dota::CMsgVector::Clear();
  clear_has_normal();
}
const ::proto::dota::CMsgVector& CMsgTEWorldDecal::normal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEWorldDecal.normal)
  return normal_ != NULL ? *normal_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgTEWorldDecal::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgTEWorldDecal.normal)
  return normal_;
}
::proto::dota::CMsgVector* CMsgTEWorldDecal::release_normal() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgTEWorldDecal.normal)
  clear_has_normal();
  ::proto::dota::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
void CMsgTEWorldDecal::set_allocated_normal(::proto::dota::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgTEWorldDecal.normal)
}

// optional uint32 index = 3;
bool CMsgTEWorldDecal::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgTEWorldDecal::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgTEWorldDecal::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgTEWorldDecal::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 CMsgTEWorldDecal::index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgTEWorldDecal.index)
  return index_;
}
void CMsgTEWorldDecal::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgTEWorldDecal.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
