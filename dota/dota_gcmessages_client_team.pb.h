// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_team.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fclient_5fteam_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fclient_5fteam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto {
namespace dota {
class CMsgDOTABetaParticipation;
class CMsgDOTABetaParticipationDefaultTypeInternal;
extern CMsgDOTABetaParticipationDefaultTypeInternal _CMsgDOTABetaParticipation_default_instance_;
class CMsgDOTAChangeTeamSub;
class CMsgDOTAChangeTeamSubDefaultTypeInternal;
extern CMsgDOTAChangeTeamSubDefaultTypeInternal _CMsgDOTAChangeTeamSub_default_instance_;
class CMsgDOTAChangeTeamSubResponse;
class CMsgDOTAChangeTeamSubResponseDefaultTypeInternal;
extern CMsgDOTAChangeTeamSubResponseDefaultTypeInternal _CMsgDOTAChangeTeamSubResponse_default_instance_;
class CMsgDOTACreateTeam;
class CMsgDOTACreateTeamDefaultTypeInternal;
extern CMsgDOTACreateTeamDefaultTypeInternal _CMsgDOTACreateTeam_default_instance_;
class CMsgDOTACreateTeamResponse;
class CMsgDOTACreateTeamResponseDefaultTypeInternal;
extern CMsgDOTACreateTeamResponseDefaultTypeInternal _CMsgDOTACreateTeamResponse_default_instance_;
class CMsgDOTAEditTeamDetails;
class CMsgDOTAEditTeamDetailsDefaultTypeInternal;
extern CMsgDOTAEditTeamDetailsDefaultTypeInternal _CMsgDOTAEditTeamDetails_default_instance_;
class CMsgDOTAEditTeamDetailsResponse;
class CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal;
extern CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal _CMsgDOTAEditTeamDetailsResponse_default_instance_;
class CMsgDOTAKickTeamMember;
class CMsgDOTAKickTeamMemberDefaultTypeInternal;
extern CMsgDOTAKickTeamMemberDefaultTypeInternal _CMsgDOTAKickTeamMember_default_instance_;
class CMsgDOTAKickTeamMemberResponse;
class CMsgDOTAKickTeamMemberResponseDefaultTypeInternal;
extern CMsgDOTAKickTeamMemberResponseDefaultTypeInternal _CMsgDOTAKickTeamMemberResponse_default_instance_;
class CMsgDOTALeaveTeam;
class CMsgDOTALeaveTeamDefaultTypeInternal;
extern CMsgDOTALeaveTeamDefaultTypeInternal _CMsgDOTALeaveTeam_default_instance_;
class CMsgDOTALeaveTeamResponse;
class CMsgDOTALeaveTeamResponseDefaultTypeInternal;
extern CMsgDOTALeaveTeamResponseDefaultTypeInternal _CMsgDOTALeaveTeamResponse_default_instance_;
class CMsgDOTAMyTeamInfoRequest;
class CMsgDOTAMyTeamInfoRequestDefaultTypeInternal;
extern CMsgDOTAMyTeamInfoRequestDefaultTypeInternal _CMsgDOTAMyTeamInfoRequest_default_instance_;
class CMsgDOTAProTeamListRequest;
class CMsgDOTAProTeamListRequestDefaultTypeInternal;
extern CMsgDOTAProTeamListRequestDefaultTypeInternal _CMsgDOTAProTeamListRequest_default_instance_;
class CMsgDOTAProTeamListResponse;
class CMsgDOTAProTeamListResponseDefaultTypeInternal;
extern CMsgDOTAProTeamListResponseDefaultTypeInternal _CMsgDOTAProTeamListResponse_default_instance_;
class CMsgDOTAProTeamListResponse_TeamEntry;
class CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal;
extern CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal _CMsgDOTAProTeamListResponse_TeamEntry_default_instance_;
class CMsgDOTATeam;
class CMsgDOTATeamDefaultTypeInternal;
extern CMsgDOTATeamDefaultTypeInternal _CMsgDOTATeam_default_instance_;
class CMsgDOTATeamAdminSDO;
class CMsgDOTATeamAdminSDODefaultTypeInternal;
extern CMsgDOTATeamAdminSDODefaultTypeInternal _CMsgDOTATeamAdminSDO_default_instance_;
class CMsgDOTATeamInfo;
class CMsgDOTATeamInfoDefaultTypeInternal;
extern CMsgDOTATeamInfoDefaultTypeInternal _CMsgDOTATeamInfo_default_instance_;
class CMsgDOTATeamInfo_Member;
class CMsgDOTATeamInfo_MemberDefaultTypeInternal;
extern CMsgDOTATeamInfo_MemberDefaultTypeInternal _CMsgDOTATeamInfo_Member_default_instance_;
class CMsgDOTATeamInvite_GCImmediateResponseToInviter;
class CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal;
extern CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal _CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_;
class CMsgDOTATeamInvite_GCRequestToInvitee;
class CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal;
extern CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal _CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_;
class CMsgDOTATeamInvite_GCResponseToInvitee;
class CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal;
extern CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal _CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_;
class CMsgDOTATeamInvite_GCResponseToInviter;
class CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal;
extern CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal _CMsgDOTATeamInvite_GCResponseToInviter_default_instance_;
class CMsgDOTATeamInvite_InviteeResponseToGC;
class CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal;
extern CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal _CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_;
class CMsgDOTATeamInvite_InviterToGC;
class CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal;
extern CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal _CMsgDOTATeamInvite_InviterToGC_default_instance_;
class CMsgDOTATeamMember;
class CMsgDOTATeamMemberDefaultTypeInternal;
extern CMsgDOTATeamMemberDefaultTypeInternal _CMsgDOTATeamMember_default_instance_;
class CMsgDOTATeamMemberSDO;
class CMsgDOTATeamMemberSDODefaultTypeInternal;
extern CMsgDOTATeamMemberSDODefaultTypeInternal _CMsgDOTATeamMemberSDO_default_instance_;
class CMsgDOTATeamProfileResponse;
class CMsgDOTATeamProfileResponseDefaultTypeInternal;
extern CMsgDOTATeamProfileResponseDefaultTypeInternal _CMsgDOTATeamProfileResponse_default_instance_;
class CMsgDOTATeamsInfo;
class CMsgDOTATeamsInfoDefaultTypeInternal;
extern CMsgDOTATeamsInfoDefaultTypeInternal _CMsgDOTATeamsInfo_default_instance_;
class CMsgDOTATransferTeamAdmin;
class CMsgDOTATransferTeamAdminDefaultTypeInternal;
extern CMsgDOTATransferTeamAdminDefaultTypeInternal _CMsgDOTATransferTeamAdmin_default_instance_;
class CMsgDOTATransferTeamAdminResponse;
class CMsgDOTATransferTeamAdminResponseDefaultTypeInternal;
extern CMsgDOTATransferTeamAdminResponseDefaultTypeInternal _CMsgDOTATransferTeamAdminResponse_default_instance_;
}  // namespace dota
}  // namespace proto

namespace proto {
namespace dota {

namespace protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto

enum CMsgDOTACreateTeamResponse_Result {
  CMsgDOTACreateTeamResponse_Result_INVALID = -1,
  CMsgDOTACreateTeamResponse_Result_SUCCESS = 0,
  CMsgDOTACreateTeamResponse_Result_NAME_EMPTY = 1,
  CMsgDOTACreateTeamResponse_Result_NAME_BAD_CHARACTERS = 2,
  CMsgDOTACreateTeamResponse_Result_NAME_TAKEN = 3,
  CMsgDOTACreateTeamResponse_Result_NAME_TOO_LONG = 4,
  CMsgDOTACreateTeamResponse_Result_TAG_EMPTY = 5,
  CMsgDOTACreateTeamResponse_Result_TAG_BAD_CHARACTERS = 6,
  CMsgDOTACreateTeamResponse_Result_TAG_TAKEN = 7,
  CMsgDOTACreateTeamResponse_Result_TAG_TOO_LONG = 8,
  CMsgDOTACreateTeamResponse_Result_CREATOR_BUSY = 9,
  CMsgDOTACreateTeamResponse_Result_UNSPECIFIED_ERROR = 10,
  CMsgDOTACreateTeamResponse_Result_CREATOR_TEAM_LIMIT_REACHED = 11,
  CMsgDOTACreateTeamResponse_Result_NO_LOGO = 12,
  CMsgDOTACreateTeamResponse_Result_CREATOR_TEAM_CREATION_COOLDOWN = 13,
  CMsgDOTACreateTeamResponse_Result_LOGO_UPLOAD_FAILED = 14,
  CMsgDOTACreateTeamResponse_Result_NAME_CHANGED_TOO_RECENTLY = 15,
  CMsgDOTACreateTeamResponse_Result_CREATOR_INSUFFICIENT_LEVEL = 16,
  CMsgDOTACreateTeamResponse_Result_INVALID_ACCOUNT_TYPE = 17
};
bool CMsgDOTACreateTeamResponse_Result_IsValid(int value);
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse_Result_Result_MIN = CMsgDOTACreateTeamResponse_Result_INVALID;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse_Result_Result_MAX = CMsgDOTACreateTeamResponse_Result_INVALID_ACCOUNT_TYPE;
const int CMsgDOTACreateTeamResponse_Result_Result_ARRAYSIZE = CMsgDOTACreateTeamResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTACreateTeamResponse_Result_descriptor();
inline const ::std::string& CMsgDOTACreateTeamResponse_Result_Name(CMsgDOTACreateTeamResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTACreateTeamResponse_Result_descriptor(), value);
}
inline bool CMsgDOTACreateTeamResponse_Result_Parse(
    const ::std::string& name, CMsgDOTACreateTeamResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTACreateTeamResponse_Result>(
    CMsgDOTACreateTeamResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAEditTeamDetailsResponse_Result {
  CMsgDOTAEditTeamDetailsResponse_Result_SUCCESS = 0,
  CMsgDOTAEditTeamDetailsResponse_Result_FAILURE_INVALID_ACCOUNT_TYPE = 1,
  CMsgDOTAEditTeamDetailsResponse_Result_FAILURE_NOT_MEMBER = 2,
  CMsgDOTAEditTeamDetailsResponse_Result_FAILURE_TEAM_LOCKED = 3,
  CMsgDOTAEditTeamDetailsResponse_Result_FAILURE_UNSPECIFIED_ERROR = 4
};
bool CMsgDOTAEditTeamDetailsResponse_Result_IsValid(int value);
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse_Result_Result_MIN = CMsgDOTAEditTeamDetailsResponse_Result_SUCCESS;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse_Result_Result_MAX = CMsgDOTAEditTeamDetailsResponse_Result_FAILURE_UNSPECIFIED_ERROR;
const int CMsgDOTAEditTeamDetailsResponse_Result_Result_ARRAYSIZE = CMsgDOTAEditTeamDetailsResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAEditTeamDetailsResponse_Result_descriptor();
inline const ::std::string& CMsgDOTAEditTeamDetailsResponse_Result_Name(CMsgDOTAEditTeamDetailsResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAEditTeamDetailsResponse_Result_descriptor(), value);
}
inline bool CMsgDOTAEditTeamDetailsResponse_Result_Parse(
    const ::std::string& name, CMsgDOTAEditTeamDetailsResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAEditTeamDetailsResponse_Result>(
    CMsgDOTAEditTeamDetailsResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAKickTeamMemberResponse_Result {
  CMsgDOTAKickTeamMemberResponse_Result_SUCCESS = 0,
  CMsgDOTAKickTeamMemberResponse_Result_FAILURE_INVALID_ACCOUNT_TYPE = 1,
  CMsgDOTAKickTeamMemberResponse_Result_FAILURE_KICKER_NOT_ADMIN = 2,
  CMsgDOTAKickTeamMemberResponse_Result_FAILURE_KICKEE_NOT_MEMBER = 3,
  CMsgDOTAKickTeamMemberResponse_Result_FAILURE_TEAM_LOCKED = 4,
  CMsgDOTAKickTeamMemberResponse_Result_FAILURE_UNSPECIFIED_ERROR = 5
};
bool CMsgDOTAKickTeamMemberResponse_Result_IsValid(int value);
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse_Result_Result_MIN = CMsgDOTAKickTeamMemberResponse_Result_SUCCESS;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse_Result_Result_MAX = CMsgDOTAKickTeamMemberResponse_Result_FAILURE_UNSPECIFIED_ERROR;
const int CMsgDOTAKickTeamMemberResponse_Result_Result_ARRAYSIZE = CMsgDOTAKickTeamMemberResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAKickTeamMemberResponse_Result_descriptor();
inline const ::std::string& CMsgDOTAKickTeamMemberResponse_Result_Name(CMsgDOTAKickTeamMemberResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAKickTeamMemberResponse_Result_descriptor(), value);
}
inline bool CMsgDOTAKickTeamMemberResponse_Result_Parse(
    const ::std::string& name, CMsgDOTAKickTeamMemberResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAKickTeamMemberResponse_Result>(
    CMsgDOTAKickTeamMemberResponse_Result_descriptor(), name, value);
}
enum CMsgDOTATransferTeamAdminResponse_Result {
  CMsgDOTATransferTeamAdminResponse_Result_SUCCESS = 0,
  CMsgDOTATransferTeamAdminResponse_Result_FAILURE_INVALID_ACCOUNT_TYPE = 1,
  CMsgDOTATransferTeamAdminResponse_Result_FAILURE_NOT_ADMIN = 2,
  CMsgDOTATransferTeamAdminResponse_Result_FAILURE_SAME_ACCOUNT = 3,
  CMsgDOTATransferTeamAdminResponse_Result_FAILURE_NOT_MEMBER = 4,
  CMsgDOTATransferTeamAdminResponse_Result_FAILURE_UNSPECIFIED_ERROR = 5
};
bool CMsgDOTATransferTeamAdminResponse_Result_IsValid(int value);
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse_Result_Result_MIN = CMsgDOTATransferTeamAdminResponse_Result_SUCCESS;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse_Result_Result_MAX = CMsgDOTATransferTeamAdminResponse_Result_FAILURE_UNSPECIFIED_ERROR;
const int CMsgDOTATransferTeamAdminResponse_Result_Result_ARRAYSIZE = CMsgDOTATransferTeamAdminResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTATransferTeamAdminResponse_Result_descriptor();
inline const ::std::string& CMsgDOTATransferTeamAdminResponse_Result_Name(CMsgDOTATransferTeamAdminResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTATransferTeamAdminResponse_Result_descriptor(), value);
}
inline bool CMsgDOTATransferTeamAdminResponse_Result_Parse(
    const ::std::string& name, CMsgDOTATransferTeamAdminResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTATransferTeamAdminResponse_Result>(
    CMsgDOTATransferTeamAdminResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAChangeTeamSubResponse_Result {
  CMsgDOTAChangeTeamSubResponse_Result_SUCCESS = 0,
  CMsgDOTAChangeTeamSubResponse_Result_FAILURE_INVALID_ACCOUNT_TYPE = 1,
  CMsgDOTAChangeTeamSubResponse_Result_FAILURE_SAME_ACCOUNT = 2,
  CMsgDOTAChangeTeamSubResponse_Result_FAILURE_NOT_ADMIN = 3,
  CMsgDOTAChangeTeamSubResponse_Result_FAILURE_NOT_MEMBER = 4,
  CMsgDOTAChangeTeamSubResponse_Result_FAILURE_NOT_SUB = 5,
  CMsgDOTAChangeTeamSubResponse_Result_FAILURE_ALREADY_SUB = 6,
  CMsgDOTAChangeTeamSubResponse_Result_FAILURE_UNSPECIFIED_ERROR = 7
};
bool CMsgDOTAChangeTeamSubResponse_Result_IsValid(int value);
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse_Result_Result_MIN = CMsgDOTAChangeTeamSubResponse_Result_SUCCESS;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse_Result_Result_MAX = CMsgDOTAChangeTeamSubResponse_Result_FAILURE_UNSPECIFIED_ERROR;
const int CMsgDOTAChangeTeamSubResponse_Result_Result_ARRAYSIZE = CMsgDOTAChangeTeamSubResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAChangeTeamSubResponse_Result_descriptor();
inline const ::std::string& CMsgDOTAChangeTeamSubResponse_Result_Name(CMsgDOTAChangeTeamSubResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAChangeTeamSubResponse_Result_descriptor(), value);
}
inline bool CMsgDOTAChangeTeamSubResponse_Result_Parse(
    const ::std::string& name, CMsgDOTAChangeTeamSubResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAChangeTeamSubResponse_Result>(
    CMsgDOTAChangeTeamSubResponse_Result_descriptor(), name, value);
}
enum CMsgDOTALeaveTeamResponse_Result {
  CMsgDOTALeaveTeamResponse_Result_SUCCESS = 0,
  CMsgDOTALeaveTeamResponse_Result_FAILURE_NOT_MEMBER = 1,
  CMsgDOTALeaveTeamResponse_Result_FAILURE_TEAM_LOCKED = 2,
  CMsgDOTALeaveTeamResponse_Result_FAILURE_UNSPECIFIED_ERROR = 3
};
bool CMsgDOTALeaveTeamResponse_Result_IsValid(int value);
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse_Result_Result_MIN = CMsgDOTALeaveTeamResponse_Result_SUCCESS;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse_Result_Result_MAX = CMsgDOTALeaveTeamResponse_Result_FAILURE_UNSPECIFIED_ERROR;
const int CMsgDOTALeaveTeamResponse_Result_Result_ARRAYSIZE = CMsgDOTALeaveTeamResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTALeaveTeamResponse_Result_descriptor();
inline const ::std::string& CMsgDOTALeaveTeamResponse_Result_Name(CMsgDOTALeaveTeamResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTALeaveTeamResponse_Result_descriptor(), value);
}
inline bool CMsgDOTALeaveTeamResponse_Result_Parse(
    const ::std::string& name, CMsgDOTALeaveTeamResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTALeaveTeamResponse_Result>(
    CMsgDOTALeaveTeamResponse_Result_descriptor(), name, value);
}
enum ETeamInviteResult {
  TEAM_INVITE_SUCCESS = 0,
  TEAM_INVITE_FAILURE_INVITE_REJECTED = 1,
  TEAM_INVITE_FAILURE_INVITE_TIMEOUT = 2,
  TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT = 3,
  TEAM_INVITE_ERROR_TEAM_LOCKED = 4,
  TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE = 5,
  TEAM_INVITE_ERROR_INVITEE_BUSY = 6,
  TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER = 7,
  TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT = 8,
  TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_LEVEL = 9,
  TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE = 10,
  TEAM_INVITE_ERROR_INVITER_NOT_ADMIN = 11,
  TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED = 12,
  TEAM_INVITE_ERROR_UNSPECIFIED = 13
};
bool ETeamInviteResult_IsValid(int value);
const ETeamInviteResult ETeamInviteResult_MIN = TEAM_INVITE_SUCCESS;
const ETeamInviteResult ETeamInviteResult_MAX = TEAM_INVITE_ERROR_UNSPECIFIED;
const int ETeamInviteResult_ARRAYSIZE = ETeamInviteResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETeamInviteResult_descriptor();
inline const ::std::string& ETeamInviteResult_Name(ETeamInviteResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETeamInviteResult_descriptor(), value);
}
inline bool ETeamInviteResult_Parse(
    const ::std::string& name, ETeamInviteResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETeamInviteResult>(
    ETeamInviteResult_descriptor(), name, value);
}
// ===================================================================

class CMsgDOTATeamMemberSDO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamMemberSDO) */ {
 public:
  CMsgDOTATeamMemberSDO();
  virtual ~CMsgDOTATeamMemberSDO();

  CMsgDOTATeamMemberSDO(const CMsgDOTATeamMemberSDO& from);

  inline CMsgDOTATeamMemberSDO& operator=(const CMsgDOTATeamMemberSDO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamMemberSDO& default_instance();

  static inline const CMsgDOTATeamMemberSDO* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamMemberSDO*>(
               &_CMsgDOTATeamMemberSDO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CMsgDOTATeamMemberSDO* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamMemberSDO* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamMemberSDO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamMemberSDO& from);
  void MergeFrom(const CMsgDOTATeamMemberSDO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamMemberSDO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 team_ids = 2;
  int team_ids_size() const;
  void clear_team_ids();
  static const int kTeamIdsFieldNumber = 2;
  ::google::protobuf::uint32 team_ids(int index) const;
  void set_team_ids(int index, ::google::protobuf::uint32 value);
  void add_team_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      team_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_team_ids();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 profile_team_id = 3;
  bool has_profile_team_id() const;
  void clear_profile_team_id();
  static const int kProfileTeamIdFieldNumber = 3;
  ::google::protobuf::uint32 profile_team_id() const;
  void set_profile_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamMemberSDO)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_profile_team_id();
  void clear_has_profile_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > team_ids_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 profile_team_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamAdminSDO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamAdminSDO) */ {
 public:
  CMsgDOTATeamAdminSDO();
  virtual ~CMsgDOTATeamAdminSDO();

  CMsgDOTATeamAdminSDO(const CMsgDOTATeamAdminSDO& from);

  inline CMsgDOTATeamAdminSDO& operator=(const CMsgDOTATeamAdminSDO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamAdminSDO& default_instance();

  static inline const CMsgDOTATeamAdminSDO* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamAdminSDO*>(
               &_CMsgDOTATeamAdminSDO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CMsgDOTATeamAdminSDO* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamAdminSDO* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamAdminSDO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamAdminSDO& from);
  void MergeFrom(const CMsgDOTATeamAdminSDO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamAdminSDO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 team_ids = 2;
  int team_ids_size() const;
  void clear_team_ids();
  static const int kTeamIdsFieldNumber = 2;
  ::google::protobuf::uint32 team_ids(int index) const;
  void set_team_ids(int index, ::google::protobuf::uint32 value);
  void add_team_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      team_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_team_ids();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamAdminSDO)
 private:
  void set_has_account_id();
  void clear_has_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > team_ids_;
  ::google::protobuf::uint32 account_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamMember) */ {
 public:
  CMsgDOTATeamMember();
  virtual ~CMsgDOTATeamMember();

  CMsgDOTATeamMember(const CMsgDOTATeamMember& from);

  inline CMsgDOTATeamMember& operator=(const CMsgDOTATeamMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamMember& default_instance();

  static inline const CMsgDOTATeamMember* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamMember*>(
               &_CMsgDOTATeamMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CMsgDOTATeamMember* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamMember* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamMember& from);
  void MergeFrom(const CMsgDOTATeamMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 time_joined = 4;
  bool has_time_joined() const;
  void clear_time_joined();
  static const int kTimeJoinedFieldNumber = 4;
  ::google::protobuf::uint32 time_joined() const;
  void set_time_joined(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamMember)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_time_joined();
  void clear_has_time_joined();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 time_joined_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeam) */ {
 public:
  CMsgDOTATeam();
  virtual ~CMsgDOTATeam();

  CMsgDOTATeam(const CMsgDOTATeam& from);

  inline CMsgDOTATeam& operator=(const CMsgDOTATeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeam& default_instance();

  static inline const CMsgDOTATeam* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeam*>(
               &_CMsgDOTATeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CMsgDOTATeam* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeam* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeam& from);
  void MergeFrom(const CMsgDOTATeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTATeamMember members = 1;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 1;
  const ::proto::dota::CMsgDOTATeamMember& members(int index) const;
  ::proto::dota::CMsgDOTATeamMember* mutable_members(int index);
  ::proto::dota::CMsgDOTATeamMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamMember >&
      members() const;

  // repeated uint32 leagues = 18;
  int leagues_size() const;
  void clear_leagues();
  static const int kLeaguesFieldNumber = 18;
  ::google::protobuf::uint32 leagues(int index) const;
  void set_leagues(int index, ::google::protobuf::uint32 value);
  void add_leagues(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      leagues() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_leagues();

  // repeated uint64 recent_match_ids = 25;
  int recent_match_ids_size() const;
  void clear_recent_match_ids();
  static const int kRecentMatchIdsFieldNumber = 25;
  ::google::protobuf::uint64 recent_match_ids(int index) const;
  void set_recent_match_ids(int index, ::google::protobuf::uint64 value);
  void add_recent_match_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      recent_match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_recent_match_ids();

  // repeated uint64 top_match_ids = 26;
  int top_match_ids_size() const;
  void clear_top_match_ids();
  static const int kTopMatchIdsFieldNumber = 26;
  ::google::protobuf::uint64 top_match_ids(int index) const;
  void set_top_match_ids(int index, ::google::protobuf::uint64 value);
  void add_top_match_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      top_match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_top_match_ids();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 4;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 4;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string country_code = 15;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 15;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string url = 16;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 16;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 admin_id = 5;
  bool has_admin_id() const;
  void clear_admin_id();
  static const int kAdminIdFieldNumber = 5;
  ::google::protobuf::uint32 admin_id() const;
  void set_admin_id(::google::protobuf::uint32 value);

  // optional uint32 time_created = 6;
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 6;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // optional uint32 wins = 8;
  bool has_wins() const;
  void clear_wins();
  static const int kWinsFieldNumber = 8;
  ::google::protobuf::uint32 wins() const;
  void set_wins(::google::protobuf::uint32 value);

  // optional uint32 losses = 9;
  bool has_losses() const;
  void clear_losses();
  static const int kLossesFieldNumber = 9;
  ::google::protobuf::uint32 losses() const;
  void set_losses(::google::protobuf::uint32 value);

  // optional uint32 rank = 10;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 10;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint64 logo = 11;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 11;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 12;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 12;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint64 banner_logo = 13;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 13;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // optional uint64 sponsor_logo = 14;
  bool has_sponsor_logo() const;
  void clear_sponsor_logo();
  static const int kSponsorLogoFieldNumber = 14;
  ::google::protobuf::uint64 sponsor_logo() const;
  void set_sponsor_logo(::google::protobuf::uint64 value);

  // optional uint32 fullgamesplayed = 17;
  bool has_fullgamesplayed() const;
  void clear_fullgamesplayed();
  static const int kFullgamesplayedFieldNumber = 17;
  ::google::protobuf::uint32 fullgamesplayed() const;
  void set_fullgamesplayed(::google::protobuf::uint32 value);

  // optional bool disbanded = 7;
  bool has_disbanded() const;
  void clear_disbanded();
  static const int kDisbandedFieldNumber = 7;
  bool disbanded() const;
  void set_disbanded(bool value);

  // optional bool pickup_team = 27;
  bool has_pickup_team() const;
  void clear_pickup_team();
  static const int kPickupTeamFieldNumber = 27;
  bool pickup_team() const;
  void set_pickup_team(bool value);

  // optional uint32 gamesplayed = 19;
  bool has_gamesplayed() const;
  void clear_gamesplayed();
  static const int kGamesplayedFieldNumber = 19;
  ::google::protobuf::uint32 gamesplayed() const;
  void set_gamesplayed(::google::protobuf::uint32 value);

  // optional uint32 gamesplayedwithcurrentroster = 20;
  bool has_gamesplayedwithcurrentroster() const;
  void clear_gamesplayedwithcurrentroster();
  static const int kGamesplayedwithcurrentrosterFieldNumber = 20;
  ::google::protobuf::uint32 gamesplayedwithcurrentroster() const;
  void set_gamesplayedwithcurrentroster(::google::protobuf::uint32 value);

  // optional uint32 teammatchmakinggamesplayed = 21;
  bool has_teammatchmakinggamesplayed() const;
  void clear_teammatchmakinggamesplayed();
  static const int kTeammatchmakinggamesplayedFieldNumber = 21;
  ::google::protobuf::uint32 teammatchmakinggamesplayed() const;
  void set_teammatchmakinggamesplayed(::google::protobuf::uint32 value);

  // optional uint32 lastplayedgametime = 22;
  bool has_lastplayedgametime() const;
  void clear_lastplayedgametime();
  static const int kLastplayedgametimeFieldNumber = 22;
  ::google::protobuf::uint32 lastplayedgametime() const;
  void set_lastplayedgametime(::google::protobuf::uint32 value);

  // optional uint32 lastrenametime = 23;
  bool has_lastrenametime() const;
  void clear_lastrenametime();
  static const int kLastrenametimeFieldNumber = 23;
  ::google::protobuf::uint32 lastrenametime() const;
  void set_lastrenametime(::google::protobuf::uint32 value);

  // optional uint32 calibration_games_remaining = 24;
  bool has_calibration_games_remaining() const;
  void clear_calibration_games_remaining();
  static const int kCalibrationGamesRemainingFieldNumber = 24;
  ::google::protobuf::uint32 calibration_games_remaining() const;
  void set_calibration_games_remaining(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeam)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_admin_id();
  void clear_has_admin_id();
  void set_has_time_created();
  void clear_has_time_created();
  void set_has_disbanded();
  void clear_has_disbanded();
  void set_has_wins();
  void clear_has_wins();
  void set_has_losses();
  void clear_has_losses();
  void set_has_rank();
  void clear_has_rank();
  void set_has_calibration_games_remaining();
  void clear_has_calibration_games_remaining();
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();
  void set_has_sponsor_logo();
  void clear_has_sponsor_logo();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_url();
  void clear_has_url();
  void set_has_fullgamesplayed();
  void clear_has_fullgamesplayed();
  void set_has_gamesplayed();
  void clear_has_gamesplayed();
  void set_has_gamesplayedwithcurrentroster();
  void clear_has_gamesplayedwithcurrentroster();
  void set_has_teammatchmakinggamesplayed();
  void clear_has_teammatchmakinggamesplayed();
  void set_has_lastplayedgametime();
  void clear_has_lastplayedgametime();
  void set_has_lastrenametime();
  void clear_has_lastrenametime();
  void set_has_pickup_team();
  void clear_has_pickup_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamMember > members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > leagues_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > recent_match_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > top_match_ids_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 admin_id_;
  ::google::protobuf::uint32 time_created_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint32 losses_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint64 banner_logo_;
  ::google::protobuf::uint64 sponsor_logo_;
  ::google::protobuf::uint32 fullgamesplayed_;
  bool disbanded_;
  bool pickup_team_;
  ::google::protobuf::uint32 gamesplayed_;
  ::google::protobuf::uint32 gamesplayedwithcurrentroster_;
  ::google::protobuf::uint32 teammatchmakinggamesplayed_;
  ::google::protobuf::uint32 lastplayedgametime_;
  ::google::protobuf::uint32 lastrenametime_;
  ::google::protobuf::uint32 calibration_games_remaining_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamInfo_Member : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamInfo.Member) */ {
 public:
  CMsgDOTATeamInfo_Member();
  virtual ~CMsgDOTATeamInfo_Member();

  CMsgDOTATeamInfo_Member(const CMsgDOTATeamInfo_Member& from);

  inline CMsgDOTATeamInfo_Member& operator=(const CMsgDOTATeamInfo_Member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInfo_Member& default_instance();

  static inline const CMsgDOTATeamInfo_Member* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInfo_Member*>(
               &_CMsgDOTATeamInfo_Member_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CMsgDOTATeamInfo_Member* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInfo_Member* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInfo_Member* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInfo_Member& from);
  void MergeFrom(const CMsgDOTATeamInfo_Member& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInfo_Member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 time_joined = 2;
  bool has_time_joined() const;
  void clear_time_joined();
  static const int kTimeJoinedFieldNumber = 2;
  ::google::protobuf::uint32 time_joined() const;
  void set_time_joined(::google::protobuf::uint32 value);

  // optional bool admin = 3;
  bool has_admin() const;
  void clear_admin();
  static const int kAdminFieldNumber = 3;
  bool admin() const;
  void set_admin(bool value);

  // optional bool sub = 4;
  bool has_sub() const;
  void clear_sub();
  static const int kSubFieldNumber = 4;
  bool sub() const;
  void set_sub(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamInfo.Member)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_time_joined();
  void clear_has_time_joined();
  void set_has_admin();
  void clear_has_admin();
  void set_has_sub();
  void clear_has_sub();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 time_joined_;
  bool admin_;
  bool sub_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamInfo) */ {
 public:
  CMsgDOTATeamInfo();
  virtual ~CMsgDOTATeamInfo();

  CMsgDOTATeamInfo(const CMsgDOTATeamInfo& from);

  inline CMsgDOTATeamInfo& operator=(const CMsgDOTATeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInfo& default_instance();

  static inline const CMsgDOTATeamInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInfo*>(
               &_CMsgDOTATeamInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CMsgDOTATeamInfo* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInfo& from);
  void MergeFrom(const CMsgDOTATeamInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATeamInfo_Member Member;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 1;
  const ::proto::dota::CMsgDOTATeamInfo_Member& members(int index) const;
  ::proto::dota::CMsgDOTATeamInfo_Member* mutable_members(int index);
  ::proto::dota::CMsgDOTATeamInfo_Member* add_members();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo_Member >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo_Member >&
      members() const;

  // repeated uint32 leagues_participated = 21;
  int leagues_participated_size() const;
  void clear_leagues_participated();
  static const int kLeaguesParticipatedFieldNumber = 21;
  ::google::protobuf::uint32 leagues_participated(int index) const;
  void set_leagues_participated(int index, ::google::protobuf::uint32 value);
  void add_leagues_participated(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      leagues_participated() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_leagues_participated();

  // repeated uint64 top_match_ids = 22;
  int top_match_ids_size() const;
  void clear_top_match_ids();
  static const int kTopMatchIdsFieldNumber = 22;
  ::google::protobuf::uint64 top_match_ids(int index) const;
  void set_top_match_ids(int index, ::google::protobuf::uint64 value);
  void add_top_match_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      top_match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_top_match_ids();

  // repeated uint64 recent_match_ids = 23;
  int recent_match_ids_size() const;
  void clear_recent_match_ids();
  static const int kRecentMatchIdsFieldNumber = 23;
  ::google::protobuf::uint64 recent_match_ids(int index) const;
  void set_recent_match_ids(int index, ::google::protobuf::uint64 value);
  void add_recent_match_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      recent_match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_recent_match_ids();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 4;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 4;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string country_code = 13;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 13;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string url = 14;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 14;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 time_created = 5;
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 5;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // optional uint64 ugc_logo = 9;
  bool has_ugc_logo() const;
  void clear_ugc_logo();
  static const int kUgcLogoFieldNumber = 9;
  ::google::protobuf::uint64 ugc_logo() const;
  void set_ugc_logo(::google::protobuf::uint64 value);

  // optional bool pro = 6;
  bool has_pro() const;
  void clear_pro();
  static const int kProFieldNumber = 6;
  bool pro() const;
  void set_pro(bool value);

  // optional bool locked = 7;
  bool has_locked() const;
  void clear_locked();
  static const int kLockedFieldNumber = 7;
  bool locked() const;
  void set_locked(bool value);

  // optional bool pickup_team = 8;
  bool has_pickup_team() const;
  void clear_pickup_team();
  static const int kPickupTeamFieldNumber = 8;
  bool pickup_team() const;
  void set_pickup_team(bool value);

  // optional uint32 wins = 15;
  bool has_wins() const;
  void clear_wins();
  static const int kWinsFieldNumber = 15;
  ::google::protobuf::uint32 wins() const;
  void set_wins(::google::protobuf::uint32 value);

  // optional uint64 ugc_base_logo = 10;
  bool has_ugc_base_logo() const;
  void clear_ugc_base_logo();
  static const int kUgcBaseLogoFieldNumber = 10;
  ::google::protobuf::uint64 ugc_base_logo() const;
  void set_ugc_base_logo(::google::protobuf::uint64 value);

  // optional uint64 ugc_banner_logo = 11;
  bool has_ugc_banner_logo() const;
  void clear_ugc_banner_logo();
  static const int kUgcBannerLogoFieldNumber = 11;
  ::google::protobuf::uint64 ugc_banner_logo() const;
  void set_ugc_banner_logo(::google::protobuf::uint64 value);

  // optional uint64 ugc_sponsor_logo = 12;
  bool has_ugc_sponsor_logo() const;
  void clear_ugc_sponsor_logo();
  static const int kUgcSponsorLogoFieldNumber = 12;
  ::google::protobuf::uint64 ugc_sponsor_logo() const;
  void set_ugc_sponsor_logo(::google::protobuf::uint64 value);

  // optional uint32 losses = 16;
  bool has_losses() const;
  void clear_losses();
  static const int kLossesFieldNumber = 16;
  ::google::protobuf::uint32 losses() const;
  void set_losses(::google::protobuf::uint32 value);

  // optional uint32 rank = 17;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 17;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint32 calibration_games_remaining = 18;
  bool has_calibration_games_remaining() const;
  void clear_calibration_games_remaining();
  static const int kCalibrationGamesRemainingFieldNumber = 18;
  ::google::protobuf::uint32 calibration_games_remaining() const;
  void set_calibration_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 games_played_total = 19;
  bool has_games_played_total() const;
  void clear_games_played_total();
  static const int kGamesPlayedTotalFieldNumber = 19;
  ::google::protobuf::uint32 games_played_total() const;
  void set_games_played_total(::google::protobuf::uint32 value);

  // optional uint32 games_played_matchmaking = 20;
  bool has_games_played_matchmaking() const;
  void clear_games_played_matchmaking();
  static const int kGamesPlayedMatchmakingFieldNumber = 20;
  ::google::protobuf::uint32 games_played_matchmaking() const;
  void set_games_played_matchmaking(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamInfo)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_time_created();
  void clear_has_time_created();
  void set_has_pro();
  void clear_has_pro();
  void set_has_locked();
  void clear_has_locked();
  void set_has_pickup_team();
  void clear_has_pickup_team();
  void set_has_ugc_logo();
  void clear_has_ugc_logo();
  void set_has_ugc_base_logo();
  void clear_has_ugc_base_logo();
  void set_has_ugc_banner_logo();
  void clear_has_ugc_banner_logo();
  void set_has_ugc_sponsor_logo();
  void clear_has_ugc_sponsor_logo();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_url();
  void clear_has_url();
  void set_has_wins();
  void clear_has_wins();
  void set_has_losses();
  void clear_has_losses();
  void set_has_rank();
  void clear_has_rank();
  void set_has_calibration_games_remaining();
  void clear_has_calibration_games_remaining();
  void set_has_games_played_total();
  void clear_has_games_played_total();
  void set_has_games_played_matchmaking();
  void clear_has_games_played_matchmaking();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo_Member > members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > leagues_participated_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > top_match_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > recent_match_ids_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 time_created_;
  ::google::protobuf::uint64 ugc_logo_;
  bool pro_;
  bool locked_;
  bool pickup_team_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint64 ugc_base_logo_;
  ::google::protobuf::uint64 ugc_banner_logo_;
  ::google::protobuf::uint64 ugc_sponsor_logo_;
  ::google::protobuf::uint32 losses_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 calibration_games_remaining_;
  ::google::protobuf::uint32 games_played_total_;
  ::google::protobuf::uint32 games_played_matchmaking_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamsInfo) */ {
 public:
  CMsgDOTATeamsInfo();
  virtual ~CMsgDOTATeamsInfo();

  CMsgDOTATeamsInfo(const CMsgDOTATeamsInfo& from);

  inline CMsgDOTATeamsInfo& operator=(const CMsgDOTATeamsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamsInfo& default_instance();

  static inline const CMsgDOTATeamsInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamsInfo*>(
               &_CMsgDOTATeamsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CMsgDOTATeamsInfo* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamsInfo& from);
  void MergeFrom(const CMsgDOTATeamsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 2;
  const ::proto::dota::CMsgDOTATeamInfo& teams(int index) const;
  ::proto::dota::CMsgDOTATeamInfo* mutable_teams(int index);
  ::proto::dota::CMsgDOTATeamInfo* add_teams();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo >*
      mutable_teams();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo >&
      teams() const;

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamsInfo)
 private:
  void set_has_league_id();
  void clear_has_league_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo > teams_;
  ::google::protobuf::uint32 league_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAMyTeamInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMyTeamInfoRequest) */ {
 public:
  CMsgDOTAMyTeamInfoRequest();
  virtual ~CMsgDOTAMyTeamInfoRequest();

  CMsgDOTAMyTeamInfoRequest(const CMsgDOTAMyTeamInfoRequest& from);

  inline CMsgDOTAMyTeamInfoRequest& operator=(const CMsgDOTAMyTeamInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMyTeamInfoRequest& default_instance();

  static inline const CMsgDOTAMyTeamInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMyTeamInfoRequest*>(
               &_CMsgDOTAMyTeamInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CMsgDOTAMyTeamInfoRequest* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAMyTeamInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMyTeamInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMyTeamInfoRequest& from);
  void MergeFrom(const CMsgDOTAMyTeamInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMyTeamInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMyTeamInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTACreateTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTACreateTeam) */ {
 public:
  CMsgDOTACreateTeam();
  virtual ~CMsgDOTACreateTeam();

  CMsgDOTACreateTeam(const CMsgDOTACreateTeam& from);

  inline CMsgDOTACreateTeam& operator=(const CMsgDOTACreateTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTACreateTeam& default_instance();

  static inline const CMsgDOTACreateTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTACreateTeam*>(
               &_CMsgDOTACreateTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CMsgDOTACreateTeam* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTACreateTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTACreateTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTACreateTeam& from);
  void MergeFrom(const CMsgDOTACreateTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTACreateTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 2;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 2;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string country_code = 7;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 7;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string url = 8;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 8;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint64 logo = 3;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 3;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 4;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 4;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint64 banner_logo = 5;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 5;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // optional uint64 sponsor_logo = 6;
  bool has_sponsor_logo() const;
  void clear_sponsor_logo();
  static const int kSponsorLogoFieldNumber = 6;
  ::google::protobuf::uint64 sponsor_logo() const;
  void set_sponsor_logo(::google::protobuf::uint64 value);

  // optional bool pickup_team = 9;
  bool has_pickup_team() const;
  void clear_pickup_team();
  static const int kPickupTeamFieldNumber = 9;
  bool pickup_team() const;
  void set_pickup_team(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTACreateTeam)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();
  void set_has_sponsor_logo();
  void clear_has_sponsor_logo();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_url();
  void clear_has_url();
  void set_has_pickup_team();
  void clear_has_pickup_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint64 banner_logo_;
  ::google::protobuf::uint64 sponsor_logo_;
  bool pickup_team_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTACreateTeamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTACreateTeamResponse) */ {
 public:
  CMsgDOTACreateTeamResponse();
  virtual ~CMsgDOTACreateTeamResponse();

  CMsgDOTACreateTeamResponse(const CMsgDOTACreateTeamResponse& from);

  inline CMsgDOTACreateTeamResponse& operator=(const CMsgDOTACreateTeamResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTACreateTeamResponse& default_instance();

  static inline const CMsgDOTACreateTeamResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTACreateTeamResponse*>(
               &_CMsgDOTACreateTeamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CMsgDOTACreateTeamResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTACreateTeamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTACreateTeamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTACreateTeamResponse& from);
  void MergeFrom(const CMsgDOTACreateTeamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTACreateTeamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTACreateTeamResponse_Result Result;
  static const Result INVALID =
    CMsgDOTACreateTeamResponse_Result_INVALID;
  static const Result SUCCESS =
    CMsgDOTACreateTeamResponse_Result_SUCCESS;
  static const Result NAME_EMPTY =
    CMsgDOTACreateTeamResponse_Result_NAME_EMPTY;
  static const Result NAME_BAD_CHARACTERS =
    CMsgDOTACreateTeamResponse_Result_NAME_BAD_CHARACTERS;
  static const Result NAME_TAKEN =
    CMsgDOTACreateTeamResponse_Result_NAME_TAKEN;
  static const Result NAME_TOO_LONG =
    CMsgDOTACreateTeamResponse_Result_NAME_TOO_LONG;
  static const Result TAG_EMPTY =
    CMsgDOTACreateTeamResponse_Result_TAG_EMPTY;
  static const Result TAG_BAD_CHARACTERS =
    CMsgDOTACreateTeamResponse_Result_TAG_BAD_CHARACTERS;
  static const Result TAG_TAKEN =
    CMsgDOTACreateTeamResponse_Result_TAG_TAKEN;
  static const Result TAG_TOO_LONG =
    CMsgDOTACreateTeamResponse_Result_TAG_TOO_LONG;
  static const Result CREATOR_BUSY =
    CMsgDOTACreateTeamResponse_Result_CREATOR_BUSY;
  static const Result UNSPECIFIED_ERROR =
    CMsgDOTACreateTeamResponse_Result_UNSPECIFIED_ERROR;
  static const Result CREATOR_TEAM_LIMIT_REACHED =
    CMsgDOTACreateTeamResponse_Result_CREATOR_TEAM_LIMIT_REACHED;
  static const Result NO_LOGO =
    CMsgDOTACreateTeamResponse_Result_NO_LOGO;
  static const Result CREATOR_TEAM_CREATION_COOLDOWN =
    CMsgDOTACreateTeamResponse_Result_CREATOR_TEAM_CREATION_COOLDOWN;
  static const Result LOGO_UPLOAD_FAILED =
    CMsgDOTACreateTeamResponse_Result_LOGO_UPLOAD_FAILED;
  static const Result NAME_CHANGED_TOO_RECENTLY =
    CMsgDOTACreateTeamResponse_Result_NAME_CHANGED_TOO_RECENTLY;
  static const Result CREATOR_INSUFFICIENT_LEVEL =
    CMsgDOTACreateTeamResponse_Result_CREATOR_INSUFFICIENT_LEVEL;
  static const Result INVALID_ACCOUNT_TYPE =
    CMsgDOTACreateTeamResponse_Result_INVALID_ACCOUNT_TYPE;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTACreateTeamResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTACreateTeamResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTACreateTeamResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTACreateTeamResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTACreateTeamResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTACreateTeamResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTACreateTeamResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::CMsgDOTACreateTeamResponse_Result result() const;
  void set_result(::proto::dota::CMsgDOTACreateTeamResponse_Result value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTACreateTeamResponse)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  int result_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAEditTeamDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAEditTeamDetails) */ {
 public:
  CMsgDOTAEditTeamDetails();
  virtual ~CMsgDOTAEditTeamDetails();

  CMsgDOTAEditTeamDetails(const CMsgDOTAEditTeamDetails& from);

  inline CMsgDOTAEditTeamDetails& operator=(const CMsgDOTAEditTeamDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAEditTeamDetails& default_instance();

  static inline const CMsgDOTAEditTeamDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAEditTeamDetails*>(
               &_CMsgDOTAEditTeamDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CMsgDOTAEditTeamDetails* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAEditTeamDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAEditTeamDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAEditTeamDetails& from);
  void MergeFrom(const CMsgDOTAEditTeamDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAEditTeamDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string tag = 3;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 3;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string country_code = 8;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 8;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string url = 9;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 9;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint64 logo = 4;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 4;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint64 base_logo = 5;
  bool has_base_logo() const;
  void clear_base_logo();
  static const int kBaseLogoFieldNumber = 5;
  ::google::protobuf::uint64 base_logo() const;
  void set_base_logo(::google::protobuf::uint64 value);

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional bool in_use_by_party = 10;
  bool has_in_use_by_party() const;
  void clear_in_use_by_party();
  static const int kInUseByPartyFieldNumber = 10;
  bool in_use_by_party() const;
  void set_in_use_by_party(bool value);

  // optional uint64 banner_logo = 6;
  bool has_banner_logo() const;
  void clear_banner_logo();
  static const int kBannerLogoFieldNumber = 6;
  ::google::protobuf::uint64 banner_logo() const;
  void set_banner_logo(::google::protobuf::uint64 value);

  // optional uint64 sponsor_logo = 7;
  bool has_sponsor_logo() const;
  void clear_sponsor_logo();
  static const int kSponsorLogoFieldNumber = 7;
  ::google::protobuf::uint64 sponsor_logo() const;
  void set_sponsor_logo(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAEditTeamDetails)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_name();
  void clear_has_name();
  void set_has_tag();
  void clear_has_tag();
  void set_has_logo();
  void clear_has_logo();
  void set_has_base_logo();
  void clear_has_base_logo();
  void set_has_banner_logo();
  void clear_has_banner_logo();
  void set_has_sponsor_logo();
  void clear_has_sponsor_logo();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_url();
  void clear_has_url();
  void set_has_in_use_by_party();
  void clear_has_in_use_by_party();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint64 base_logo_;
  ::google::protobuf::uint32 team_id_;
  bool in_use_by_party_;
  ::google::protobuf::uint64 banner_logo_;
  ::google::protobuf::uint64 sponsor_logo_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAEditTeamDetailsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAEditTeamDetailsResponse) */ {
 public:
  CMsgDOTAEditTeamDetailsResponse();
  virtual ~CMsgDOTAEditTeamDetailsResponse();

  CMsgDOTAEditTeamDetailsResponse(const CMsgDOTAEditTeamDetailsResponse& from);

  inline CMsgDOTAEditTeamDetailsResponse& operator=(const CMsgDOTAEditTeamDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAEditTeamDetailsResponse& default_instance();

  static inline const CMsgDOTAEditTeamDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAEditTeamDetailsResponse*>(
               &_CMsgDOTAEditTeamDetailsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CMsgDOTAEditTeamDetailsResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAEditTeamDetailsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAEditTeamDetailsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAEditTeamDetailsResponse& from);
  void MergeFrom(const CMsgDOTAEditTeamDetailsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAEditTeamDetailsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAEditTeamDetailsResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTAEditTeamDetailsResponse_Result_SUCCESS;
  static const Result FAILURE_INVALID_ACCOUNT_TYPE =
    CMsgDOTAEditTeamDetailsResponse_Result_FAILURE_INVALID_ACCOUNT_TYPE;
  static const Result FAILURE_NOT_MEMBER =
    CMsgDOTAEditTeamDetailsResponse_Result_FAILURE_NOT_MEMBER;
  static const Result FAILURE_TEAM_LOCKED =
    CMsgDOTAEditTeamDetailsResponse_Result_FAILURE_TEAM_LOCKED;
  static const Result FAILURE_UNSPECIFIED_ERROR =
    CMsgDOTAEditTeamDetailsResponse_Result_FAILURE_UNSPECIFIED_ERROR;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTAEditTeamDetailsResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTAEditTeamDetailsResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTAEditTeamDetailsResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTAEditTeamDetailsResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTAEditTeamDetailsResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTAEditTeamDetailsResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTAEditTeamDetailsResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result result() const;
  void set_result(::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAEditTeamDetailsResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamProfileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamProfileResponse) */ {
 public:
  CMsgDOTATeamProfileResponse();
  virtual ~CMsgDOTATeamProfileResponse();

  CMsgDOTATeamProfileResponse(const CMsgDOTATeamProfileResponse& from);

  inline CMsgDOTATeamProfileResponse& operator=(const CMsgDOTATeamProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamProfileResponse& default_instance();

  static inline const CMsgDOTATeamProfileResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamProfileResponse*>(
               &_CMsgDOTATeamProfileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CMsgDOTATeamProfileResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamProfileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamProfileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamProfileResponse& from);
  void MergeFrom(const CMsgDOTATeamProfileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamProfileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgDOTATeam team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  const ::proto::dota::CMsgDOTATeam& team() const;
  ::proto::dota::CMsgDOTATeam* mutable_team();
  ::proto::dota::CMsgDOTATeam* release_team();
  void set_allocated_team(::proto::dota::CMsgDOTATeam* team);

  // optional uint32 eresult = 1;
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 1;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamProfileResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();
  void set_has_team();
  void clear_has_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::dota::CMsgDOTATeam* team_;
  ::google::protobuf::uint32 eresult_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAProTeamListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProTeamListRequest) */ {
 public:
  CMsgDOTAProTeamListRequest();
  virtual ~CMsgDOTAProTeamListRequest();

  CMsgDOTAProTeamListRequest(const CMsgDOTAProTeamListRequest& from);

  inline CMsgDOTAProTeamListRequest& operator=(const CMsgDOTAProTeamListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProTeamListRequest& default_instance();

  static inline const CMsgDOTAProTeamListRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProTeamListRequest*>(
               &_CMsgDOTAProTeamListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CMsgDOTAProTeamListRequest* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAProTeamListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProTeamListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProTeamListRequest& from);
  void MergeFrom(const CMsgDOTAProTeamListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProTeamListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProTeamListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAProTeamListResponse_TeamEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry) */ {
 public:
  CMsgDOTAProTeamListResponse_TeamEntry();
  virtual ~CMsgDOTAProTeamListResponse_TeamEntry();

  CMsgDOTAProTeamListResponse_TeamEntry(const CMsgDOTAProTeamListResponse_TeamEntry& from);

  inline CMsgDOTAProTeamListResponse_TeamEntry& operator=(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProTeamListResponse_TeamEntry& default_instance();

  static inline const CMsgDOTAProTeamListResponse_TeamEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProTeamListResponse_TeamEntry*>(
               &_CMsgDOTAProTeamListResponse_TeamEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CMsgDOTAProTeamListResponse_TeamEntry* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAProTeamListResponse_TeamEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProTeamListResponse_TeamEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from);
  void MergeFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProTeamListResponse_TeamEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tag = 2;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 2;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string country_code = 5;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 5;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 time_created = 3;
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 3;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // optional uint64 logo = 4;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 4;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint32 member_count = 6;
  bool has_member_count() const;
  void clear_member_count();
  static const int kMemberCountFieldNumber = 6;
  ::google::protobuf::uint32 member_count() const;
  void set_member_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_tag();
  void clear_has_tag();
  void set_has_time_created();
  void clear_has_time_created();
  void set_has_logo();
  void clear_has_logo();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_member_count();
  void clear_has_member_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 time_created_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint32 member_count_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAProTeamListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAProTeamListResponse) */ {
 public:
  CMsgDOTAProTeamListResponse();
  virtual ~CMsgDOTAProTeamListResponse();

  CMsgDOTAProTeamListResponse(const CMsgDOTAProTeamListResponse& from);

  inline CMsgDOTAProTeamListResponse& operator=(const CMsgDOTAProTeamListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProTeamListResponse& default_instance();

  static inline const CMsgDOTAProTeamListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProTeamListResponse*>(
               &_CMsgDOTAProTeamListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CMsgDOTAProTeamListResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAProTeamListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAProTeamListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAProTeamListResponse& from);
  void MergeFrom(const CMsgDOTAProTeamListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAProTeamListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProTeamListResponse_TeamEntry TeamEntry;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 1;
  const ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry& teams(int index) const;
  ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry* mutable_teams(int index);
  ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry* add_teams();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry >*
      mutable_teams();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry >&
      teams() const;

  // optional uint32 eresult = 2;
  bool has_eresult() const;
  void clear_eresult();
  static const int kEresultFieldNumber = 2;
  ::google::protobuf::uint32 eresult() const;
  void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAProTeamListResponse)
 private:
  void set_has_eresult();
  void clear_has_eresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry > teams_;
  ::google::protobuf::uint32 eresult_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_InviterToGC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamInvite_InviterToGC) */ {
 public:
  CMsgDOTATeamInvite_InviterToGC();
  virtual ~CMsgDOTATeamInvite_InviterToGC();

  CMsgDOTATeamInvite_InviterToGC(const CMsgDOTATeamInvite_InviterToGC& from);

  inline CMsgDOTATeamInvite_InviterToGC& operator=(const CMsgDOTATeamInvite_InviterToGC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_InviterToGC& default_instance();

  static inline const CMsgDOTATeamInvite_InviterToGC* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_InviterToGC*>(
               &_CMsgDOTATeamInvite_InviterToGC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CMsgDOTATeamInvite_InviterToGC* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_InviterToGC* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_InviterToGC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_InviterToGC& from);
  void MergeFrom(const CMsgDOTATeamInvite_InviterToGC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_InviterToGC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamInvite_InviterToGC)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 team_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_GCImmediateResponseToInviter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter) */ {
 public:
  CMsgDOTATeamInvite_GCImmediateResponseToInviter();
  virtual ~CMsgDOTATeamInvite_GCImmediateResponseToInviter();

  CMsgDOTATeamInvite_GCImmediateResponseToInviter(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from);

  inline CMsgDOTATeamInvite_GCImmediateResponseToInviter& operator=(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_GCImmediateResponseToInviter& default_instance();

  static inline const CMsgDOTATeamInvite_GCImmediateResponseToInviter* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_GCImmediateResponseToInviter*>(
               &_CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_GCImmediateResponseToInviter* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_GCImmediateResponseToInviter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from);
  void MergeFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string invitee_name = 2;
  bool has_invitee_name() const;
  void clear_invitee_name();
  static const int kInviteeNameFieldNumber = 2;
  const ::std::string& invitee_name() const;
  void set_invitee_name(const ::std::string& value);
  #if LANG_CXX11
  void set_invitee_name(::std::string&& value);
  #endif
  void set_invitee_name(const char* value);
  void set_invitee_name(const char* value, size_t size);
  ::std::string* mutable_invitee_name();
  ::std::string* release_invitee_name();
  void set_allocated_invitee_name(::std::string* invitee_name);

  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::ETeamInviteResult result() const;
  void set_result(::proto::dota::ETeamInviteResult value);

  // optional uint32 required_badge_level = 3;
  bool has_required_badge_level() const;
  void clear_required_badge_level();
  static const int kRequiredBadgeLevelFieldNumber = 3;
  ::google::protobuf::uint32 required_badge_level() const;
  void set_required_badge_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_invitee_name();
  void clear_has_invitee_name();
  void set_has_required_badge_level();
  void clear_has_required_badge_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr invitee_name_;
  int result_;
  ::google::protobuf::uint32 required_badge_level_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_GCRequestToInvitee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee) */ {
 public:
  CMsgDOTATeamInvite_GCRequestToInvitee();
  virtual ~CMsgDOTATeamInvite_GCRequestToInvitee();

  CMsgDOTATeamInvite_GCRequestToInvitee(const CMsgDOTATeamInvite_GCRequestToInvitee& from);

  inline CMsgDOTATeamInvite_GCRequestToInvitee& operator=(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_GCRequestToInvitee& default_instance();

  static inline const CMsgDOTATeamInvite_GCRequestToInvitee* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_GCRequestToInvitee*>(
               &_CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CMsgDOTATeamInvite_GCRequestToInvitee* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_GCRequestToInvitee* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_GCRequestToInvitee* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from);
  void MergeFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_GCRequestToInvitee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name = 2;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional string team_tag = 3;
  bool has_team_tag() const;
  void clear_team_tag();
  static const int kTeamTagFieldNumber = 3;
  const ::std::string& team_tag() const;
  void set_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_team_tag(::std::string&& value);
  #endif
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  ::std::string* mutable_team_tag();
  ::std::string* release_team_tag();
  void set_allocated_team_tag(::std::string* team_tag);

  // optional uint64 logo = 4;
  bool has_logo() const;
  void clear_logo();
  static const int kLogoFieldNumber = 4;
  ::google::protobuf::uint64 logo() const;
  void set_logo(::google::protobuf::uint64 value);

  // optional uint32 inviter_account_id = 1;
  bool has_inviter_account_id() const;
  void clear_inviter_account_id();
  static const int kInviterAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 inviter_account_id() const;
  void set_inviter_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee)
 private:
  void set_has_inviter_account_id();
  void clear_has_inviter_account_id();
  void set_has_team_name();
  void clear_has_team_name();
  void set_has_team_tag();
  void clear_has_team_tag();
  void set_has_logo();
  void clear_has_logo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr team_tag_;
  ::google::protobuf::uint64 logo_;
  ::google::protobuf::uint32 inviter_account_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_InviteeResponseToGC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC) */ {
 public:
  CMsgDOTATeamInvite_InviteeResponseToGC();
  virtual ~CMsgDOTATeamInvite_InviteeResponseToGC();

  CMsgDOTATeamInvite_InviteeResponseToGC(const CMsgDOTATeamInvite_InviteeResponseToGC& from);

  inline CMsgDOTATeamInvite_InviteeResponseToGC& operator=(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_InviteeResponseToGC& default_instance();

  static inline const CMsgDOTATeamInvite_InviteeResponseToGC* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_InviteeResponseToGC*>(
               &_CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(CMsgDOTATeamInvite_InviteeResponseToGC* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_InviteeResponseToGC* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_InviteeResponseToGC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from);
  void MergeFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_InviteeResponseToGC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::ETeamInviteResult result() const;
  void set_result(::proto::dota::ETeamInviteResult value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_GCResponseToInviter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter) */ {
 public:
  CMsgDOTATeamInvite_GCResponseToInviter();
  virtual ~CMsgDOTATeamInvite_GCResponseToInviter();

  CMsgDOTATeamInvite_GCResponseToInviter(const CMsgDOTATeamInvite_GCResponseToInviter& from);

  inline CMsgDOTATeamInvite_GCResponseToInviter& operator=(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_GCResponseToInviter& default_instance();

  static inline const CMsgDOTATeamInvite_GCResponseToInviter* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_GCResponseToInviter*>(
               &_CMsgDOTATeamInvite_GCResponseToInviter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(CMsgDOTATeamInvite_GCResponseToInviter* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_GCResponseToInviter* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_GCResponseToInviter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from);
  void MergeFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_GCResponseToInviter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string invitee_name = 2;
  bool has_invitee_name() const;
  void clear_invitee_name();
  static const int kInviteeNameFieldNumber = 2;
  const ::std::string& invitee_name() const;
  void set_invitee_name(const ::std::string& value);
  #if LANG_CXX11
  void set_invitee_name(::std::string&& value);
  #endif
  void set_invitee_name(const char* value);
  void set_invitee_name(const char* value, size_t size);
  ::std::string* mutable_invitee_name();
  ::std::string* release_invitee_name();
  void set_allocated_invitee_name(::std::string* invitee_name);

  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::ETeamInviteResult result() const;
  void set_result(::proto::dota::ETeamInviteResult value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_invitee_name();
  void clear_has_invitee_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr invitee_name_;
  int result_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATeamInvite_GCResponseToInvitee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee) */ {
 public:
  CMsgDOTATeamInvite_GCResponseToInvitee();
  virtual ~CMsgDOTATeamInvite_GCResponseToInvitee();

  CMsgDOTATeamInvite_GCResponseToInvitee(const CMsgDOTATeamInvite_GCResponseToInvitee& from);

  inline CMsgDOTATeamInvite_GCResponseToInvitee& operator=(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATeamInvite_GCResponseToInvitee& default_instance();

  static inline const CMsgDOTATeamInvite_GCResponseToInvitee* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamInvite_GCResponseToInvitee*>(
               &_CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CMsgDOTATeamInvite_GCResponseToInvitee* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATeamInvite_GCResponseToInvitee* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATeamInvite_GCResponseToInvitee* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from);
  void MergeFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATeamInvite_GCResponseToInvitee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name = 2;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::ETeamInviteResult result() const;
  void set_result(::proto::dota::ETeamInviteResult value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_team_name();
  void clear_has_team_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  int result_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAKickTeamMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAKickTeamMember) */ {
 public:
  CMsgDOTAKickTeamMember();
  virtual ~CMsgDOTAKickTeamMember();

  CMsgDOTAKickTeamMember(const CMsgDOTAKickTeamMember& from);

  inline CMsgDOTAKickTeamMember& operator=(const CMsgDOTAKickTeamMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAKickTeamMember& default_instance();

  static inline const CMsgDOTAKickTeamMember* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAKickTeamMember*>(
               &_CMsgDOTAKickTeamMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(CMsgDOTAKickTeamMember* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAKickTeamMember* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAKickTeamMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAKickTeamMember& from);
  void MergeFrom(const CMsgDOTAKickTeamMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAKickTeamMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAKickTeamMember)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 team_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAKickTeamMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAKickTeamMemberResponse) */ {
 public:
  CMsgDOTAKickTeamMemberResponse();
  virtual ~CMsgDOTAKickTeamMemberResponse();

  CMsgDOTAKickTeamMemberResponse(const CMsgDOTAKickTeamMemberResponse& from);

  inline CMsgDOTAKickTeamMemberResponse& operator=(const CMsgDOTAKickTeamMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAKickTeamMemberResponse& default_instance();

  static inline const CMsgDOTAKickTeamMemberResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAKickTeamMemberResponse*>(
               &_CMsgDOTAKickTeamMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(CMsgDOTAKickTeamMemberResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAKickTeamMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAKickTeamMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAKickTeamMemberResponse& from);
  void MergeFrom(const CMsgDOTAKickTeamMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAKickTeamMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAKickTeamMemberResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTAKickTeamMemberResponse_Result_SUCCESS;
  static const Result FAILURE_INVALID_ACCOUNT_TYPE =
    CMsgDOTAKickTeamMemberResponse_Result_FAILURE_INVALID_ACCOUNT_TYPE;
  static const Result FAILURE_KICKER_NOT_ADMIN =
    CMsgDOTAKickTeamMemberResponse_Result_FAILURE_KICKER_NOT_ADMIN;
  static const Result FAILURE_KICKEE_NOT_MEMBER =
    CMsgDOTAKickTeamMemberResponse_Result_FAILURE_KICKEE_NOT_MEMBER;
  static const Result FAILURE_TEAM_LOCKED =
    CMsgDOTAKickTeamMemberResponse_Result_FAILURE_TEAM_LOCKED;
  static const Result FAILURE_UNSPECIFIED_ERROR =
    CMsgDOTAKickTeamMemberResponse_Result_FAILURE_UNSPECIFIED_ERROR;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTAKickTeamMemberResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTAKickTeamMemberResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTAKickTeamMemberResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTAKickTeamMemberResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTAKickTeamMemberResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTAKickTeamMemberResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTAKickTeamMemberResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::CMsgDOTAKickTeamMemberResponse_Result result() const;
  void set_result(::proto::dota::CMsgDOTAKickTeamMemberResponse_Result value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAKickTeamMemberResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATransferTeamAdmin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATransferTeamAdmin) */ {
 public:
  CMsgDOTATransferTeamAdmin();
  virtual ~CMsgDOTATransferTeamAdmin();

  CMsgDOTATransferTeamAdmin(const CMsgDOTATransferTeamAdmin& from);

  inline CMsgDOTATransferTeamAdmin& operator=(const CMsgDOTATransferTeamAdmin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATransferTeamAdmin& default_instance();

  static inline const CMsgDOTATransferTeamAdmin* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATransferTeamAdmin*>(
               &_CMsgDOTATransferTeamAdmin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(CMsgDOTATransferTeamAdmin* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATransferTeamAdmin* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATransferTeamAdmin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATransferTeamAdmin& from);
  void MergeFrom(const CMsgDOTATransferTeamAdmin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATransferTeamAdmin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 new_admin_account_id = 1;
  bool has_new_admin_account_id() const;
  void clear_new_admin_account_id();
  static const int kNewAdminAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 new_admin_account_id() const;
  void set_new_admin_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATransferTeamAdmin)
 private:
  void set_has_new_admin_account_id();
  void clear_has_new_admin_account_id();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 new_admin_account_id_;
  ::google::protobuf::uint32 team_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTATransferTeamAdminResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTATransferTeamAdminResponse) */ {
 public:
  CMsgDOTATransferTeamAdminResponse();
  virtual ~CMsgDOTATransferTeamAdminResponse();

  CMsgDOTATransferTeamAdminResponse(const CMsgDOTATransferTeamAdminResponse& from);

  inline CMsgDOTATransferTeamAdminResponse& operator=(const CMsgDOTATransferTeamAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATransferTeamAdminResponse& default_instance();

  static inline const CMsgDOTATransferTeamAdminResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATransferTeamAdminResponse*>(
               &_CMsgDOTATransferTeamAdminResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(CMsgDOTATransferTeamAdminResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTATransferTeamAdminResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTATransferTeamAdminResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTATransferTeamAdminResponse& from);
  void MergeFrom(const CMsgDOTATransferTeamAdminResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTATransferTeamAdminResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATransferTeamAdminResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTATransferTeamAdminResponse_Result_SUCCESS;
  static const Result FAILURE_INVALID_ACCOUNT_TYPE =
    CMsgDOTATransferTeamAdminResponse_Result_FAILURE_INVALID_ACCOUNT_TYPE;
  static const Result FAILURE_NOT_ADMIN =
    CMsgDOTATransferTeamAdminResponse_Result_FAILURE_NOT_ADMIN;
  static const Result FAILURE_SAME_ACCOUNT =
    CMsgDOTATransferTeamAdminResponse_Result_FAILURE_SAME_ACCOUNT;
  static const Result FAILURE_NOT_MEMBER =
    CMsgDOTATransferTeamAdminResponse_Result_FAILURE_NOT_MEMBER;
  static const Result FAILURE_UNSPECIFIED_ERROR =
    CMsgDOTATransferTeamAdminResponse_Result_FAILURE_UNSPECIFIED_ERROR;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTATransferTeamAdminResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTATransferTeamAdminResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTATransferTeamAdminResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTATransferTeamAdminResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTATransferTeamAdminResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTATransferTeamAdminResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTATransferTeamAdminResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::CMsgDOTATransferTeamAdminResponse_Result result() const;
  void set_result(::proto::dota::CMsgDOTATransferTeamAdminResponse_Result value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTATransferTeamAdminResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAChangeTeamSub : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChangeTeamSub) */ {
 public:
  CMsgDOTAChangeTeamSub();
  virtual ~CMsgDOTAChangeTeamSub();

  CMsgDOTAChangeTeamSub(const CMsgDOTAChangeTeamSub& from);

  inline CMsgDOTAChangeTeamSub& operator=(const CMsgDOTAChangeTeamSub& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChangeTeamSub& default_instance();

  static inline const CMsgDOTAChangeTeamSub* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChangeTeamSub*>(
               &_CMsgDOTAChangeTeamSub_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(CMsgDOTAChangeTeamSub* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAChangeTeamSub* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAChangeTeamSub* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAChangeTeamSub& from);
  void MergeFrom(const CMsgDOTAChangeTeamSub& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAChangeTeamSub* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 member_account_id = 2;
  bool has_member_account_id() const;
  void clear_member_account_id();
  static const int kMemberAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 member_account_id() const;
  void set_member_account_id(::google::protobuf::uint32 value);

  // optional uint32 sub_account_id = 3;
  bool has_sub_account_id() const;
  void clear_sub_account_id();
  static const int kSubAccountIdFieldNumber = 3;
  ::google::protobuf::uint32 sub_account_id() const;
  void set_sub_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChangeTeamSub)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_member_account_id();
  void clear_has_member_account_id();
  void set_has_sub_account_id();
  void clear_has_sub_account_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 member_account_id_;
  ::google::protobuf::uint32 sub_account_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAChangeTeamSubResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAChangeTeamSubResponse) */ {
 public:
  CMsgDOTAChangeTeamSubResponse();
  virtual ~CMsgDOTAChangeTeamSubResponse();

  CMsgDOTAChangeTeamSubResponse(const CMsgDOTAChangeTeamSubResponse& from);

  inline CMsgDOTAChangeTeamSubResponse& operator=(const CMsgDOTAChangeTeamSubResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChangeTeamSubResponse& default_instance();

  static inline const CMsgDOTAChangeTeamSubResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChangeTeamSubResponse*>(
               &_CMsgDOTAChangeTeamSubResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(CMsgDOTAChangeTeamSubResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAChangeTeamSubResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAChangeTeamSubResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAChangeTeamSubResponse& from);
  void MergeFrom(const CMsgDOTAChangeTeamSubResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAChangeTeamSubResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChangeTeamSubResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTAChangeTeamSubResponse_Result_SUCCESS;
  static const Result FAILURE_INVALID_ACCOUNT_TYPE =
    CMsgDOTAChangeTeamSubResponse_Result_FAILURE_INVALID_ACCOUNT_TYPE;
  static const Result FAILURE_SAME_ACCOUNT =
    CMsgDOTAChangeTeamSubResponse_Result_FAILURE_SAME_ACCOUNT;
  static const Result FAILURE_NOT_ADMIN =
    CMsgDOTAChangeTeamSubResponse_Result_FAILURE_NOT_ADMIN;
  static const Result FAILURE_NOT_MEMBER =
    CMsgDOTAChangeTeamSubResponse_Result_FAILURE_NOT_MEMBER;
  static const Result FAILURE_NOT_SUB =
    CMsgDOTAChangeTeamSubResponse_Result_FAILURE_NOT_SUB;
  static const Result FAILURE_ALREADY_SUB =
    CMsgDOTAChangeTeamSubResponse_Result_FAILURE_ALREADY_SUB;
  static const Result FAILURE_UNSPECIFIED_ERROR =
    CMsgDOTAChangeTeamSubResponse_Result_FAILURE_UNSPECIFIED_ERROR;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTAChangeTeamSubResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTAChangeTeamSubResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTAChangeTeamSubResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTAChangeTeamSubResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTAChangeTeamSubResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTAChangeTeamSubResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTAChangeTeamSubResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::CMsgDOTAChangeTeamSubResponse_Result result() const;
  void set_result(::proto::dota::CMsgDOTAChangeTeamSubResponse_Result value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAChangeTeamSubResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTALeaveTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTALeaveTeam) */ {
 public:
  CMsgDOTALeaveTeam();
  virtual ~CMsgDOTALeaveTeam();

  CMsgDOTALeaveTeam(const CMsgDOTALeaveTeam& from);

  inline CMsgDOTALeaveTeam& operator=(const CMsgDOTALeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeaveTeam& default_instance();

  static inline const CMsgDOTALeaveTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaveTeam*>(
               &_CMsgDOTALeaveTeam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(CMsgDOTALeaveTeam* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaveTeam* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeaveTeam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeaveTeam& from);
  void MergeFrom(const CMsgDOTALeaveTeam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeaveTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTALeaveTeam)
 private:
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTALeaveTeamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTALeaveTeamResponse) */ {
 public:
  CMsgDOTALeaveTeamResponse();
  virtual ~CMsgDOTALeaveTeamResponse();

  CMsgDOTALeaveTeamResponse(const CMsgDOTALeaveTeamResponse& from);

  inline CMsgDOTALeaveTeamResponse& operator=(const CMsgDOTALeaveTeamResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeaveTeamResponse& default_instance();

  static inline const CMsgDOTALeaveTeamResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaveTeamResponse*>(
               &_CMsgDOTALeaveTeamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(CMsgDOTALeaveTeamResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaveTeamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTALeaveTeamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTALeaveTeamResponse& from);
  void MergeFrom(const CMsgDOTALeaveTeamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTALeaveTeamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTALeaveTeamResponse_Result Result;
  static const Result SUCCESS =
    CMsgDOTALeaveTeamResponse_Result_SUCCESS;
  static const Result FAILURE_NOT_MEMBER =
    CMsgDOTALeaveTeamResponse_Result_FAILURE_NOT_MEMBER;
  static const Result FAILURE_TEAM_LOCKED =
    CMsgDOTALeaveTeamResponse_Result_FAILURE_TEAM_LOCKED;
  static const Result FAILURE_UNSPECIFIED_ERROR =
    CMsgDOTALeaveTeamResponse_Result_FAILURE_UNSPECIFIED_ERROR;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTALeaveTeamResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTALeaveTeamResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTALeaveTeamResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTALeaveTeamResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTALeaveTeamResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTALeaveTeamResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTALeaveTeamResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::CMsgDOTALeaveTeamResponse_Result result() const;
  void set_result(::proto::dota::CMsgDOTALeaveTeamResponse_Result value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTALeaveTeamResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int result_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTABetaParticipation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTABetaParticipation) */ {
 public:
  CMsgDOTABetaParticipation();
  virtual ~CMsgDOTABetaParticipation();

  CMsgDOTABetaParticipation(const CMsgDOTABetaParticipation& from);

  inline CMsgDOTABetaParticipation& operator=(const CMsgDOTABetaParticipation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABetaParticipation& default_instance();

  static inline const CMsgDOTABetaParticipation* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTABetaParticipation*>(
               &_CMsgDOTABetaParticipation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(CMsgDOTABetaParticipation* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTABetaParticipation* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTABetaParticipation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTABetaParticipation& from);
  void MergeFrom(const CMsgDOTABetaParticipation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTABetaParticipation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 access_rights = 1;
  bool has_access_rights() const;
  void clear_access_rights();
  static const int kAccessRightsFieldNumber = 1;
  ::google::protobuf::uint32 access_rights() const;
  void set_access_rights(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTABetaParticipation)
 private:
  void set_has_access_rights();
  void clear_has_access_rights();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 access_rights_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fteam_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATeamMemberSDO

// optional uint32 account_id = 1;
inline bool CMsgDOTATeamMemberSDO::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamMemberSDO::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamMemberSDO::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamMemberSDO::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMemberSDO::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMemberSDO.account_id)
  return account_id_;
}
inline void CMsgDOTATeamMemberSDO::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMemberSDO.account_id)
}

// repeated uint32 team_ids = 2;
inline int CMsgDOTATeamMemberSDO::team_ids_size() const {
  return team_ids_.size();
}
inline void CMsgDOTATeamMemberSDO::clear_team_ids() {
  team_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMemberSDO::team_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
  return team_ids_.Get(index);
}
inline void CMsgDOTATeamMemberSDO::set_team_ids(int index, ::google::protobuf::uint32 value) {
  team_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
}
inline void CMsgDOTATeamMemberSDO::add_team_ids(::google::protobuf::uint32 value) {
  team_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeamMemberSDO::team_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
  return team_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeamMemberSDO::mutable_team_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamMemberSDO.team_ids)
  return &team_ids_;
}

// optional uint32 profile_team_id = 3;
inline bool CMsgDOTATeamMemberSDO::has_profile_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamMemberSDO::set_has_profile_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamMemberSDO::clear_has_profile_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamMemberSDO::clear_profile_team_id() {
  profile_team_id_ = 0u;
  clear_has_profile_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMemberSDO::profile_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMemberSDO.profile_team_id)
  return profile_team_id_;
}
inline void CMsgDOTATeamMemberSDO::set_profile_team_id(::google::protobuf::uint32 value) {
  set_has_profile_team_id();
  profile_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMemberSDO.profile_team_id)
}

// -------------------------------------------------------------------

// CMsgDOTATeamAdminSDO

// optional uint32 account_id = 1;
inline bool CMsgDOTATeamAdminSDO::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamAdminSDO::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamAdminSDO::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamAdminSDO::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamAdminSDO::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamAdminSDO.account_id)
  return account_id_;
}
inline void CMsgDOTATeamAdminSDO::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamAdminSDO.account_id)
}

// repeated uint32 team_ids = 2;
inline int CMsgDOTATeamAdminSDO::team_ids_size() const {
  return team_ids_.size();
}
inline void CMsgDOTATeamAdminSDO::clear_team_ids() {
  team_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATeamAdminSDO::team_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
  return team_ids_.Get(index);
}
inline void CMsgDOTATeamAdminSDO::set_team_ids(int index, ::google::protobuf::uint32 value) {
  team_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
}
inline void CMsgDOTATeamAdminSDO::add_team_ids(::google::protobuf::uint32 value) {
  team_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeamAdminSDO::team_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
  return team_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeamAdminSDO::mutable_team_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamAdminSDO.team_ids)
  return &team_ids_;
}

// -------------------------------------------------------------------

// CMsgDOTATeamMember

// optional uint32 account_id = 1;
inline bool CMsgDOTATeamMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMember::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMember.account_id)
  return account_id_;
}
inline void CMsgDOTATeamMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMember.account_id)
}

// optional uint32 time_joined = 4;
inline bool CMsgDOTATeamMember::has_time_joined() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamMember::set_has_time_joined() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamMember::clear_has_time_joined() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamMember::clear_time_joined() {
  time_joined_ = 0u;
  clear_has_time_joined();
}
inline ::google::protobuf::uint32 CMsgDOTATeamMember::time_joined() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamMember.time_joined)
  return time_joined_;
}
inline void CMsgDOTATeamMember::set_time_joined(::google::protobuf::uint32 value) {
  set_has_time_joined();
  time_joined_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamMember.time_joined)
}

// -------------------------------------------------------------------

// CMsgDOTATeam

// repeated .proto.dota.CMsgDOTATeamMember members = 1;
inline int CMsgDOTATeam::members_size() const {
  return members_.size();
}
inline void CMsgDOTATeam::clear_members() {
  members_.Clear();
}
inline const ::proto::dota::CMsgDOTATeamMember& CMsgDOTATeam::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.members)
  return members_.Get(index);
}
inline ::proto::dota::CMsgDOTATeamMember* CMsgDOTATeam::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.members)
  return members_.Mutable(index);
}
inline ::proto::dota::CMsgDOTATeamMember* CMsgDOTATeam::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeam.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamMember >*
CMsgDOTATeam::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeam.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamMember >&
CMsgDOTATeam::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeam.members)
  return members_;
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATeam::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.team_id)
  return team_id_;
}
inline void CMsgDOTATeam::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.team_id)
}

// optional string name = 3;
inline bool CMsgDOTATeam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTATeam::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.name)
  return name_.GetNoArena();
}
inline void CMsgDOTATeam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.name)
}
#if LANG_CXX11
inline void CMsgDOTATeam::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeam.name)
}
#endif
inline void CMsgDOTATeam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeam.name)
}
inline void CMsgDOTATeam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeam.name)
}
inline ::std::string* CMsgDOTATeam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeam::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeam.name)
}

// optional string tag = 4;
inline bool CMsgDOTATeam::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeam::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeam::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeam::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTATeam::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTATeam::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.tag)
}
#if LANG_CXX11
inline void CMsgDOTATeam::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeam.tag)
}
#endif
inline void CMsgDOTATeam::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeam.tag)
}
inline void CMsgDOTATeam::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeam.tag)
}
inline ::std::string* CMsgDOTATeam::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeam::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeam.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeam::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeam.tag)
}

// optional uint32 admin_id = 5;
inline bool CMsgDOTATeam::has_admin_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATeam::set_has_admin_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATeam::clear_has_admin_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATeam::clear_admin_id() {
  admin_id_ = 0u;
  clear_has_admin_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::admin_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.admin_id)
  return admin_id_;
}
inline void CMsgDOTATeam::set_admin_id(::google::protobuf::uint32 value) {
  set_has_admin_id();
  admin_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.admin_id)
}

// optional uint32 time_created = 6;
inline bool CMsgDOTATeam::has_time_created() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTATeam::set_has_time_created() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTATeam::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTATeam::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::time_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.time_created)
  return time_created_;
}
inline void CMsgDOTATeam::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.time_created)
}

// optional bool disbanded = 7;
inline bool CMsgDOTATeam::has_disbanded() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTATeam::set_has_disbanded() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTATeam::clear_has_disbanded() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTATeam::clear_disbanded() {
  disbanded_ = false;
  clear_has_disbanded();
}
inline bool CMsgDOTATeam::disbanded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.disbanded)
  return disbanded_;
}
inline void CMsgDOTATeam::set_disbanded(bool value) {
  set_has_disbanded();
  disbanded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.disbanded)
}

// optional uint32 wins = 8;
inline bool CMsgDOTATeam::has_wins() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTATeam::set_has_wins() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTATeam::clear_has_wins() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTATeam::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.wins)
  return wins_;
}
inline void CMsgDOTATeam::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.wins)
}

// optional uint32 losses = 9;
inline bool CMsgDOTATeam::has_losses() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTATeam::set_has_losses() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTATeam::clear_has_losses() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTATeam::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.losses)
  return losses_;
}
inline void CMsgDOTATeam::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.losses)
}

// optional uint32 rank = 10;
inline bool CMsgDOTATeam::has_rank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTATeam::set_has_rank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTATeam::clear_has_rank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTATeam::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.rank)
  return rank_;
}
inline void CMsgDOTATeam::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.rank)
}

// optional uint32 calibration_games_remaining = 24;
inline bool CMsgDOTATeam::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTATeam::set_has_calibration_games_remaining() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTATeam::clear_has_calibration_games_remaining() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTATeam::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  clear_has_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.calibration_games_remaining)
  return calibration_games_remaining_;
}
inline void CMsgDOTATeam::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_calibration_games_remaining();
  calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.calibration_games_remaining)
}

// optional uint64 logo = 11;
inline bool CMsgDOTATeam::has_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTATeam::set_has_logo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTATeam::clear_has_logo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTATeam::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.logo)
  return logo_;
}
inline void CMsgDOTATeam::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.logo)
}

// optional uint64 base_logo = 12;
inline bool CMsgDOTATeam::has_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTATeam::set_has_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTATeam::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTATeam::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.base_logo)
  return base_logo_;
}
inline void CMsgDOTATeam::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.base_logo)
}

// optional uint64 banner_logo = 13;
inline bool CMsgDOTATeam::has_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTATeam::set_has_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTATeam::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTATeam::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTATeam::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.banner_logo)
}

// optional uint64 sponsor_logo = 14;
inline bool CMsgDOTATeam::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTATeam::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTATeam::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTATeam::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.sponsor_logo)
  return sponsor_logo_;
}
inline void CMsgDOTATeam::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.sponsor_logo)
}

// optional string country_code = 15;
inline bool CMsgDOTATeam::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATeam::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATeam::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATeam::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTATeam::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTATeam::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.country_code)
}
#if LANG_CXX11
inline void CMsgDOTATeam::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeam.country_code)
}
#endif
inline void CMsgDOTATeam::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeam.country_code)
}
inline void CMsgDOTATeam::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeam.country_code)
}
inline ::std::string* CMsgDOTATeam::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeam::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeam.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeam::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeam.country_code)
}

// optional string url = 16;
inline bool CMsgDOTATeam::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATeam::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATeam::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATeam::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTATeam::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.url)
  return url_.GetNoArena();
}
inline void CMsgDOTATeam::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.url)
}
#if LANG_CXX11
inline void CMsgDOTATeam::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeam.url)
}
#endif
inline void CMsgDOTATeam::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeam.url)
}
inline void CMsgDOTATeam::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeam.url)
}
inline ::std::string* CMsgDOTATeam::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeam.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeam::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeam.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeam::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeam.url)
}

// optional uint32 fullgamesplayed = 17;
inline bool CMsgDOTATeam::has_fullgamesplayed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTATeam::set_has_fullgamesplayed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTATeam::clear_has_fullgamesplayed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTATeam::clear_fullgamesplayed() {
  fullgamesplayed_ = 0u;
  clear_has_fullgamesplayed();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::fullgamesplayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.fullgamesplayed)
  return fullgamesplayed_;
}
inline void CMsgDOTATeam::set_fullgamesplayed(::google::protobuf::uint32 value) {
  set_has_fullgamesplayed();
  fullgamesplayed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.fullgamesplayed)
}

// repeated uint32 leagues = 18;
inline int CMsgDOTATeam::leagues_size() const {
  return leagues_.size();
}
inline void CMsgDOTATeam::clear_leagues() {
  leagues_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::leagues(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.leagues)
  return leagues_.Get(index);
}
inline void CMsgDOTATeam::set_leagues(int index, ::google::protobuf::uint32 value) {
  leagues_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.leagues)
}
inline void CMsgDOTATeam::add_leagues(::google::protobuf::uint32 value) {
  leagues_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeam.leagues)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeam::leagues() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeam.leagues)
  return leagues_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeam::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeam.leagues)
  return &leagues_;
}

// optional uint32 gamesplayed = 19;
inline bool CMsgDOTATeam::has_gamesplayed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTATeam::set_has_gamesplayed() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTATeam::clear_has_gamesplayed() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTATeam::clear_gamesplayed() {
  gamesplayed_ = 0u;
  clear_has_gamesplayed();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::gamesplayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.gamesplayed)
  return gamesplayed_;
}
inline void CMsgDOTATeam::set_gamesplayed(::google::protobuf::uint32 value) {
  set_has_gamesplayed();
  gamesplayed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.gamesplayed)
}

// optional uint32 gamesplayedwithcurrentroster = 20;
inline bool CMsgDOTATeam::has_gamesplayedwithcurrentroster() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTATeam::set_has_gamesplayedwithcurrentroster() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTATeam::clear_has_gamesplayedwithcurrentroster() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTATeam::clear_gamesplayedwithcurrentroster() {
  gamesplayedwithcurrentroster_ = 0u;
  clear_has_gamesplayedwithcurrentroster();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::gamesplayedwithcurrentroster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.gamesplayedwithcurrentroster)
  return gamesplayedwithcurrentroster_;
}
inline void CMsgDOTATeam::set_gamesplayedwithcurrentroster(::google::protobuf::uint32 value) {
  set_has_gamesplayedwithcurrentroster();
  gamesplayedwithcurrentroster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.gamesplayedwithcurrentroster)
}

// optional uint32 teammatchmakinggamesplayed = 21;
inline bool CMsgDOTATeam::has_teammatchmakinggamesplayed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTATeam::set_has_teammatchmakinggamesplayed() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTATeam::clear_has_teammatchmakinggamesplayed() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTATeam::clear_teammatchmakinggamesplayed() {
  teammatchmakinggamesplayed_ = 0u;
  clear_has_teammatchmakinggamesplayed();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::teammatchmakinggamesplayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.teammatchmakinggamesplayed)
  return teammatchmakinggamesplayed_;
}
inline void CMsgDOTATeam::set_teammatchmakinggamesplayed(::google::protobuf::uint32 value) {
  set_has_teammatchmakinggamesplayed();
  teammatchmakinggamesplayed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.teammatchmakinggamesplayed)
}

// optional uint32 lastplayedgametime = 22;
inline bool CMsgDOTATeam::has_lastplayedgametime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTATeam::set_has_lastplayedgametime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTATeam::clear_has_lastplayedgametime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTATeam::clear_lastplayedgametime() {
  lastplayedgametime_ = 0u;
  clear_has_lastplayedgametime();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::lastplayedgametime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.lastplayedgametime)
  return lastplayedgametime_;
}
inline void CMsgDOTATeam::set_lastplayedgametime(::google::protobuf::uint32 value) {
  set_has_lastplayedgametime();
  lastplayedgametime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.lastplayedgametime)
}

// optional uint32 lastrenametime = 23;
inline bool CMsgDOTATeam::has_lastrenametime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTATeam::set_has_lastrenametime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTATeam::clear_has_lastrenametime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTATeam::clear_lastrenametime() {
  lastrenametime_ = 0u;
  clear_has_lastrenametime();
}
inline ::google::protobuf::uint32 CMsgDOTATeam::lastrenametime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.lastrenametime)
  return lastrenametime_;
}
inline void CMsgDOTATeam::set_lastrenametime(::google::protobuf::uint32 value) {
  set_has_lastrenametime();
  lastrenametime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.lastrenametime)
}

// repeated uint64 recent_match_ids = 25;
inline int CMsgDOTATeam::recent_match_ids_size() const {
  return recent_match_ids_.size();
}
inline void CMsgDOTATeam::clear_recent_match_ids() {
  recent_match_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::recent_match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.recent_match_ids)
  return recent_match_ids_.Get(index);
}
inline void CMsgDOTATeam::set_recent_match_ids(int index, ::google::protobuf::uint64 value) {
  recent_match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.recent_match_ids)
}
inline void CMsgDOTATeam::add_recent_match_ids(::google::protobuf::uint64 value) {
  recent_match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeam.recent_match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTATeam::recent_match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeam.recent_match_ids)
  return recent_match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTATeam::mutable_recent_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeam.recent_match_ids)
  return &recent_match_ids_;
}

// repeated uint64 top_match_ids = 26;
inline int CMsgDOTATeam::top_match_ids_size() const {
  return top_match_ids_.size();
}
inline void CMsgDOTATeam::clear_top_match_ids() {
  top_match_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTATeam::top_match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.top_match_ids)
  return top_match_ids_.Get(index);
}
inline void CMsgDOTATeam::set_top_match_ids(int index, ::google::protobuf::uint64 value) {
  top_match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.top_match_ids)
}
inline void CMsgDOTATeam::add_top_match_ids(::google::protobuf::uint64 value) {
  top_match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeam.top_match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTATeam::top_match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeam.top_match_ids)
  return top_match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTATeam::mutable_top_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeam.top_match_ids)
  return &top_match_ids_;
}

// optional bool pickup_team = 27;
inline bool CMsgDOTATeam::has_pickup_team() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTATeam::set_has_pickup_team() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTATeam::clear_has_pickup_team() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTATeam::clear_pickup_team() {
  pickup_team_ = false;
  clear_has_pickup_team();
}
inline bool CMsgDOTATeam::pickup_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeam.pickup_team)
  return pickup_team_;
}
inline void CMsgDOTATeam::set_pickup_team(bool value) {
  set_has_pickup_team();
  pickup_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeam.pickup_team)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInfo_Member

// optional uint32 account_id = 1;
inline bool CMsgDOTATeamInfo_Member::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInfo_Member::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInfo_Member::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInfo_Member::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo_Member::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.Member.account_id)
  return account_id_;
}
inline void CMsgDOTATeamInfo_Member::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.Member.account_id)
}

// optional uint32 time_joined = 2;
inline bool CMsgDOTATeamInfo_Member::has_time_joined() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInfo_Member::set_has_time_joined() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInfo_Member::clear_has_time_joined() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInfo_Member::clear_time_joined() {
  time_joined_ = 0u;
  clear_has_time_joined();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo_Member::time_joined() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.Member.time_joined)
  return time_joined_;
}
inline void CMsgDOTATeamInfo_Member::set_time_joined(::google::protobuf::uint32 value) {
  set_has_time_joined();
  time_joined_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.Member.time_joined)
}

// optional bool admin = 3;
inline bool CMsgDOTATeamInfo_Member::has_admin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATeamInfo_Member::set_has_admin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATeamInfo_Member::clear_has_admin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATeamInfo_Member::clear_admin() {
  admin_ = false;
  clear_has_admin();
}
inline bool CMsgDOTATeamInfo_Member::admin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.Member.admin)
  return admin_;
}
inline void CMsgDOTATeamInfo_Member::set_admin(bool value) {
  set_has_admin();
  admin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.Member.admin)
}

// optional bool sub = 4;
inline bool CMsgDOTATeamInfo_Member::has_sub() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATeamInfo_Member::set_has_sub() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATeamInfo_Member::clear_has_sub() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATeamInfo_Member::clear_sub() {
  sub_ = false;
  clear_has_sub();
}
inline bool CMsgDOTATeamInfo_Member::sub() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.Member.sub)
  return sub_;
}
inline void CMsgDOTATeamInfo_Member::set_sub(bool value) {
  set_has_sub();
  sub_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.Member.sub)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInfo

// repeated .proto.dota.CMsgDOTATeamInfo.Member members = 1;
inline int CMsgDOTATeamInfo::members_size() const {
  return members_.size();
}
inline void CMsgDOTATeamInfo::clear_members() {
  members_.Clear();
}
inline const ::proto::dota::CMsgDOTATeamInfo_Member& CMsgDOTATeamInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.members)
  return members_.Get(index);
}
inline ::proto::dota::CMsgDOTATeamInfo_Member* CMsgDOTATeamInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.members)
  return members_.Mutable(index);
}
inline ::proto::dota::CMsgDOTATeamInfo_Member* CMsgDOTATeamInfo::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamInfo.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo_Member >*
CMsgDOTATeamInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamInfo.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo_Member >&
CMsgDOTATeamInfo::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamInfo.members)
  return members_;
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATeamInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATeamInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATeamInfo::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.team_id)
  return team_id_;
}
inline void CMsgDOTATeamInfo::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.team_id)
}

// optional string name = 3;
inline bool CMsgDOTATeamInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTATeamInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.name)
  return name_.GetNoArena();
}
inline void CMsgDOTATeamInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.name)
}
#if LANG_CXX11
inline void CMsgDOTATeamInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInfo.name)
}
#endif
inline void CMsgDOTATeamInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInfo.name)
}
inline void CMsgDOTATeamInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInfo.name)
}
inline ::std::string* CMsgDOTATeamInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInfo.name)
}

// optional string tag = 4;
inline bool CMsgDOTATeamInfo::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInfo::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInfo::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTATeamInfo::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTATeamInfo::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.tag)
}
#if LANG_CXX11
inline void CMsgDOTATeamInfo::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInfo.tag)
}
#endif
inline void CMsgDOTATeamInfo::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInfo.tag)
}
inline void CMsgDOTATeamInfo::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInfo.tag)
}
inline ::std::string* CMsgDOTATeamInfo::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInfo::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInfo.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInfo::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInfo.tag)
}

// optional uint32 time_created = 5;
inline bool CMsgDOTATeamInfo::has_time_created() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_time_created() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATeamInfo::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATeamInfo::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo::time_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.time_created)
  return time_created_;
}
inline void CMsgDOTATeamInfo::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.time_created)
}

// optional bool pro = 6;
inline bool CMsgDOTATeamInfo::has_pro() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_pro() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTATeamInfo::clear_has_pro() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTATeamInfo::clear_pro() {
  pro_ = false;
  clear_has_pro();
}
inline bool CMsgDOTATeamInfo::pro() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.pro)
  return pro_;
}
inline void CMsgDOTATeamInfo::set_pro(bool value) {
  set_has_pro();
  pro_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.pro)
}

// optional bool locked = 7;
inline bool CMsgDOTATeamInfo::has_locked() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_locked() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTATeamInfo::clear_has_locked() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTATeamInfo::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
inline bool CMsgDOTATeamInfo::locked() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.locked)
  return locked_;
}
inline void CMsgDOTATeamInfo::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.locked)
}

// optional bool pickup_team = 8;
inline bool CMsgDOTATeamInfo::has_pickup_team() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_pickup_team() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTATeamInfo::clear_has_pickup_team() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTATeamInfo::clear_pickup_team() {
  pickup_team_ = false;
  clear_has_pickup_team();
}
inline bool CMsgDOTATeamInfo::pickup_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.pickup_team)
  return pickup_team_;
}
inline void CMsgDOTATeamInfo::set_pickup_team(bool value) {
  set_has_pickup_team();
  pickup_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.pickup_team)
}

// optional uint64 ugc_logo = 9;
inline bool CMsgDOTATeamInfo::has_ugc_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_ugc_logo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTATeamInfo::clear_has_ugc_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTATeamInfo::clear_ugc_logo() {
  ugc_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeamInfo::ugc_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.ugc_logo)
  return ugc_logo_;
}
inline void CMsgDOTATeamInfo::set_ugc_logo(::google::protobuf::uint64 value) {
  set_has_ugc_logo();
  ugc_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.ugc_logo)
}

// optional uint64 ugc_base_logo = 10;
inline bool CMsgDOTATeamInfo::has_ugc_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_ugc_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTATeamInfo::clear_has_ugc_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTATeamInfo::clear_ugc_base_logo() {
  ugc_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeamInfo::ugc_base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.ugc_base_logo)
  return ugc_base_logo_;
}
inline void CMsgDOTATeamInfo::set_ugc_base_logo(::google::protobuf::uint64 value) {
  set_has_ugc_base_logo();
  ugc_base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.ugc_base_logo)
}

// optional uint64 ugc_banner_logo = 11;
inline bool CMsgDOTATeamInfo::has_ugc_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_ugc_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTATeamInfo::clear_has_ugc_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTATeamInfo::clear_ugc_banner_logo() {
  ugc_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeamInfo::ugc_banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.ugc_banner_logo)
  return ugc_banner_logo_;
}
inline void CMsgDOTATeamInfo::set_ugc_banner_logo(::google::protobuf::uint64 value) {
  set_has_ugc_banner_logo();
  ugc_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.ugc_banner_logo)
}

// optional uint64 ugc_sponsor_logo = 12;
inline bool CMsgDOTATeamInfo::has_ugc_sponsor_logo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_ugc_sponsor_logo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTATeamInfo::clear_has_ugc_sponsor_logo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTATeamInfo::clear_ugc_sponsor_logo() {
  ugc_sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_sponsor_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeamInfo::ugc_sponsor_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.ugc_sponsor_logo)
  return ugc_sponsor_logo_;
}
inline void CMsgDOTATeamInfo::set_ugc_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_ugc_sponsor_logo();
  ugc_sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.ugc_sponsor_logo)
}

// optional string country_code = 13;
inline bool CMsgDOTATeamInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATeamInfo::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATeamInfo::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTATeamInfo::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTATeamInfo::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.country_code)
}
#if LANG_CXX11
inline void CMsgDOTATeamInfo::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInfo.country_code)
}
#endif
inline void CMsgDOTATeamInfo::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInfo.country_code)
}
inline void CMsgDOTATeamInfo::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInfo.country_code)
}
inline ::std::string* CMsgDOTATeamInfo::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInfo.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInfo.country_code)
}

// optional string url = 14;
inline bool CMsgDOTATeamInfo::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATeamInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATeamInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTATeamInfo::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.url)
  return url_.GetNoArena();
}
inline void CMsgDOTATeamInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.url)
}
#if LANG_CXX11
inline void CMsgDOTATeamInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInfo.url)
}
#endif
inline void CMsgDOTATeamInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInfo.url)
}
inline void CMsgDOTATeamInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInfo.url)
}
inline ::std::string* CMsgDOTATeamInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInfo::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInfo.url)
}

// optional uint32 wins = 15;
inline bool CMsgDOTATeamInfo::has_wins() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_wins() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTATeamInfo::clear_has_wins() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTATeamInfo::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo::wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.wins)
  return wins_;
}
inline void CMsgDOTATeamInfo::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.wins)
}

// optional uint32 losses = 16;
inline bool CMsgDOTATeamInfo::has_losses() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_losses() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTATeamInfo::clear_has_losses() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTATeamInfo::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo::losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.losses)
  return losses_;
}
inline void CMsgDOTATeamInfo::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.losses)
}

// optional uint32 rank = 17;
inline bool CMsgDOTATeamInfo::has_rank() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_rank() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTATeamInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTATeamInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo::rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.rank)
  return rank_;
}
inline void CMsgDOTATeamInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.rank)
}

// optional uint32 calibration_games_remaining = 18;
inline bool CMsgDOTATeamInfo::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_calibration_games_remaining() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTATeamInfo::clear_has_calibration_games_remaining() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTATeamInfo::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  clear_has_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo::calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.calibration_games_remaining)
  return calibration_games_remaining_;
}
inline void CMsgDOTATeamInfo::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_calibration_games_remaining();
  calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.calibration_games_remaining)
}

// optional uint32 games_played_total = 19;
inline bool CMsgDOTATeamInfo::has_games_played_total() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_games_played_total() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTATeamInfo::clear_has_games_played_total() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTATeamInfo::clear_games_played_total() {
  games_played_total_ = 0u;
  clear_has_games_played_total();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo::games_played_total() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.games_played_total)
  return games_played_total_;
}
inline void CMsgDOTATeamInfo::set_games_played_total(::google::protobuf::uint32 value) {
  set_has_games_played_total();
  games_played_total_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.games_played_total)
}

// optional uint32 games_played_matchmaking = 20;
inline bool CMsgDOTATeamInfo::has_games_played_matchmaking() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTATeamInfo::set_has_games_played_matchmaking() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTATeamInfo::clear_has_games_played_matchmaking() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTATeamInfo::clear_games_played_matchmaking() {
  games_played_matchmaking_ = 0u;
  clear_has_games_played_matchmaking();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo::games_played_matchmaking() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.games_played_matchmaking)
  return games_played_matchmaking_;
}
inline void CMsgDOTATeamInfo::set_games_played_matchmaking(::google::protobuf::uint32 value) {
  set_has_games_played_matchmaking();
  games_played_matchmaking_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.games_played_matchmaking)
}

// repeated uint32 leagues_participated = 21;
inline int CMsgDOTATeamInfo::leagues_participated_size() const {
  return leagues_participated_.size();
}
inline void CMsgDOTATeamInfo::clear_leagues_participated() {
  leagues_participated_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInfo::leagues_participated(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.leagues_participated)
  return leagues_participated_.Get(index);
}
inline void CMsgDOTATeamInfo::set_leagues_participated(int index, ::google::protobuf::uint32 value) {
  leagues_participated_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.leagues_participated)
}
inline void CMsgDOTATeamInfo::add_leagues_participated(::google::protobuf::uint32 value) {
  leagues_participated_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamInfo.leagues_participated)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATeamInfo::leagues_participated() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamInfo.leagues_participated)
  return leagues_participated_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATeamInfo::mutable_leagues_participated() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamInfo.leagues_participated)
  return &leagues_participated_;
}

// repeated uint64 top_match_ids = 22;
inline int CMsgDOTATeamInfo::top_match_ids_size() const {
  return top_match_ids_.size();
}
inline void CMsgDOTATeamInfo::clear_top_match_ids() {
  top_match_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTATeamInfo::top_match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.top_match_ids)
  return top_match_ids_.Get(index);
}
inline void CMsgDOTATeamInfo::set_top_match_ids(int index, ::google::protobuf::uint64 value) {
  top_match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.top_match_ids)
}
inline void CMsgDOTATeamInfo::add_top_match_ids(::google::protobuf::uint64 value) {
  top_match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamInfo.top_match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTATeamInfo::top_match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamInfo.top_match_ids)
  return top_match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTATeamInfo::mutable_top_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamInfo.top_match_ids)
  return &top_match_ids_;
}

// repeated uint64 recent_match_ids = 23;
inline int CMsgDOTATeamInfo::recent_match_ids_size() const {
  return recent_match_ids_.size();
}
inline void CMsgDOTATeamInfo::clear_recent_match_ids() {
  recent_match_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTATeamInfo::recent_match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
  return recent_match_ids_.Get(index);
}
inline void CMsgDOTATeamInfo::set_recent_match_ids(int index, ::google::protobuf::uint64 value) {
  recent_match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
}
inline void CMsgDOTATeamInfo::add_recent_match_ids(::google::protobuf::uint64 value) {
  recent_match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTATeamInfo::recent_match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
  return recent_match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTATeamInfo::mutable_recent_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamInfo.recent_match_ids)
  return &recent_match_ids_;
}

// -------------------------------------------------------------------

// CMsgDOTATeamsInfo

// optional uint32 league_id = 1;
inline bool CMsgDOTATeamsInfo::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamsInfo::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamsInfo::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamsInfo::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamsInfo::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamsInfo.league_id)
  return league_id_;
}
inline void CMsgDOTATeamsInfo::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamsInfo.league_id)
}

// repeated .proto.dota.CMsgDOTATeamInfo teams = 2;
inline int CMsgDOTATeamsInfo::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTATeamsInfo::clear_teams() {
  teams_.Clear();
}
inline const ::proto::dota::CMsgDOTATeamInfo& CMsgDOTATeamsInfo::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamsInfo.teams)
  return teams_.Get(index);
}
inline ::proto::dota::CMsgDOTATeamInfo* CMsgDOTATeamsInfo::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamsInfo.teams)
  return teams_.Mutable(index);
}
inline ::proto::dota::CMsgDOTATeamInfo* CMsgDOTATeamsInfo::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATeamsInfo.teams)
  return teams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo >*
CMsgDOTATeamsInfo::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATeamsInfo.teams)
  return &teams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATeamInfo >&
CMsgDOTATeamsInfo::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATeamsInfo.teams)
  return teams_;
}

// -------------------------------------------------------------------

// CMsgDOTAMyTeamInfoRequest

// -------------------------------------------------------------------

// CMsgDOTACreateTeam

// optional string name = 1;
inline bool CMsgDOTACreateTeam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTACreateTeam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTACreateTeam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTACreateTeam::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.name)
  return name_.GetNoArena();
}
inline void CMsgDOTACreateTeam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.name)
}
#if LANG_CXX11
inline void CMsgDOTACreateTeam::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTACreateTeam.name)
}
#endif
inline void CMsgDOTACreateTeam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTACreateTeam.name)
}
inline void CMsgDOTACreateTeam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTACreateTeam.name)
}
inline ::std::string* CMsgDOTACreateTeam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTACreateTeam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTACreateTeam::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTACreateTeam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTACreateTeam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTACreateTeam.name)
}

// optional string tag = 2;
inline bool CMsgDOTACreateTeam::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTACreateTeam::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTACreateTeam::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTACreateTeam::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTACreateTeam::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.tag)
}
#if LANG_CXX11
inline void CMsgDOTACreateTeam::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTACreateTeam.tag)
}
#endif
inline void CMsgDOTACreateTeam::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTACreateTeam.tag)
}
inline void CMsgDOTACreateTeam::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTACreateTeam.tag)
}
inline ::std::string* CMsgDOTACreateTeam::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTACreateTeam.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTACreateTeam::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTACreateTeam.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTACreateTeam::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTACreateTeam.tag)
}

// optional uint64 logo = 3;
inline bool CMsgDOTACreateTeam::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTACreateTeam::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTACreateTeam::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTACreateTeam::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.logo)
  return logo_;
}
inline void CMsgDOTACreateTeam::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.logo)
}

// optional uint64 base_logo = 4;
inline bool CMsgDOTACreateTeam::has_base_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_base_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTACreateTeam::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTACreateTeam::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTACreateTeam::base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.base_logo)
  return base_logo_;
}
inline void CMsgDOTACreateTeam::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.base_logo)
}

// optional uint64 banner_logo = 5;
inline bool CMsgDOTACreateTeam::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTACreateTeam::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTACreateTeam::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTACreateTeam::banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTACreateTeam::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.banner_logo)
}

// optional uint64 sponsor_logo = 6;
inline bool CMsgDOTACreateTeam::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTACreateTeam::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTACreateTeam::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
inline ::google::protobuf::uint64 CMsgDOTACreateTeam::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.sponsor_logo)
  return sponsor_logo_;
}
inline void CMsgDOTACreateTeam::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.sponsor_logo)
}

// optional string country_code = 7;
inline bool CMsgDOTACreateTeam::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTACreateTeam::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTACreateTeam::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTACreateTeam::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTACreateTeam::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.country_code)
}
#if LANG_CXX11
inline void CMsgDOTACreateTeam::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTACreateTeam.country_code)
}
#endif
inline void CMsgDOTACreateTeam::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTACreateTeam.country_code)
}
inline void CMsgDOTACreateTeam::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTACreateTeam.country_code)
}
inline ::std::string* CMsgDOTACreateTeam::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTACreateTeam.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTACreateTeam::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTACreateTeam.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTACreateTeam::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTACreateTeam.country_code)
}

// optional string url = 8;
inline bool CMsgDOTACreateTeam::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTACreateTeam::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTACreateTeam::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTACreateTeam::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.url)
  return url_.GetNoArena();
}
inline void CMsgDOTACreateTeam::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.url)
}
#if LANG_CXX11
inline void CMsgDOTACreateTeam::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTACreateTeam.url)
}
#endif
inline void CMsgDOTACreateTeam::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTACreateTeam.url)
}
inline void CMsgDOTACreateTeam::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTACreateTeam.url)
}
inline ::std::string* CMsgDOTACreateTeam::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTACreateTeam.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTACreateTeam::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTACreateTeam.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTACreateTeam::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTACreateTeam.url)
}

// optional bool pickup_team = 9;
inline bool CMsgDOTACreateTeam::has_pickup_team() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTACreateTeam::set_has_pickup_team() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTACreateTeam::clear_has_pickup_team() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTACreateTeam::clear_pickup_team() {
  pickup_team_ = false;
  clear_has_pickup_team();
}
inline bool CMsgDOTACreateTeam::pickup_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeam.pickup_team)
  return pickup_team_;
}
inline void CMsgDOTACreateTeam::set_pickup_team(bool value) {
  set_has_pickup_team();
  pickup_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeam.pickup_team)
}

// -------------------------------------------------------------------

// CMsgDOTACreateTeamResponse

// optional .proto.dota.CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
inline bool CMsgDOTACreateTeamResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTACreateTeamResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTACreateTeamResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTACreateTeamResponse::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::proto::dota::CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeamResponse.result)
  return static_cast< ::proto::dota::CMsgDOTACreateTeamResponse_Result >(result_);
}
inline void CMsgDOTACreateTeamResponse::set_result(::proto::dota::CMsgDOTACreateTeamResponse_Result value) {
  assert(::proto::dota::CMsgDOTACreateTeamResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeamResponse.result)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTACreateTeamResponse::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTACreateTeamResponse::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTACreateTeamResponse::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTACreateTeamResponse::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTACreateTeamResponse::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateTeamResponse.team_id)
  return team_id_;
}
inline void CMsgDOTACreateTeamResponse::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateTeamResponse.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTAEditTeamDetails

// optional uint32 team_id = 1;
inline bool CMsgDOTAEditTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAEditTeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAEditTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.team_id)
  return team_id_;
}
inline void CMsgDOTAEditTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.team_id)
}

// optional string name = 2;
inline bool CMsgDOTAEditTeamDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAEditTeamDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgDOTAEditTeamDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.name)
  return name_.GetNoArena();
}
inline void CMsgDOTAEditTeamDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.name)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeamDetails::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAEditTeamDetails.name)
}
#endif
inline void CMsgDOTAEditTeamDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAEditTeamDetails.name)
}
inline void CMsgDOTAEditTeamDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAEditTeamDetails.name)
}
inline ::std::string* CMsgDOTAEditTeamDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAEditTeamDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeamDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAEditTeamDetails.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeamDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAEditTeamDetails.name)
}

// optional string tag = 3;
inline bool CMsgDOTAEditTeamDetails::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAEditTeamDetails::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTAEditTeamDetails::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTAEditTeamDetails::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.tag)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeamDetails::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAEditTeamDetails.tag)
}
#endif
inline void CMsgDOTAEditTeamDetails::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAEditTeamDetails.tag)
}
inline void CMsgDOTAEditTeamDetails::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAEditTeamDetails.tag)
}
inline ::std::string* CMsgDOTAEditTeamDetails::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAEditTeamDetails.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeamDetails::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAEditTeamDetails.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeamDetails::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAEditTeamDetails.tag)
}

// optional uint64 logo = 4;
inline bool CMsgDOTAEditTeamDetails::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAEditTeamDetails::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeamDetails::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.logo)
  return logo_;
}
inline void CMsgDOTAEditTeamDetails::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.logo)
}

// optional uint64 base_logo = 5;
inline bool CMsgDOTAEditTeamDetails::has_base_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_base_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAEditTeamDetails::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeamDetails::base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.base_logo)
  return base_logo_;
}
inline void CMsgDOTAEditTeamDetails::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.base_logo)
}

// optional uint64 banner_logo = 6;
inline bool CMsgDOTAEditTeamDetails::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAEditTeamDetails::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeamDetails::banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.banner_logo)
  return banner_logo_;
}
inline void CMsgDOTAEditTeamDetails::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.banner_logo)
}

// optional uint64 sponsor_logo = 7;
inline bool CMsgDOTAEditTeamDetails::has_sponsor_logo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_sponsor_logo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_sponsor_logo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAEditTeamDetails::clear_sponsor_logo() {
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_sponsor_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAEditTeamDetails::sponsor_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.sponsor_logo)
  return sponsor_logo_;
}
inline void CMsgDOTAEditTeamDetails::set_sponsor_logo(::google::protobuf::uint64 value) {
  set_has_sponsor_logo();
  sponsor_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.sponsor_logo)
}

// optional string country_code = 8;
inline bool CMsgDOTAEditTeamDetails::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAEditTeamDetails::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTAEditTeamDetails::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTAEditTeamDetails::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeamDetails::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}
#endif
inline void CMsgDOTAEditTeamDetails::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}
inline void CMsgDOTAEditTeamDetails::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}
inline ::std::string* CMsgDOTAEditTeamDetails::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAEditTeamDetails.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeamDetails::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAEditTeamDetails.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeamDetails::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAEditTeamDetails.country_code)
}

// optional string url = 9;
inline bool CMsgDOTAEditTeamDetails::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAEditTeamDetails::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CMsgDOTAEditTeamDetails::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.url)
  return url_.GetNoArena();
}
inline void CMsgDOTAEditTeamDetails::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.url)
}
#if LANG_CXX11
inline void CMsgDOTAEditTeamDetails::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAEditTeamDetails.url)
}
#endif
inline void CMsgDOTAEditTeamDetails::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAEditTeamDetails.url)
}
inline void CMsgDOTAEditTeamDetails::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAEditTeamDetails.url)
}
inline ::std::string* CMsgDOTAEditTeamDetails::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAEditTeamDetails.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAEditTeamDetails::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAEditTeamDetails.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAEditTeamDetails::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAEditTeamDetails.url)
}

// optional bool in_use_by_party = 10;
inline bool CMsgDOTAEditTeamDetails::has_in_use_by_party() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAEditTeamDetails::set_has_in_use_by_party() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAEditTeamDetails::clear_has_in_use_by_party() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAEditTeamDetails::clear_in_use_by_party() {
  in_use_by_party_ = false;
  clear_has_in_use_by_party();
}
inline bool CMsgDOTAEditTeamDetails::in_use_by_party() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetails.in_use_by_party)
  return in_use_by_party_;
}
inline void CMsgDOTAEditTeamDetails::set_in_use_by_party(bool value) {
  set_has_in_use_by_party();
  in_use_by_party_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetails.in_use_by_party)
}

// -------------------------------------------------------------------

// CMsgDOTAEditTeamDetailsResponse

// optional .proto.dota.CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTAEditTeamDetailsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAEditTeamDetailsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAEditTeamDetailsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAEditTeamDetailsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditTeamDetailsResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result >(result_);
}
inline void CMsgDOTAEditTeamDetailsResponse::set_result(::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result value) {
  assert(::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditTeamDetailsResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTATeamProfileResponse

// optional uint32 eresult = 1;
inline bool CMsgDOTATeamProfileResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamProfileResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamProfileResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamProfileResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTATeamProfileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamProfileResponse.eresult)
  return eresult_;
}
inline void CMsgDOTATeamProfileResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamProfileResponse.eresult)
}

// optional .proto.dota.CMsgDOTATeam team = 2;
inline bool CMsgDOTATeamProfileResponse::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamProfileResponse::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamProfileResponse::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamProfileResponse::clear_team() {
  if (team_ != NULL) team_->::proto::dota::CMsgDOTATeam::Clear();
  clear_has_team();
}
inline const ::proto::dota::CMsgDOTATeam& CMsgDOTATeamProfileResponse::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamProfileResponse.team)
  return team_ != NULL ? *team_
                         : *::proto::dota::CMsgDOTATeam::internal_default_instance();
}
inline ::proto::dota::CMsgDOTATeam* CMsgDOTATeamProfileResponse::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    team_ = new ::proto::dota::CMsgDOTATeam;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamProfileResponse.team)
  return team_;
}
inline ::proto::dota::CMsgDOTATeam* CMsgDOTATeamProfileResponse::release_team() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamProfileResponse.team)
  clear_has_team();
  ::proto::dota::CMsgDOTATeam* temp = team_;
  team_ = NULL;
  return temp;
}
inline void CMsgDOTATeamProfileResponse::set_allocated_team(::proto::dota::CMsgDOTATeam* team) {
  delete team_;
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamProfileResponse.team)
}

// -------------------------------------------------------------------

// CMsgDOTAProTeamListRequest

// -------------------------------------------------------------------

// CMsgDOTAProTeamListResponse_TeamEntry

// optional uint32 team_id = 1;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProTeamListResponse_TeamEntry::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.team_id)
  return team_id_;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.team_id)
}

// optional string tag = 2;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& CMsgDOTAProTeamListResponse_TeamEntry::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
  return tag_.GetNoArena();
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
#if LANG_CXX11
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
#endif
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}
inline ::std::string* CMsgDOTAProTeamListResponse_TeamEntry::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAProTeamListResponse_TeamEntry::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.tag)
}

// optional uint32 time_created = 3;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_time_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_time_created() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgDOTAProTeamListResponse_TeamEntry::time_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.time_created)
  return time_created_;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.time_created)
}

// optional uint64 logo = 4;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAProTeamListResponse_TeamEntry::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.logo)
  return logo_;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.logo)
}

// optional string country_code = 5;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& CMsgDOTAProTeamListResponse_TeamEntry::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
  return country_code_.GetNoArena();
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
#if LANG_CXX11
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
#endif
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}
inline ::std::string* CMsgDOTAProTeamListResponse_TeamEntry::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAProTeamListResponse_TeamEntry::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.country_code)
}

// optional uint32 member_count = 6;
inline bool CMsgDOTAProTeamListResponse_TeamEntry::has_member_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_has_member_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 CMsgDOTAProTeamListResponse_TeamEntry::member_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.member_count)
  return member_count_;
}
inline void CMsgDOTAProTeamListResponse_TeamEntry::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.TeamEntry.member_count)
}

// -------------------------------------------------------------------

// CMsgDOTAProTeamListResponse

// repeated .proto.dota.CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
inline int CMsgDOTAProTeamListResponse::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTAProTeamListResponse::clear_teams() {
  teams_.Clear();
}
inline const ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry& CMsgDOTAProTeamListResponse::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return teams_.Get(index);
}
inline ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry* CMsgDOTAProTeamListResponse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return teams_.Mutable(index);
}
inline ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry* CMsgDOTAProTeamListResponse::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return teams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry >*
CMsgDOTAProTeamListResponse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return &teams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProTeamListResponse_TeamEntry >&
CMsgDOTAProTeamListResponse::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAProTeamListResponse.teams)
  return teams_;
}

// optional uint32 eresult = 2;
inline bool CMsgDOTAProTeamListResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProTeamListResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProTeamListResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProTeamListResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTAProTeamListResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProTeamListResponse.eresult)
  return eresult_;
}
inline void CMsgDOTAProTeamListResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProTeamListResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_InviterToGC

// optional uint32 account_id = 1;
inline bool CMsgDOTATeamInvite_InviterToGC::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_InviterToGC::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_InviterToGC::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_InviterToGC::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInvite_InviterToGC::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_InviterToGC.account_id)
  return account_id_;
}
inline void CMsgDOTATeamInvite_InviterToGC::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_InviterToGC.account_id)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATeamInvite_InviterToGC::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_InviterToGC::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_InviterToGC::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_InviterToGC::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInvite_InviterToGC::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_InviterToGC.team_id)
  return team_id_;
}
inline void CMsgDOTATeamInvite_InviterToGC::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_InviterToGC.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_GCImmediateResponseToInviter

// optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
inline bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::dota::ETeamInviteResult CMsgDOTATeamInvite_GCImmediateResponseToInviter::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.result)
  return static_cast< ::proto::dota::ETeamInviteResult >(result_);
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_result(::proto::dota::ETeamInviteResult value) {
  assert(::proto::dota::ETeamInviteResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.result)
}

// optional string invitee_name = 2;
inline bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::has_invitee_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_has_invitee_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_has_invitee_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_invitee_name() {
  invitee_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invitee_name();
}
inline const ::std::string& CMsgDOTATeamInvite_GCImmediateResponseToInviter::invitee_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
  return invitee_name_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(const ::std::string& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(::std::string&& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
#endif
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_invitee_name(const char* value, size_t size) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}
inline ::std::string* CMsgDOTATeamInvite_GCImmediateResponseToInviter::mutable_invitee_name() {
  set_has_invitee_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
  return invitee_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCImmediateResponseToInviter::release_invitee_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
  clear_has_invitee_name();
  return invitee_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_allocated_invitee_name(::std::string* invitee_name) {
  if (invitee_name != NULL) {
    set_has_invitee_name();
  } else {
    clear_has_invitee_name();
  }
  invitee_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name)
}

// optional uint32 required_badge_level = 3;
inline bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::has_required_badge_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_has_required_badge_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_has_required_badge_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::clear_required_badge_level() {
  required_badge_level_ = 0u;
  clear_has_required_badge_level();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInvite_GCImmediateResponseToInviter::required_badge_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.required_badge_level)
  return required_badge_level_;
}
inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::set_required_badge_level(::google::protobuf::uint32 value) {
  set_has_required_badge_level();
  required_badge_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.required_badge_level)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_GCRequestToInvitee

// optional uint32 inviter_account_id = 1;
inline bool CMsgDOTATeamInvite_GCRequestToInvitee::has_inviter_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_inviter_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_inviter_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_inviter_account_id() {
  inviter_account_id_ = 0u;
  clear_has_inviter_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATeamInvite_GCRequestToInvitee::inviter_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.inviter_account_id)
  return inviter_account_id_;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_inviter_account_id(::google::protobuf::uint32 value) {
  set_has_inviter_account_id();
  inviter_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.inviter_account_id)
}

// optional string team_name = 2;
inline bool CMsgDOTATeamInvite_GCRequestToInvitee::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTATeamInvite_GCRequestToInvitee::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
#endif
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}
inline ::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_name)
}

// optional string team_tag = 3;
inline bool CMsgDOTATeamInvite_GCRequestToInvitee::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_tag();
}
inline const ::std::string& CMsgDOTATeamInvite_GCRequestToInvitee::team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
  return team_tag_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(::std::string&& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
#endif
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}
inline ::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::mutable_team_tag() {
  set_has_team_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCRequestToInvitee::release_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
  clear_has_team_tag();
  return team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != NULL) {
    set_has_team_tag();
  } else {
    clear_has_team_tag();
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.team_tag)
}

// optional uint64 logo = 4;
inline bool CMsgDOTATeamInvite_GCRequestToInvitee::has_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_has_logo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_has_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATeamInvite_GCRequestToInvitee::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.logo)
  return logo_;
}
inline void CMsgDOTATeamInvite_GCRequestToInvitee::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCRequestToInvitee.logo)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_InviteeResponseToGC

// optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
inline bool CMsgDOTATeamInvite_InviteeResponseToGC::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_InviteeResponseToGC::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_InviteeResponseToGC::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_InviteeResponseToGC::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::dota::ETeamInviteResult CMsgDOTATeamInvite_InviteeResponseToGC::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC.result)
  return static_cast< ::proto::dota::ETeamInviteResult >(result_);
}
inline void CMsgDOTATeamInvite_InviteeResponseToGC::set_result(::proto::dota::ETeamInviteResult value) {
  assert(::proto::dota::ETeamInviteResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_InviteeResponseToGC.result)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_GCResponseToInviter

// optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
inline bool CMsgDOTATeamInvite_GCResponseToInviter::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::dota::ETeamInviteResult CMsgDOTATeamInvite_GCResponseToInviter::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.result)
  return static_cast< ::proto::dota::ETeamInviteResult >(result_);
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_result(::proto::dota::ETeamInviteResult value) {
  assert(::proto::dota::ETeamInviteResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.result)
}

// optional string invitee_name = 2;
inline bool CMsgDOTATeamInvite_GCResponseToInviter::has_invitee_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_has_invitee_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::clear_has_invitee_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::clear_invitee_name() {
  invitee_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invitee_name();
}
inline const ::std::string& CMsgDOTATeamInvite_GCResponseToInviter::invitee_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
  return invitee_name_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(const ::std::string& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(::std::string&& value) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
#endif
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_invitee_name(const char* value, size_t size) {
  set_has_invitee_name();
  invitee_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}
inline ::std::string* CMsgDOTATeamInvite_GCResponseToInviter::mutable_invitee_name() {
  set_has_invitee_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
  return invitee_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCResponseToInviter::release_invitee_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
  clear_has_invitee_name();
  return invitee_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCResponseToInviter::set_allocated_invitee_name(::std::string* invitee_name) {
  if (invitee_name != NULL) {
    set_has_invitee_name();
  } else {
    clear_has_invitee_name();
  }
  invitee_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCResponseToInviter.invitee_name)
}

// -------------------------------------------------------------------

// CMsgDOTATeamInvite_GCResponseToInvitee

// optional .proto.dota.ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
inline bool CMsgDOTATeamInvite_GCResponseToInvitee::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::dota::ETeamInviteResult CMsgDOTATeamInvite_GCResponseToInvitee::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.result)
  return static_cast< ::proto::dota::ETeamInviteResult >(result_);
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_result(::proto::dota::ETeamInviteResult value) {
  assert(::proto::dota::ETeamInviteResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.result)
}

// optional string team_name = 2;
inline bool CMsgDOTATeamInvite_GCResponseToInvitee::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTATeamInvite_GCResponseToInvitee::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
#if LANG_CXX11
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
#endif
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}
inline ::std::string* CMsgDOTATeamInvite_GCResponseToInvitee::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTATeamInvite_GCResponseToInvitee::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTATeamInvite_GCResponseToInvitee::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATeamInvite_GCResponseToInvitee.team_name)
}

// -------------------------------------------------------------------

// CMsgDOTAKickTeamMember

// optional uint32 account_id = 1;
inline bool CMsgDOTAKickTeamMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAKickTeamMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAKickTeamMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAKickTeamMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAKickTeamMember::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAKickTeamMember.account_id)
  return account_id_;
}
inline void CMsgDOTAKickTeamMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAKickTeamMember.account_id)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTAKickTeamMember::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAKickTeamMember::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAKickTeamMember::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAKickTeamMember::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAKickTeamMember::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAKickTeamMember.team_id)
  return team_id_;
}
inline void CMsgDOTAKickTeamMember::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAKickTeamMember.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTAKickTeamMemberResponse

// optional .proto.dota.CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTAKickTeamMemberResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAKickTeamMemberResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAKickTeamMemberResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAKickTeamMemberResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::dota::CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAKickTeamMemberResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAKickTeamMemberResponse_Result >(result_);
}
inline void CMsgDOTAKickTeamMemberResponse::set_result(::proto::dota::CMsgDOTAKickTeamMemberResponse_Result value) {
  assert(::proto::dota::CMsgDOTAKickTeamMemberResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAKickTeamMemberResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTATransferTeamAdmin

// optional uint32 new_admin_account_id = 1;
inline bool CMsgDOTATransferTeamAdmin::has_new_admin_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATransferTeamAdmin::set_has_new_admin_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATransferTeamAdmin::clear_has_new_admin_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATransferTeamAdmin::clear_new_admin_account_id() {
  new_admin_account_id_ = 0u;
  clear_has_new_admin_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTATransferTeamAdmin::new_admin_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATransferTeamAdmin.new_admin_account_id)
  return new_admin_account_id_;
}
inline void CMsgDOTATransferTeamAdmin::set_new_admin_account_id(::google::protobuf::uint32 value) {
  set_has_new_admin_account_id();
  new_admin_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATransferTeamAdmin.new_admin_account_id)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATransferTeamAdmin::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATransferTeamAdmin::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATransferTeamAdmin::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATransferTeamAdmin::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATransferTeamAdmin::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATransferTeamAdmin.team_id)
  return team_id_;
}
inline void CMsgDOTATransferTeamAdmin::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATransferTeamAdmin.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTATransferTeamAdminResponse

// optional .proto.dota.CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTATransferTeamAdminResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATransferTeamAdminResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATransferTeamAdminResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATransferTeamAdminResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::dota::CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATransferTeamAdminResponse.result)
  return static_cast< ::proto::dota::CMsgDOTATransferTeamAdminResponse_Result >(result_);
}
inline void CMsgDOTATransferTeamAdminResponse::set_result(::proto::dota::CMsgDOTATransferTeamAdminResponse_Result value) {
  assert(::proto::dota::CMsgDOTATransferTeamAdminResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATransferTeamAdminResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAChangeTeamSub

// optional uint32 team_id = 1;
inline bool CMsgDOTAChangeTeamSub::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChangeTeamSub::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChangeTeamSub::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChangeTeamSub::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChangeTeamSub::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChangeTeamSub.team_id)
  return team_id_;
}
inline void CMsgDOTAChangeTeamSub::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChangeTeamSub.team_id)
}

// optional uint32 member_account_id = 2;
inline bool CMsgDOTAChangeTeamSub::has_member_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChangeTeamSub::set_has_member_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChangeTeamSub::clear_has_member_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChangeTeamSub::clear_member_account_id() {
  member_account_id_ = 0u;
  clear_has_member_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChangeTeamSub::member_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChangeTeamSub.member_account_id)
  return member_account_id_;
}
inline void CMsgDOTAChangeTeamSub::set_member_account_id(::google::protobuf::uint32 value) {
  set_has_member_account_id();
  member_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChangeTeamSub.member_account_id)
}

// optional uint32 sub_account_id = 3;
inline bool CMsgDOTAChangeTeamSub::has_sub_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChangeTeamSub::set_has_sub_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAChangeTeamSub::clear_has_sub_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAChangeTeamSub::clear_sub_account_id() {
  sub_account_id_ = 0u;
  clear_has_sub_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChangeTeamSub::sub_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChangeTeamSub.sub_account_id)
  return sub_account_id_;
}
inline void CMsgDOTAChangeTeamSub::set_sub_account_id(::google::protobuf::uint32 value) {
  set_has_sub_account_id();
  sub_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChangeTeamSub.sub_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChangeTeamSubResponse

// optional .proto.dota.CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTAChangeTeamSubResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChangeTeamSubResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChangeTeamSubResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChangeTeamSubResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::dota::CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChangeTeamSubResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAChangeTeamSubResponse_Result >(result_);
}
inline void CMsgDOTAChangeTeamSubResponse::set_result(::proto::dota::CMsgDOTAChangeTeamSubResponse_Result value) {
  assert(::proto::dota::CMsgDOTAChangeTeamSubResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChangeTeamSubResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTALeaveTeam

// optional uint32 team_id = 1;
inline bool CMsgDOTALeaveTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeaveTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeaveTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeaveTeam::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTALeaveTeam::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALeaveTeam.team_id)
  return team_id_;
}
inline void CMsgDOTALeaveTeam::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALeaveTeam.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTALeaveTeamResponse

// optional .proto.dota.CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgDOTALeaveTeamResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeaveTeamResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeaveTeamResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeaveTeamResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::dota::CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALeaveTeamResponse.result)
  return static_cast< ::proto::dota::CMsgDOTALeaveTeamResponse_Result >(result_);
}
inline void CMsgDOTALeaveTeamResponse::set_result(::proto::dota::CMsgDOTALeaveTeamResponse_Result value) {
  assert(::proto::dota::CMsgDOTALeaveTeamResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALeaveTeamResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTABetaParticipation

// optional uint32 access_rights = 1;
inline bool CMsgDOTABetaParticipation::has_access_rights() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABetaParticipation::set_has_access_rights() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTABetaParticipation::clear_has_access_rights() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTABetaParticipation::clear_access_rights() {
  access_rights_ = 0u;
  clear_has_access_rights();
}
inline ::google::protobuf::uint32 CMsgDOTABetaParticipation::access_rights() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABetaParticipation.access_rights)
  return access_rights_;
}
inline void CMsgDOTABetaParticipation::set_access_rights(::google::protobuf::uint32 value) {
  set_has_access_rights();
  access_rights_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABetaParticipation.access_rights)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dota
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::dota::CMsgDOTACreateTeamResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTACreateTeamResponse_Result>() {
  return ::proto::dota::CMsgDOTACreateTeamResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result>() {
  return ::proto::dota::CMsgDOTAEditTeamDetailsResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTAKickTeamMemberResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTAKickTeamMemberResponse_Result>() {
  return ::proto::dota::CMsgDOTAKickTeamMemberResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTATransferTeamAdminResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTATransferTeamAdminResponse_Result>() {
  return ::proto::dota::CMsgDOTATransferTeamAdminResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTAChangeTeamSubResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTAChangeTeamSubResponse_Result>() {
  return ::proto::dota::CMsgDOTAChangeTeamSubResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgDOTALeaveTeamResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgDOTALeaveTeamResponse_Result>() {
  return ::proto::dota::CMsgDOTALeaveTeamResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ETeamInviteResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ETeamInviteResult>() {
  return ::proto::dota::ETeamInviteResult_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fclient_5fteam_2eproto__INCLUDED
