// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usermessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CUserMessageAchievementEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageAchievementEvent> {
} _CUserMessageAchievementEvent_default_instance_;
class CUserMessageCloseCaptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCloseCaption> {
} _CUserMessageCloseCaption_default_instance_;
class CUserMessageCloseCaptionDirectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCloseCaptionDirect> {
} _CUserMessageCloseCaptionDirect_default_instance_;
class CUserMessageCloseCaptionPlaceholderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCloseCaptionPlaceholder> {
} _CUserMessageCloseCaptionPlaceholder_default_instance_;
class CUserMessageCurrentTimescaleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCurrentTimescale> {
} _CUserMessageCurrentTimescale_default_instance_;
class CUserMessageDesiredTimescaleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageDesiredTimescale> {
} _CUserMessageDesiredTimescale_default_instance_;
class CUserMessageFadeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageFade> {
} _CUserMessageFade_default_instance_;
class CUserMessageShakeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageShake> {
} _CUserMessageShake_default_instance_;
class CUserMessageShakeDirDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageShakeDir> {
} _CUserMessageShakeDir_default_instance_;
class CUserMessageScreenTiltDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageScreenTilt> {
} _CUserMessageScreenTilt_default_instance_;
class CUserMessageSayTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageSayText> {
} _CUserMessageSayText_default_instance_;
class CUserMessageSayText2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageSayText2> {
} _CUserMessageSayText2_default_instance_;
class CUserMessageHudMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHudMsg> {
} _CUserMessageHudMsg_default_instance_;
class CUserMessageHudTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHudText> {
} _CUserMessageHudText_default_instance_;
class CUserMessageTextMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageTextMsg> {
} _CUserMessageTextMsg_default_instance_;
class CUserMessageGameTitleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageGameTitle> {
} _CUserMessageGameTitle_default_instance_;
class CUserMessageResetHUDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageResetHUD> {
} _CUserMessageResetHUD_default_instance_;
class CUserMessageSendAudioDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageSendAudio> {
} _CUserMessageSendAudio_default_instance_;
class CUserMessageAudioParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageAudioParameter> {
} _CUserMessageAudioParameter_default_instance_;
class CUserMessageVoiceMaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageVoiceMask> {
} _CUserMessageVoiceMask_default_instance_;
class CUserMessageRequestStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageRequestState> {
} _CUserMessageRequestState_default_instance_;
class CUserMessageHintTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHintText> {
} _CUserMessageHintText_default_instance_;
class CUserMessageKeyHintTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageKeyHintText> {
} _CUserMessageKeyHintText_default_instance_;
class CUserMessageVoiceSubtitleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageVoiceSubtitle> {
} _CUserMessageVoiceSubtitle_default_instance_;
class CUserMessageVGUIMenu_KeysDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageVGUIMenu_Keys> {
} _CUserMessageVGUIMenu_Keys_default_instance_;
class CUserMessageVGUIMenuDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageVGUIMenu> {
} _CUserMessageVGUIMenu_default_instance_;
class CUserMessageRumbleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageRumble> {
} _CUserMessageRumble_default_instance_;
class CUserMessageTrainDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageTrain> {
} _CUserMessageTrain_default_instance_;
class CUserMessageSayTextChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageSayTextChannel> {
} _CUserMessageSayTextChannel_default_instance_;
class CUserMessageColoredTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageColoredText> {
} _CUserMessageColoredText_default_instance_;
class CUserMessageItemPickupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageItemPickup> {
} _CUserMessageItemPickup_default_instance_;
class CUserMessageAmmoDeniedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageAmmoDenied> {
} _CUserMessageAmmoDenied_default_instance_;
class CUserMessageCrosshairAngleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCrosshairAngle> {
} _CUserMessageCrosshairAngle_default_instance_;
class CUserMessageShowMenuDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageShowMenu> {
} _CUserMessageShowMenu_default_instance_;
class CUserMessageCreditsMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCreditsMsg> {
} _CUserMessageCreditsMsg_default_instance_;
class CEntityMessagePlayJingleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessagePlayJingle> {
} _CEntityMessagePlayJingle_default_instance_;
class CEntityMessageScreenOverlayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessageScreenOverlay> {
} _CEntityMessageScreenOverlay_default_instance_;
class CEntityMessageRemoveAllDecalsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessageRemoveAllDecals> {
} _CEntityMessageRemoveAllDecals_default_instance_;
class CEntityMessagePropagateForceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessagePropagateForce> {
} _CEntityMessagePropagateForce_default_instance_;
class CEntityMessageDoSparkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessageDoSpark> {
} _CEntityMessageDoSpark_default_instance_;
class CEntityMessageFixAngleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessageFixAngle> {
} _CEntityMessageFixAngle_default_instance_;
class CUserMessageCameraTransition_Transition_DataDrivenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCameraTransition_Transition_DataDriven> {
} _CUserMessageCameraTransition_Transition_DataDriven_default_instance_;
class CUserMessageCameraTransitionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCameraTransition> {
} _CUserMessageCameraTransition_default_instance_;
class CUserMsg_ParticleManager_ReleaseParticleIndexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_ReleaseParticleIndex> {
} _CUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_;
class CUserMsg_ParticleManager_CreateParticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_CreateParticle> {
} _CUserMsg_ParticleManager_CreateParticle_default_instance_;
class CUserMsg_ParticleManager_DestroyParticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_DestroyParticle> {
} _CUserMsg_ParticleManager_DestroyParticle_default_instance_;
class CUserMsg_ParticleManager_DestroyParticleInvolvingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_DestroyParticleInvolving> {
} _CUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticle> {
} _CUserMsg_ParticleManager_UpdateParticle_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleFwdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleFwd> {
} _CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleOrientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleOrient> {
} _CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleFallbackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleFallback> {
} _CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleOffsetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleOffset> {
} _CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleEntDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleEnt> {
} _CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleSetFrozenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleSetFrozen> {
} _CUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleShouldDrawDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleShouldDraw> {
} _CUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_;
class CUserMsg_ParticleManager_ChangeControlPointAttachmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_ChangeControlPointAttachment> {
} _CUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_;
class CUserMsg_ParticleManagerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager> {
} _CUserMsg_ParticleManager_default_instance_;
class CUserMsg_HudErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_HudError> {
} _CUserMsg_HudError_default_instance_;
class CUserMsg_CustomGameEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_CustomGameEvent> {
} _CUserMsg_CustomGameEvent_default_instance_;
class CUserMessageHapticPulseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHapticPulse> {
} _CUserMessageHapticPulse_default_instance_;
class CUserMessageHapticPulsePreciseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHapticPulsePrecise> {
} _CUserMessageHapticPulsePrecise_default_instance_;
class CUserMessageAnimStateGraphStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageAnimStateGraphState> {
} _CUserMessageAnimStateGraphState_default_instance_;

namespace protobuf_usermessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[62];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAchievementEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAchievementEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAchievementEvent, achievement_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, from_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, ent_index_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, from_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, ent_index_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, from_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, ent_index_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCurrentTimescale, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCurrentTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCurrentTimescale, current_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, desired_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, minblendrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, blenddeltamultiplier_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, hold_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, color_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, amplitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, duration_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShakeDir, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShakeDir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShakeDir, shake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShakeDir, direction_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, ease_in_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, time_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, playerindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, chat_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, entityindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, messagename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, param1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, param2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, param3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, param4_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, color1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, color2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, fade_in_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, fade_out_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, hold_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, fx_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, message_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudText, message_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTextMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTextMsg, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTextMsg, param_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageGameTitle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageGameTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageResetHUD, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageResetHUD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSendAudio, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSendAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSendAudio, soundname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSendAudio, stop_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, parameter_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, name_hash_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, int_value_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, gamerules_masks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, ban_masks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, mod_enable_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRequestState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRequestState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHintText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHintText, message_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageKeyHintText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageKeyHintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageKeyHintText, messages_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, menu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, item_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu_Keys, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu_Keys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu_Keys, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu_Keys, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, keys_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, flags_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTrain, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTrain, position_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, text_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, context_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, context_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, context_team_id_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageItemPickup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageItemPickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageItemPickup, itemname_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAmmoDenied, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAmmoDenied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAmmoDenied, ammo_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCrosshairAngle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCrosshairAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCrosshairAngle, angcrosshair_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, validslots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, displaytime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, needmore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, menustring_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCreditsMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCreditsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCreditsMsg, rolltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCreditsMsg, logo_length_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePlayJingle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePlayJingle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageScreenOverlay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageScreenOverlay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageScreenOverlay, start_effect_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageRemoveAllDecals, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageRemoveAllDecals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageRemoveAllDecals, remove_decals_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePropagateForce, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePropagateForce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePropagateForce, impulse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, entityindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, beams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, thick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, duration_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageFixAngle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageFixAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageFixAngle, relative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageFixAngle, angle_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition_Transition_DataDriven, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition_Transition_DataDriven, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition_Transition_DataDriven, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition_Transition_DataDriven, attach_ent_index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, camera_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, params_data_driven_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ReleaseParticleIndex, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ReleaseParticleIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, particle_name_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, attach_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, entity_handle_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticle, destroy_immediately_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, destroy_immediately_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, entity_handle_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, position_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, forward_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, up_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, position_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, origin_offset_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, entity_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, attach_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, attachment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, fallback_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, include_wearables_),
  1,
  2,
  3,
  4,
  0,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleSetFrozen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleSetFrozen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleSetFrozen, set_frozen_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleShouldDraw, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleShouldDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleShouldDraw, should_draw_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_old_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, entity_handle_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, release_particle_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, create_particle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, destroy_particle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, destroy_particle_involving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_fwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_orient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_fallback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_ent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_should_draw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_set_frozen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, change_control_point_attachment_),
  13,
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudError, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudError, order_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CustomGameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CustomGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CustomGameEvent, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CustomGameEvent, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHapticPulse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHapticPulse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHapticPulse, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHapticPulse, pulse_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHapticPulsePrecise, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHapticPulsePrecise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHapticPulsePrecise, hand_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHapticPulsePrecise, pulse_duration_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAnimStateGraphState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAnimStateGraphState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAnimStateGraphState, entity_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAnimStateGraphState, data_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CUserMessageAchievementEvent)},
  { 7, 16, sizeof(CUserMessageCloseCaption)},
  { 20, 29, sizeof(CUserMessageCloseCaptionDirect)},
  { 33, 42, sizeof(CUserMessageCloseCaptionPlaceholder)},
  { 46, 52, sizeof(CUserMessageCurrentTimescale)},
  { 53, 62, sizeof(CUserMessageDesiredTimescale)},
  { 66, 75, sizeof(CUserMessageFade)},
  { 79, 88, sizeof(CUserMessageShake)},
  { 92, 99, sizeof(CUserMessageShakeDir)},
  { 101, 111, sizeof(CUserMessageScreenTilt)},
  { 116, 124, sizeof(CUserMessageSayText)},
  { 127, 139, sizeof(CUserMessageSayText2)},
  { 146, 162, sizeof(CUserMessageHudMsg)},
  { 173, 179, sizeof(CUserMessageHudText)},
  { 180, 187, sizeof(CUserMessageTextMsg)},
  { 189, 194, sizeof(CUserMessageGameTitle)},
  { 194, 199, sizeof(CUserMessageResetHUD)},
  { 199, 206, sizeof(CUserMessageSendAudio)},
  { 208, 217, sizeof(CUserMessageAudioParameter)},
  { 221, 229, sizeof(CUserMessageVoiceMask)},
  { 232, 237, sizeof(CUserMessageRequestState)},
  { 237, 243, sizeof(CUserMessageHintText)},
  { 244, 250, sizeof(CUserMessageKeyHintText)},
  { 251, 259, sizeof(CUserMessageVoiceSubtitle)},
  { 262, 269, sizeof(CUserMessageVGUIMenu_Keys)},
  { 271, 279, sizeof(CUserMessageVGUIMenu)},
  { 282, 290, sizeof(CUserMessageRumble)},
  { 293, 299, sizeof(CUserMessageTrain)},
  { 300, 308, sizeof(CUserMessageSayTextChannel)},
  { 311, 322, sizeof(CUserMessageColoredText)},
  { 328, 334, sizeof(CUserMessageItemPickup)},
  { 335, 341, sizeof(CUserMessageAmmoDenied)},
  { 342, 348, sizeof(CUserMessageCrosshairAngle)},
  { 349, 358, sizeof(CUserMessageShowMenu)},
  { 362, 369, sizeof(CUserMessageCreditsMsg)},
  { 371, 376, sizeof(CEntityMessagePlayJingle)},
  { 376, 382, sizeof(CEntityMessageScreenOverlay)},
  { 383, 389, sizeof(CEntityMessageRemoveAllDecals)},
  { 390, 396, sizeof(CEntityMessagePropagateForce)},
  { 397, 409, sizeof(CEntityMessageDoSpark)},
  { 416, 423, sizeof(CEntityMessageFixAngle)},
  { 425, 432, sizeof(CUserMessageCameraTransition_Transition_DataDriven)},
  { 434, 442, sizeof(CUserMessageCameraTransition)},
  { 445, 450, sizeof(CUserMsg_ParticleManager_ReleaseParticleIndex)},
  { 450, 458, sizeof(CUserMsg_ParticleManager_CreateParticle)},
  { 461, 467, sizeof(CUserMsg_ParticleManager_DestroyParticle)},
  { 468, 475, sizeof(CUserMsg_ParticleManager_DestroyParticleInvolving)},
  { 477, 484, sizeof(CUserMsg_ParticleManager_UpdateParticle)},
  { 486, 493, sizeof(CUserMsg_ParticleManager_UpdateParticleFwd)},
  { 495, 504, sizeof(CUserMsg_ParticleManager_UpdateParticleOrient)},
  { 508, 515, sizeof(CUserMsg_ParticleManager_UpdateParticleFallback)},
  { 517, 524, sizeof(CUserMsg_ParticleManager_UpdateParticleOffset)},
  { 526, 537, sizeof(CUserMsg_ParticleManager_UpdateParticleEnt)},
  { 543, 549, sizeof(CUserMsg_ParticleManager_UpdateParticleSetFrozen)},
  { 550, 556, sizeof(CUserMsg_ParticleManager_UpdateParticleShouldDraw)},
  { 557, 565, sizeof(CUserMsg_ParticleManager_ChangeControlPointAttachment)},
  { 568, 588, sizeof(CUserMsg_ParticleManager)},
  { 603, 609, sizeof(CUserMsg_HudError)},
  { 610, 617, sizeof(CUserMsg_CustomGameEvent)},
  { 619, 626, sizeof(CUserMessageHapticPulse)},
  { 628, 635, sizeof(CUserMessageHapticPulsePrecise)},
  { 637, 644, sizeof(CUserMessageAnimStateGraphState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageAchievementEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageCloseCaption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageCloseCaptionDirect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageCloseCaptionPlaceholder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageCurrentTimescale_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageDesiredTimescale_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageFade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageShake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageShakeDir_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageScreenTilt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageSayText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageSayText2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageHudMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageHudText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageTextMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageGameTitle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageResetHUD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageSendAudio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageAudioParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageVoiceMask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageRequestState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageHintText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageKeyHintText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageVoiceSubtitle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageVGUIMenu_Keys_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageVGUIMenu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageRumble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageTrain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageSayTextChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageColoredText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageItemPickup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageAmmoDenied_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageCrosshairAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageShowMenu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageCreditsMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CEntityMessagePlayJingle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CEntityMessageScreenOverlay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CEntityMessageRemoveAllDecals_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CEntityMessagePropagateForce_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CEntityMessageDoSpark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CEntityMessageFixAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageCameraTransition_Transition_DataDriven_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageCameraTransition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_CreateParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_DestroyParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_UpdateParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_ParticleManager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_HudError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMsg_CustomGameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageHapticPulse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageHapticPulsePrecise_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CUserMessageAnimStateGraphState_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "usermessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 62);
}

}  // namespace

void TableStruct::Shutdown() {
  _CUserMessageAchievementEvent_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CUserMessageCloseCaption_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CUserMessageCloseCaptionDirect_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CUserMessageCloseCaptionPlaceholder_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CUserMessageCurrentTimescale_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CUserMessageDesiredTimescale_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CUserMessageFade_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CUserMessageShake_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CUserMessageShakeDir_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CUserMessageScreenTilt_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CUserMessageSayText_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CUserMessageSayText2_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CUserMessageHudMsg_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CUserMessageHudText_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CUserMessageTextMsg_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CUserMessageGameTitle_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CUserMessageResetHUD_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CUserMessageSendAudio_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CUserMessageAudioParameter_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CUserMessageVoiceMask_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CUserMessageRequestState_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CUserMessageHintText_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CUserMessageKeyHintText_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CUserMessageVoiceSubtitle_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CUserMessageVGUIMenu_Keys_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CUserMessageVGUIMenu_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CUserMessageRumble_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CUserMessageTrain_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CUserMessageSayTextChannel_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CUserMessageColoredText_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CUserMessageItemPickup_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CUserMessageAmmoDenied_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CUserMessageCrosshairAngle_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CUserMessageShowMenu_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CUserMessageCreditsMsg_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CEntityMessagePlayJingle_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CEntityMessageScreenOverlay_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CEntityMessageRemoveAllDecals_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CEntityMessagePropagateForce_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CEntityMessageDoSpark_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CEntityMessageFixAngle_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CUserMessageCameraTransition_Transition_DataDriven_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CUserMessageCameraTransition_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CUserMsg_ParticleManager_CreateParticle_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CUserMsg_ParticleManager_DestroyParticle_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CUserMsg_ParticleManager_UpdateParticle_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CUserMsg_ParticleManager_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CUserMsg_HudError_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CUserMsg_CustomGameEvent_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CUserMessageHapticPulse_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CUserMessageHapticPulsePrecise_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CUserMessageAnimStateGraphState_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_networkbasetypes_2eproto::InitDefaults();
  _CUserMessageAchievementEvent_default_instance_.DefaultConstruct();
  _CUserMessageCloseCaption_default_instance_.DefaultConstruct();
  _CUserMessageCloseCaptionDirect_default_instance_.DefaultConstruct();
  _CUserMessageCloseCaptionPlaceholder_default_instance_.DefaultConstruct();
  _CUserMessageCurrentTimescale_default_instance_.DefaultConstruct();
  _CUserMessageDesiredTimescale_default_instance_.DefaultConstruct();
  _CUserMessageFade_default_instance_.DefaultConstruct();
  _CUserMessageShake_default_instance_.DefaultConstruct();
  _CUserMessageShakeDir_default_instance_.DefaultConstruct();
  _CUserMessageScreenTilt_default_instance_.DefaultConstruct();
  _CUserMessageSayText_default_instance_.DefaultConstruct();
  _CUserMessageSayText2_default_instance_.DefaultConstruct();
  _CUserMessageHudMsg_default_instance_.DefaultConstruct();
  _CUserMessageHudText_default_instance_.DefaultConstruct();
  _CUserMessageTextMsg_default_instance_.DefaultConstruct();
  _CUserMessageGameTitle_default_instance_.DefaultConstruct();
  _CUserMessageResetHUD_default_instance_.DefaultConstruct();
  _CUserMessageSendAudio_default_instance_.DefaultConstruct();
  _CUserMessageAudioParameter_default_instance_.DefaultConstruct();
  _CUserMessageVoiceMask_default_instance_.DefaultConstruct();
  _CUserMessageRequestState_default_instance_.DefaultConstruct();
  _CUserMessageHintText_default_instance_.DefaultConstruct();
  _CUserMessageKeyHintText_default_instance_.DefaultConstruct();
  _CUserMessageVoiceSubtitle_default_instance_.DefaultConstruct();
  _CUserMessageVGUIMenu_Keys_default_instance_.DefaultConstruct();
  _CUserMessageVGUIMenu_default_instance_.DefaultConstruct();
  _CUserMessageRumble_default_instance_.DefaultConstruct();
  _CUserMessageTrain_default_instance_.DefaultConstruct();
  _CUserMessageSayTextChannel_default_instance_.DefaultConstruct();
  _CUserMessageColoredText_default_instance_.DefaultConstruct();
  _CUserMessageItemPickup_default_instance_.DefaultConstruct();
  _CUserMessageAmmoDenied_default_instance_.DefaultConstruct();
  _CUserMessageCrosshairAngle_default_instance_.DefaultConstruct();
  _CUserMessageShowMenu_default_instance_.DefaultConstruct();
  _CUserMessageCreditsMsg_default_instance_.DefaultConstruct();
  _CEntityMessagePlayJingle_default_instance_.DefaultConstruct();
  _CEntityMessageScreenOverlay_default_instance_.DefaultConstruct();
  _CEntityMessageRemoveAllDecals_default_instance_.DefaultConstruct();
  _CEntityMessagePropagateForce_default_instance_.DefaultConstruct();
  _CEntityMessageDoSpark_default_instance_.DefaultConstruct();
  _CEntityMessageFixAngle_default_instance_.DefaultConstruct();
  _CUserMessageCameraTransition_Transition_DataDriven_default_instance_.DefaultConstruct();
  _CUserMessageCameraTransition_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_CreateParticle_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_DestroyParticle_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_UpdateParticle_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_.DefaultConstruct();
  _CUserMsg_ParticleManager_default_instance_.DefaultConstruct();
  _CUserMsg_HudError_default_instance_.DefaultConstruct();
  _CUserMsg_CustomGameEvent_default_instance_.DefaultConstruct();
  _CUserMessageHapticPulse_default_instance_.DefaultConstruct();
  _CUserMessageHapticPulsePrecise_default_instance_.DefaultConstruct();
  _CUserMessageAnimStateGraphState_default_instance_.DefaultConstruct();
  _CUserMessageShakeDir_default_instance_.get_mutable()->shake_ = const_cast< ::proto::dota::CUserMessageShake*>(
      ::proto::dota::CUserMessageShake::internal_default_instance());
  _CUserMessageShakeDir_default_instance_.get_mutable()->direction_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMessageScreenTilt_default_instance_.get_mutable()->angle_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMessageCrosshairAngle_default_instance_.get_mutable()->angcrosshair_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
  _CEntityMessagePropagateForce_default_instance_.get_mutable()->impulse_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CEntityMessageDoSpark_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CEntityMessageFixAngle_default_instance_.get_mutable()->angle_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
  _CUserMessageCameraTransition_default_instance_.get_mutable()->params_data_driven_ = const_cast< ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven*>(
      ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven::internal_default_instance());
  _CUserMsg_ParticleManager_UpdateParticle_default_instance_.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_.get_mutable()->forward_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.get_mutable()->forward_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.get_mutable()->right_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.get_mutable()->up_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_.get_mutable()->origin_offset_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_.get_mutable()->fallback_position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->release_particle_index_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex*>(
      ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->create_particle_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_CreateParticle*>(
      ::proto::dota::CUserMsg_ParticleManager_CreateParticle::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->destroy_particle_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_DestroyParticle*>(
      ::proto::dota::CUserMsg_ParticleManager_DestroyParticle::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->destroy_particle_involving_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving*>(
      ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticle*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticle::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_fwd_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_orient_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_fallback_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_offset_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_ent_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_should_draw_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_set_frozen_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen::internal_default_instance());
  _CUserMsg_ParticleManager_default_instance_.get_mutable()->change_control_point_attachment_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment*>(
      ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022usermessages.proto\022\nproto.dota\032\026networ"
      "kbasetypes.proto\"3\n\034CUserMessageAchievem"
      "entEvent\022\023\n\013achievement\030\001 \001(\r\"b\n\030CUserMe"
      "ssageCloseCaption\022\014\n\004hash\030\001 \001(\007\022\020\n\010durat"
      "ion\030\002 \001(\002\022\023\n\013from_player\030\003 \001(\010\022\021\n\tent_in"
      "dex\030\004 \001(\005\"h\n\036CUserMessageCloseCaptionDir"
      "ect\022\014\n\004hash\030\001 \001(\007\022\020\n\010duration\030\002 \001(\002\022\023\n\013f"
      "rom_player\030\003 \001(\010\022\021\n\tent_index\030\004 \001(\005\"o\n#C"
      "UserMessageCloseCaptionPlaceholder\022\016\n\006st"
      "ring\030\001 \001(\t\022\020\n\010duration\030\002 \001(\002\022\023\n\013from_pla"
      "yer\030\003 \001(\010\022\021\n\tent_index\030\004 \001(\005\"/\n\034CUserMes"
      "sageCurrentTimescale\022\017\n\007current\030\001 \001(\002\"y\n"
      "\034CUserMessageDesiredTimescale\022\017\n\007desired"
      "\030\001 \001(\002\022\024\n\014acceleration\030\002 \001(\002\022\024\n\014minblend"
      "rate\030\003 \001(\002\022\034\n\024blenddeltamultiplier\030\004 \001(\002"
      "\"U\n\020CUserMessageFade\022\020\n\010duration\030\001 \001(\r\022\021"
      "\n\thold_time\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022\r\n\005colo"
      "r\030\004 \001(\007\"\\\n\021CUserMessageShake\022\017\n\007command\030"
      "\001 \001(\r\022\021\n\tamplitude\030\002 \001(\002\022\021\n\tfrequency\030\003 "
      "\001(\002\022\020\n\010duration\030\004 \001(\002\"o\n\024CUserMessageSha"
      "keDir\022,\n\005shake\030\001 \001(\0132\035.proto.dota.CUserM"
      "essageShake\022)\n\tdirection\030\002 \001(\0132\026.proto.d"
      "ota.CMsgVector\"\205\001\n\026CUserMessageScreenTil"
      "t\022\017\n\007command\030\001 \001(\r\022\023\n\013ease_in_out\030\002 \001(\010\022"
      "%\n\005angle\030\003 \001(\0132\026.proto.dota.CMsgVector\022\020"
      "\n\010duration\030\004 \001(\002\022\014\n\004time\030\005 \001(\002\"F\n\023CUserM"
      "essageSayText\022\023\n\013playerindex\030\001 \001(\r\022\014\n\004te"
      "xt\030\002 \001(\t\022\014\n\004chat\030\003 \001(\010\"\216\001\n\024CUserMessageS"
      "ayText2\022\023\n\013entityindex\030\001 \001(\r\022\014\n\004chat\030\002 \001"
      "(\010\022\023\n\013messagename\030\003 \001(\t\022\016\n\006param1\030\004 \001(\t\022"
      "\016\n\006param2\030\005 \001(\t\022\016\n\006param3\030\006 \001(\t\022\016\n\006param"
      "4\030\007 \001(\t\"\315\001\n\022CUserMessageHudMsg\022\017\n\007channe"
      "l\030\001 \001(\r\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\016\n\006color1\030"
      "\004 \001(\007\022\016\n\006color2\030\005 \001(\007\022\016\n\006effect\030\006 \001(\r\022\024\n"
      "\014fade_in_time\030\007 \001(\002\022\025\n\rfade_out_time\030\010 \001"
      "(\002\022\021\n\thold_time\030\t \001(\002\022\017\n\007fx_time\030\n \001(\002\022\017"
      "\n\007message\030\013 \001(\t\"&\n\023CUserMessageHudText\022\017"
      "\n\007message\030\001 \001(\t\"2\n\023CUserMessageTextMsg\022\014"
      "\n\004dest\030\001 \001(\r\022\r\n\005param\030\002 \003(\t\"\027\n\025CUserMess"
      "ageGameTitle\"\026\n\024CUserMessageResetHUD\"8\n\025"
      "CUserMessageSendAudio\022\021\n\tsoundname\030\001 \001(\t"
      "\022\014\n\004stop\030\002 \001(\010\"n\n\032CUserMessageAudioParam"
      "eter\022\026\n\016parameter_type\030\001 \001(\r\022\026\n\016name_has"
      "h_code\030\002 \001(\r\022\r\n\005value\030\003 \001(\002\022\021\n\tint_value"
      "\030\004 \001(\r\"W\n\025CUserMessageVoiceMask\022\027\n\017gamer"
      "ules_masks\030\001 \003(\r\022\021\n\tban_masks\030\002 \003(\r\022\022\n\nm"
      "od_enable\030\003 \001(\010\"\032\n\030CUserMessageRequestSt"
      "ate\"\'\n\024CUserMessageHintText\022\017\n\007message\030\001"
      " \001(\t\"+\n\027CUserMessageKeyHintText\022\020\n\010messa"
      "ges\030\001 \003(\t\"G\n\031CUserMessageVoiceSubtitle\022\016"
      "\n\006player\030\001 \001(\005\022\014\n\004menu\030\002 \001(\005\022\014\n\004item\030\003 \001"
      "(\005\"\214\001\n\024CUserMessageVGUIMenu\022\014\n\004name\030\001 \001("
      "\t\022\014\n\004show\030\002 \001(\010\0223\n\004keys\030\003 \003(\0132%.proto.do"
      "ta.CUserMessageVGUIMenu.Keys\032#\n\004Keys\022\014\n\004"
      "name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"@\n\022CUserMessag"
      "eRumble\022\r\n\005index\030\001 \001(\005\022\014\n\004data\030\002 \001(\005\022\r\n\005"
      "flags\030\003 \001(\005\"%\n\021CUserMessageTrain\022\020\n\010posi"
      "tion\030\001 \001(\r\"K\n\032CUserMessageSayTextChannel"
      "\022\016\n\006player\030\001 \001(\005\022\017\n\007channel\030\002 \001(\005\022\014\n\004tex"
      "t\030\003 \001(\t\"\220\001\n\027CUserMessageColoredText\022\r\n\005c"
      "olor\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\022\r\n\005reset\030\003 \001(\010\022"
      "\031\n\021context_player_id\030\004 \001(\005\022\025\n\rcontext_va"
      "lue\030\005 \001(\005\022\027\n\017context_team_id\030\006 \001(\005\"*\n\026CU"
      "serMessageItemPickup\022\020\n\010itemname\030\001 \001(\t\")"
      "\n\026CUserMessageAmmoDenied\022\017\n\007ammo_id\030\001 \001("
      "\r\"J\n\032CUserMessageCrosshairAngle\022,\n\014angcr"
      "osshair\030\001 \001(\0132\026.proto.dota.CMsgQAngle\"e\n"
      "\024CUserMessageShowMenu\022\022\n\nvalidslots\030\001 \001("
      "\r\022\023\n\013displaytime\030\002 \001(\r\022\020\n\010needmore\030\003 \001(\010"
      "\022\022\n\nmenustring\030\004 \001(\t\"a\n\026CUserMessageCred"
      "itsMsg\0222\n\010rolltype\030\001 \001(\0162\025.proto.dota.eR"
      "ollType:\tROLL_NONE\022\023\n\013logo_length\030\002 \001(\002\""
      "\032\n\030CEntityMessagePlayJingle\"3\n\033CEntityMe"
      "ssageScreenOverlay\022\024\n\014start_effect\030\001 \001(\010"
      "\"6\n\035CEntityMessageRemoveAllDecals\022\025\n\rrem"
      "ove_decals\030\001 \001(\010\"G\n\034CEntityMessagePropag"
      "ateForce\022\'\n\007impulse\030\001 \001(\0132\026.proto.dota.C"
      "MsgVector\"\243\001\n\025CEntityMessageDoSpark\022&\n\006o"
      "rigin\030\001 \001(\0132\026.proto.dota.CMsgVector\022\023\n\013e"
      "ntityindex\030\002 \001(\r\022\016\n\006radius\030\003 \001(\002\022\r\n\005colo"
      "r\030\004 \001(\007\022\r\n\005beams\030\005 \001(\r\022\r\n\005thick\030\006 \001(\002\022\020\n"
      "\010duration\030\007 \001(\002\"Q\n\026CEntityMessageFixAngl"
      "e\022\020\n\010relative\030\001 \001(\010\022%\n\005angle\030\002 \001(\0132\026.pro"
      "to.dota.CMsgQAngle\"\346\001\n\034CUserMessageCamer"
      "aTransition\022\023\n\013camera_type\030\001 \001(\r\022\020\n\010dura"
      "tion\030\002 \001(\002\022Z\n\022params_data_driven\030\003 \001(\0132>"
      ".proto.dota.CUserMessageCameraTransition"
      ".Transition_DataDriven\032C\n\025Transition_Dat"
      "aDriven\022\020\n\010filename\030\001 \001(\t\022\030\n\020attach_ent_"
      "index\030\002 \001(\005\"\216\023\n\030CUserMsg_ParticleManager"
      "\022N\n\004type\030\001 \002(\0162\034.proto.dota.PARTICLE_MES"
      "SAGE:\"GAME_PARTICLE_MANAGER_EVENT_CREATE"
      "\022\r\n\005index\030\002 \002(\r\022Y\n\026release_particle_inde"
      "x\030\003 \001(\01329.proto.dota.CUserMsg_ParticleMa"
      "nager.ReleaseParticleIndex\022L\n\017create_par"
      "ticle\030\004 \001(\01323.proto.dota.CUserMsg_Partic"
      "leManager.CreateParticle\022N\n\020destroy_part"
      "icle\030\005 \001(\01324.proto.dota.CUserMsg_Particl"
      "eManager.DestroyParticle\022a\n\032destroy_part"
      "icle_involving\030\006 \001(\0132=.proto.dota.CUserM"
      "sg_ParticleManager.DestroyParticleInvolv"
      "ing\022L\n\017update_particle\030\007 \001(\01323.proto.dot"
      "a.CUserMsg_ParticleManager.UpdateParticl"
      "e\022S\n\023update_particle_fwd\030\010 \001(\01326.proto.d"
      "ota.CUserMsg_ParticleManager.UpdateParti"
      "cleFwd\022Y\n\026update_particle_orient\030\t \001(\01329"
      ".proto.dota.CUserMsg_ParticleManager.Upd"
      "ateParticleOrient\022]\n\030update_particle_fal"
      "lback\030\n \001(\0132;.proto.dota.CUserMsg_Partic"
      "leManager.UpdateParticleFallback\022Y\n\026upda"
      "te_particle_offset\030\013 \001(\01329.proto.dota.CU"
      "serMsg_ParticleManager.UpdateParticleOff"
      "set\022S\n\023update_particle_ent\030\014 \001(\01326.proto"
      ".dota.CUserMsg_ParticleManager.UpdatePar"
      "ticleEnt\022b\n\033update_particle_should_draw\030"
      "\016 \001(\0132=.proto.dota.CUserMsg_ParticleMana"
      "ger.UpdateParticleShouldDraw\022`\n\032update_p"
      "article_set_frozen\030\017 \001(\0132<.proto.dota.CU"
      "serMsg_ParticleManager.UpdateParticleSet"
      "Frozen\022j\n\037change_control_point_attachmen"
      "t\030\020 \001(\0132A.proto.dota.CUserMsg_ParticleMa"
      "nager.ChangeControlPointAttachment\032\026\n\024Re"
      "leaseParticleIndex\032Y\n\016CreateParticle\022\033\n\023"
      "particle_name_index\030\001 \001(\006\022\023\n\013attach_type"
      "\030\002 \001(\005\022\025\n\rentity_handle\030\003 \001(\005\032.\n\017Destroy"
      "Particle\022\033\n\023destroy_immediately\030\001 \001(\010\032N\n"
      "\030DestroyParticleInvolving\022\033\n\023destroy_imm"
      "ediately\030\001 \001(\010\022\025\n\rentity_handle\030\003 \001(\005\032Q\n"
      "\016UpdateParticle\022\025\n\rcontrol_point\030\001 \001(\005\022("
      "\n\010position\030\002 \001(\0132\026.proto.dota.CMsgVector"
      "\032S\n\021UpdateParticleFwd\022\025\n\rcontrol_point\030\001"
      " \001(\005\022\'\n\007forward\030\002 \001(\0132\026.proto.dota.CMsgV"
      "ector\032\241\001\n\024UpdateParticleOrient\022\025\n\rcontro"
      "l_point\030\001 \001(\005\022\'\n\007forward\030\002 \001(\0132\026.proto.d"
      "ota.CMsgVector\022%\n\005right\030\003 \001(\0132\026.proto.do"
      "ta.CMsgVector\022\"\n\002up\030\004 \001(\0132\026.proto.dota.C"
      "MsgVector\032Y\n\026UpdateParticleFallback\022\025\n\rc"
      "ontrol_point\030\001 \001(\005\022(\n\010position\030\002 \001(\0132\026.p"
      "roto.dota.CMsgVector\032\\\n\024UpdateParticleOf"
      "fset\022\025\n\rcontrol_point\030\001 \001(\005\022-\n\rorigin_of"
      "fset\030\002 \001(\0132\026.proto.dota.CMsgVector\032\270\001\n\021U"
      "pdateParticleEnt\022\025\n\rcontrol_point\030\001 \001(\005\022"
      "\025\n\rentity_handle\030\002 \001(\005\022\023\n\013attach_type\030\003 "
      "\001(\005\022\022\n\nattachment\030\004 \001(\005\0221\n\021fallback_posi"
      "tion\030\005 \001(\0132\026.proto.dota.CMsgVector\022\031\n\021in"
      "clude_wearables\030\006 \001(\010\032-\n\027UpdateParticleS"
      "etFrozen\022\022\n\nset_frozen\030\001 \001(\010\032/\n\030UpdatePa"
      "rticleShouldDraw\022\023\n\013should_draw\030\001 \001(\010\032e\n"
      "\034ChangeControlPointAttachment\022\026\n\016attachm"
      "ent_old\030\001 \001(\005\022\026\n\016attachment_new\030\002 \001(\005\022\025\n"
      "\rentity_handle\030\003 \001(\005\"%\n\021CUserMsg_HudErro"
      "r\022\020\n\010order_id\030\001 \001(\005\"<\n\030CUserMsg_CustomGa"
      "meEvent\022\022\n\nevent_name\030\001 \001(\t\022\014\n\004data\030\002 \001("
      "\014\"x\n\027CUserMessageHapticPulse\022\017\n\007hand_id\030"
      "\001 \001(\005\022L\n\npulse_type\030\002 \001(\0162\034.proto.dota.E"
      "HapticPulseType:\032VR_HAND_HAPTIC_PULSE_LI"
      "GHT\"I\n\036CUserMessageHapticPulsePrecise\022\017\n"
      "\007hand_id\030\001 \001(\005\022\026\n\016pulse_duration\030\002 \001(\005\"E"
      "\n\037CUserMessageAnimStateGraphState\022\024\n\014ent"
      "ity_index\030\001 \001(\005\022\014\n\004data\030\002 \001(\014*\361\006\n\021EBaseU"
      "serMessages\022\027\n\023UM_AchievementEvent\020e\022\023\n\017"
      "UM_CloseCaption\020f\022\031\n\025UM_CloseCaptionDire"
      "ct\020g\022\027\n\023UM_CurrentTimescale\020h\022\027\n\023UM_Desi"
      "redTimescale\020i\022\013\n\007UM_Fade\020j\022\020\n\014UM_GameTi"
      "tle\020k\022\017\n\013UM_HintText\020m\022\r\n\tUM_HudMsg\020n\022\016\n"
      "\nUM_HudText\020o\022\022\n\016UM_KeyHintText\020p\022\022\n\016UM_"
      "ColoredText\020q\022\023\n\017UM_RequestState\020r\022\017\n\013UM"
      "_ResetHUD\020s\022\r\n\tUM_Rumble\020t\022\016\n\nUM_SayText"
      "\020u\022\017\n\013UM_SayText2\020v\022\025\n\021UM_SayTextChannel"
      "\020w\022\014\n\010UM_Shake\020x\022\017\n\013UM_ShakeDir\020y\022\016\n\nUM_"
      "TextMsg\020|\022\021\n\rUM_ScreenTilt\020}\022\014\n\010UM_Train"
      "\020~\022\017\n\013UM_VGUIMenu\020\177\022\021\n\014UM_VoiceMask\020\200\001\022\025"
      "\n\020UM_VoiceSubtitle\020\201\001\022\021\n\014UM_SendAudio\020\202\001"
      "\022\022\n\rUM_ItemPickup\020\203\001\022\022\n\rUM_AmmoDenied\020\204\001"
      "\022\026\n\021UM_CrosshairAngle\020\205\001\022\020\n\013UM_ShowMenu\020"
      "\206\001\022\022\n\rUM_CreditsMsg\020\207\001\022\037\n\032UM_CloseCaptio"
      "nPlaceholder\020\216\001\022\030\n\023UM_CameraTransition\020\217"
      "\001\022\026\n\021UM_AudioParameter\020\220\001\022\027\n\022UM_Particle"
      "Manager\020\221\001\022\020\n\013UM_HudError\020\222\001\022\027\n\022UM_Custo"
      "mGameEvent\020\224\001\022\027\n\022UM_HandHapticPulse\020\225\001\022\027"
      "\n\022UM_AnimGraphUpdate\020\226\001\022\036\n\031UM_HandHaptic"
      "PulsePrecise\020\227\001\022\020\n\013UM_MAX_BASE\020\310\001*\224\001\n\023EB"
      "aseEntityMessages\022\022\n\rEM_PlayJingle\020\210\001\022\025\n"
      "\020EM_ScreenOverlay\020\211\001\022\027\n\022EM_RemoveAllDeca"
      "ls\020\212\001\022\026\n\021EM_PropagateForce\020\213\001\022\017\n\nEM_DoSp"
      "ark\020\214\001\022\020\n\013EM_FixAngle\020\215\001*o\n\teRollType\022\026\n"
      "\tROLL_NONE\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nROLL_STATS\020\000\022\020\n"
      "\014ROLL_CREDITS\020\001\022\027\n\023ROLL_LATE_JOIN_LOGO\020\002"
      "\022\017\n\013ROLL_OUTTRO\020\003*\226\005\n\020PARTICLE_MESSAGE\022&"
      "\n\"GAME_PARTICLE_MANAGER_EVENT_CREATE\020\000\022&"
      "\n\"GAME_PARTICLE_MANAGER_EVENT_UPDATE\020\001\022."
      "\n*GAME_PARTICLE_MANAGER_EVENT_UPDATE_FOR"
      "WARD\020\002\0222\n.GAME_PARTICLE_MANAGER_EVENT_UP"
      "DATE_ORIENTATION\020\003\022/\n+GAME_PARTICLE_MANA"
      "GER_EVENT_UPDATE_FALLBACK\020\004\022*\n&GAME_PART"
      "ICLE_MANAGER_EVENT_UPDATE_ENT\020\005\022-\n)GAME_"
      "PARTICLE_MANAGER_EVENT_UPDATE_OFFSET\020\006\022\'"
      "\n#GAME_PARTICLE_MANAGER_EVENT_DESTROY\020\007\022"
      "1\n-GAME_PARTICLE_MANAGER_EVENT_DESTROY_I"
      "NVOLVING\020\010\022\'\n#GAME_PARTICLE_MANAGER_EVEN"
      "T_RELEASE\020\t\022\'\n#GAME_PARTICLE_MANAGER_EVE"
      "NT_LATENCY\020\n\022+\n\'GAME_PARTICLE_MANAGER_EV"
      "ENT_SHOULD_DRAW\020\013\022&\n\"GAME_PARTICLE_MANAG"
      "ER_EVENT_FROZEN\020\014\022\?\n;GAME_PARTICLE_MANAG"
      "ER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT"
      "\020\r*t\n\020EHapticPulseType\022\036\n\032VR_HAND_HAPTIC"
      "_PULSE_LIGHT\020\000\022\037\n\033VR_HAND_HAPTIC_PULSE_M"
      "EDIUM\020\001\022\037\n\033VR_HAND_HAPTIC_PULSE_STRONG\020\002"
      "B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "usermessages.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_networkbasetypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_usermessages_2eproto

const ::google::protobuf::EnumDescriptor* EBaseUserMessages_descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_enum_descriptors[0];
}
bool EBaseUserMessages_IsValid(int value) {
  switch (value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 148:
    case 149:
    case 150:
    case 151:
    case 200:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBaseEntityMessages_descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_enum_descriptors[1];
}
bool EBaseEntityMessages_IsValid(int value) {
  switch (value) {
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRollType_descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_enum_descriptors[2];
}
bool eRollType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PARTICLE_MESSAGE_descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_enum_descriptors[3];
}
bool PARTICLE_MESSAGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHapticPulseType_descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_enum_descriptors[4];
}
bool EHapticPulseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageAchievementEvent::kAchievementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageAchievementEvent::CUserMessageAchievementEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageAchievementEvent)
}
CUserMessageAchievementEvent::CUserMessageAchievementEvent(const CUserMessageAchievementEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  achievement_ = from.achievement_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageAchievementEvent)
}

void CUserMessageAchievementEvent::SharedCtor() {
  _cached_size_ = 0;
  achievement_ = 0u;
}

CUserMessageAchievementEvent::~CUserMessageAchievementEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageAchievementEvent)
  SharedDtor();
}

void CUserMessageAchievementEvent::SharedDtor() {
}

void CUserMessageAchievementEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageAchievementEvent::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageAchievementEvent& CUserMessageAchievementEvent::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageAchievementEvent* CUserMessageAchievementEvent::New(::google::protobuf::Arena* arena) const {
  CUserMessageAchievementEvent* n = new CUserMessageAchievementEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageAchievementEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageAchievementEvent)
  achievement_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageAchievementEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageAchievementEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_achievement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageAchievementEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageAchievementEvent)
  return false;
#undef DO_
}

void CUserMessageAchievementEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageAchievementEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageAchievementEvent)
}

::google::protobuf::uint8* CUserMessageAchievementEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageAchievementEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageAchievementEvent)
  return target;
}

size_t CUserMessageAchievementEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageAchievementEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 achievement = 1;
  if (has_achievement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->achievement());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageAchievementEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageAchievementEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAchievementEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageAchievementEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageAchievementEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageAchievementEvent)
    MergeFrom(*source);
  }
}

void CUserMessageAchievementEvent::MergeFrom(const CUserMessageAchievementEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageAchievementEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_achievement()) {
    set_achievement(from.achievement());
  }
}

void CUserMessageAchievementEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageAchievementEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAchievementEvent::CopyFrom(const CUserMessageAchievementEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageAchievementEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAchievementEvent::IsInitialized() const {
  return true;
}

void CUserMessageAchievementEvent::Swap(CUserMessageAchievementEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageAchievementEvent::InternalSwap(CUserMessageAchievementEvent* other) {
  std::swap(achievement_, other->achievement_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageAchievementEvent::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageAchievementEvent

// optional uint32 achievement = 1;
bool CUserMessageAchievementEvent::has_achievement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageAchievementEvent::set_has_achievement() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageAchievementEvent::clear_has_achievement() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageAchievementEvent::clear_achievement() {
  achievement_ = 0u;
  clear_has_achievement();
}
::google::protobuf::uint32 CUserMessageAchievementEvent::achievement() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageAchievementEvent.achievement)
  return achievement_;
}
void CUserMessageAchievementEvent::set_achievement(::google::protobuf::uint32 value) {
  set_has_achievement();
  achievement_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageAchievementEvent.achievement)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCloseCaption::kHashFieldNumber;
const int CUserMessageCloseCaption::kDurationFieldNumber;
const int CUserMessageCloseCaption::kFromPlayerFieldNumber;
const int CUserMessageCloseCaption::kEntIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCloseCaption::CUserMessageCloseCaption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCloseCaption)
}
CUserMessageCloseCaption::CUserMessageCloseCaption(const CUserMessageCloseCaption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_) + sizeof(ent_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCloseCaption)
}

void CUserMessageCloseCaption::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hash_, 0, reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_) + sizeof(ent_index_));
}

CUserMessageCloseCaption::~CUserMessageCloseCaption() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCloseCaption)
  SharedDtor();
}

void CUserMessageCloseCaption::SharedDtor() {
}

void CUserMessageCloseCaption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCloseCaption::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageCloseCaption& CUserMessageCloseCaption::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageCloseCaption* CUserMessageCloseCaption::New(::google::protobuf::Arena* arena) const {
  CUserMessageCloseCaption* n = new CUserMessageCloseCaption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageCloseCaption::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCloseCaption)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&hash_, 0, reinterpret_cast<char*>(&ent_index_) -
      reinterpret_cast<char*>(&hash_) + sizeof(ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageCloseCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCloseCaption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_from_player();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ent_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCloseCaption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCloseCaption)
  return false;
#undef DO_
}

void CUserMessageCloseCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCloseCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->hash(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCloseCaption)
}

::google::protobuf::uint8* CUserMessageCloseCaption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCloseCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->hash(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCloseCaption)
  return target;
}

size_t CUserMessageCloseCaption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCloseCaption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed32 hash = 1;
    if (has_hash()) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (has_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCloseCaption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCloseCaption)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCloseCaption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageCloseCaption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCloseCaption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCloseCaption)
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaption::MergeFrom(const CUserMessageCloseCaption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCloseCaption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_index_ = from.ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCloseCaption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCloseCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaption::CopyFrom(const CUserMessageCloseCaption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCloseCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaption::IsInitialized() const {
  return true;
}

void CUserMessageCloseCaption::Swap(CUserMessageCloseCaption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCloseCaption::InternalSwap(CUserMessageCloseCaption* other) {
  std::swap(hash_, other->hash_);
  std::swap(duration_, other->duration_);
  std::swap(from_player_, other->from_player_);
  std::swap(ent_index_, other->ent_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageCloseCaption::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageCloseCaption

// optional fixed32 hash = 1;
bool CUserMessageCloseCaption::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageCloseCaption::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageCloseCaption::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageCloseCaption::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
::google::protobuf::uint32 CUserMessageCloseCaption::hash() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaption.hash)
  return hash_;
}
void CUserMessageCloseCaption::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaption.hash)
}

// optional float duration = 2;
bool CUserMessageCloseCaption::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageCloseCaption::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageCloseCaption::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageCloseCaption::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CUserMessageCloseCaption::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaption.duration)
  return duration_;
}
void CUserMessageCloseCaption::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaption.duration)
}

// optional bool from_player = 3;
bool CUserMessageCloseCaption::has_from_player() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageCloseCaption::set_has_from_player() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageCloseCaption::clear_has_from_player() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageCloseCaption::clear_from_player() {
  from_player_ = false;
  clear_has_from_player();
}
bool CUserMessageCloseCaption::from_player() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaption.from_player)
  return from_player_;
}
void CUserMessageCloseCaption::set_from_player(bool value) {
  set_has_from_player();
  from_player_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaption.from_player)
}

// optional int32 ent_index = 4;
bool CUserMessageCloseCaption::has_ent_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageCloseCaption::set_has_ent_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageCloseCaption::clear_has_ent_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageCloseCaption::clear_ent_index() {
  ent_index_ = 0;
  clear_has_ent_index();
}
::google::protobuf::int32 CUserMessageCloseCaption::ent_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaption.ent_index)
  return ent_index_;
}
void CUserMessageCloseCaption::set_ent_index(::google::protobuf::int32 value) {
  set_has_ent_index();
  ent_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaption.ent_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCloseCaptionDirect::kHashFieldNumber;
const int CUserMessageCloseCaptionDirect::kDurationFieldNumber;
const int CUserMessageCloseCaptionDirect::kFromPlayerFieldNumber;
const int CUserMessageCloseCaptionDirect::kEntIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCloseCaptionDirect::CUserMessageCloseCaptionDirect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCloseCaptionDirect)
}
CUserMessageCloseCaptionDirect::CUserMessageCloseCaptionDirect(const CUserMessageCloseCaptionDirect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_) + sizeof(ent_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCloseCaptionDirect)
}

void CUserMessageCloseCaptionDirect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hash_, 0, reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_) + sizeof(ent_index_));
}

CUserMessageCloseCaptionDirect::~CUserMessageCloseCaptionDirect() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCloseCaptionDirect)
  SharedDtor();
}

void CUserMessageCloseCaptionDirect::SharedDtor() {
}

void CUserMessageCloseCaptionDirect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCloseCaptionDirect::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageCloseCaptionDirect& CUserMessageCloseCaptionDirect::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageCloseCaptionDirect* CUserMessageCloseCaptionDirect::New(::google::protobuf::Arena* arena) const {
  CUserMessageCloseCaptionDirect* n = new CUserMessageCloseCaptionDirect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageCloseCaptionDirect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCloseCaptionDirect)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&hash_, 0, reinterpret_cast<char*>(&ent_index_) -
      reinterpret_cast<char*>(&hash_) + sizeof(ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageCloseCaptionDirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCloseCaptionDirect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_from_player();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ent_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCloseCaptionDirect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCloseCaptionDirect)
  return false;
#undef DO_
}

void CUserMessageCloseCaptionDirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCloseCaptionDirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->hash(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCloseCaptionDirect)
}

::google::protobuf::uint8* CUserMessageCloseCaptionDirect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCloseCaptionDirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->hash(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCloseCaptionDirect)
  return target;
}

size_t CUserMessageCloseCaptionDirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCloseCaptionDirect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed32 hash = 1;
    if (has_hash()) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (has_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCloseCaptionDirect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCloseCaptionDirect)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCloseCaptionDirect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageCloseCaptionDirect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCloseCaptionDirect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCloseCaptionDirect)
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaptionDirect::MergeFrom(const CUserMessageCloseCaptionDirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCloseCaptionDirect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_index_ = from.ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCloseCaptionDirect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCloseCaptionDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaptionDirect::CopyFrom(const CUserMessageCloseCaptionDirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCloseCaptionDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaptionDirect::IsInitialized() const {
  return true;
}

void CUserMessageCloseCaptionDirect::Swap(CUserMessageCloseCaptionDirect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCloseCaptionDirect::InternalSwap(CUserMessageCloseCaptionDirect* other) {
  std::swap(hash_, other->hash_);
  std::swap(duration_, other->duration_);
  std::swap(from_player_, other->from_player_);
  std::swap(ent_index_, other->ent_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageCloseCaptionDirect::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageCloseCaptionDirect

// optional fixed32 hash = 1;
bool CUserMessageCloseCaptionDirect::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageCloseCaptionDirect::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageCloseCaptionDirect::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageCloseCaptionDirect::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
::google::protobuf::uint32 CUserMessageCloseCaptionDirect::hash() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaptionDirect.hash)
  return hash_;
}
void CUserMessageCloseCaptionDirect::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaptionDirect.hash)
}

// optional float duration = 2;
bool CUserMessageCloseCaptionDirect::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageCloseCaptionDirect::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageCloseCaptionDirect::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageCloseCaptionDirect::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CUserMessageCloseCaptionDirect::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaptionDirect.duration)
  return duration_;
}
void CUserMessageCloseCaptionDirect::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaptionDirect.duration)
}

// optional bool from_player = 3;
bool CUserMessageCloseCaptionDirect::has_from_player() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageCloseCaptionDirect::set_has_from_player() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageCloseCaptionDirect::clear_has_from_player() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageCloseCaptionDirect::clear_from_player() {
  from_player_ = false;
  clear_has_from_player();
}
bool CUserMessageCloseCaptionDirect::from_player() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaptionDirect.from_player)
  return from_player_;
}
void CUserMessageCloseCaptionDirect::set_from_player(bool value) {
  set_has_from_player();
  from_player_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaptionDirect.from_player)
}

// optional int32 ent_index = 4;
bool CUserMessageCloseCaptionDirect::has_ent_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageCloseCaptionDirect::set_has_ent_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageCloseCaptionDirect::clear_has_ent_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageCloseCaptionDirect::clear_ent_index() {
  ent_index_ = 0;
  clear_has_ent_index();
}
::google::protobuf::int32 CUserMessageCloseCaptionDirect::ent_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaptionDirect.ent_index)
  return ent_index_;
}
void CUserMessageCloseCaptionDirect::set_ent_index(::google::protobuf::int32 value) {
  set_has_ent_index();
  ent_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaptionDirect.ent_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCloseCaptionPlaceholder::kStringFieldNumber;
const int CUserMessageCloseCaptionPlaceholder::kDurationFieldNumber;
const int CUserMessageCloseCaptionPlaceholder::kFromPlayerFieldNumber;
const int CUserMessageCloseCaptionPlaceholder::kEntIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCloseCaptionPlaceholder::CUserMessageCloseCaptionPlaceholder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCloseCaptionPlaceholder)
}
CUserMessageCloseCaptionPlaceholder::CUserMessageCloseCaptionPlaceholder(const CUserMessageCloseCaptionPlaceholder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string()) {
    string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_);
  }
  ::memcpy(&duration_, &from.duration_,
    reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&duration_) + sizeof(ent_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCloseCaptionPlaceholder)
}

void CUserMessageCloseCaptionPlaceholder::SharedCtor() {
  _cached_size_ = 0;
  string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&duration_) + sizeof(ent_index_));
}

CUserMessageCloseCaptionPlaceholder::~CUserMessageCloseCaptionPlaceholder() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCloseCaptionPlaceholder)
  SharedDtor();
}

void CUserMessageCloseCaptionPlaceholder::SharedDtor() {
  string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageCloseCaptionPlaceholder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCloseCaptionPlaceholder::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageCloseCaptionPlaceholder& CUserMessageCloseCaptionPlaceholder::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageCloseCaptionPlaceholder* CUserMessageCloseCaptionPlaceholder::New(::google::protobuf::Arena* arena) const {
  CUserMessageCloseCaptionPlaceholder* n = new CUserMessageCloseCaptionPlaceholder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageCloseCaptionPlaceholder::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  if (has_string()) {
    GOOGLE_DCHECK(!string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*string_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&duration_, 0, reinterpret_cast<char*>(&ent_index_) -
      reinterpret_cast<char*>(&duration_) + sizeof(ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageCloseCaptionPlaceholder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageCloseCaptionPlaceholder.string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_from_player();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ent_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCloseCaptionPlaceholder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCloseCaptionPlaceholder)
  return false;
#undef DO_
}

void CUserMessageCloseCaptionPlaceholder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageCloseCaptionPlaceholder.string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCloseCaptionPlaceholder)
}

::google::protobuf::uint8* CUserMessageCloseCaptionPlaceholder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageCloseCaptionPlaceholder.string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCloseCaptionPlaceholder)
  return target;
}

size_t CUserMessageCloseCaptionPlaceholder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string string = 1;
    if (has_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (has_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCloseCaptionPlaceholder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCloseCaptionPlaceholder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageCloseCaptionPlaceholder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCloseCaptionPlaceholder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCloseCaptionPlaceholder)
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaptionPlaceholder::MergeFrom(const CUserMessageCloseCaptionPlaceholder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_string();
      string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_index_ = from.ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCloseCaptionPlaceholder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaptionPlaceholder::CopyFrom(const CUserMessageCloseCaptionPlaceholder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaptionPlaceholder::IsInitialized() const {
  return true;
}

void CUserMessageCloseCaptionPlaceholder::Swap(CUserMessageCloseCaptionPlaceholder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCloseCaptionPlaceholder::InternalSwap(CUserMessageCloseCaptionPlaceholder* other) {
  string_.Swap(&other->string_);
  std::swap(duration_, other->duration_);
  std::swap(from_player_, other->from_player_);
  std::swap(ent_index_, other->ent_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageCloseCaptionPlaceholder::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageCloseCaptionPlaceholder

// optional string string = 1;
bool CUserMessageCloseCaptionPlaceholder::has_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageCloseCaptionPlaceholder::set_has_string() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageCloseCaptionPlaceholder::clear_has_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageCloseCaptionPlaceholder::clear_string() {
  string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string();
}
const ::std::string& CUserMessageCloseCaptionPlaceholder::string() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaptionPlaceholder.string)
  return string_.GetNoArena();
}
void CUserMessageCloseCaptionPlaceholder::set_string(const ::std::string& value) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaptionPlaceholder.string)
}
#if LANG_CXX11
void CUserMessageCloseCaptionPlaceholder::set_string(::std::string&& value) {
  set_has_string();
  string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageCloseCaptionPlaceholder.string)
}
#endif
void CUserMessageCloseCaptionPlaceholder::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageCloseCaptionPlaceholder.string)
}
void CUserMessageCloseCaptionPlaceholder::set_string(const char* value, size_t size) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageCloseCaptionPlaceholder.string)
}
::std::string* CUserMessageCloseCaptionPlaceholder::mutable_string() {
  set_has_string();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageCloseCaptionPlaceholder.string)
  return string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageCloseCaptionPlaceholder::release_string() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageCloseCaptionPlaceholder.string)
  clear_has_string();
  return string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageCloseCaptionPlaceholder::set_allocated_string(::std::string* string) {
  if (string != NULL) {
    set_has_string();
  } else {
    clear_has_string();
  }
  string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageCloseCaptionPlaceholder.string)
}

// optional float duration = 2;
bool CUserMessageCloseCaptionPlaceholder::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageCloseCaptionPlaceholder::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageCloseCaptionPlaceholder::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageCloseCaptionPlaceholder::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CUserMessageCloseCaptionPlaceholder::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaptionPlaceholder.duration)
  return duration_;
}
void CUserMessageCloseCaptionPlaceholder::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaptionPlaceholder.duration)
}

// optional bool from_player = 3;
bool CUserMessageCloseCaptionPlaceholder::has_from_player() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageCloseCaptionPlaceholder::set_has_from_player() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageCloseCaptionPlaceholder::clear_has_from_player() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageCloseCaptionPlaceholder::clear_from_player() {
  from_player_ = false;
  clear_has_from_player();
}
bool CUserMessageCloseCaptionPlaceholder::from_player() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaptionPlaceholder.from_player)
  return from_player_;
}
void CUserMessageCloseCaptionPlaceholder::set_from_player(bool value) {
  set_has_from_player();
  from_player_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaptionPlaceholder.from_player)
}

// optional int32 ent_index = 4;
bool CUserMessageCloseCaptionPlaceholder::has_ent_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageCloseCaptionPlaceholder::set_has_ent_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageCloseCaptionPlaceholder::clear_has_ent_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageCloseCaptionPlaceholder::clear_ent_index() {
  ent_index_ = 0;
  clear_has_ent_index();
}
::google::protobuf::int32 CUserMessageCloseCaptionPlaceholder::ent_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCloseCaptionPlaceholder.ent_index)
  return ent_index_;
}
void CUserMessageCloseCaptionPlaceholder::set_ent_index(::google::protobuf::int32 value) {
  set_has_ent_index();
  ent_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCloseCaptionPlaceholder.ent_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCurrentTimescale::kCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCurrentTimescale::CUserMessageCurrentTimescale()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCurrentTimescale)
}
CUserMessageCurrentTimescale::CUserMessageCurrentTimescale(const CUserMessageCurrentTimescale& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCurrentTimescale)
}

void CUserMessageCurrentTimescale::SharedCtor() {
  _cached_size_ = 0;
  current_ = 0;
}

CUserMessageCurrentTimescale::~CUserMessageCurrentTimescale() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCurrentTimescale)
  SharedDtor();
}

void CUserMessageCurrentTimescale::SharedDtor() {
}

void CUserMessageCurrentTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCurrentTimescale::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageCurrentTimescale& CUserMessageCurrentTimescale::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageCurrentTimescale* CUserMessageCurrentTimescale::New(::google::protobuf::Arena* arena) const {
  CUserMessageCurrentTimescale* n = new CUserMessageCurrentTimescale;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageCurrentTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCurrentTimescale)
  current_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageCurrentTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCurrentTimescale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float current = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCurrentTimescale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCurrentTimescale)
  return false;
#undef DO_
}

void CUserMessageCurrentTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCurrentTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float current = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCurrentTimescale)
}

::google::protobuf::uint8* CUserMessageCurrentTimescale::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCurrentTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCurrentTimescale)
  return target;
}

size_t CUserMessageCurrentTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCurrentTimescale)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float current = 1;
  if (has_current()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCurrentTimescale::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCurrentTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCurrentTimescale* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageCurrentTimescale>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCurrentTimescale)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCurrentTimescale)
    MergeFrom(*source);
  }
}

void CUserMessageCurrentTimescale::MergeFrom(const CUserMessageCurrentTimescale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCurrentTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_current()) {
    set_current(from.current());
  }
}

void CUserMessageCurrentTimescale::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCurrentTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCurrentTimescale::CopyFrom(const CUserMessageCurrentTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCurrentTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCurrentTimescale::IsInitialized() const {
  return true;
}

void CUserMessageCurrentTimescale::Swap(CUserMessageCurrentTimescale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCurrentTimescale::InternalSwap(CUserMessageCurrentTimescale* other) {
  std::swap(current_, other->current_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageCurrentTimescale::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageCurrentTimescale

// optional float current = 1;
bool CUserMessageCurrentTimescale::has_current() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageCurrentTimescale::set_has_current() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageCurrentTimescale::clear_has_current() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageCurrentTimescale::clear_current() {
  current_ = 0;
  clear_has_current();
}
float CUserMessageCurrentTimescale::current() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCurrentTimescale.current)
  return current_;
}
void CUserMessageCurrentTimescale::set_current(float value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCurrentTimescale.current)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageDesiredTimescale::kDesiredFieldNumber;
const int CUserMessageDesiredTimescale::kAccelerationFieldNumber;
const int CUserMessageDesiredTimescale::kMinblendrateFieldNumber;
const int CUserMessageDesiredTimescale::kBlenddeltamultiplierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageDesiredTimescale::CUserMessageDesiredTimescale()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageDesiredTimescale)
}
CUserMessageDesiredTimescale::CUserMessageDesiredTimescale(const CUserMessageDesiredTimescale& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&desired_, &from.desired_,
    reinterpret_cast<char*>(&blenddeltamultiplier_) -
    reinterpret_cast<char*>(&desired_) + sizeof(blenddeltamultiplier_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageDesiredTimescale)
}

void CUserMessageDesiredTimescale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&desired_, 0, reinterpret_cast<char*>(&blenddeltamultiplier_) -
    reinterpret_cast<char*>(&desired_) + sizeof(blenddeltamultiplier_));
}

CUserMessageDesiredTimescale::~CUserMessageDesiredTimescale() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageDesiredTimescale)
  SharedDtor();
}

void CUserMessageDesiredTimescale::SharedDtor() {
}

void CUserMessageDesiredTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageDesiredTimescale::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageDesiredTimescale& CUserMessageDesiredTimescale::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageDesiredTimescale* CUserMessageDesiredTimescale::New(::google::protobuf::Arena* arena) const {
  CUserMessageDesiredTimescale* n = new CUserMessageDesiredTimescale;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageDesiredTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageDesiredTimescale)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&desired_, 0, reinterpret_cast<char*>(&blenddeltamultiplier_) -
      reinterpret_cast<char*>(&desired_) + sizeof(blenddeltamultiplier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageDesiredTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageDesiredTimescale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float desired = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_desired();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float minblendrate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_minblendrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minblendrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float blenddeltamultiplier = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_blenddeltamultiplier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blenddeltamultiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageDesiredTimescale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageDesiredTimescale)
  return false;
#undef DO_
}

void CUserMessageDesiredTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageDesiredTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float desired = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->desired(), output);
  }

  // optional float acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->acceleration(), output);
  }

  // optional float minblendrate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minblendrate(), output);
  }

  // optional float blenddeltamultiplier = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->blenddeltamultiplier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageDesiredTimescale)
}

::google::protobuf::uint8* CUserMessageDesiredTimescale::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageDesiredTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float desired = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->desired(), target);
  }

  // optional float acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->acceleration(), target);
  }

  // optional float minblendrate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minblendrate(), target);
  }

  // optional float blenddeltamultiplier = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->blenddeltamultiplier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageDesiredTimescale)
  return target;
}

size_t CUserMessageDesiredTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageDesiredTimescale)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float desired = 1;
    if (has_desired()) {
      total_size += 1 + 4;
    }

    // optional float acceleration = 2;
    if (has_acceleration()) {
      total_size += 1 + 4;
    }

    // optional float minblendrate = 3;
    if (has_minblendrate()) {
      total_size += 1 + 4;
    }

    // optional float blenddeltamultiplier = 4;
    if (has_blenddeltamultiplier()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageDesiredTimescale::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageDesiredTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageDesiredTimescale* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageDesiredTimescale>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageDesiredTimescale)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageDesiredTimescale)
    MergeFrom(*source);
  }
}

void CUserMessageDesiredTimescale::MergeFrom(const CUserMessageDesiredTimescale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageDesiredTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      desired_ = from.desired_;
    }
    if (cached_has_bits & 0x00000002u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      minblendrate_ = from.minblendrate_;
    }
    if (cached_has_bits & 0x00000008u) {
      blenddeltamultiplier_ = from.blenddeltamultiplier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageDesiredTimescale::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageDesiredTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageDesiredTimescale::CopyFrom(const CUserMessageDesiredTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageDesiredTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageDesiredTimescale::IsInitialized() const {
  return true;
}

void CUserMessageDesiredTimescale::Swap(CUserMessageDesiredTimescale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageDesiredTimescale::InternalSwap(CUserMessageDesiredTimescale* other) {
  std::swap(desired_, other->desired_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(minblendrate_, other->minblendrate_);
  std::swap(blenddeltamultiplier_, other->blenddeltamultiplier_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageDesiredTimescale::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageDesiredTimescale

// optional float desired = 1;
bool CUserMessageDesiredTimescale::has_desired() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageDesiredTimescale::set_has_desired() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageDesiredTimescale::clear_has_desired() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageDesiredTimescale::clear_desired() {
  desired_ = 0;
  clear_has_desired();
}
float CUserMessageDesiredTimescale::desired() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageDesiredTimescale.desired)
  return desired_;
}
void CUserMessageDesiredTimescale::set_desired(float value) {
  set_has_desired();
  desired_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageDesiredTimescale.desired)
}

// optional float acceleration = 2;
bool CUserMessageDesiredTimescale::has_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageDesiredTimescale::set_has_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageDesiredTimescale::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageDesiredTimescale::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
float CUserMessageDesiredTimescale::acceleration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageDesiredTimescale.acceleration)
  return acceleration_;
}
void CUserMessageDesiredTimescale::set_acceleration(float value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageDesiredTimescale.acceleration)
}

// optional float minblendrate = 3;
bool CUserMessageDesiredTimescale::has_minblendrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageDesiredTimescale::set_has_minblendrate() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageDesiredTimescale::clear_has_minblendrate() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageDesiredTimescale::clear_minblendrate() {
  minblendrate_ = 0;
  clear_has_minblendrate();
}
float CUserMessageDesiredTimescale::minblendrate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageDesiredTimescale.minblendrate)
  return minblendrate_;
}
void CUserMessageDesiredTimescale::set_minblendrate(float value) {
  set_has_minblendrate();
  minblendrate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageDesiredTimescale.minblendrate)
}

// optional float blenddeltamultiplier = 4;
bool CUserMessageDesiredTimescale::has_blenddeltamultiplier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageDesiredTimescale::set_has_blenddeltamultiplier() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageDesiredTimescale::clear_has_blenddeltamultiplier() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageDesiredTimescale::clear_blenddeltamultiplier() {
  blenddeltamultiplier_ = 0;
  clear_has_blenddeltamultiplier();
}
float CUserMessageDesiredTimescale::blenddeltamultiplier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageDesiredTimescale.blenddeltamultiplier)
  return blenddeltamultiplier_;
}
void CUserMessageDesiredTimescale::set_blenddeltamultiplier(float value) {
  set_has_blenddeltamultiplier();
  blenddeltamultiplier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageDesiredTimescale.blenddeltamultiplier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageFade::kDurationFieldNumber;
const int CUserMessageFade::kHoldTimeFieldNumber;
const int CUserMessageFade::kFlagsFieldNumber;
const int CUserMessageFade::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageFade::CUserMessageFade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageFade)
}
CUserMessageFade::CUserMessageFade(const CUserMessageFade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&duration_) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageFade)
}

void CUserMessageFade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&duration_, 0, reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&duration_) + sizeof(color_));
}

CUserMessageFade::~CUserMessageFade() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageFade)
  SharedDtor();
}

void CUserMessageFade::SharedDtor() {
}

void CUserMessageFade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageFade::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageFade& CUserMessageFade::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageFade* CUserMessageFade::New(::google::protobuf::Arena* arena) const {
  CUserMessageFade* n = new CUserMessageFade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageFade::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageFade)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&duration_, 0, reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&duration_) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageFade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageFade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hold_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hold_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageFade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageFade)
  return false;
#undef DO_
}

void CUserMessageFade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageFade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duration(), output);
  }

  // optional uint32 hold_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hold_time(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageFade)
}

::google::protobuf::uint8* CUserMessageFade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageFade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duration(), target);
  }

  // optional uint32 hold_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hold_time(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageFade)
  return target;
}

size_t CUserMessageFade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageFade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint32 hold_time = 2;
    if (has_hold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_time());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional fixed32 color = 4;
    if (has_color()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageFade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageFade)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageFade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageFade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageFade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageFade)
    MergeFrom(*source);
  }
}

void CUserMessageFade::MergeFrom(const CUserMessageFade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageFade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      hold_time_ = from.hold_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageFade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageFade::CopyFrom(const CUserMessageFade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageFade::IsInitialized() const {
  return true;
}

void CUserMessageFade::Swap(CUserMessageFade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageFade::InternalSwap(CUserMessageFade* other) {
  std::swap(duration_, other->duration_);
  std::swap(hold_time_, other->hold_time_);
  std::swap(flags_, other->flags_);
  std::swap(color_, other->color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageFade::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageFade

// optional uint32 duration = 1;
bool CUserMessageFade::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageFade::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageFade::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageFade::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 CUserMessageFade::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageFade.duration)
  return duration_;
}
void CUserMessageFade::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageFade.duration)
}

// optional uint32 hold_time = 2;
bool CUserMessageFade::has_hold_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageFade::set_has_hold_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageFade::clear_has_hold_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageFade::clear_hold_time() {
  hold_time_ = 0u;
  clear_has_hold_time();
}
::google::protobuf::uint32 CUserMessageFade::hold_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageFade.hold_time)
  return hold_time_;
}
void CUserMessageFade::set_hold_time(::google::protobuf::uint32 value) {
  set_has_hold_time();
  hold_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageFade.hold_time)
}

// optional uint32 flags = 3;
bool CUserMessageFade::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageFade::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageFade::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageFade::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CUserMessageFade::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageFade.flags)
  return flags_;
}
void CUserMessageFade::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageFade.flags)
}

// optional fixed32 color = 4;
bool CUserMessageFade::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageFade::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageFade::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageFade::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CUserMessageFade::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageFade.color)
  return color_;
}
void CUserMessageFade::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageFade.color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageShake::kCommandFieldNumber;
const int CUserMessageShake::kAmplitudeFieldNumber;
const int CUserMessageShake::kFrequencyFieldNumber;
const int CUserMessageShake::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageShake::CUserMessageShake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageShake)
}
CUserMessageShake::CUserMessageShake(const CUserMessageShake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_, &from.command_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&command_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageShake)
}

void CUserMessageShake::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&command_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&command_) + sizeof(duration_));
}

CUserMessageShake::~CUserMessageShake() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageShake)
  SharedDtor();
}

void CUserMessageShake::SharedDtor() {
}

void CUserMessageShake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageShake::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageShake& CUserMessageShake::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageShake* CUserMessageShake::New(::google::protobuf::Arena* arena) const {
  CUserMessageShake* n = new CUserMessageShake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageShake::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageShake)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&command_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&command_) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageShake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageShake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_command();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float amplitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_amplitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageShake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageShake)
  return false;
#undef DO_
}

void CUserMessageShake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageShake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }

  // optional float amplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->amplitude(), output);
  }

  // optional float frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageShake)
}

::google::protobuf::uint8* CUserMessageShake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageShake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command(), target);
  }

  // optional float amplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->amplitude(), target);
  }

  // optional float frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageShake)
  return target;
}

size_t CUserMessageShake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageShake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }

    // optional float amplitude = 2;
    if (has_amplitude()) {
      total_size += 1 + 4;
    }

    // optional float frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 4;
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageShake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageShake)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageShake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageShake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageShake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageShake)
    MergeFrom(*source);
  }
}

void CUserMessageShake::MergeFrom(const CUserMessageShake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageShake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000002u) {
      amplitude_ = from.amplitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageShake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageShake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShake::CopyFrom(const CUserMessageShake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageShake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShake::IsInitialized() const {
  return true;
}

void CUserMessageShake::Swap(CUserMessageShake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageShake::InternalSwap(CUserMessageShake* other) {
  std::swap(command_, other->command_);
  std::swap(amplitude_, other->amplitude_);
  std::swap(frequency_, other->frequency_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageShake::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageShake

// optional uint32 command = 1;
bool CUserMessageShake::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageShake::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageShake::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageShake::clear_command() {
  command_ = 0u;
  clear_has_command();
}
::google::protobuf::uint32 CUserMessageShake::command() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShake.command)
  return command_;
}
void CUserMessageShake::set_command(::google::protobuf::uint32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageShake.command)
}

// optional float amplitude = 2;
bool CUserMessageShake::has_amplitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageShake::set_has_amplitude() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageShake::clear_has_amplitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageShake::clear_amplitude() {
  amplitude_ = 0;
  clear_has_amplitude();
}
float CUserMessageShake::amplitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShake.amplitude)
  return amplitude_;
}
void CUserMessageShake::set_amplitude(float value) {
  set_has_amplitude();
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageShake.amplitude)
}

// optional float frequency = 3;
bool CUserMessageShake::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageShake::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageShake::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageShake::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
float CUserMessageShake::frequency() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShake.frequency)
  return frequency_;
}
void CUserMessageShake::set_frequency(float value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageShake.frequency)
}

// optional float duration = 4;
bool CUserMessageShake::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageShake::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageShake::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageShake::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CUserMessageShake::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShake.duration)
  return duration_;
}
void CUserMessageShake::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageShake.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageShakeDir::kShakeFieldNumber;
const int CUserMessageShakeDir::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageShakeDir::CUserMessageShakeDir()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageShakeDir)
}
CUserMessageShakeDir::CUserMessageShakeDir(const CUserMessageShakeDir& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shake()) {
    shake_ = new ::proto::dota::CUserMessageShake(*from.shake_);
  } else {
    shake_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::proto::dota::CMsgVector(*from.direction_);
  } else {
    direction_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageShakeDir)
}

void CUserMessageShakeDir::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&shake_, 0, reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&shake_) + sizeof(direction_));
}

CUserMessageShakeDir::~CUserMessageShakeDir() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageShakeDir)
  SharedDtor();
}

void CUserMessageShakeDir::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shake_;
  }
  if (this != internal_default_instance()) {
    delete direction_;
  }
}

void CUserMessageShakeDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageShakeDir::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageShakeDir& CUserMessageShakeDir::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageShakeDir* CUserMessageShakeDir::New(::google::protobuf::Arena* arena) const {
  CUserMessageShakeDir* n = new CUserMessageShakeDir;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageShakeDir::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageShakeDir)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_shake()) {
      GOOGLE_DCHECK(shake_ != NULL);
      shake_->::proto::dota::CUserMessageShake::Clear();
    }
    if (has_direction()) {
      GOOGLE_DCHECK(direction_ != NULL);
      direction_->::proto::dota::CMsgVector::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageShakeDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageShakeDir)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CUserMessageShake shake = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageShakeDir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageShakeDir)
  return false;
#undef DO_
}

void CUserMessageShakeDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageShakeDir)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CUserMessageShake shake = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shake_, output);
  }

  // optional .proto.dota.CMsgVector direction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->direction_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageShakeDir)
}

::google::protobuf::uint8* CUserMessageShakeDir::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageShakeDir)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CUserMessageShake shake = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shake_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->direction_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageShakeDir)
  return target;
}

size_t CUserMessageShakeDir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageShakeDir)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CUserMessageShake shake = 1;
    if (has_shake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shake_);
    }

    // optional .proto.dota.CMsgVector direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageShakeDir::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageShakeDir)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageShakeDir* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageShakeDir>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageShakeDir)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageShakeDir)
    MergeFrom(*source);
  }
}

void CUserMessageShakeDir::MergeFrom(const CUserMessageShakeDir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageShakeDir)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shake()->::proto::dota::CUserMessageShake::MergeFrom(from.shake());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_direction()->::proto::dota::CMsgVector::MergeFrom(from.direction());
    }
  }
}

void CUserMessageShakeDir::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageShakeDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShakeDir::CopyFrom(const CUserMessageShakeDir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageShakeDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShakeDir::IsInitialized() const {
  return true;
}

void CUserMessageShakeDir::Swap(CUserMessageShakeDir* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageShakeDir::InternalSwap(CUserMessageShakeDir* other) {
  std::swap(shake_, other->shake_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageShakeDir::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageShakeDir

// optional .proto.dota.CUserMessageShake shake = 1;
bool CUserMessageShakeDir::has_shake() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageShakeDir::set_has_shake() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageShakeDir::clear_has_shake() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageShakeDir::clear_shake() {
  if (shake_ != NULL) shake_->::proto::dota::CUserMessageShake::Clear();
  clear_has_shake();
}
const ::proto::dota::CUserMessageShake& CUserMessageShakeDir::shake() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShakeDir.shake)
  return shake_ != NULL ? *shake_
                         : *::proto::dota::CUserMessageShake::internal_default_instance();
}
::proto::dota::CUserMessageShake* CUserMessageShakeDir::mutable_shake() {
  set_has_shake();
  if (shake_ == NULL) {
    shake_ = new ::proto::dota::CUserMessageShake;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageShakeDir.shake)
  return shake_;
}
::proto::dota::CUserMessageShake* CUserMessageShakeDir::release_shake() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageShakeDir.shake)
  clear_has_shake();
  ::proto::dota::CUserMessageShake* temp = shake_;
  shake_ = NULL;
  return temp;
}
void CUserMessageShakeDir::set_allocated_shake(::proto::dota::CUserMessageShake* shake) {
  delete shake_;
  shake_ = shake;
  if (shake) {
    set_has_shake();
  } else {
    clear_has_shake();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageShakeDir.shake)
}

// optional .proto.dota.CMsgVector direction = 2;
bool CUserMessageShakeDir::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageShakeDir::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageShakeDir::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageShakeDir::clear_direction() {
  if (direction_ != NULL) direction_->::proto::dota::CMsgVector::Clear();
  clear_has_direction();
}
const ::proto::dota::CMsgVector& CUserMessageShakeDir::direction() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShakeDir.direction)
  return direction_ != NULL ? *direction_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMessageShakeDir::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageShakeDir.direction)
  return direction_;
}
::proto::dota::CMsgVector* CUserMessageShakeDir::release_direction() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageShakeDir.direction)
  clear_has_direction();
  ::proto::dota::CMsgVector* temp = direction_;
  direction_ = NULL;
  return temp;
}
void CUserMessageShakeDir::set_allocated_direction(::proto::dota::CMsgVector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageShakeDir.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageScreenTilt::kCommandFieldNumber;
const int CUserMessageScreenTilt::kEaseInOutFieldNumber;
const int CUserMessageScreenTilt::kAngleFieldNumber;
const int CUserMessageScreenTilt::kDurationFieldNumber;
const int CUserMessageScreenTilt::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageScreenTilt::CUserMessageScreenTilt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageScreenTilt)
}
CUserMessageScreenTilt::CUserMessageScreenTilt(const CUserMessageScreenTilt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    angle_ = new ::proto::dota::CMsgVector(*from.angle_);
  } else {
    angle_ = NULL;
  }
  ::memcpy(&command_, &from.command_,
    reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&command_) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageScreenTilt)
}

void CUserMessageScreenTilt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&angle_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&angle_) + sizeof(time_));
}

CUserMessageScreenTilt::~CUserMessageScreenTilt() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageScreenTilt)
  SharedDtor();
}

void CUserMessageScreenTilt::SharedDtor() {
  if (this != internal_default_instance()) {
    delete angle_;
  }
}

void CUserMessageScreenTilt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageScreenTilt::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageScreenTilt& CUserMessageScreenTilt::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageScreenTilt* CUserMessageScreenTilt::New(::google::protobuf::Arena* arena) const {
  CUserMessageScreenTilt* n = new CUserMessageScreenTilt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageScreenTilt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageScreenTilt)
  if (has_angle()) {
    GOOGLE_DCHECK(angle_ != NULL);
    angle_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&command_, 0, reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&command_) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageScreenTilt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageScreenTilt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_command();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ease_in_out = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ease_in_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ease_in_out_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageScreenTilt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageScreenTilt)
  return false;
#undef DO_
}

void CUserMessageScreenTilt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageScreenTilt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }

  // optional bool ease_in_out = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ease_in_out(), output);
  }

  // optional .proto.dota.CMsgVector angle = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->angle_, output);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  // optional float time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageScreenTilt)
}

::google::protobuf::uint8* CUserMessageScreenTilt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageScreenTilt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command(), target);
  }

  // optional bool ease_in_out = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ease_in_out(), target);
  }

  // optional .proto.dota.CMsgVector angle = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->angle_, deterministic, target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  // optional float time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageScreenTilt)
  return target;
}

size_t CUserMessageScreenTilt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageScreenTilt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgVector angle = 3;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angle_);
    }

    // optional uint32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }

    // optional bool ease_in_out = 2;
    if (has_ease_in_out()) {
      total_size += 1 + 1;
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional float time = 5;
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageScreenTilt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageScreenTilt)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageScreenTilt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageScreenTilt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageScreenTilt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageScreenTilt)
    MergeFrom(*source);
  }
}

void CUserMessageScreenTilt::MergeFrom(const CUserMessageScreenTilt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageScreenTilt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_angle()->::proto::dota::CMsgVector::MergeFrom(from.angle());
    }
    if (cached_has_bits & 0x00000002u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000004u) {
      ease_in_out_ = from.ease_in_out_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageScreenTilt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageScreenTilt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageScreenTilt::CopyFrom(const CUserMessageScreenTilt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageScreenTilt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageScreenTilt::IsInitialized() const {
  return true;
}

void CUserMessageScreenTilt::Swap(CUserMessageScreenTilt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageScreenTilt::InternalSwap(CUserMessageScreenTilt* other) {
  std::swap(angle_, other->angle_);
  std::swap(command_, other->command_);
  std::swap(ease_in_out_, other->ease_in_out_);
  std::swap(duration_, other->duration_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageScreenTilt::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageScreenTilt

// optional uint32 command = 1;
bool CUserMessageScreenTilt::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageScreenTilt::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageScreenTilt::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageScreenTilt::clear_command() {
  command_ = 0u;
  clear_has_command();
}
::google::protobuf::uint32 CUserMessageScreenTilt::command() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageScreenTilt.command)
  return command_;
}
void CUserMessageScreenTilt::set_command(::google::protobuf::uint32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageScreenTilt.command)
}

// optional bool ease_in_out = 2;
bool CUserMessageScreenTilt::has_ease_in_out() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageScreenTilt::set_has_ease_in_out() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageScreenTilt::clear_has_ease_in_out() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageScreenTilt::clear_ease_in_out() {
  ease_in_out_ = false;
  clear_has_ease_in_out();
}
bool CUserMessageScreenTilt::ease_in_out() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageScreenTilt.ease_in_out)
  return ease_in_out_;
}
void CUserMessageScreenTilt::set_ease_in_out(bool value) {
  set_has_ease_in_out();
  ease_in_out_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageScreenTilt.ease_in_out)
}

// optional .proto.dota.CMsgVector angle = 3;
bool CUserMessageScreenTilt::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageScreenTilt::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageScreenTilt::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageScreenTilt::clear_angle() {
  if (angle_ != NULL) angle_->::proto::dota::CMsgVector::Clear();
  clear_has_angle();
}
const ::proto::dota::CMsgVector& CUserMessageScreenTilt::angle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageScreenTilt.angle)
  return angle_ != NULL ? *angle_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMessageScreenTilt::mutable_angle() {
  set_has_angle();
  if (angle_ == NULL) {
    angle_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageScreenTilt.angle)
  return angle_;
}
::proto::dota::CMsgVector* CUserMessageScreenTilt::release_angle() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageScreenTilt.angle)
  clear_has_angle();
  ::proto::dota::CMsgVector* temp = angle_;
  angle_ = NULL;
  return temp;
}
void CUserMessageScreenTilt::set_allocated_angle(::proto::dota::CMsgVector* angle) {
  delete angle_;
  angle_ = angle;
  if (angle) {
    set_has_angle();
  } else {
    clear_has_angle();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageScreenTilt.angle)
}

// optional float duration = 4;
bool CUserMessageScreenTilt::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageScreenTilt::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageScreenTilt::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageScreenTilt::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CUserMessageScreenTilt::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageScreenTilt.duration)
  return duration_;
}
void CUserMessageScreenTilt::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageScreenTilt.duration)
}

// optional float time = 5;
bool CUserMessageScreenTilt::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CUserMessageScreenTilt::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CUserMessageScreenTilt::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CUserMessageScreenTilt::clear_time() {
  time_ = 0;
  clear_has_time();
}
float CUserMessageScreenTilt::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageScreenTilt.time)
  return time_;
}
void CUserMessageScreenTilt::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageScreenTilt.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageSayText::kPlayerindexFieldNumber;
const int CUserMessageSayText::kTextFieldNumber;
const int CUserMessageSayText::kChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageSayText::CUserMessageSayText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageSayText)
}
CUserMessageSayText::CUserMessageSayText(const CUserMessageSayText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&playerindex_, &from.playerindex_,
    reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&playerindex_) + sizeof(chat_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageSayText)
}

void CUserMessageSayText::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerindex_, 0, reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&playerindex_) + sizeof(chat_));
}

CUserMessageSayText::~CUserMessageSayText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageSayText)
  SharedDtor();
}

void CUserMessageSayText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSayText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageSayText::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageSayText& CUserMessageSayText::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageSayText* CUserMessageSayText::New(::google::protobuf::Arena* arena) const {
  CUserMessageSayText* n = new CUserMessageSayText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageSayText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageSayText)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&playerindex_, 0, reinterpret_cast<char*>(&chat_) -
      reinterpret_cast<char*>(&playerindex_) + sizeof(chat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageSayText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageSayText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_playerindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageSayText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageSayText)
  return false;
#undef DO_
}

void CUserMessageSayText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageSayText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerindex = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerindex(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional bool chat = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->chat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageSayText)
}

::google::protobuf::uint8* CUserMessageSayText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageSayText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerindex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerindex(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional bool chat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->chat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageSayText)
  return target;
}

size_t CUserMessageSayText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageSayText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 playerindex = 1;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerindex());
    }

    // optional bool chat = 3;
    if (has_chat()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageSayText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageSayText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSayText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageSayText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageSayText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageSayText)
    MergeFrom(*source);
  }
}

void CUserMessageSayText::MergeFrom(const CUserMessageSayText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageSayText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      playerindex_ = from.playerindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_ = from.chat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSayText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageSayText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayText::CopyFrom(const CUserMessageSayText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageSayText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayText::IsInitialized() const {
  return true;
}

void CUserMessageSayText::Swap(CUserMessageSayText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageSayText::InternalSwap(CUserMessageSayText* other) {
  text_.Swap(&other->text_);
  std::swap(playerindex_, other->playerindex_);
  std::swap(chat_, other->chat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageSayText::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageSayText

// optional uint32 playerindex = 1;
bool CUserMessageSayText::has_playerindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageSayText::set_has_playerindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageSayText::clear_has_playerindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageSayText::clear_playerindex() {
  playerindex_ = 0u;
  clear_has_playerindex();
}
::google::protobuf::uint32 CUserMessageSayText::playerindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText.playerindex)
  return playerindex_;
}
void CUserMessageSayText::set_playerindex(::google::protobuf::uint32 value) {
  set_has_playerindex();
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText.playerindex)
}

// optional string text = 2;
bool CUserMessageSayText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageSayText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageSayText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageSayText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CUserMessageSayText::text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText.text)
  return text_.GetNoArena();
}
void CUserMessageSayText::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText.text)
}
#if LANG_CXX11
void CUserMessageSayText::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageSayText.text)
}
#endif
void CUserMessageSayText::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageSayText.text)
}
void CUserMessageSayText::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageSayText.text)
}
::std::string* CUserMessageSayText::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageSayText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageSayText::release_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageSayText.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageSayText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageSayText.text)
}

// optional bool chat = 3;
bool CUserMessageSayText::has_chat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageSayText::set_has_chat() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageSayText::clear_has_chat() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageSayText::clear_chat() {
  chat_ = false;
  clear_has_chat();
}
bool CUserMessageSayText::chat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText.chat)
  return chat_;
}
void CUserMessageSayText::set_chat(bool value) {
  set_has_chat();
  chat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText.chat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageSayText2::kEntityindexFieldNumber;
const int CUserMessageSayText2::kChatFieldNumber;
const int CUserMessageSayText2::kMessagenameFieldNumber;
const int CUserMessageSayText2::kParam1FieldNumber;
const int CUserMessageSayText2::kParam2FieldNumber;
const int CUserMessageSayText2::kParam3FieldNumber;
const int CUserMessageSayText2::kParam4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageSayText2::CUserMessageSayText2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageSayText2)
}
CUserMessageSayText2::CUserMessageSayText2(const CUserMessageSayText2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messagename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_messagename()) {
    messagename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagename_);
  }
  param1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param1()) {
    param1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param1_);
  }
  param2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param2()) {
    param2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param2_);
  }
  param3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param3()) {
    param3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param3_);
  }
  param4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param4()) {
    param4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param4_);
  }
  ::memcpy(&entityindex_, &from.entityindex_,
    reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&entityindex_) + sizeof(chat_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageSayText2)
}

void CUserMessageSayText2::SharedCtor() {
  _cached_size_ = 0;
  messagename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entityindex_, 0, reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&entityindex_) + sizeof(chat_));
}

CUserMessageSayText2::~CUserMessageSayText2() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageSayText2)
  SharedDtor();
}

void CUserMessageSayText2::SharedDtor() {
  messagename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSayText2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageSayText2::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageSayText2& CUserMessageSayText2::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageSayText2* CUserMessageSayText2::New(::google::protobuf::Arena* arena) const {
  CUserMessageSayText2* n = new CUserMessageSayText2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageSayText2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageSayText2)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_messagename()) {
      GOOGLE_DCHECK(!messagename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*messagename_.UnsafeRawStringPointer())->clear();
    }
    if (has_param1()) {
      GOOGLE_DCHECK(!param1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param1_.UnsafeRawStringPointer())->clear();
    }
    if (has_param2()) {
      GOOGLE_DCHECK(!param2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param2_.UnsafeRawStringPointer())->clear();
    }
    if (has_param3()) {
      GOOGLE_DCHECK(!param3_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param3_.UnsafeRawStringPointer())->clear();
    }
    if (has_param4()) {
      GOOGLE_DCHECK(!param4_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param4_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 96u) {
    ::memset(&entityindex_, 0, reinterpret_cast<char*>(&chat_) -
      reinterpret_cast<char*>(&entityindex_) + sizeof(chat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageSayText2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageSayText2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 entityindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entityindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entityindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string messagename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagename().data(), this->messagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.messagename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param1().data(), this->param1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.param1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param2().data(), this->param2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.param2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param3().data(), this->param3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.param3");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param4 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param4().data(), this->param4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.param4");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageSayText2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageSayText2)
  return false;
#undef DO_
}

void CUserMessageSayText2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageSayText2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entityindex = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entityindex(), output);
  }

  // optional bool chat = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chat(), output);
  }

  // optional string messagename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.messagename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagename(), output);
  }

  // optional string param1 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->param1(), output);
  }

  // optional string param2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->param2(), output);
  }

  // optional string param3 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->param3(), output);
  }

  // optional string param4 = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->param4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageSayText2)
}

::google::protobuf::uint8* CUserMessageSayText2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageSayText2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entityindex = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entityindex(), target);
  }

  // optional bool chat = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chat(), target);
  }

  // optional string messagename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.messagename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagename(), target);
  }

  // optional string param1 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->param1(), target);
  }

  // optional string param2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->param2(), target);
  }

  // optional string param3 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->param3(), target);
  }

  // optional string param4 = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->param4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageSayText2)
  return target;
}

size_t CUserMessageSayText2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageSayText2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string messagename = 3;
    if (has_messagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagename());
    }

    // optional string param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param1());
    }

    // optional string param2 = 5;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param2());
    }

    // optional string param3 = 6;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param3());
    }

    // optional string param4 = 7;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param4());
    }

    // optional uint32 entityindex = 1;
    if (has_entityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entityindex());
    }

    // optional bool chat = 2;
    if (has_chat()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageSayText2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageSayText2)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSayText2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageSayText2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageSayText2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageSayText2)
    MergeFrom(*source);
  }
}

void CUserMessageSayText2::MergeFrom(const CUserMessageSayText2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageSayText2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_messagename();
      messagename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_param1();
      param1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param1_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_param2();
      param2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param2_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_param3();
      param3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param3_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_param4();
      param4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param4_);
    }
    if (cached_has_bits & 0x00000020u) {
      entityindex_ = from.entityindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      chat_ = from.chat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSayText2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageSayText2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayText2::CopyFrom(const CUserMessageSayText2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageSayText2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayText2::IsInitialized() const {
  return true;
}

void CUserMessageSayText2::Swap(CUserMessageSayText2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageSayText2::InternalSwap(CUserMessageSayText2* other) {
  messagename_.Swap(&other->messagename_);
  param1_.Swap(&other->param1_);
  param2_.Swap(&other->param2_);
  param3_.Swap(&other->param3_);
  param4_.Swap(&other->param4_);
  std::swap(entityindex_, other->entityindex_);
  std::swap(chat_, other->chat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageSayText2::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageSayText2

// optional uint32 entityindex = 1;
bool CUserMessageSayText2::has_entityindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CUserMessageSayText2::set_has_entityindex() {
  _has_bits_[0] |= 0x00000020u;
}
void CUserMessageSayText2::clear_has_entityindex() {
  _has_bits_[0] &= ~0x00000020u;
}
void CUserMessageSayText2::clear_entityindex() {
  entityindex_ = 0u;
  clear_has_entityindex();
}
::google::protobuf::uint32 CUserMessageSayText2::entityindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText2.entityindex)
  return entityindex_;
}
void CUserMessageSayText2::set_entityindex(::google::protobuf::uint32 value) {
  set_has_entityindex();
  entityindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText2.entityindex)
}

// optional bool chat = 2;
bool CUserMessageSayText2::has_chat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CUserMessageSayText2::set_has_chat() {
  _has_bits_[0] |= 0x00000040u;
}
void CUserMessageSayText2::clear_has_chat() {
  _has_bits_[0] &= ~0x00000040u;
}
void CUserMessageSayText2::clear_chat() {
  chat_ = false;
  clear_has_chat();
}
bool CUserMessageSayText2::chat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText2.chat)
  return chat_;
}
void CUserMessageSayText2::set_chat(bool value) {
  set_has_chat();
  chat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText2.chat)
}

// optional string messagename = 3;
bool CUserMessageSayText2::has_messagename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageSayText2::set_has_messagename() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageSayText2::clear_has_messagename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageSayText2::clear_messagename() {
  messagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messagename();
}
const ::std::string& CUserMessageSayText2::messagename() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText2.messagename)
  return messagename_.GetNoArena();
}
void CUserMessageSayText2::set_messagename(const ::std::string& value) {
  set_has_messagename();
  messagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText2.messagename)
}
#if LANG_CXX11
void CUserMessageSayText2::set_messagename(::std::string&& value) {
  set_has_messagename();
  messagename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageSayText2.messagename)
}
#endif
void CUserMessageSayText2::set_messagename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_messagename();
  messagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageSayText2.messagename)
}
void CUserMessageSayText2::set_messagename(const char* value, size_t size) {
  set_has_messagename();
  messagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageSayText2.messagename)
}
::std::string* CUserMessageSayText2::mutable_messagename() {
  set_has_messagename();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageSayText2.messagename)
  return messagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageSayText2::release_messagename() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageSayText2.messagename)
  clear_has_messagename();
  return messagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageSayText2::set_allocated_messagename(::std::string* messagename) {
  if (messagename != NULL) {
    set_has_messagename();
  } else {
    clear_has_messagename();
  }
  messagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagename);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageSayText2.messagename)
}

// optional string param1 = 4;
bool CUserMessageSayText2::has_param1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageSayText2::set_has_param1() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageSayText2::clear_has_param1() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageSayText2::clear_param1() {
  param1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param1();
}
const ::std::string& CUserMessageSayText2::param1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText2.param1)
  return param1_.GetNoArena();
}
void CUserMessageSayText2::set_param1(const ::std::string& value) {
  set_has_param1();
  param1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText2.param1)
}
#if LANG_CXX11
void CUserMessageSayText2::set_param1(::std::string&& value) {
  set_has_param1();
  param1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageSayText2.param1)
}
#endif
void CUserMessageSayText2::set_param1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param1();
  param1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageSayText2.param1)
}
void CUserMessageSayText2::set_param1(const char* value, size_t size) {
  set_has_param1();
  param1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageSayText2.param1)
}
::std::string* CUserMessageSayText2::mutable_param1() {
  set_has_param1();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageSayText2.param1)
  return param1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageSayText2::release_param1() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageSayText2.param1)
  clear_has_param1();
  return param1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageSayText2::set_allocated_param1(::std::string* param1) {
  if (param1 != NULL) {
    set_has_param1();
  } else {
    clear_has_param1();
  }
  param1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param1);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageSayText2.param1)
}

// optional string param2 = 5;
bool CUserMessageSayText2::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageSayText2::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageSayText2::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageSayText2::clear_param2() {
  param2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param2();
}
const ::std::string& CUserMessageSayText2::param2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText2.param2)
  return param2_.GetNoArena();
}
void CUserMessageSayText2::set_param2(const ::std::string& value) {
  set_has_param2();
  param2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText2.param2)
}
#if LANG_CXX11
void CUserMessageSayText2::set_param2(::std::string&& value) {
  set_has_param2();
  param2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageSayText2.param2)
}
#endif
void CUserMessageSayText2::set_param2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param2();
  param2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageSayText2.param2)
}
void CUserMessageSayText2::set_param2(const char* value, size_t size) {
  set_has_param2();
  param2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageSayText2.param2)
}
::std::string* CUserMessageSayText2::mutable_param2() {
  set_has_param2();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageSayText2.param2)
  return param2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageSayText2::release_param2() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageSayText2.param2)
  clear_has_param2();
  return param2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageSayText2::set_allocated_param2(::std::string* param2) {
  if (param2 != NULL) {
    set_has_param2();
  } else {
    clear_has_param2();
  }
  param2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param2);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageSayText2.param2)
}

// optional string param3 = 6;
bool CUserMessageSayText2::has_param3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageSayText2::set_has_param3() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageSayText2::clear_has_param3() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageSayText2::clear_param3() {
  param3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param3();
}
const ::std::string& CUserMessageSayText2::param3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText2.param3)
  return param3_.GetNoArena();
}
void CUserMessageSayText2::set_param3(const ::std::string& value) {
  set_has_param3();
  param3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText2.param3)
}
#if LANG_CXX11
void CUserMessageSayText2::set_param3(::std::string&& value) {
  set_has_param3();
  param3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageSayText2.param3)
}
#endif
void CUserMessageSayText2::set_param3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param3();
  param3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageSayText2.param3)
}
void CUserMessageSayText2::set_param3(const char* value, size_t size) {
  set_has_param3();
  param3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageSayText2.param3)
}
::std::string* CUserMessageSayText2::mutable_param3() {
  set_has_param3();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageSayText2.param3)
  return param3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageSayText2::release_param3() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageSayText2.param3)
  clear_has_param3();
  return param3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageSayText2::set_allocated_param3(::std::string* param3) {
  if (param3 != NULL) {
    set_has_param3();
  } else {
    clear_has_param3();
  }
  param3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param3);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageSayText2.param3)
}

// optional string param4 = 7;
bool CUserMessageSayText2::has_param4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CUserMessageSayText2::set_has_param4() {
  _has_bits_[0] |= 0x00000010u;
}
void CUserMessageSayText2::clear_has_param4() {
  _has_bits_[0] &= ~0x00000010u;
}
void CUserMessageSayText2::clear_param4() {
  param4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param4();
}
const ::std::string& CUserMessageSayText2::param4() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayText2.param4)
  return param4_.GetNoArena();
}
void CUserMessageSayText2::set_param4(const ::std::string& value) {
  set_has_param4();
  param4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayText2.param4)
}
#if LANG_CXX11
void CUserMessageSayText2::set_param4(::std::string&& value) {
  set_has_param4();
  param4_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageSayText2.param4)
}
#endif
void CUserMessageSayText2::set_param4(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param4();
  param4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageSayText2.param4)
}
void CUserMessageSayText2::set_param4(const char* value, size_t size) {
  set_has_param4();
  param4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageSayText2.param4)
}
::std::string* CUserMessageSayText2::mutable_param4() {
  set_has_param4();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageSayText2.param4)
  return param4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageSayText2::release_param4() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageSayText2.param4)
  clear_has_param4();
  return param4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageSayText2::set_allocated_param4(::std::string* param4) {
  if (param4 != NULL) {
    set_has_param4();
  } else {
    clear_has_param4();
  }
  param4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param4);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageSayText2.param4)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHudMsg::kChannelFieldNumber;
const int CUserMessageHudMsg::kXFieldNumber;
const int CUserMessageHudMsg::kYFieldNumber;
const int CUserMessageHudMsg::kColor1FieldNumber;
const int CUserMessageHudMsg::kColor2FieldNumber;
const int CUserMessageHudMsg::kEffectFieldNumber;
const int CUserMessageHudMsg::kFadeInTimeFieldNumber;
const int CUserMessageHudMsg::kFadeOutTimeFieldNumber;
const int CUserMessageHudMsg::kHoldTimeFieldNumber;
const int CUserMessageHudMsg::kFxTimeFieldNumber;
const int CUserMessageHudMsg::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHudMsg::CUserMessageHudMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHudMsg)
}
CUserMessageHudMsg::CUserMessageHudMsg(const CUserMessageHudMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&channel_, &from.channel_,
    reinterpret_cast<char*>(&fx_time_) -
    reinterpret_cast<char*>(&channel_) + sizeof(fx_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHudMsg)
}

void CUserMessageHudMsg::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, reinterpret_cast<char*>(&fx_time_) -
    reinterpret_cast<char*>(&channel_) + sizeof(fx_time_));
}

CUserMessageHudMsg::~CUserMessageHudMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHudMsg)
  SharedDtor();
}

void CUserMessageHudMsg::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageHudMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageHudMsg::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageHudMsg& CUserMessageHudMsg::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageHudMsg* CUserMessageHudMsg::New(::google::protobuf::Arena* arena) const {
  CUserMessageHudMsg* n = new CUserMessageHudMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageHudMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHudMsg)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&channel_, 0, reinterpret_cast<char*>(&fade_in_time_) -
      reinterpret_cast<char*>(&channel_) + sizeof(fade_in_time_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&fade_out_time_, 0, reinterpret_cast<char*>(&fx_time_) -
      reinterpret_cast<char*>(&fade_out_time_) + sizeof(fx_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageHudMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHudMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_color1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_color2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 effect = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_effect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fade_in_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_fade_in_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fade_out_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_fade_out_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hold_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_hold_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hold_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fx_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_fx_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageHudMsg.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHudMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHudMsg)
  return false;
#undef DO_
}

void CUserMessageHudMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHudMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional fixed32 color1 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color1(), output);
  }

  // optional fixed32 color2 = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->color2(), output);
  }

  // optional uint32 effect = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->effect(), output);
  }

  // optional float fade_in_time = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fade_in_time(), output);
  }

  // optional float fade_out_time = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fade_out_time(), output);
  }

  // optional float hold_time = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->hold_time(), output);
  }

  // optional float fx_time = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fx_time(), output);
  }

  // optional string message = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHudMsg.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHudMsg)
}

::google::protobuf::uint8* CUserMessageHudMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHudMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional fixed32 color1 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color1(), target);
  }

  // optional fixed32 color2 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->color2(), target);
  }

  // optional uint32 effect = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->effect(), target);
  }

  // optional float fade_in_time = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fade_in_time(), target);
  }

  // optional float fade_out_time = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fade_out_time(), target);
  }

  // optional float hold_time = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->hold_time(), target);
  }

  // optional float fx_time = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fx_time(), target);
  }

  // optional string message = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHudMsg.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHudMsg)
  return target;
}

size_t CUserMessageHudMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHudMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string message = 11;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional fixed32 color1 = 4;
    if (has_color1()) {
      total_size += 1 + 4;
    }

    // optional fixed32 color2 = 5;
    if (has_color2()) {
      total_size += 1 + 4;
    }

    // optional uint32 effect = 6;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }

    // optional float fade_in_time = 7;
    if (has_fade_in_time()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float fade_out_time = 8;
    if (has_fade_out_time()) {
      total_size += 1 + 4;
    }

    // optional float hold_time = 9;
    if (has_hold_time()) {
      total_size += 1 + 4;
    }

    // optional float fx_time = 10;
    if (has_fx_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageHudMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHudMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHudMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageHudMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHudMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHudMsg)
    MergeFrom(*source);
  }
}

void CUserMessageHudMsg::MergeFrom(const CUserMessageHudMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHudMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      color1_ = from.color1_;
    }
    if (cached_has_bits & 0x00000020u) {
      color2_ = from.color2_;
    }
    if (cached_has_bits & 0x00000040u) {
      effect_ = from.effect_;
    }
    if (cached_has_bits & 0x00000080u) {
      fade_in_time_ = from.fade_in_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      fade_out_time_ = from.fade_out_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      hold_time_ = from.hold_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      fx_time_ = from.fx_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageHudMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHudMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHudMsg::CopyFrom(const CUserMessageHudMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHudMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHudMsg::IsInitialized() const {
  return true;
}

void CUserMessageHudMsg::Swap(CUserMessageHudMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHudMsg::InternalSwap(CUserMessageHudMsg* other) {
  message_.Swap(&other->message_);
  std::swap(channel_, other->channel_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(color1_, other->color1_);
  std::swap(color2_, other->color2_);
  std::swap(effect_, other->effect_);
  std::swap(fade_in_time_, other->fade_in_time_);
  std::swap(fade_out_time_, other->fade_out_time_);
  std::swap(hold_time_, other->hold_time_);
  std::swap(fx_time_, other->fx_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageHudMsg::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageHudMsg

// optional uint32 channel = 1;
bool CUserMessageHudMsg::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageHudMsg::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageHudMsg::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageHudMsg::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
::google::protobuf::uint32 CUserMessageHudMsg::channel() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.channel)
  return channel_;
}
void CUserMessageHudMsg::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.channel)
}

// optional float x = 2;
bool CUserMessageHudMsg::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageHudMsg::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageHudMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageHudMsg::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CUserMessageHudMsg::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.x)
  return x_;
}
void CUserMessageHudMsg::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.x)
}

// optional float y = 3;
bool CUserMessageHudMsg::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageHudMsg::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageHudMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageHudMsg::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CUserMessageHudMsg::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.y)
  return y_;
}
void CUserMessageHudMsg::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.y)
}

// optional fixed32 color1 = 4;
bool CUserMessageHudMsg::has_color1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CUserMessageHudMsg::set_has_color1() {
  _has_bits_[0] |= 0x00000010u;
}
void CUserMessageHudMsg::clear_has_color1() {
  _has_bits_[0] &= ~0x00000010u;
}
void CUserMessageHudMsg::clear_color1() {
  color1_ = 0u;
  clear_has_color1();
}
::google::protobuf::uint32 CUserMessageHudMsg::color1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.color1)
  return color1_;
}
void CUserMessageHudMsg::set_color1(::google::protobuf::uint32 value) {
  set_has_color1();
  color1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.color1)
}

// optional fixed32 color2 = 5;
bool CUserMessageHudMsg::has_color2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CUserMessageHudMsg::set_has_color2() {
  _has_bits_[0] |= 0x00000020u;
}
void CUserMessageHudMsg::clear_has_color2() {
  _has_bits_[0] &= ~0x00000020u;
}
void CUserMessageHudMsg::clear_color2() {
  color2_ = 0u;
  clear_has_color2();
}
::google::protobuf::uint32 CUserMessageHudMsg::color2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.color2)
  return color2_;
}
void CUserMessageHudMsg::set_color2(::google::protobuf::uint32 value) {
  set_has_color2();
  color2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.color2)
}

// optional uint32 effect = 6;
bool CUserMessageHudMsg::has_effect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CUserMessageHudMsg::set_has_effect() {
  _has_bits_[0] |= 0x00000040u;
}
void CUserMessageHudMsg::clear_has_effect() {
  _has_bits_[0] &= ~0x00000040u;
}
void CUserMessageHudMsg::clear_effect() {
  effect_ = 0u;
  clear_has_effect();
}
::google::protobuf::uint32 CUserMessageHudMsg::effect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.effect)
  return effect_;
}
void CUserMessageHudMsg::set_effect(::google::protobuf::uint32 value) {
  set_has_effect();
  effect_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.effect)
}

// optional float fade_in_time = 7;
bool CUserMessageHudMsg::has_fade_in_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CUserMessageHudMsg::set_has_fade_in_time() {
  _has_bits_[0] |= 0x00000080u;
}
void CUserMessageHudMsg::clear_has_fade_in_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void CUserMessageHudMsg::clear_fade_in_time() {
  fade_in_time_ = 0;
  clear_has_fade_in_time();
}
float CUserMessageHudMsg::fade_in_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.fade_in_time)
  return fade_in_time_;
}
void CUserMessageHudMsg::set_fade_in_time(float value) {
  set_has_fade_in_time();
  fade_in_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.fade_in_time)
}

// optional float fade_out_time = 8;
bool CUserMessageHudMsg::has_fade_out_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CUserMessageHudMsg::set_has_fade_out_time() {
  _has_bits_[0] |= 0x00000100u;
}
void CUserMessageHudMsg::clear_has_fade_out_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void CUserMessageHudMsg::clear_fade_out_time() {
  fade_out_time_ = 0;
  clear_has_fade_out_time();
}
float CUserMessageHudMsg::fade_out_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.fade_out_time)
  return fade_out_time_;
}
void CUserMessageHudMsg::set_fade_out_time(float value) {
  set_has_fade_out_time();
  fade_out_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.fade_out_time)
}

// optional float hold_time = 9;
bool CUserMessageHudMsg::has_hold_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CUserMessageHudMsg::set_has_hold_time() {
  _has_bits_[0] |= 0x00000200u;
}
void CUserMessageHudMsg::clear_has_hold_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void CUserMessageHudMsg::clear_hold_time() {
  hold_time_ = 0;
  clear_has_hold_time();
}
float CUserMessageHudMsg::hold_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.hold_time)
  return hold_time_;
}
void CUserMessageHudMsg::set_hold_time(float value) {
  set_has_hold_time();
  hold_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.hold_time)
}

// optional float fx_time = 10;
bool CUserMessageHudMsg::has_fx_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CUserMessageHudMsg::set_has_fx_time() {
  _has_bits_[0] |= 0x00000400u;
}
void CUserMessageHudMsg::clear_has_fx_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void CUserMessageHudMsg::clear_fx_time() {
  fx_time_ = 0;
  clear_has_fx_time();
}
float CUserMessageHudMsg::fx_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.fx_time)
  return fx_time_;
}
void CUserMessageHudMsg::set_fx_time(float value) {
  set_has_fx_time();
  fx_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.fx_time)
}

// optional string message = 11;
bool CUserMessageHudMsg::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageHudMsg::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageHudMsg::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageHudMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CUserMessageHudMsg::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudMsg.message)
  return message_.GetNoArena();
}
void CUserMessageHudMsg::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudMsg.message)
}
#if LANG_CXX11
void CUserMessageHudMsg::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageHudMsg.message)
}
#endif
void CUserMessageHudMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageHudMsg.message)
}
void CUserMessageHudMsg::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageHudMsg.message)
}
::std::string* CUserMessageHudMsg::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageHudMsg.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageHudMsg::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageHudMsg.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageHudMsg::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageHudMsg.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHudText::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHudText::CUserMessageHudText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHudText)
}
CUserMessageHudText::CUserMessageHudText(const CUserMessageHudText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHudText)
}

void CUserMessageHudText::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMessageHudText::~CUserMessageHudText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHudText)
  SharedDtor();
}

void CUserMessageHudText::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageHudText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageHudText::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageHudText& CUserMessageHudText::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageHudText* CUserMessageHudText::New(::google::protobuf::Arena* arena) const {
  CUserMessageHudText* n = new CUserMessageHudText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageHudText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHudText)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageHudText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHudText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageHudText.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHudText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHudText)
  return false;
#undef DO_
}

void CUserMessageHudText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHudText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHudText.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHudText)
}

::google::protobuf::uint8* CUserMessageHudText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHudText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHudText.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHudText)
  return target;
}

size_t CUserMessageHudText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHudText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageHudText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHudText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHudText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageHudText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHudText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHudText)
    MergeFrom(*source);
  }
}

void CUserMessageHudText::MergeFrom(const CUserMessageHudText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHudText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    set_has_message();
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CUserMessageHudText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHudText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHudText::CopyFrom(const CUserMessageHudText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHudText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHudText::IsInitialized() const {
  return true;
}

void CUserMessageHudText::Swap(CUserMessageHudText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHudText::InternalSwap(CUserMessageHudText* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageHudText::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageHudText

// optional string message = 1;
bool CUserMessageHudText::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageHudText::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageHudText::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageHudText::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CUserMessageHudText::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHudText.message)
  return message_.GetNoArena();
}
void CUserMessageHudText::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHudText.message)
}
#if LANG_CXX11
void CUserMessageHudText::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageHudText.message)
}
#endif
void CUserMessageHudText::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageHudText.message)
}
void CUserMessageHudText::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageHudText.message)
}
::std::string* CUserMessageHudText::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageHudText.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageHudText::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageHudText.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageHudText::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageHudText.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageTextMsg::kDestFieldNumber;
const int CUserMessageTextMsg::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageTextMsg::CUserMessageTextMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageTextMsg)
}
CUserMessageTextMsg::CUserMessageTextMsg(const CUserMessageTextMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_ = from.dest_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageTextMsg)
}

void CUserMessageTextMsg::SharedCtor() {
  _cached_size_ = 0;
  dest_ = 0u;
}

CUserMessageTextMsg::~CUserMessageTextMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageTextMsg)
  SharedDtor();
}

void CUserMessageTextMsg::SharedDtor() {
}

void CUserMessageTextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageTextMsg::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageTextMsg& CUserMessageTextMsg::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageTextMsg* CUserMessageTextMsg::New(::google::protobuf::Arena* arena) const {
  CUserMessageTextMsg* n = new CUserMessageTextMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageTextMsg)
  param_.Clear();
  dest_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageTextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageTextMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageTextMsg.param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageTextMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageTextMsg)
  return false;
#undef DO_
}

void CUserMessageTextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dest(), output);
  }

  // repeated string param = 2;
  for (int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageTextMsg.param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageTextMsg)
}

::google::protobuf::uint8* CUserMessageTextMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dest(), target);
  }

  // repeated string param = 2;
  for (int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageTextMsg.param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->param(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageTextMsg)
  return target;
}

size_t CUserMessageTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageTextMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string param = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->param_size());
  for (int i = 0, n = this->param_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  // optional uint32 dest = 1;
  if (has_dest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dest());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageTextMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageTextMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageTextMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageTextMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageTextMsg)
    MergeFrom(*source);
  }
}

void CUserMessageTextMsg::MergeFrom(const CUserMessageTextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  if (from.has_dest()) {
    set_dest(from.dest());
  }
}

void CUserMessageTextMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageTextMsg::CopyFrom(const CUserMessageTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageTextMsg::IsInitialized() const {
  return true;
}

void CUserMessageTextMsg::Swap(CUserMessageTextMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageTextMsg::InternalSwap(CUserMessageTextMsg* other) {
  param_.InternalSwap(&other->param_);
  std::swap(dest_, other->dest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageTextMsg::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageTextMsg

// optional uint32 dest = 1;
bool CUserMessageTextMsg::has_dest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageTextMsg::set_has_dest() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageTextMsg::clear_has_dest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageTextMsg::clear_dest() {
  dest_ = 0u;
  clear_has_dest();
}
::google::protobuf::uint32 CUserMessageTextMsg::dest() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageTextMsg.dest)
  return dest_;
}
void CUserMessageTextMsg::set_dest(::google::protobuf::uint32 value) {
  set_has_dest();
  dest_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageTextMsg.dest)
}

// repeated string param = 2;
int CUserMessageTextMsg::param_size() const {
  return param_.size();
}
void CUserMessageTextMsg::clear_param() {
  param_.Clear();
}
const ::std::string& CUserMessageTextMsg::param(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageTextMsg.param)
  return param_.Get(index);
}
::std::string* CUserMessageTextMsg::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageTextMsg.param)
  return param_.Mutable(index);
}
void CUserMessageTextMsg::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageTextMsg.param)
  param_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CUserMessageTextMsg::set_param(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageTextMsg.param)
  param_.Mutable(index)->assign(std::move(value));
}
#endif
void CUserMessageTextMsg::set_param(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageTextMsg.param)
}
void CUserMessageTextMsg::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageTextMsg.param)
}
::std::string* CUserMessageTextMsg::add_param() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CUserMessageTextMsg.param)
  return param_.Add();
}
void CUserMessageTextMsg::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CUserMessageTextMsg.param)
}
#if LANG_CXX11
void CUserMessageTextMsg::add_param(::std::string&& value) {
  param_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CUserMessageTextMsg.param)
}
#endif
void CUserMessageTextMsg::add_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CUserMessageTextMsg.param)
}
void CUserMessageTextMsg::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CUserMessageTextMsg.param)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CUserMessageTextMsg::param() const {
  // @@protoc_insertion_point(field_list:proto.dota.CUserMessageTextMsg.param)
  return param_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CUserMessageTextMsg::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CUserMessageTextMsg.param)
  return &param_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageGameTitle::CUserMessageGameTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageGameTitle)
}
CUserMessageGameTitle::CUserMessageGameTitle(const CUserMessageGameTitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageGameTitle)
}

void CUserMessageGameTitle::SharedCtor() {
  _cached_size_ = 0;
}

CUserMessageGameTitle::~CUserMessageGameTitle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageGameTitle)
  SharedDtor();
}

void CUserMessageGameTitle::SharedDtor() {
}

void CUserMessageGameTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageGameTitle::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageGameTitle& CUserMessageGameTitle::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageGameTitle* CUserMessageGameTitle::New(::google::protobuf::Arena* arena) const {
  CUserMessageGameTitle* n = new CUserMessageGameTitle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageGameTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageGameTitle)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageGameTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageGameTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageGameTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageGameTitle)
  return false;
#undef DO_
}

void CUserMessageGameTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageGameTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageGameTitle)
}

::google::protobuf::uint8* CUserMessageGameTitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageGameTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageGameTitle)
  return target;
}

size_t CUserMessageGameTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageGameTitle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageGameTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageGameTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageGameTitle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageGameTitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageGameTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageGameTitle)
    MergeFrom(*source);
  }
}

void CUserMessageGameTitle::MergeFrom(const CUserMessageGameTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageGameTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMessageGameTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageGameTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageGameTitle::CopyFrom(const CUserMessageGameTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageGameTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageGameTitle::IsInitialized() const {
  return true;
}

void CUserMessageGameTitle::Swap(CUserMessageGameTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageGameTitle::InternalSwap(CUserMessageGameTitle* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageGameTitle::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageGameTitle

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageResetHUD::CUserMessageResetHUD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageResetHUD)
}
CUserMessageResetHUD::CUserMessageResetHUD(const CUserMessageResetHUD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageResetHUD)
}

void CUserMessageResetHUD::SharedCtor() {
  _cached_size_ = 0;
}

CUserMessageResetHUD::~CUserMessageResetHUD() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageResetHUD)
  SharedDtor();
}

void CUserMessageResetHUD::SharedDtor() {
}

void CUserMessageResetHUD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageResetHUD::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageResetHUD& CUserMessageResetHUD::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageResetHUD* CUserMessageResetHUD::New(::google::protobuf::Arena* arena) const {
  CUserMessageResetHUD* n = new CUserMessageResetHUD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageResetHUD::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageResetHUD)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageResetHUD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageResetHUD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageResetHUD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageResetHUD)
  return false;
#undef DO_
}

void CUserMessageResetHUD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageResetHUD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageResetHUD)
}

::google::protobuf::uint8* CUserMessageResetHUD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageResetHUD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageResetHUD)
  return target;
}

size_t CUserMessageResetHUD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageResetHUD)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageResetHUD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageResetHUD)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageResetHUD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageResetHUD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageResetHUD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageResetHUD)
    MergeFrom(*source);
  }
}

void CUserMessageResetHUD::MergeFrom(const CUserMessageResetHUD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageResetHUD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMessageResetHUD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageResetHUD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageResetHUD::CopyFrom(const CUserMessageResetHUD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageResetHUD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageResetHUD::IsInitialized() const {
  return true;
}

void CUserMessageResetHUD::Swap(CUserMessageResetHUD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageResetHUD::InternalSwap(CUserMessageResetHUD* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageResetHUD::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageResetHUD

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageSendAudio::kSoundnameFieldNumber;
const int CUserMessageSendAudio::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageSendAudio::CUserMessageSendAudio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageSendAudio)
}
CUserMessageSendAudio::CUserMessageSendAudio(const CUserMessageSendAudio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  soundname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_soundname()) {
    soundname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.soundname_);
  }
  stop_ = from.stop_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageSendAudio)
}

void CUserMessageSendAudio::SharedCtor() {
  _cached_size_ = 0;
  soundname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_ = false;
}

CUserMessageSendAudio::~CUserMessageSendAudio() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageSendAudio)
  SharedDtor();
}

void CUserMessageSendAudio::SharedDtor() {
  soundname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSendAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageSendAudio::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageSendAudio& CUserMessageSendAudio::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageSendAudio* CUserMessageSendAudio::New(::google::protobuf::Arena* arena) const {
  CUserMessageSendAudio* n = new CUserMessageSendAudio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageSendAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageSendAudio)
  if (has_soundname()) {
    GOOGLE_DCHECK(!soundname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*soundname_.UnsafeRawStringPointer())->clear();
  }
  stop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageSendAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageSendAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string soundname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soundname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->soundname().data(), this->soundname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSendAudio.soundname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageSendAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageSendAudio)
  return false;
#undef DO_
}

void CUserMessageSendAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageSendAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string soundname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->soundname().data(), this->soundname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSendAudio.soundname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->soundname(), output);
  }

  // optional bool stop = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageSendAudio)
}

::google::protobuf::uint8* CUserMessageSendAudio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageSendAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string soundname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->soundname().data(), this->soundname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSendAudio.soundname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->soundname(), target);
  }

  // optional bool stop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageSendAudio)
  return target;
}

size_t CUserMessageSendAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageSendAudio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string soundname = 1;
    if (has_soundname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soundname());
    }

    // optional bool stop = 2;
    if (has_stop()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageSendAudio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageSendAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSendAudio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageSendAudio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageSendAudio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageSendAudio)
    MergeFrom(*source);
  }
}

void CUserMessageSendAudio::MergeFrom(const CUserMessageSendAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageSendAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_soundname();
      soundname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.soundname_);
    }
    if (cached_has_bits & 0x00000002u) {
      stop_ = from.stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSendAudio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageSendAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSendAudio::CopyFrom(const CUserMessageSendAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageSendAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSendAudio::IsInitialized() const {
  return true;
}

void CUserMessageSendAudio::Swap(CUserMessageSendAudio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageSendAudio::InternalSwap(CUserMessageSendAudio* other) {
  soundname_.Swap(&other->soundname_);
  std::swap(stop_, other->stop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageSendAudio::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageSendAudio

// optional string soundname = 1;
bool CUserMessageSendAudio::has_soundname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageSendAudio::set_has_soundname() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageSendAudio::clear_has_soundname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageSendAudio::clear_soundname() {
  soundname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_soundname();
}
const ::std::string& CUserMessageSendAudio::soundname() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSendAudio.soundname)
  return soundname_.GetNoArena();
}
void CUserMessageSendAudio::set_soundname(const ::std::string& value) {
  set_has_soundname();
  soundname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSendAudio.soundname)
}
#if LANG_CXX11
void CUserMessageSendAudio::set_soundname(::std::string&& value) {
  set_has_soundname();
  soundname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageSendAudio.soundname)
}
#endif
void CUserMessageSendAudio::set_soundname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_soundname();
  soundname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageSendAudio.soundname)
}
void CUserMessageSendAudio::set_soundname(const char* value, size_t size) {
  set_has_soundname();
  soundname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageSendAudio.soundname)
}
::std::string* CUserMessageSendAudio::mutable_soundname() {
  set_has_soundname();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageSendAudio.soundname)
  return soundname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageSendAudio::release_soundname() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageSendAudio.soundname)
  clear_has_soundname();
  return soundname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageSendAudio::set_allocated_soundname(::std::string* soundname) {
  if (soundname != NULL) {
    set_has_soundname();
  } else {
    clear_has_soundname();
  }
  soundname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), soundname);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageSendAudio.soundname)
}

// optional bool stop = 2;
bool CUserMessageSendAudio::has_stop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageSendAudio::set_has_stop() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageSendAudio::clear_has_stop() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageSendAudio::clear_stop() {
  stop_ = false;
  clear_has_stop();
}
bool CUserMessageSendAudio::stop() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSendAudio.stop)
  return stop_;
}
void CUserMessageSendAudio::set_stop(bool value) {
  set_has_stop();
  stop_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSendAudio.stop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageAudioParameter::kParameterTypeFieldNumber;
const int CUserMessageAudioParameter::kNameHashCodeFieldNumber;
const int CUserMessageAudioParameter::kValueFieldNumber;
const int CUserMessageAudioParameter::kIntValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageAudioParameter::CUserMessageAudioParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageAudioParameter)
}
CUserMessageAudioParameter::CUserMessageAudioParameter(const CUserMessageAudioParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parameter_type_, &from.parameter_type_,
    reinterpret_cast<char*>(&int_value_) -
    reinterpret_cast<char*>(&parameter_type_) + sizeof(int_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageAudioParameter)
}

void CUserMessageAudioParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&parameter_type_, 0, reinterpret_cast<char*>(&int_value_) -
    reinterpret_cast<char*>(&parameter_type_) + sizeof(int_value_));
}

CUserMessageAudioParameter::~CUserMessageAudioParameter() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageAudioParameter)
  SharedDtor();
}

void CUserMessageAudioParameter::SharedDtor() {
}

void CUserMessageAudioParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageAudioParameter::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageAudioParameter& CUserMessageAudioParameter::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageAudioParameter* CUserMessageAudioParameter::New(::google::protobuf::Arena* arena) const {
  CUserMessageAudioParameter* n = new CUserMessageAudioParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageAudioParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageAudioParameter)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&parameter_type_, 0, reinterpret_cast<char*>(&int_value_) -
      reinterpret_cast<char*>(&parameter_type_) + sizeof(int_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageAudioParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageAudioParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 parameter_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_parameter_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parameter_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 name_hash_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_name_hash_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_hash_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 int_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_int_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageAudioParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageAudioParameter)
  return false;
#undef DO_
}

void CUserMessageAudioParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageAudioParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 parameter_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->parameter_type(), output);
  }

  // optional uint32 name_hash_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name_hash_code(), output);
  }

  // optional float value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  // optional uint32 int_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->int_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageAudioParameter)
}

::google::protobuf::uint8* CUserMessageAudioParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageAudioParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 parameter_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->parameter_type(), target);
  }

  // optional uint32 name_hash_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->name_hash_code(), target);
  }

  // optional float value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  // optional uint32 int_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->int_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageAudioParameter)
  return target;
}

size_t CUserMessageAudioParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageAudioParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 parameter_type = 1;
    if (has_parameter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parameter_type());
    }

    // optional uint32 name_hash_code = 2;
    if (has_name_hash_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_hash_code());
    }

    // optional float value = 3;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional uint32 int_value = 4;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageAudioParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageAudioParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAudioParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageAudioParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageAudioParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageAudioParameter)
    MergeFrom(*source);
  }
}

void CUserMessageAudioParameter::MergeFrom(const CUserMessageAudioParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageAudioParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      parameter_type_ = from.parameter_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      name_hash_code_ = from.name_hash_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      int_value_ = from.int_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageAudioParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageAudioParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAudioParameter::CopyFrom(const CUserMessageAudioParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageAudioParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAudioParameter::IsInitialized() const {
  return true;
}

void CUserMessageAudioParameter::Swap(CUserMessageAudioParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageAudioParameter::InternalSwap(CUserMessageAudioParameter* other) {
  std::swap(parameter_type_, other->parameter_type_);
  std::swap(name_hash_code_, other->name_hash_code_);
  std::swap(value_, other->value_);
  std::swap(int_value_, other->int_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageAudioParameter::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageAudioParameter

// optional uint32 parameter_type = 1;
bool CUserMessageAudioParameter::has_parameter_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageAudioParameter::set_has_parameter_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageAudioParameter::clear_has_parameter_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageAudioParameter::clear_parameter_type() {
  parameter_type_ = 0u;
  clear_has_parameter_type();
}
::google::protobuf::uint32 CUserMessageAudioParameter::parameter_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageAudioParameter.parameter_type)
  return parameter_type_;
}
void CUserMessageAudioParameter::set_parameter_type(::google::protobuf::uint32 value) {
  set_has_parameter_type();
  parameter_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageAudioParameter.parameter_type)
}

// optional uint32 name_hash_code = 2;
bool CUserMessageAudioParameter::has_name_hash_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageAudioParameter::set_has_name_hash_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageAudioParameter::clear_has_name_hash_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageAudioParameter::clear_name_hash_code() {
  name_hash_code_ = 0u;
  clear_has_name_hash_code();
}
::google::protobuf::uint32 CUserMessageAudioParameter::name_hash_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageAudioParameter.name_hash_code)
  return name_hash_code_;
}
void CUserMessageAudioParameter::set_name_hash_code(::google::protobuf::uint32 value) {
  set_has_name_hash_code();
  name_hash_code_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageAudioParameter.name_hash_code)
}

// optional float value = 3;
bool CUserMessageAudioParameter::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageAudioParameter::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageAudioParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageAudioParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
float CUserMessageAudioParameter::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageAudioParameter.value)
  return value_;
}
void CUserMessageAudioParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageAudioParameter.value)
}

// optional uint32 int_value = 4;
bool CUserMessageAudioParameter::has_int_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageAudioParameter::set_has_int_value() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageAudioParameter::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageAudioParameter::clear_int_value() {
  int_value_ = 0u;
  clear_has_int_value();
}
::google::protobuf::uint32 CUserMessageAudioParameter::int_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageAudioParameter.int_value)
  return int_value_;
}
void CUserMessageAudioParameter::set_int_value(::google::protobuf::uint32 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageAudioParameter.int_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageVoiceMask::kGamerulesMasksFieldNumber;
const int CUserMessageVoiceMask::kBanMasksFieldNumber;
const int CUserMessageVoiceMask::kModEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageVoiceMask::CUserMessageVoiceMask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageVoiceMask)
}
CUserMessageVoiceMask::CUserMessageVoiceMask(const CUserMessageVoiceMask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gamerules_masks_(from.gamerules_masks_),
      ban_masks_(from.ban_masks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mod_enable_ = from.mod_enable_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageVoiceMask)
}

void CUserMessageVoiceMask::SharedCtor() {
  _cached_size_ = 0;
  mod_enable_ = false;
}

CUserMessageVoiceMask::~CUserMessageVoiceMask() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageVoiceMask)
  SharedDtor();
}

void CUserMessageVoiceMask::SharedDtor() {
}

void CUserMessageVoiceMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageVoiceMask::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageVoiceMask& CUserMessageVoiceMask::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageVoiceMask* CUserMessageVoiceMask::New(::google::protobuf::Arena* arena) const {
  CUserMessageVoiceMask* n = new CUserMessageVoiceMask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageVoiceMask::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageVoiceMask)
  gamerules_masks_.Clear();
  ban_masks_.Clear();
  mod_enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageVoiceMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageVoiceMask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 gamerules_masks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_gamerules_masks())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gamerules_masks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ban_masks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_ban_masks())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ban_masks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mod_enable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_mod_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mod_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageVoiceMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageVoiceMask)
  return false;
#undef DO_
}

void CUserMessageVoiceMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageVoiceMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 gamerules_masks = 1;
  for (int i = 0, n = this->gamerules_masks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->gamerules_masks(i), output);
  }

  // repeated uint32 ban_masks = 2;
  for (int i = 0, n = this->ban_masks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ban_masks(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool mod_enable = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mod_enable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageVoiceMask)
}

::google::protobuf::uint8* CUserMessageVoiceMask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageVoiceMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 gamerules_masks = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->gamerules_masks_, target);

  // repeated uint32 ban_masks = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->ban_masks_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool mod_enable = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mod_enable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageVoiceMask)
  return target;
}

size_t CUserMessageVoiceMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageVoiceMask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 gamerules_masks = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->gamerules_masks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->gamerules_masks_size());
    total_size += data_size;
  }

  // repeated uint32 ban_masks = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ban_masks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ban_masks_size());
    total_size += data_size;
  }

  // optional bool mod_enable = 3;
  if (has_mod_enable()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageVoiceMask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageVoiceMask)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVoiceMask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageVoiceMask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageVoiceMask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageVoiceMask)
    MergeFrom(*source);
  }
}

void CUserMessageVoiceMask::MergeFrom(const CUserMessageVoiceMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageVoiceMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamerules_masks_.MergeFrom(from.gamerules_masks_);
  ban_masks_.MergeFrom(from.ban_masks_);
  if (from.has_mod_enable()) {
    set_mod_enable(from.mod_enable());
  }
}

void CUserMessageVoiceMask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageVoiceMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVoiceMask::CopyFrom(const CUserMessageVoiceMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageVoiceMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVoiceMask::IsInitialized() const {
  return true;
}

void CUserMessageVoiceMask::Swap(CUserMessageVoiceMask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageVoiceMask::InternalSwap(CUserMessageVoiceMask* other) {
  gamerules_masks_.InternalSwap(&other->gamerules_masks_);
  ban_masks_.InternalSwap(&other->ban_masks_);
  std::swap(mod_enable_, other->mod_enable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageVoiceMask::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageVoiceMask

// repeated uint32 gamerules_masks = 1;
int CUserMessageVoiceMask::gamerules_masks_size() const {
  return gamerules_masks_.size();
}
void CUserMessageVoiceMask::clear_gamerules_masks() {
  gamerules_masks_.Clear();
}
::google::protobuf::uint32 CUserMessageVoiceMask::gamerules_masks(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVoiceMask.gamerules_masks)
  return gamerules_masks_.Get(index);
}
void CUserMessageVoiceMask::set_gamerules_masks(int index, ::google::protobuf::uint32 value) {
  gamerules_masks_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVoiceMask.gamerules_masks)
}
void CUserMessageVoiceMask::add_gamerules_masks(::google::protobuf::uint32 value) {
  gamerules_masks_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CUserMessageVoiceMask.gamerules_masks)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CUserMessageVoiceMask::gamerules_masks() const {
  // @@protoc_insertion_point(field_list:proto.dota.CUserMessageVoiceMask.gamerules_masks)
  return gamerules_masks_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CUserMessageVoiceMask::mutable_gamerules_masks() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CUserMessageVoiceMask.gamerules_masks)
  return &gamerules_masks_;
}

// repeated uint32 ban_masks = 2;
int CUserMessageVoiceMask::ban_masks_size() const {
  return ban_masks_.size();
}
void CUserMessageVoiceMask::clear_ban_masks() {
  ban_masks_.Clear();
}
::google::protobuf::uint32 CUserMessageVoiceMask::ban_masks(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVoiceMask.ban_masks)
  return ban_masks_.Get(index);
}
void CUserMessageVoiceMask::set_ban_masks(int index, ::google::protobuf::uint32 value) {
  ban_masks_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVoiceMask.ban_masks)
}
void CUserMessageVoiceMask::add_ban_masks(::google::protobuf::uint32 value) {
  ban_masks_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CUserMessageVoiceMask.ban_masks)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CUserMessageVoiceMask::ban_masks() const {
  // @@protoc_insertion_point(field_list:proto.dota.CUserMessageVoiceMask.ban_masks)
  return ban_masks_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CUserMessageVoiceMask::mutable_ban_masks() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CUserMessageVoiceMask.ban_masks)
  return &ban_masks_;
}

// optional bool mod_enable = 3;
bool CUserMessageVoiceMask::has_mod_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageVoiceMask::set_has_mod_enable() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageVoiceMask::clear_has_mod_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageVoiceMask::clear_mod_enable() {
  mod_enable_ = false;
  clear_has_mod_enable();
}
bool CUserMessageVoiceMask::mod_enable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVoiceMask.mod_enable)
  return mod_enable_;
}
void CUserMessageVoiceMask::set_mod_enable(bool value) {
  set_has_mod_enable();
  mod_enable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVoiceMask.mod_enable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageRequestState::CUserMessageRequestState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageRequestState)
}
CUserMessageRequestState::CUserMessageRequestState(const CUserMessageRequestState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageRequestState)
}

void CUserMessageRequestState::SharedCtor() {
  _cached_size_ = 0;
}

CUserMessageRequestState::~CUserMessageRequestState() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageRequestState)
  SharedDtor();
}

void CUserMessageRequestState::SharedDtor() {
}

void CUserMessageRequestState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageRequestState::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageRequestState& CUserMessageRequestState::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageRequestState* CUserMessageRequestState::New(::google::protobuf::Arena* arena) const {
  CUserMessageRequestState* n = new CUserMessageRequestState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageRequestState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageRequestState)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageRequestState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageRequestState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageRequestState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageRequestState)
  return false;
#undef DO_
}

void CUserMessageRequestState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageRequestState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageRequestState)
}

::google::protobuf::uint8* CUserMessageRequestState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageRequestState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageRequestState)
  return target;
}

size_t CUserMessageRequestState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageRequestState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageRequestState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageRequestState)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageRequestState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageRequestState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageRequestState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageRequestState)
    MergeFrom(*source);
  }
}

void CUserMessageRequestState::MergeFrom(const CUserMessageRequestState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageRequestState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMessageRequestState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageRequestState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageRequestState::CopyFrom(const CUserMessageRequestState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageRequestState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageRequestState::IsInitialized() const {
  return true;
}

void CUserMessageRequestState::Swap(CUserMessageRequestState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageRequestState::InternalSwap(CUserMessageRequestState* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageRequestState::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageRequestState

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHintText::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHintText::CUserMessageHintText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHintText)
}
CUserMessageHintText::CUserMessageHintText(const CUserMessageHintText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHintText)
}

void CUserMessageHintText::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMessageHintText::~CUserMessageHintText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHintText)
  SharedDtor();
}

void CUserMessageHintText::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageHintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageHintText::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageHintText& CUserMessageHintText::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageHintText* CUserMessageHintText::New(::google::protobuf::Arena* arena) const {
  CUserMessageHintText* n = new CUserMessageHintText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageHintText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHintText)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHintText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageHintText.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHintText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHintText)
  return false;
#undef DO_
}

void CUserMessageHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHintText.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHintText)
}

::google::protobuf::uint8* CUserMessageHintText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHintText.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHintText)
  return target;
}

size_t CUserMessageHintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHintText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageHintText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHintText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHintText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageHintText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHintText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHintText)
    MergeFrom(*source);
  }
}

void CUserMessageHintText::MergeFrom(const CUserMessageHintText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHintText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    set_has_message();
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CUserMessageHintText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHintText::CopyFrom(const CUserMessageHintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHintText::IsInitialized() const {
  return true;
}

void CUserMessageHintText::Swap(CUserMessageHintText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHintText::InternalSwap(CUserMessageHintText* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageHintText::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageHintText

// optional string message = 1;
bool CUserMessageHintText::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageHintText::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageHintText::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageHintText::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CUserMessageHintText::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHintText.message)
  return message_.GetNoArena();
}
void CUserMessageHintText::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHintText.message)
}
#if LANG_CXX11
void CUserMessageHintText::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageHintText.message)
}
#endif
void CUserMessageHintText::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageHintText.message)
}
void CUserMessageHintText::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageHintText.message)
}
::std::string* CUserMessageHintText::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageHintText.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageHintText::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageHintText.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageHintText::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageHintText.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageKeyHintText::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageKeyHintText::CUserMessageKeyHintText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageKeyHintText)
}
CUserMessageKeyHintText::CUserMessageKeyHintText(const CUserMessageKeyHintText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageKeyHintText)
}

void CUserMessageKeyHintText::SharedCtor() {
  _cached_size_ = 0;
}

CUserMessageKeyHintText::~CUserMessageKeyHintText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageKeyHintText)
  SharedDtor();
}

void CUserMessageKeyHintText::SharedDtor() {
}

void CUserMessageKeyHintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageKeyHintText::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageKeyHintText& CUserMessageKeyHintText::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageKeyHintText* CUserMessageKeyHintText::New(::google::protobuf::Arena* arena) const {
  CUserMessageKeyHintText* n = new CUserMessageKeyHintText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageKeyHintText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageKeyHintText)
  messages_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageKeyHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageKeyHintText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_messages()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messages(this->messages_size() - 1).data(),
            this->messages(this->messages_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageKeyHintText.messages");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageKeyHintText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageKeyHintText)
  return false;
#undef DO_
}

void CUserMessageKeyHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageKeyHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messages = 1;
  for (int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messages(i).data(), this->messages(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageKeyHintText.messages");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messages(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageKeyHintText)
}

::google::protobuf::uint8* CUserMessageKeyHintText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageKeyHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messages = 1;
  for (int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messages(i).data(), this->messages(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageKeyHintText.messages");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->messages(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageKeyHintText)
  return target;
}

size_t CUserMessageKeyHintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageKeyHintText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string messages = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->messages_size());
  for (int i = 0, n = this->messages_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->messages(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageKeyHintText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageKeyHintText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageKeyHintText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageKeyHintText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageKeyHintText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageKeyHintText)
    MergeFrom(*source);
  }
}

void CUserMessageKeyHintText::MergeFrom(const CUserMessageKeyHintText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageKeyHintText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void CUserMessageKeyHintText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageKeyHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageKeyHintText::CopyFrom(const CUserMessageKeyHintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageKeyHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageKeyHintText::IsInitialized() const {
  return true;
}

void CUserMessageKeyHintText::Swap(CUserMessageKeyHintText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageKeyHintText::InternalSwap(CUserMessageKeyHintText* other) {
  messages_.InternalSwap(&other->messages_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageKeyHintText::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageKeyHintText

// repeated string messages = 1;
int CUserMessageKeyHintText::messages_size() const {
  return messages_.size();
}
void CUserMessageKeyHintText::clear_messages() {
  messages_.Clear();
}
const ::std::string& CUserMessageKeyHintText::messages(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageKeyHintText.messages)
  return messages_.Get(index);
}
::std::string* CUserMessageKeyHintText::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageKeyHintText.messages)
  return messages_.Mutable(index);
}
void CUserMessageKeyHintText::set_messages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageKeyHintText.messages)
  messages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CUserMessageKeyHintText::set_messages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageKeyHintText.messages)
  messages_.Mutable(index)->assign(std::move(value));
}
#endif
void CUserMessageKeyHintText::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageKeyHintText.messages)
}
void CUserMessageKeyHintText::set_messages(int index, const char* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageKeyHintText.messages)
}
::std::string* CUserMessageKeyHintText::add_messages() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CUserMessageKeyHintText.messages)
  return messages_.Add();
}
void CUserMessageKeyHintText::add_messages(const ::std::string& value) {
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CUserMessageKeyHintText.messages)
}
#if LANG_CXX11
void CUserMessageKeyHintText::add_messages(::std::string&& value) {
  messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CUserMessageKeyHintText.messages)
}
#endif
void CUserMessageKeyHintText::add_messages(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CUserMessageKeyHintText.messages)
}
void CUserMessageKeyHintText::add_messages(const char* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CUserMessageKeyHintText.messages)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CUserMessageKeyHintText::messages() const {
  // @@protoc_insertion_point(field_list:proto.dota.CUserMessageKeyHintText.messages)
  return messages_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CUserMessageKeyHintText::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CUserMessageKeyHintText.messages)
  return &messages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageVoiceSubtitle::kPlayerFieldNumber;
const int CUserMessageVoiceSubtitle::kMenuFieldNumber;
const int CUserMessageVoiceSubtitle::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageVoiceSubtitle::CUserMessageVoiceSubtitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageVoiceSubtitle)
}
CUserMessageVoiceSubtitle::CUserMessageVoiceSubtitle(const CUserMessageVoiceSubtitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&player_) + sizeof(item_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageVoiceSubtitle)
}

void CUserMessageVoiceSubtitle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_, 0, reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&player_) + sizeof(item_));
}

CUserMessageVoiceSubtitle::~CUserMessageVoiceSubtitle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageVoiceSubtitle)
  SharedDtor();
}

void CUserMessageVoiceSubtitle::SharedDtor() {
}

void CUserMessageVoiceSubtitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageVoiceSubtitle::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageVoiceSubtitle& CUserMessageVoiceSubtitle::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageVoiceSubtitle* CUserMessageVoiceSubtitle::New(::google::protobuf::Arena* arena) const {
  CUserMessageVoiceSubtitle* n = new CUserMessageVoiceSubtitle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageVoiceSubtitle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageVoiceSubtitle)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_, 0, reinterpret_cast<char*>(&item_) -
      reinterpret_cast<char*>(&player_) + sizeof(item_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageVoiceSubtitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageVoiceSubtitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 menu = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_menu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 item = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_item();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageVoiceSubtitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageVoiceSubtitle)
  return false;
#undef DO_
}

void CUserMessageVoiceSubtitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageVoiceSubtitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }

  // optional int32 menu = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->menu(), output);
  }

  // optional int32 item = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageVoiceSubtitle)
}

::google::protobuf::uint8* CUserMessageVoiceSubtitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageVoiceSubtitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }

  // optional int32 menu = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->menu(), target);
  }

  // optional int32 item = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageVoiceSubtitle)
  return target;
}

size_t CUserMessageVoiceSubtitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageVoiceSubtitle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }

    // optional int32 menu = 2;
    if (has_menu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menu());
    }

    // optional int32 item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageVoiceSubtitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageVoiceSubtitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVoiceSubtitle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageVoiceSubtitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageVoiceSubtitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageVoiceSubtitle)
    MergeFrom(*source);
  }
}

void CUserMessageVoiceSubtitle::MergeFrom(const CUserMessageVoiceSubtitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageVoiceSubtitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000002u) {
      menu_ = from.menu_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_ = from.item_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageVoiceSubtitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageVoiceSubtitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVoiceSubtitle::CopyFrom(const CUserMessageVoiceSubtitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageVoiceSubtitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVoiceSubtitle::IsInitialized() const {
  return true;
}

void CUserMessageVoiceSubtitle::Swap(CUserMessageVoiceSubtitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageVoiceSubtitle::InternalSwap(CUserMessageVoiceSubtitle* other) {
  std::swap(player_, other->player_);
  std::swap(menu_, other->menu_);
  std::swap(item_, other->item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageVoiceSubtitle::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageVoiceSubtitle

// optional int32 player = 1;
bool CUserMessageVoiceSubtitle::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageVoiceSubtitle::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageVoiceSubtitle::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageVoiceSubtitle::clear_player() {
  player_ = 0;
  clear_has_player();
}
::google::protobuf::int32 CUserMessageVoiceSubtitle::player() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVoiceSubtitle.player)
  return player_;
}
void CUserMessageVoiceSubtitle::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVoiceSubtitle.player)
}

// optional int32 menu = 2;
bool CUserMessageVoiceSubtitle::has_menu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageVoiceSubtitle::set_has_menu() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageVoiceSubtitle::clear_has_menu() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageVoiceSubtitle::clear_menu() {
  menu_ = 0;
  clear_has_menu();
}
::google::protobuf::int32 CUserMessageVoiceSubtitle::menu() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVoiceSubtitle.menu)
  return menu_;
}
void CUserMessageVoiceSubtitle::set_menu(::google::protobuf::int32 value) {
  set_has_menu();
  menu_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVoiceSubtitle.menu)
}

// optional int32 item = 3;
bool CUserMessageVoiceSubtitle::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageVoiceSubtitle::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageVoiceSubtitle::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageVoiceSubtitle::clear_item() {
  item_ = 0;
  clear_has_item();
}
::google::protobuf::int32 CUserMessageVoiceSubtitle::item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVoiceSubtitle.item)
  return item_;
}
void CUserMessageVoiceSubtitle::set_item(::google::protobuf::int32 value) {
  set_has_item();
  item_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVoiceSubtitle.item)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageVGUIMenu_Keys::kNameFieldNumber;
const int CUserMessageVGUIMenu_Keys::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageVGUIMenu_Keys::CUserMessageVGUIMenu_Keys()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageVGUIMenu.Keys)
}
CUserMessageVGUIMenu_Keys::CUserMessageVGUIMenu_Keys(const CUserMessageVGUIMenu_Keys& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageVGUIMenu.Keys)
}

void CUserMessageVGUIMenu_Keys::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMessageVGUIMenu_Keys::~CUserMessageVGUIMenu_Keys() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageVGUIMenu.Keys)
  SharedDtor();
}

void CUserMessageVGUIMenu_Keys::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageVGUIMenu_Keys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageVGUIMenu_Keys::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageVGUIMenu_Keys& CUserMessageVGUIMenu_Keys::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageVGUIMenu_Keys* CUserMessageVGUIMenu_Keys::New(::google::protobuf::Arena* arena) const {
  CUserMessageVGUIMenu_Keys* n = new CUserMessageVGUIMenu_Keys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageVGUIMenu_Keys::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageVGUIMenu.Keys)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageVGUIMenu_Keys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageVGUIMenu.Keys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageVGUIMenu.Keys.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageVGUIMenu.Keys.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageVGUIMenu.Keys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageVGUIMenu.Keys)
  return false;
#undef DO_
}

void CUserMessageVGUIMenu_Keys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageVGUIMenu.Keys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.Keys.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.Keys.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageVGUIMenu.Keys)
}

::google::protobuf::uint8* CUserMessageVGUIMenu_Keys::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageVGUIMenu.Keys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.Keys.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.Keys.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageVGUIMenu.Keys)
  return target;
}

size_t CUserMessageVGUIMenu_Keys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageVGUIMenu.Keys)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageVGUIMenu_Keys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageVGUIMenu.Keys)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVGUIMenu_Keys* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageVGUIMenu_Keys>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageVGUIMenu.Keys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageVGUIMenu.Keys)
    MergeFrom(*source);
  }
}

void CUserMessageVGUIMenu_Keys::MergeFrom(const CUserMessageVGUIMenu_Keys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageVGUIMenu.Keys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CUserMessageVGUIMenu_Keys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageVGUIMenu.Keys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVGUIMenu_Keys::CopyFrom(const CUserMessageVGUIMenu_Keys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageVGUIMenu.Keys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVGUIMenu_Keys::IsInitialized() const {
  return true;
}

void CUserMessageVGUIMenu_Keys::Swap(CUserMessageVGUIMenu_Keys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageVGUIMenu_Keys::InternalSwap(CUserMessageVGUIMenu_Keys* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageVGUIMenu_Keys::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageVGUIMenu_Keys

// optional string name = 1;
bool CUserMessageVGUIMenu_Keys::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageVGUIMenu_Keys::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageVGUIMenu_Keys::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageVGUIMenu_Keys::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CUserMessageVGUIMenu_Keys::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVGUIMenu.Keys.name)
  return name_.GetNoArena();
}
void CUserMessageVGUIMenu_Keys::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVGUIMenu.Keys.name)
}
#if LANG_CXX11
void CUserMessageVGUIMenu_Keys::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageVGUIMenu.Keys.name)
}
#endif
void CUserMessageVGUIMenu_Keys::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageVGUIMenu.Keys.name)
}
void CUserMessageVGUIMenu_Keys::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageVGUIMenu.Keys.name)
}
::std::string* CUserMessageVGUIMenu_Keys::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageVGUIMenu.Keys.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageVGUIMenu_Keys::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageVGUIMenu.Keys.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageVGUIMenu_Keys::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageVGUIMenu.Keys.name)
}

// optional string value = 2;
bool CUserMessageVGUIMenu_Keys::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageVGUIMenu_Keys::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageVGUIMenu_Keys::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageVGUIMenu_Keys::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CUserMessageVGUIMenu_Keys::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVGUIMenu.Keys.value)
  return value_.GetNoArena();
}
void CUserMessageVGUIMenu_Keys::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVGUIMenu.Keys.value)
}
#if LANG_CXX11
void CUserMessageVGUIMenu_Keys::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageVGUIMenu.Keys.value)
}
#endif
void CUserMessageVGUIMenu_Keys::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageVGUIMenu.Keys.value)
}
void CUserMessageVGUIMenu_Keys::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageVGUIMenu.Keys.value)
}
::std::string* CUserMessageVGUIMenu_Keys::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageVGUIMenu.Keys.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageVGUIMenu_Keys::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageVGUIMenu.Keys.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageVGUIMenu_Keys::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageVGUIMenu.Keys.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageVGUIMenu::kNameFieldNumber;
const int CUserMessageVGUIMenu::kShowFieldNumber;
const int CUserMessageVGUIMenu::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageVGUIMenu::CUserMessageVGUIMenu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageVGUIMenu)
}
CUserMessageVGUIMenu::CUserMessageVGUIMenu(const CUserMessageVGUIMenu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  show_ = from.show_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageVGUIMenu)
}

void CUserMessageVGUIMenu::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_ = false;
}

CUserMessageVGUIMenu::~CUserMessageVGUIMenu() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageVGUIMenu)
  SharedDtor();
}

void CUserMessageVGUIMenu::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageVGUIMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageVGUIMenu::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageVGUIMenu& CUserMessageVGUIMenu::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageVGUIMenu* CUserMessageVGUIMenu::New(::google::protobuf::Arena* arena) const {
  CUserMessageVGUIMenu* n = new CUserMessageVGUIMenu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageVGUIMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageVGUIMenu)
  keys_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  show_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageVGUIMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageVGUIMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageVGUIMenu.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_show();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageVGUIMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageVGUIMenu)
  return false;
#undef DO_
}

void CUserMessageVGUIMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageVGUIMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool show = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show(), output);
  }

  // repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageVGUIMenu)
}

::google::protobuf::uint8* CUserMessageVGUIMenu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageVGUIMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show(), target);
  }

  // repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->keys(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageVGUIMenu)
  return target;
}

size_t CUserMessageVGUIMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageVGUIMenu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool show = 2;
    if (has_show()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageVGUIMenu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageVGUIMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVGUIMenu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageVGUIMenu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageVGUIMenu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageVGUIMenu)
    MergeFrom(*source);
  }
}

void CUserMessageVGUIMenu::MergeFrom(const CUserMessageVGUIMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageVGUIMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      show_ = from.show_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageVGUIMenu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageVGUIMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVGUIMenu::CopyFrom(const CUserMessageVGUIMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageVGUIMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVGUIMenu::IsInitialized() const {
  return true;
}

void CUserMessageVGUIMenu::Swap(CUserMessageVGUIMenu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageVGUIMenu::InternalSwap(CUserMessageVGUIMenu* other) {
  keys_.InternalSwap(&other->keys_);
  name_.Swap(&other->name_);
  std::swap(show_, other->show_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageVGUIMenu::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageVGUIMenu

// optional string name = 1;
bool CUserMessageVGUIMenu::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageVGUIMenu::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageVGUIMenu::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageVGUIMenu::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CUserMessageVGUIMenu::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVGUIMenu.name)
  return name_.GetNoArena();
}
void CUserMessageVGUIMenu::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVGUIMenu.name)
}
#if LANG_CXX11
void CUserMessageVGUIMenu::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageVGUIMenu.name)
}
#endif
void CUserMessageVGUIMenu::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageVGUIMenu.name)
}
void CUserMessageVGUIMenu::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageVGUIMenu.name)
}
::std::string* CUserMessageVGUIMenu::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageVGUIMenu.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageVGUIMenu::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageVGUIMenu.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageVGUIMenu::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageVGUIMenu.name)
}

// optional bool show = 2;
bool CUserMessageVGUIMenu::has_show() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageVGUIMenu::set_has_show() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageVGUIMenu::clear_has_show() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageVGUIMenu::clear_show() {
  show_ = false;
  clear_has_show();
}
bool CUserMessageVGUIMenu::show() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVGUIMenu.show)
  return show_;
}
void CUserMessageVGUIMenu::set_show(bool value) {
  set_has_show();
  show_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageVGUIMenu.show)
}

// repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
int CUserMessageVGUIMenu::keys_size() const {
  return keys_.size();
}
void CUserMessageVGUIMenu::clear_keys() {
  keys_.Clear();
}
const ::proto::dota::CUserMessageVGUIMenu_Keys& CUserMessageVGUIMenu::keys(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageVGUIMenu.keys)
  return keys_.Get(index);
}
::proto::dota::CUserMessageVGUIMenu_Keys* CUserMessageVGUIMenu::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageVGUIMenu.keys)
  return keys_.Mutable(index);
}
::proto::dota::CUserMessageVGUIMenu_Keys* CUserMessageVGUIMenu::add_keys() {
  // @@protoc_insertion_point(field_add:proto.dota.CUserMessageVGUIMenu.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CUserMessageVGUIMenu_Keys >*
CUserMessageVGUIMenu::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CUserMessageVGUIMenu.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CUserMessageVGUIMenu_Keys >&
CUserMessageVGUIMenu::keys() const {
  // @@protoc_insertion_point(field_list:proto.dota.CUserMessageVGUIMenu.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageRumble::kIndexFieldNumber;
const int CUserMessageRumble::kDataFieldNumber;
const int CUserMessageRumble::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageRumble::CUserMessageRumble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageRumble)
}
CUserMessageRumble::CUserMessageRumble(const CUserMessageRumble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageRumble)
}

void CUserMessageRumble::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&index_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_) + sizeof(flags_));
}

CUserMessageRumble::~CUserMessageRumble() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageRumble)
  SharedDtor();
}

void CUserMessageRumble::SharedDtor() {
}

void CUserMessageRumble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageRumble::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageRumble& CUserMessageRumble::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageRumble* CUserMessageRumble::New(::google::protobuf::Arena* arena) const {
  CUserMessageRumble* n = new CUserMessageRumble;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageRumble::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageRumble)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&index_, 0, reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&index_) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageRumble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageRumble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageRumble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageRumble)
  return false;
#undef DO_
}

void CUserMessageRumble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageRumble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageRumble)
}

::google::protobuf::uint8* CUserMessageRumble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageRumble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageRumble)
  return target;
}

size_t CUserMessageRumble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageRumble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageRumble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageRumble)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageRumble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageRumble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageRumble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageRumble)
    MergeFrom(*source);
  }
}

void CUserMessageRumble::MergeFrom(const CUserMessageRumble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageRumble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageRumble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageRumble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageRumble::CopyFrom(const CUserMessageRumble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageRumble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageRumble::IsInitialized() const {
  return true;
}

void CUserMessageRumble::Swap(CUserMessageRumble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageRumble::InternalSwap(CUserMessageRumble* other) {
  std::swap(index_, other->index_);
  std::swap(data_, other->data_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageRumble::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageRumble

// optional int32 index = 1;
bool CUserMessageRumble::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageRumble::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageRumble::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageRumble::clear_index() {
  index_ = 0;
  clear_has_index();
}
::google::protobuf::int32 CUserMessageRumble::index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageRumble.index)
  return index_;
}
void CUserMessageRumble::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageRumble.index)
}

// optional int32 data = 2;
bool CUserMessageRumble::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageRumble::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageRumble::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageRumble::clear_data() {
  data_ = 0;
  clear_has_data();
}
::google::protobuf::int32 CUserMessageRumble::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageRumble.data)
  return data_;
}
void CUserMessageRumble::set_data(::google::protobuf::int32 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageRumble.data)
}

// optional int32 flags = 3;
bool CUserMessageRumble::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageRumble::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageRumble::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageRumble::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::google::protobuf::int32 CUserMessageRumble::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageRumble.flags)
  return flags_;
}
void CUserMessageRumble::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageRumble.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageTrain::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageTrain::CUserMessageTrain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageTrain)
}
CUserMessageTrain::CUserMessageTrain(const CUserMessageTrain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageTrain)
}

void CUserMessageTrain::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0u;
}

CUserMessageTrain::~CUserMessageTrain() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageTrain)
  SharedDtor();
}

void CUserMessageTrain::SharedDtor() {
}

void CUserMessageTrain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageTrain::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageTrain& CUserMessageTrain::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageTrain* CUserMessageTrain::New(::google::protobuf::Arena* arena) const {
  CUserMessageTrain* n = new CUserMessageTrain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageTrain::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageTrain)
  position_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageTrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageTrain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageTrain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageTrain)
  return false;
#undef DO_
}

void CUserMessageTrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageTrain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageTrain)
}

::google::protobuf::uint8* CUserMessageTrain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageTrain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageTrain)
  return target;
}

size_t CUserMessageTrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageTrain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 position = 1;
  if (has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageTrain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageTrain)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageTrain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageTrain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageTrain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageTrain)
    MergeFrom(*source);
  }
}

void CUserMessageTrain::MergeFrom(const CUserMessageTrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageTrain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    set_position(from.position());
  }
}

void CUserMessageTrain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageTrain::CopyFrom(const CUserMessageTrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageTrain::IsInitialized() const {
  return true;
}

void CUserMessageTrain::Swap(CUserMessageTrain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageTrain::InternalSwap(CUserMessageTrain* other) {
  std::swap(position_, other->position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageTrain::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageTrain

// optional uint32 position = 1;
bool CUserMessageTrain::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageTrain::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageTrain::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageTrain::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 CUserMessageTrain::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageTrain.position)
  return position_;
}
void CUserMessageTrain::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageTrain.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageSayTextChannel::kPlayerFieldNumber;
const int CUserMessageSayTextChannel::kChannelFieldNumber;
const int CUserMessageSayTextChannel::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageSayTextChannel::CUserMessageSayTextChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageSayTextChannel)
}
CUserMessageSayTextChannel::CUserMessageSayTextChannel(const CUserMessageSayTextChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&player_, &from.player_,
    reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&player_) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageSayTextChannel)
}

void CUserMessageSayTextChannel::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&player_) + sizeof(channel_));
}

CUserMessageSayTextChannel::~CUserMessageSayTextChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageSayTextChannel)
  SharedDtor();
}

void CUserMessageSayTextChannel::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSayTextChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageSayTextChannel::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageSayTextChannel& CUserMessageSayTextChannel::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageSayTextChannel* CUserMessageSayTextChannel::New(::google::protobuf::Arena* arena) const {
  CUserMessageSayTextChannel* n = new CUserMessageSayTextChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageSayTextChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageSayTextChannel)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&player_, 0, reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&player_) + sizeof(channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageSayTextChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageSayTextChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayTextChannel.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageSayTextChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageSayTextChannel)
  return false;
#undef DO_
}

void CUserMessageSayTextChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageSayTextChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }

  // optional int32 channel = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayTextChannel.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageSayTextChannel)
}

::google::protobuf::uint8* CUserMessageSayTextChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageSayTextChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }

  // optional int32 channel = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayTextChannel.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageSayTextChannel)
  return target;
}

size_t CUserMessageSayTextChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageSayTextChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageSayTextChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageSayTextChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSayTextChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageSayTextChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageSayTextChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageSayTextChannel)
    MergeFrom(*source);
  }
}

void CUserMessageSayTextChannel::MergeFrom(const CUserMessageSayTextChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageSayTextChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSayTextChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageSayTextChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayTextChannel::CopyFrom(const CUserMessageSayTextChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageSayTextChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayTextChannel::IsInitialized() const {
  return true;
}

void CUserMessageSayTextChannel::Swap(CUserMessageSayTextChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageSayTextChannel::InternalSwap(CUserMessageSayTextChannel* other) {
  text_.Swap(&other->text_);
  std::swap(player_, other->player_);
  std::swap(channel_, other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageSayTextChannel::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageSayTextChannel

// optional int32 player = 1;
bool CUserMessageSayTextChannel::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageSayTextChannel::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageSayTextChannel::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageSayTextChannel::clear_player() {
  player_ = 0;
  clear_has_player();
}
::google::protobuf::int32 CUserMessageSayTextChannel::player() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayTextChannel.player)
  return player_;
}
void CUserMessageSayTextChannel::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayTextChannel.player)
}

// optional int32 channel = 2;
bool CUserMessageSayTextChannel::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageSayTextChannel::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageSayTextChannel::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageSayTextChannel::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
::google::protobuf::int32 CUserMessageSayTextChannel::channel() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayTextChannel.channel)
  return channel_;
}
void CUserMessageSayTextChannel::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayTextChannel.channel)
}

// optional string text = 3;
bool CUserMessageSayTextChannel::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageSayTextChannel::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageSayTextChannel::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageSayTextChannel::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CUserMessageSayTextChannel::text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageSayTextChannel.text)
  return text_.GetNoArena();
}
void CUserMessageSayTextChannel::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageSayTextChannel.text)
}
#if LANG_CXX11
void CUserMessageSayTextChannel::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageSayTextChannel.text)
}
#endif
void CUserMessageSayTextChannel::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageSayTextChannel.text)
}
void CUserMessageSayTextChannel::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageSayTextChannel.text)
}
::std::string* CUserMessageSayTextChannel::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageSayTextChannel.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageSayTextChannel::release_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageSayTextChannel.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageSayTextChannel::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageSayTextChannel.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageColoredText::kColorFieldNumber;
const int CUserMessageColoredText::kTextFieldNumber;
const int CUserMessageColoredText::kResetFieldNumber;
const int CUserMessageColoredText::kContextPlayerIdFieldNumber;
const int CUserMessageColoredText::kContextValueFieldNumber;
const int CUserMessageColoredText::kContextTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageColoredText::CUserMessageColoredText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageColoredText)
}
CUserMessageColoredText::CUserMessageColoredText(const CUserMessageColoredText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&color_, &from.color_,
    reinterpret_cast<char*>(&context_team_id_) -
    reinterpret_cast<char*>(&color_) + sizeof(context_team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageColoredText)
}

void CUserMessageColoredText::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, reinterpret_cast<char*>(&context_team_id_) -
    reinterpret_cast<char*>(&color_) + sizeof(context_team_id_));
}

CUserMessageColoredText::~CUserMessageColoredText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageColoredText)
  SharedDtor();
}

void CUserMessageColoredText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageColoredText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageColoredText::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageColoredText& CUserMessageColoredText::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageColoredText* CUserMessageColoredText::New(::google::protobuf::Arena* arena) const {
  CUserMessageColoredText* n = new CUserMessageColoredText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageColoredText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageColoredText)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&color_, 0, reinterpret_cast<char*>(&context_team_id_) -
      reinterpret_cast<char*>(&color_) + sizeof(context_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageColoredText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageColoredText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageColoredText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_reset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 context_player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_context_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 context_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_context_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 context_team_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_context_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageColoredText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageColoredText)
  return false;
#undef DO_
}

void CUserMessageColoredText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageColoredText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageColoredText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional bool reset = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reset(), output);
  }

  // optional int32 context_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->context_player_id(), output);
  }

  // optional int32 context_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->context_value(), output);
  }

  // optional int32 context_team_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->context_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageColoredText)
}

::google::protobuf::uint8* CUserMessageColoredText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageColoredText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageColoredText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional bool reset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reset(), target);
  }

  // optional int32 context_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->context_player_id(), target);
  }

  // optional int32 context_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->context_value(), target);
  }

  // optional int32 context_team_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->context_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageColoredText)
  return target;
}

size_t CUserMessageColoredText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageColoredText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional bool reset = 3;
    if (has_reset()) {
      total_size += 1 + 1;
    }

    // optional int32 context_player_id = 4;
    if (has_context_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_player_id());
    }

    // optional int32 context_value = 5;
    if (has_context_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_value());
    }

    // optional int32 context_team_id = 6;
    if (has_context_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageColoredText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageColoredText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageColoredText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageColoredText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageColoredText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageColoredText)
    MergeFrom(*source);
  }
}

void CUserMessageColoredText::MergeFrom(const CUserMessageColoredText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageColoredText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      reset_ = from.reset_;
    }
    if (cached_has_bits & 0x00000008u) {
      context_player_id_ = from.context_player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      context_value_ = from.context_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      context_team_id_ = from.context_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageColoredText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageColoredText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageColoredText::CopyFrom(const CUserMessageColoredText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageColoredText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageColoredText::IsInitialized() const {
  return true;
}

void CUserMessageColoredText::Swap(CUserMessageColoredText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageColoredText::InternalSwap(CUserMessageColoredText* other) {
  text_.Swap(&other->text_);
  std::swap(color_, other->color_);
  std::swap(reset_, other->reset_);
  std::swap(context_player_id_, other->context_player_id_);
  std::swap(context_value_, other->context_value_);
  std::swap(context_team_id_, other->context_team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageColoredText::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageColoredText

// optional uint32 color = 1;
bool CUserMessageColoredText::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageColoredText::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageColoredText::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageColoredText::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CUserMessageColoredText::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageColoredText.color)
  return color_;
}
void CUserMessageColoredText::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageColoredText.color)
}

// optional string text = 2;
bool CUserMessageColoredText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageColoredText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageColoredText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageColoredText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CUserMessageColoredText::text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageColoredText.text)
  return text_.GetNoArena();
}
void CUserMessageColoredText::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageColoredText.text)
}
#if LANG_CXX11
void CUserMessageColoredText::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageColoredText.text)
}
#endif
void CUserMessageColoredText::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageColoredText.text)
}
void CUserMessageColoredText::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageColoredText.text)
}
::std::string* CUserMessageColoredText::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageColoredText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageColoredText::release_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageColoredText.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageColoredText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageColoredText.text)
}

// optional bool reset = 3;
bool CUserMessageColoredText::has_reset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageColoredText::set_has_reset() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageColoredText::clear_has_reset() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageColoredText::clear_reset() {
  reset_ = false;
  clear_has_reset();
}
bool CUserMessageColoredText::reset() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageColoredText.reset)
  return reset_;
}
void CUserMessageColoredText::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageColoredText.reset)
}

// optional int32 context_player_id = 4;
bool CUserMessageColoredText::has_context_player_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageColoredText::set_has_context_player_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageColoredText::clear_has_context_player_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageColoredText::clear_context_player_id() {
  context_player_id_ = 0;
  clear_has_context_player_id();
}
::google::protobuf::int32 CUserMessageColoredText::context_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageColoredText.context_player_id)
  return context_player_id_;
}
void CUserMessageColoredText::set_context_player_id(::google::protobuf::int32 value) {
  set_has_context_player_id();
  context_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageColoredText.context_player_id)
}

// optional int32 context_value = 5;
bool CUserMessageColoredText::has_context_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CUserMessageColoredText::set_has_context_value() {
  _has_bits_[0] |= 0x00000010u;
}
void CUserMessageColoredText::clear_has_context_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void CUserMessageColoredText::clear_context_value() {
  context_value_ = 0;
  clear_has_context_value();
}
::google::protobuf::int32 CUserMessageColoredText::context_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageColoredText.context_value)
  return context_value_;
}
void CUserMessageColoredText::set_context_value(::google::protobuf::int32 value) {
  set_has_context_value();
  context_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageColoredText.context_value)
}

// optional int32 context_team_id = 6;
bool CUserMessageColoredText::has_context_team_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CUserMessageColoredText::set_has_context_team_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CUserMessageColoredText::clear_has_context_team_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CUserMessageColoredText::clear_context_team_id() {
  context_team_id_ = 0;
  clear_has_context_team_id();
}
::google::protobuf::int32 CUserMessageColoredText::context_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageColoredText.context_team_id)
  return context_team_id_;
}
void CUserMessageColoredText::set_context_team_id(::google::protobuf::int32 value) {
  set_has_context_team_id();
  context_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageColoredText.context_team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageItemPickup::kItemnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageItemPickup::CUserMessageItemPickup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageItemPickup)
}
CUserMessageItemPickup::CUserMessageItemPickup(const CUserMessageItemPickup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itemname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_itemname()) {
    itemname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemname_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageItemPickup)
}

void CUserMessageItemPickup::SharedCtor() {
  _cached_size_ = 0;
  itemname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMessageItemPickup::~CUserMessageItemPickup() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageItemPickup)
  SharedDtor();
}

void CUserMessageItemPickup::SharedDtor() {
  itemname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageItemPickup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageItemPickup::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageItemPickup& CUserMessageItemPickup::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageItemPickup* CUserMessageItemPickup::New(::google::protobuf::Arena* arena) const {
  CUserMessageItemPickup* n = new CUserMessageItemPickup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageItemPickup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageItemPickup)
  if (has_itemname()) {
    GOOGLE_DCHECK(!itemname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*itemname_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageItemPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageItemPickup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string itemname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageItemPickup.itemname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageItemPickup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageItemPickup)
  return false;
#undef DO_
}

void CUserMessageItemPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageItemPickup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string itemname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageItemPickup.itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->itemname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageItemPickup)
}

::google::protobuf::uint8* CUserMessageItemPickup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageItemPickup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string itemname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageItemPickup.itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->itemname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageItemPickup)
  return target;
}

size_t CUserMessageItemPickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageItemPickup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string itemname = 1;
  if (has_itemname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->itemname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageItemPickup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageItemPickup)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageItemPickup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageItemPickup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageItemPickup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageItemPickup)
    MergeFrom(*source);
  }
}

void CUserMessageItemPickup::MergeFrom(const CUserMessageItemPickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageItemPickup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_itemname()) {
    set_has_itemname();
    itemname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemname_);
  }
}

void CUserMessageItemPickup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageItemPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageItemPickup::CopyFrom(const CUserMessageItemPickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageItemPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageItemPickup::IsInitialized() const {
  return true;
}

void CUserMessageItemPickup::Swap(CUserMessageItemPickup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageItemPickup::InternalSwap(CUserMessageItemPickup* other) {
  itemname_.Swap(&other->itemname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageItemPickup::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageItemPickup

// optional string itemname = 1;
bool CUserMessageItemPickup::has_itemname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageItemPickup::set_has_itemname() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageItemPickup::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageItemPickup::clear_itemname() {
  itemname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_itemname();
}
const ::std::string& CUserMessageItemPickup::itemname() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageItemPickup.itemname)
  return itemname_.GetNoArena();
}
void CUserMessageItemPickup::set_itemname(const ::std::string& value) {
  set_has_itemname();
  itemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageItemPickup.itemname)
}
#if LANG_CXX11
void CUserMessageItemPickup::set_itemname(::std::string&& value) {
  set_has_itemname();
  itemname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageItemPickup.itemname)
}
#endif
void CUserMessageItemPickup::set_itemname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_itemname();
  itemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageItemPickup.itemname)
}
void CUserMessageItemPickup::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  itemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageItemPickup.itemname)
}
::std::string* CUserMessageItemPickup::mutable_itemname() {
  set_has_itemname();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageItemPickup.itemname)
  return itemname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageItemPickup::release_itemname() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageItemPickup.itemname)
  clear_has_itemname();
  return itemname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageItemPickup::set_allocated_itemname(::std::string* itemname) {
  if (itemname != NULL) {
    set_has_itemname();
  } else {
    clear_has_itemname();
  }
  itemname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemname);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageItemPickup.itemname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageAmmoDenied::kAmmoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageAmmoDenied::CUserMessageAmmoDenied()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageAmmoDenied)
}
CUserMessageAmmoDenied::CUserMessageAmmoDenied(const CUserMessageAmmoDenied& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ammo_id_ = from.ammo_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageAmmoDenied)
}

void CUserMessageAmmoDenied::SharedCtor() {
  _cached_size_ = 0;
  ammo_id_ = 0u;
}

CUserMessageAmmoDenied::~CUserMessageAmmoDenied() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageAmmoDenied)
  SharedDtor();
}

void CUserMessageAmmoDenied::SharedDtor() {
}

void CUserMessageAmmoDenied::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageAmmoDenied::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageAmmoDenied& CUserMessageAmmoDenied::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageAmmoDenied* CUserMessageAmmoDenied::New(::google::protobuf::Arena* arena) const {
  CUserMessageAmmoDenied* n = new CUserMessageAmmoDenied;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageAmmoDenied::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageAmmoDenied)
  ammo_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageAmmoDenied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageAmmoDenied)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ammo_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ammo_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageAmmoDenied)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageAmmoDenied)
  return false;
#undef DO_
}

void CUserMessageAmmoDenied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageAmmoDenied)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ammo_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ammo_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageAmmoDenied)
}

::google::protobuf::uint8* CUserMessageAmmoDenied::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageAmmoDenied)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ammo_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ammo_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageAmmoDenied)
  return target;
}

size_t CUserMessageAmmoDenied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageAmmoDenied)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 ammo_id = 1;
  if (has_ammo_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ammo_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageAmmoDenied::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageAmmoDenied)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAmmoDenied* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageAmmoDenied>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageAmmoDenied)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageAmmoDenied)
    MergeFrom(*source);
  }
}

void CUserMessageAmmoDenied::MergeFrom(const CUserMessageAmmoDenied& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageAmmoDenied)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ammo_id()) {
    set_ammo_id(from.ammo_id());
  }
}

void CUserMessageAmmoDenied::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageAmmoDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAmmoDenied::CopyFrom(const CUserMessageAmmoDenied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageAmmoDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAmmoDenied::IsInitialized() const {
  return true;
}

void CUserMessageAmmoDenied::Swap(CUserMessageAmmoDenied* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageAmmoDenied::InternalSwap(CUserMessageAmmoDenied* other) {
  std::swap(ammo_id_, other->ammo_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageAmmoDenied::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageAmmoDenied

// optional uint32 ammo_id = 1;
bool CUserMessageAmmoDenied::has_ammo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageAmmoDenied::set_has_ammo_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageAmmoDenied::clear_has_ammo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageAmmoDenied::clear_ammo_id() {
  ammo_id_ = 0u;
  clear_has_ammo_id();
}
::google::protobuf::uint32 CUserMessageAmmoDenied::ammo_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageAmmoDenied.ammo_id)
  return ammo_id_;
}
void CUserMessageAmmoDenied::set_ammo_id(::google::protobuf::uint32 value) {
  set_has_ammo_id();
  ammo_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageAmmoDenied.ammo_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCrosshairAngle::kAngcrosshairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCrosshairAngle::CUserMessageCrosshairAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCrosshairAngle)
}
CUserMessageCrosshairAngle::CUserMessageCrosshairAngle(const CUserMessageCrosshairAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angcrosshair()) {
    angcrosshair_ = new ::proto::dota::CMsgQAngle(*from.angcrosshair_);
  } else {
    angcrosshair_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCrosshairAngle)
}

void CUserMessageCrosshairAngle::SharedCtor() {
  _cached_size_ = 0;
  angcrosshair_ = NULL;
}

CUserMessageCrosshairAngle::~CUserMessageCrosshairAngle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCrosshairAngle)
  SharedDtor();
}

void CUserMessageCrosshairAngle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete angcrosshair_;
  }
}

void CUserMessageCrosshairAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCrosshairAngle::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageCrosshairAngle& CUserMessageCrosshairAngle::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageCrosshairAngle* CUserMessageCrosshairAngle::New(::google::protobuf::Arena* arena) const {
  CUserMessageCrosshairAngle* n = new CUserMessageCrosshairAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageCrosshairAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCrosshairAngle)
  if (has_angcrosshair()) {
    GOOGLE_DCHECK(angcrosshair_ != NULL);
    angcrosshair_->::proto::dota::CMsgQAngle::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageCrosshairAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCrosshairAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgQAngle angcrosshair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angcrosshair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCrosshairAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCrosshairAngle)
  return false;
#undef DO_
}

void CUserMessageCrosshairAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCrosshairAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgQAngle angcrosshair = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->angcrosshair_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCrosshairAngle)
}

::google::protobuf::uint8* CUserMessageCrosshairAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCrosshairAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgQAngle angcrosshair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->angcrosshair_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCrosshairAngle)
  return target;
}

size_t CUserMessageCrosshairAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCrosshairAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgQAngle angcrosshair = 1;
  if (has_angcrosshair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angcrosshair_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCrosshairAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCrosshairAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageCrosshairAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCrosshairAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCrosshairAngle)
    MergeFrom(*source);
  }
}

void CUserMessageCrosshairAngle::MergeFrom(const CUserMessageCrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_angcrosshair()) {
    mutable_angcrosshair()->::proto::dota::CMsgQAngle::MergeFrom(from.angcrosshair());
  }
}

void CUserMessageCrosshairAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCrosshairAngle::CopyFrom(const CUserMessageCrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCrosshairAngle::IsInitialized() const {
  return true;
}

void CUserMessageCrosshairAngle::Swap(CUserMessageCrosshairAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCrosshairAngle::InternalSwap(CUserMessageCrosshairAngle* other) {
  std::swap(angcrosshair_, other->angcrosshair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageCrosshairAngle::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageCrosshairAngle

// optional .proto.dota.CMsgQAngle angcrosshair = 1;
bool CUserMessageCrosshairAngle::has_angcrosshair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageCrosshairAngle::set_has_angcrosshair() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageCrosshairAngle::clear_has_angcrosshair() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageCrosshairAngle::clear_angcrosshair() {
  if (angcrosshair_ != NULL) angcrosshair_->::proto::dota::CMsgQAngle::Clear();
  clear_has_angcrosshair();
}
const ::proto::dota::CMsgQAngle& CUserMessageCrosshairAngle::angcrosshair() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCrosshairAngle.angcrosshair)
  return angcrosshair_ != NULL ? *angcrosshair_
                         : *::proto::dota::CMsgQAngle::internal_default_instance();
}
::proto::dota::CMsgQAngle* CUserMessageCrosshairAngle::mutable_angcrosshair() {
  set_has_angcrosshair();
  if (angcrosshair_ == NULL) {
    angcrosshair_ = new ::proto::dota::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageCrosshairAngle.angcrosshair)
  return angcrosshair_;
}
::proto::dota::CMsgQAngle* CUserMessageCrosshairAngle::release_angcrosshair() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageCrosshairAngle.angcrosshair)
  clear_has_angcrosshair();
  ::proto::dota::CMsgQAngle* temp = angcrosshair_;
  angcrosshair_ = NULL;
  return temp;
}
void CUserMessageCrosshairAngle::set_allocated_angcrosshair(::proto::dota::CMsgQAngle* angcrosshair) {
  delete angcrosshair_;
  angcrosshair_ = angcrosshair;
  if (angcrosshair) {
    set_has_angcrosshair();
  } else {
    clear_has_angcrosshair();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageCrosshairAngle.angcrosshair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageShowMenu::kValidslotsFieldNumber;
const int CUserMessageShowMenu::kDisplaytimeFieldNumber;
const int CUserMessageShowMenu::kNeedmoreFieldNumber;
const int CUserMessageShowMenu::kMenustringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageShowMenu::CUserMessageShowMenu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageShowMenu)
}
CUserMessageShowMenu::CUserMessageShowMenu(const CUserMessageShowMenu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  menustring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_menustring()) {
    menustring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.menustring_);
  }
  ::memcpy(&validslots_, &from.validslots_,
    reinterpret_cast<char*>(&needmore_) -
    reinterpret_cast<char*>(&validslots_) + sizeof(needmore_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageShowMenu)
}

void CUserMessageShowMenu::SharedCtor() {
  _cached_size_ = 0;
  menustring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&validslots_, 0, reinterpret_cast<char*>(&needmore_) -
    reinterpret_cast<char*>(&validslots_) + sizeof(needmore_));
}

CUserMessageShowMenu::~CUserMessageShowMenu() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageShowMenu)
  SharedDtor();
}

void CUserMessageShowMenu::SharedDtor() {
  menustring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageShowMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageShowMenu::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageShowMenu& CUserMessageShowMenu::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageShowMenu* CUserMessageShowMenu::New(::google::protobuf::Arena* arena) const {
  CUserMessageShowMenu* n = new CUserMessageShowMenu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageShowMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageShowMenu)
  if (has_menustring()) {
    GOOGLE_DCHECK(!menustring_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*menustring_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&validslots_, 0, reinterpret_cast<char*>(&needmore_) -
      reinterpret_cast<char*>(&validslots_) + sizeof(needmore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageShowMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageShowMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 validslots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_validslots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validslots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 displaytime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_displaytime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &displaytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needmore = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_needmore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needmore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string menustring = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_menustring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->menustring().data(), this->menustring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageShowMenu.menustring");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageShowMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageShowMenu)
  return false;
#undef DO_
}

void CUserMessageShowMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageShowMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 validslots = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->validslots(), output);
  }

  // optional uint32 displaytime = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->displaytime(), output);
  }

  // optional bool needmore = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needmore(), output);
  }

  // optional string menustring = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->menustring().data(), this->menustring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageShowMenu.menustring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->menustring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageShowMenu)
}

::google::protobuf::uint8* CUserMessageShowMenu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageShowMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 validslots = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->validslots(), target);
  }

  // optional uint32 displaytime = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->displaytime(), target);
  }

  // optional bool needmore = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needmore(), target);
  }

  // optional string menustring = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->menustring().data(), this->menustring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageShowMenu.menustring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->menustring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageShowMenu)
  return target;
}

size_t CUserMessageShowMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageShowMenu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string menustring = 4;
    if (has_menustring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->menustring());
    }

    // optional uint32 validslots = 1;
    if (has_validslots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->validslots());
    }

    // optional uint32 displaytime = 2;
    if (has_displaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->displaytime());
    }

    // optional bool needmore = 3;
    if (has_needmore()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageShowMenu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageShowMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageShowMenu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageShowMenu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageShowMenu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageShowMenu)
    MergeFrom(*source);
  }
}

void CUserMessageShowMenu::MergeFrom(const CUserMessageShowMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageShowMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_menustring();
      menustring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.menustring_);
    }
    if (cached_has_bits & 0x00000002u) {
      validslots_ = from.validslots_;
    }
    if (cached_has_bits & 0x00000004u) {
      displaytime_ = from.displaytime_;
    }
    if (cached_has_bits & 0x00000008u) {
      needmore_ = from.needmore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageShowMenu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageShowMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShowMenu::CopyFrom(const CUserMessageShowMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageShowMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShowMenu::IsInitialized() const {
  return true;
}

void CUserMessageShowMenu::Swap(CUserMessageShowMenu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageShowMenu::InternalSwap(CUserMessageShowMenu* other) {
  menustring_.Swap(&other->menustring_);
  std::swap(validslots_, other->validslots_);
  std::swap(displaytime_, other->displaytime_);
  std::swap(needmore_, other->needmore_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageShowMenu::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageShowMenu

// optional uint32 validslots = 1;
bool CUserMessageShowMenu::has_validslots() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageShowMenu::set_has_validslots() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageShowMenu::clear_has_validslots() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageShowMenu::clear_validslots() {
  validslots_ = 0u;
  clear_has_validslots();
}
::google::protobuf::uint32 CUserMessageShowMenu::validslots() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShowMenu.validslots)
  return validslots_;
}
void CUserMessageShowMenu::set_validslots(::google::protobuf::uint32 value) {
  set_has_validslots();
  validslots_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageShowMenu.validslots)
}

// optional uint32 displaytime = 2;
bool CUserMessageShowMenu::has_displaytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageShowMenu::set_has_displaytime() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageShowMenu::clear_has_displaytime() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageShowMenu::clear_displaytime() {
  displaytime_ = 0u;
  clear_has_displaytime();
}
::google::protobuf::uint32 CUserMessageShowMenu::displaytime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShowMenu.displaytime)
  return displaytime_;
}
void CUserMessageShowMenu::set_displaytime(::google::protobuf::uint32 value) {
  set_has_displaytime();
  displaytime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageShowMenu.displaytime)
}

// optional bool needmore = 3;
bool CUserMessageShowMenu::has_needmore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMessageShowMenu::set_has_needmore() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMessageShowMenu::clear_has_needmore() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMessageShowMenu::clear_needmore() {
  needmore_ = false;
  clear_has_needmore();
}
bool CUserMessageShowMenu::needmore() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShowMenu.needmore)
  return needmore_;
}
void CUserMessageShowMenu::set_needmore(bool value) {
  set_has_needmore();
  needmore_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageShowMenu.needmore)
}

// optional string menustring = 4;
bool CUserMessageShowMenu::has_menustring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageShowMenu::set_has_menustring() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageShowMenu::clear_has_menustring() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageShowMenu::clear_menustring() {
  menustring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_menustring();
}
const ::std::string& CUserMessageShowMenu::menustring() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageShowMenu.menustring)
  return menustring_.GetNoArena();
}
void CUserMessageShowMenu::set_menustring(const ::std::string& value) {
  set_has_menustring();
  menustring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageShowMenu.menustring)
}
#if LANG_CXX11
void CUserMessageShowMenu::set_menustring(::std::string&& value) {
  set_has_menustring();
  menustring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageShowMenu.menustring)
}
#endif
void CUserMessageShowMenu::set_menustring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_menustring();
  menustring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageShowMenu.menustring)
}
void CUserMessageShowMenu::set_menustring(const char* value, size_t size) {
  set_has_menustring();
  menustring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageShowMenu.menustring)
}
::std::string* CUserMessageShowMenu::mutable_menustring() {
  set_has_menustring();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageShowMenu.menustring)
  return menustring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageShowMenu::release_menustring() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageShowMenu.menustring)
  clear_has_menustring();
  return menustring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageShowMenu::set_allocated_menustring(::std::string* menustring) {
  if (menustring != NULL) {
    set_has_menustring();
  } else {
    clear_has_menustring();
  }
  menustring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), menustring);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageShowMenu.menustring)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCreditsMsg::kRolltypeFieldNumber;
const int CUserMessageCreditsMsg::kLogoLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCreditsMsg::CUserMessageCreditsMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCreditsMsg)
}
CUserMessageCreditsMsg::CUserMessageCreditsMsg(const CUserMessageCreditsMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logo_length_, &from.logo_length_,
    reinterpret_cast<char*>(&rolltype_) -
    reinterpret_cast<char*>(&logo_length_) + sizeof(rolltype_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCreditsMsg)
}

void CUserMessageCreditsMsg::SharedCtor() {
  _cached_size_ = 0;
  logo_length_ = 0;
  rolltype_ = -1;
}

CUserMessageCreditsMsg::~CUserMessageCreditsMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCreditsMsg)
  SharedDtor();
}

void CUserMessageCreditsMsg::SharedDtor() {
}

void CUserMessageCreditsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCreditsMsg::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageCreditsMsg& CUserMessageCreditsMsg::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageCreditsMsg* CUserMessageCreditsMsg::New(::google::protobuf::Arena* arena) const {
  CUserMessageCreditsMsg* n = new CUserMessageCreditsMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageCreditsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCreditsMsg)
  if (_has_bits_[0 / 32] & 3u) {
    logo_length_ = 0;
    rolltype_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageCreditsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCreditsMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::eRollType_IsValid(value)) {
            set_rolltype(static_cast< ::proto::dota::eRollType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float logo_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_logo_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logo_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCreditsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCreditsMsg)
  return false;
#undef DO_
}

void CUserMessageCreditsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCreditsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rolltype(), output);
  }

  // optional float logo_length = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->logo_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCreditsMsg)
}

::google::protobuf::uint8* CUserMessageCreditsMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCreditsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rolltype(), target);
  }

  // optional float logo_length = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->logo_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCreditsMsg)
  return target;
}

size_t CUserMessageCreditsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCreditsMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float logo_length = 2;
    if (has_logo_length()) {
      total_size += 1 + 4;
    }

    // optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
    if (has_rolltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rolltype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCreditsMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCreditsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCreditsMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageCreditsMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCreditsMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCreditsMsg)
    MergeFrom(*source);
  }
}

void CUserMessageCreditsMsg::MergeFrom(const CUserMessageCreditsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCreditsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      logo_length_ = from.logo_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      rolltype_ = from.rolltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCreditsMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCreditsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCreditsMsg::CopyFrom(const CUserMessageCreditsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCreditsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCreditsMsg::IsInitialized() const {
  return true;
}

void CUserMessageCreditsMsg::Swap(CUserMessageCreditsMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCreditsMsg::InternalSwap(CUserMessageCreditsMsg* other) {
  std::swap(logo_length_, other->logo_length_);
  std::swap(rolltype_, other->rolltype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageCreditsMsg::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageCreditsMsg

// optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
bool CUserMessageCreditsMsg::has_rolltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageCreditsMsg::set_has_rolltype() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageCreditsMsg::clear_has_rolltype() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageCreditsMsg::clear_rolltype() {
  rolltype_ = -1;
  clear_has_rolltype();
}
::proto::dota::eRollType CUserMessageCreditsMsg::rolltype() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCreditsMsg.rolltype)
  return static_cast< ::proto::dota::eRollType >(rolltype_);
}
void CUserMessageCreditsMsg::set_rolltype(::proto::dota::eRollType value) {
  assert(::proto::dota::eRollType_IsValid(value));
  set_has_rolltype();
  rolltype_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCreditsMsg.rolltype)
}

// optional float logo_length = 2;
bool CUserMessageCreditsMsg::has_logo_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageCreditsMsg::set_has_logo_length() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageCreditsMsg::clear_has_logo_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageCreditsMsg::clear_logo_length() {
  logo_length_ = 0;
  clear_has_logo_length();
}
float CUserMessageCreditsMsg::logo_length() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCreditsMsg.logo_length)
  return logo_length_;
}
void CUserMessageCreditsMsg::set_logo_length(float value) {
  set_has_logo_length();
  logo_length_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCreditsMsg.logo_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessagePlayJingle::CEntityMessagePlayJingle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessagePlayJingle)
}
CEntityMessagePlayJingle::CEntityMessagePlayJingle(const CEntityMessagePlayJingle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessagePlayJingle)
}

void CEntityMessagePlayJingle::SharedCtor() {
  _cached_size_ = 0;
}

CEntityMessagePlayJingle::~CEntityMessagePlayJingle() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessagePlayJingle)
  SharedDtor();
}

void CEntityMessagePlayJingle::SharedDtor() {
}

void CEntityMessagePlayJingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessagePlayJingle::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEntityMessagePlayJingle& CEntityMessagePlayJingle::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CEntityMessagePlayJingle* CEntityMessagePlayJingle::New(::google::protobuf::Arena* arena) const {
  CEntityMessagePlayJingle* n = new CEntityMessagePlayJingle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CEntityMessagePlayJingle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessagePlayJingle)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEntityMessagePlayJingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessagePlayJingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessagePlayJingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessagePlayJingle)
  return false;
#undef DO_
}

void CEntityMessagePlayJingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessagePlayJingle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessagePlayJingle)
}

::google::protobuf::uint8* CEntityMessagePlayJingle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessagePlayJingle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessagePlayJingle)
  return target;
}

size_t CEntityMessagePlayJingle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessagePlayJingle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessagePlayJingle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessagePlayJingle)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessagePlayJingle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEntityMessagePlayJingle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessagePlayJingle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessagePlayJingle)
    MergeFrom(*source);
  }
}

void CEntityMessagePlayJingle::MergeFrom(const CEntityMessagePlayJingle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessagePlayJingle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CEntityMessagePlayJingle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessagePlayJingle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessagePlayJingle::CopyFrom(const CEntityMessagePlayJingle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessagePlayJingle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessagePlayJingle::IsInitialized() const {
  return true;
}

void CEntityMessagePlayJingle::Swap(CEntityMessagePlayJingle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessagePlayJingle::InternalSwap(CEntityMessagePlayJingle* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CEntityMessagePlayJingle::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CEntityMessagePlayJingle

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessageScreenOverlay::kStartEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessageScreenOverlay::CEntityMessageScreenOverlay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessageScreenOverlay)
}
CEntityMessageScreenOverlay::CEntityMessageScreenOverlay(const CEntityMessageScreenOverlay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_effect_ = from.start_effect_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessageScreenOverlay)
}

void CEntityMessageScreenOverlay::SharedCtor() {
  _cached_size_ = 0;
  start_effect_ = false;
}

CEntityMessageScreenOverlay::~CEntityMessageScreenOverlay() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessageScreenOverlay)
  SharedDtor();
}

void CEntityMessageScreenOverlay::SharedDtor() {
}

void CEntityMessageScreenOverlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessageScreenOverlay::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEntityMessageScreenOverlay& CEntityMessageScreenOverlay::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CEntityMessageScreenOverlay* CEntityMessageScreenOverlay::New(::google::protobuf::Arena* arena) const {
  CEntityMessageScreenOverlay* n = new CEntityMessageScreenOverlay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CEntityMessageScreenOverlay::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessageScreenOverlay)
  start_effect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEntityMessageScreenOverlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessageScreenOverlay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool start_effect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_start_effect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_effect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessageScreenOverlay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessageScreenOverlay)
  return false;
#undef DO_
}

void CEntityMessageScreenOverlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessageScreenOverlay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool start_effect = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->start_effect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessageScreenOverlay)
}

::google::protobuf::uint8* CEntityMessageScreenOverlay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessageScreenOverlay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool start_effect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->start_effect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessageScreenOverlay)
  return target;
}

size_t CEntityMessageScreenOverlay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessageScreenOverlay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool start_effect = 1;
  if (has_start_effect()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessageScreenOverlay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessageScreenOverlay)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageScreenOverlay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEntityMessageScreenOverlay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessageScreenOverlay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessageScreenOverlay)
    MergeFrom(*source);
  }
}

void CEntityMessageScreenOverlay::MergeFrom(const CEntityMessageScreenOverlay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessageScreenOverlay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_effect()) {
    set_start_effect(from.start_effect());
  }
}

void CEntityMessageScreenOverlay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessageScreenOverlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageScreenOverlay::CopyFrom(const CEntityMessageScreenOverlay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessageScreenOverlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageScreenOverlay::IsInitialized() const {
  return true;
}

void CEntityMessageScreenOverlay::Swap(CEntityMessageScreenOverlay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessageScreenOverlay::InternalSwap(CEntityMessageScreenOverlay* other) {
  std::swap(start_effect_, other->start_effect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CEntityMessageScreenOverlay::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CEntityMessageScreenOverlay

// optional bool start_effect = 1;
bool CEntityMessageScreenOverlay::has_start_effect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CEntityMessageScreenOverlay::set_has_start_effect() {
  _has_bits_[0] |= 0x00000001u;
}
void CEntityMessageScreenOverlay::clear_has_start_effect() {
  _has_bits_[0] &= ~0x00000001u;
}
void CEntityMessageScreenOverlay::clear_start_effect() {
  start_effect_ = false;
  clear_has_start_effect();
}
bool CEntityMessageScreenOverlay::start_effect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageScreenOverlay.start_effect)
  return start_effect_;
}
void CEntityMessageScreenOverlay::set_start_effect(bool value) {
  set_has_start_effect();
  start_effect_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CEntityMessageScreenOverlay.start_effect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessageRemoveAllDecals::kRemoveDecalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessageRemoveAllDecals::CEntityMessageRemoveAllDecals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessageRemoveAllDecals)
}
CEntityMessageRemoveAllDecals::CEntityMessageRemoveAllDecals(const CEntityMessageRemoveAllDecals& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remove_decals_ = from.remove_decals_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessageRemoveAllDecals)
}

void CEntityMessageRemoveAllDecals::SharedCtor() {
  _cached_size_ = 0;
  remove_decals_ = false;
}

CEntityMessageRemoveAllDecals::~CEntityMessageRemoveAllDecals() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessageRemoveAllDecals)
  SharedDtor();
}

void CEntityMessageRemoveAllDecals::SharedDtor() {
}

void CEntityMessageRemoveAllDecals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessageRemoveAllDecals::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEntityMessageRemoveAllDecals& CEntityMessageRemoveAllDecals::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CEntityMessageRemoveAllDecals* CEntityMessageRemoveAllDecals::New(::google::protobuf::Arena* arena) const {
  CEntityMessageRemoveAllDecals* n = new CEntityMessageRemoveAllDecals;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CEntityMessageRemoveAllDecals::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessageRemoveAllDecals)
  remove_decals_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEntityMessageRemoveAllDecals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessageRemoveAllDecals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool remove_decals = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_remove_decals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_decals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessageRemoveAllDecals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessageRemoveAllDecals)
  return false;
#undef DO_
}

void CEntityMessageRemoveAllDecals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessageRemoveAllDecals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool remove_decals = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->remove_decals(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessageRemoveAllDecals)
}

::google::protobuf::uint8* CEntityMessageRemoveAllDecals::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessageRemoveAllDecals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool remove_decals = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->remove_decals(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessageRemoveAllDecals)
  return target;
}

size_t CEntityMessageRemoveAllDecals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessageRemoveAllDecals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool remove_decals = 1;
  if (has_remove_decals()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessageRemoveAllDecals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessageRemoveAllDecals)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageRemoveAllDecals* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEntityMessageRemoveAllDecals>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessageRemoveAllDecals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessageRemoveAllDecals)
    MergeFrom(*source);
  }
}

void CEntityMessageRemoveAllDecals::MergeFrom(const CEntityMessageRemoveAllDecals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessageRemoveAllDecals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_remove_decals()) {
    set_remove_decals(from.remove_decals());
  }
}

void CEntityMessageRemoveAllDecals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessageRemoveAllDecals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageRemoveAllDecals::CopyFrom(const CEntityMessageRemoveAllDecals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessageRemoveAllDecals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageRemoveAllDecals::IsInitialized() const {
  return true;
}

void CEntityMessageRemoveAllDecals::Swap(CEntityMessageRemoveAllDecals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessageRemoveAllDecals::InternalSwap(CEntityMessageRemoveAllDecals* other) {
  std::swap(remove_decals_, other->remove_decals_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CEntityMessageRemoveAllDecals::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CEntityMessageRemoveAllDecals

// optional bool remove_decals = 1;
bool CEntityMessageRemoveAllDecals::has_remove_decals() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CEntityMessageRemoveAllDecals::set_has_remove_decals() {
  _has_bits_[0] |= 0x00000001u;
}
void CEntityMessageRemoveAllDecals::clear_has_remove_decals() {
  _has_bits_[0] &= ~0x00000001u;
}
void CEntityMessageRemoveAllDecals::clear_remove_decals() {
  remove_decals_ = false;
  clear_has_remove_decals();
}
bool CEntityMessageRemoveAllDecals::remove_decals() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageRemoveAllDecals.remove_decals)
  return remove_decals_;
}
void CEntityMessageRemoveAllDecals::set_remove_decals(bool value) {
  set_has_remove_decals();
  remove_decals_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CEntityMessageRemoveAllDecals.remove_decals)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessagePropagateForce::kImpulseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessagePropagateForce::CEntityMessagePropagateForce()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessagePropagateForce)
}
CEntityMessagePropagateForce::CEntityMessagePropagateForce(const CEntityMessagePropagateForce& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_impulse()) {
    impulse_ = new ::proto::dota::CMsgVector(*from.impulse_);
  } else {
    impulse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessagePropagateForce)
}

void CEntityMessagePropagateForce::SharedCtor() {
  _cached_size_ = 0;
  impulse_ = NULL;
}

CEntityMessagePropagateForce::~CEntityMessagePropagateForce() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessagePropagateForce)
  SharedDtor();
}

void CEntityMessagePropagateForce::SharedDtor() {
  if (this != internal_default_instance()) {
    delete impulse_;
  }
}

void CEntityMessagePropagateForce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessagePropagateForce::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEntityMessagePropagateForce& CEntityMessagePropagateForce::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CEntityMessagePropagateForce* CEntityMessagePropagateForce::New(::google::protobuf::Arena* arena) const {
  CEntityMessagePropagateForce* n = new CEntityMessagePropagateForce;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CEntityMessagePropagateForce::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessagePropagateForce)
  if (has_impulse()) {
    GOOGLE_DCHECK(impulse_ != NULL);
    impulse_->::proto::dota::CMsgVector::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEntityMessagePropagateForce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessagePropagateForce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector impulse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impulse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessagePropagateForce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessagePropagateForce)
  return false;
#undef DO_
}

void CEntityMessagePropagateForce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessagePropagateForce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector impulse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->impulse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessagePropagateForce)
}

::google::protobuf::uint8* CEntityMessagePropagateForce::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessagePropagateForce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector impulse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->impulse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessagePropagateForce)
  return target;
}

size_t CEntityMessagePropagateForce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessagePropagateForce)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgVector impulse = 1;
  if (has_impulse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->impulse_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessagePropagateForce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessagePropagateForce)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessagePropagateForce* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEntityMessagePropagateForce>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessagePropagateForce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessagePropagateForce)
    MergeFrom(*source);
  }
}

void CEntityMessagePropagateForce::MergeFrom(const CEntityMessagePropagateForce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessagePropagateForce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_impulse()) {
    mutable_impulse()->::proto::dota::CMsgVector::MergeFrom(from.impulse());
  }
}

void CEntityMessagePropagateForce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessagePropagateForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessagePropagateForce::CopyFrom(const CEntityMessagePropagateForce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessagePropagateForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessagePropagateForce::IsInitialized() const {
  return true;
}

void CEntityMessagePropagateForce::Swap(CEntityMessagePropagateForce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessagePropagateForce::InternalSwap(CEntityMessagePropagateForce* other) {
  std::swap(impulse_, other->impulse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CEntityMessagePropagateForce::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CEntityMessagePropagateForce

// optional .proto.dota.CMsgVector impulse = 1;
bool CEntityMessagePropagateForce::has_impulse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CEntityMessagePropagateForce::set_has_impulse() {
  _has_bits_[0] |= 0x00000001u;
}
void CEntityMessagePropagateForce::clear_has_impulse() {
  _has_bits_[0] &= ~0x00000001u;
}
void CEntityMessagePropagateForce::clear_impulse() {
  if (impulse_ != NULL) impulse_->::proto::dota::CMsgVector::Clear();
  clear_has_impulse();
}
const ::proto::dota::CMsgVector& CEntityMessagePropagateForce::impulse() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessagePropagateForce.impulse)
  return impulse_ != NULL ? *impulse_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CEntityMessagePropagateForce::mutable_impulse() {
  set_has_impulse();
  if (impulse_ == NULL) {
    impulse_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CEntityMessagePropagateForce.impulse)
  return impulse_;
}
::proto::dota::CMsgVector* CEntityMessagePropagateForce::release_impulse() {
  // @@protoc_insertion_point(field_release:proto.dota.CEntityMessagePropagateForce.impulse)
  clear_has_impulse();
  ::proto::dota::CMsgVector* temp = impulse_;
  impulse_ = NULL;
  return temp;
}
void CEntityMessagePropagateForce::set_allocated_impulse(::proto::dota::CMsgVector* impulse) {
  delete impulse_;
  impulse_ = impulse;
  if (impulse) {
    set_has_impulse();
  } else {
    clear_has_impulse();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CEntityMessagePropagateForce.impulse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessageDoSpark::kOriginFieldNumber;
const int CEntityMessageDoSpark::kEntityindexFieldNumber;
const int CEntityMessageDoSpark::kRadiusFieldNumber;
const int CEntityMessageDoSpark::kColorFieldNumber;
const int CEntityMessageDoSpark::kBeamsFieldNumber;
const int CEntityMessageDoSpark::kThickFieldNumber;
const int CEntityMessageDoSpark::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessageDoSpark::CEntityMessageDoSpark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessageDoSpark)
}
CEntityMessageDoSpark::CEntityMessageDoSpark(const CEntityMessageDoSpark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  ::memcpy(&entityindex_, &from.entityindex_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&entityindex_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessageDoSpark)
}

void CEntityMessageDoSpark::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&origin_) + sizeof(duration_));
}

CEntityMessageDoSpark::~CEntityMessageDoSpark() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessageDoSpark)
  SharedDtor();
}

void CEntityMessageDoSpark::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
}

void CEntityMessageDoSpark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessageDoSpark::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEntityMessageDoSpark& CEntityMessageDoSpark::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CEntityMessageDoSpark* CEntityMessageDoSpark::New(::google::protobuf::Arena* arena) const {
  CEntityMessageDoSpark* n = new CEntityMessageDoSpark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CEntityMessageDoSpark::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessageDoSpark)
  if (has_origin()) {
    GOOGLE_DCHECK(origin_ != NULL);
    origin_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&entityindex_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&entityindex_) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEntityMessageDoSpark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessageDoSpark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 entityindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_entityindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entityindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 beams = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_beams();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float thick = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_thick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessageDoSpark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessageDoSpark)
  return false;
#undef DO_
}

void CEntityMessageDoSpark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessageDoSpark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional uint32 entityindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entityindex(), output);
  }

  // optional float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color(), output);
  }

  // optional uint32 beams = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->beams(), output);
  }

  // optional float thick = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->thick(), output);
  }

  // optional float duration = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessageDoSpark)
}

::google::protobuf::uint8* CEntityMessageDoSpark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessageDoSpark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional uint32 entityindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entityindex(), target);
  }

  // optional float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color(), target);
  }

  // optional uint32 beams = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->beams(), target);
  }

  // optional float thick = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->thick(), target);
  }

  // optional float duration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessageDoSpark)
  return target;
}

size_t CEntityMessageDoSpark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessageDoSpark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional uint32 entityindex = 2;
    if (has_entityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entityindex());
    }

    // optional float radius = 3;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional fixed32 color = 4;
    if (has_color()) {
      total_size += 1 + 4;
    }

    // optional uint32 beams = 5;
    if (has_beams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beams());
    }

    // optional float thick = 6;
    if (has_thick()) {
      total_size += 1 + 4;
    }

    // optional float duration = 7;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessageDoSpark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessageDoSpark)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageDoSpark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEntityMessageDoSpark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessageDoSpark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessageDoSpark)
    MergeFrom(*source);
  }
}

void CEntityMessageDoSpark::MergeFrom(const CEntityMessageDoSpark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessageDoSpark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      entityindex_ = from.entityindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000010u) {
      beams_ = from.beams_;
    }
    if (cached_has_bits & 0x00000020u) {
      thick_ = from.thick_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEntityMessageDoSpark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessageDoSpark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageDoSpark::CopyFrom(const CEntityMessageDoSpark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessageDoSpark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageDoSpark::IsInitialized() const {
  return true;
}

void CEntityMessageDoSpark::Swap(CEntityMessageDoSpark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessageDoSpark::InternalSwap(CEntityMessageDoSpark* other) {
  std::swap(origin_, other->origin_);
  std::swap(entityindex_, other->entityindex_);
  std::swap(radius_, other->radius_);
  std::swap(color_, other->color_);
  std::swap(beams_, other->beams_);
  std::swap(thick_, other->thick_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CEntityMessageDoSpark::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CEntityMessageDoSpark

// optional .proto.dota.CMsgVector origin = 1;
bool CEntityMessageDoSpark::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CEntityMessageDoSpark::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CEntityMessageDoSpark::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CEntityMessageDoSpark::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CEntityMessageDoSpark::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageDoSpark.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CEntityMessageDoSpark::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CEntityMessageDoSpark.origin)
  return origin_;
}
::proto::dota::CMsgVector* CEntityMessageDoSpark::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CEntityMessageDoSpark.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CEntityMessageDoSpark::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CEntityMessageDoSpark.origin)
}

// optional uint32 entityindex = 2;
bool CEntityMessageDoSpark::has_entityindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CEntityMessageDoSpark::set_has_entityindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CEntityMessageDoSpark::clear_has_entityindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CEntityMessageDoSpark::clear_entityindex() {
  entityindex_ = 0u;
  clear_has_entityindex();
}
::google::protobuf::uint32 CEntityMessageDoSpark::entityindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageDoSpark.entityindex)
  return entityindex_;
}
void CEntityMessageDoSpark::set_entityindex(::google::protobuf::uint32 value) {
  set_has_entityindex();
  entityindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CEntityMessageDoSpark.entityindex)
}

// optional float radius = 3;
bool CEntityMessageDoSpark::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CEntityMessageDoSpark::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
void CEntityMessageDoSpark::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
void CEntityMessageDoSpark::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
float CEntityMessageDoSpark::radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageDoSpark.radius)
  return radius_;
}
void CEntityMessageDoSpark::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CEntityMessageDoSpark.radius)
}

// optional fixed32 color = 4;
bool CEntityMessageDoSpark::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CEntityMessageDoSpark::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void CEntityMessageDoSpark::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void CEntityMessageDoSpark::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CEntityMessageDoSpark::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageDoSpark.color)
  return color_;
}
void CEntityMessageDoSpark::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CEntityMessageDoSpark.color)
}

// optional uint32 beams = 5;
bool CEntityMessageDoSpark::has_beams() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CEntityMessageDoSpark::set_has_beams() {
  _has_bits_[0] |= 0x00000010u;
}
void CEntityMessageDoSpark::clear_has_beams() {
  _has_bits_[0] &= ~0x00000010u;
}
void CEntityMessageDoSpark::clear_beams() {
  beams_ = 0u;
  clear_has_beams();
}
::google::protobuf::uint32 CEntityMessageDoSpark::beams() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageDoSpark.beams)
  return beams_;
}
void CEntityMessageDoSpark::set_beams(::google::protobuf::uint32 value) {
  set_has_beams();
  beams_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CEntityMessageDoSpark.beams)
}

// optional float thick = 6;
bool CEntityMessageDoSpark::has_thick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CEntityMessageDoSpark::set_has_thick() {
  _has_bits_[0] |= 0x00000020u;
}
void CEntityMessageDoSpark::clear_has_thick() {
  _has_bits_[0] &= ~0x00000020u;
}
void CEntityMessageDoSpark::clear_thick() {
  thick_ = 0;
  clear_has_thick();
}
float CEntityMessageDoSpark::thick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageDoSpark.thick)
  return thick_;
}
void CEntityMessageDoSpark::set_thick(float value) {
  set_has_thick();
  thick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CEntityMessageDoSpark.thick)
}

// optional float duration = 7;
bool CEntityMessageDoSpark::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CEntityMessageDoSpark::set_has_duration() {
  _has_bits_[0] |= 0x00000040u;
}
void CEntityMessageDoSpark::clear_has_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
void CEntityMessageDoSpark::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CEntityMessageDoSpark::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageDoSpark.duration)
  return duration_;
}
void CEntityMessageDoSpark::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CEntityMessageDoSpark.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessageFixAngle::kRelativeFieldNumber;
const int CEntityMessageFixAngle::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessageFixAngle::CEntityMessageFixAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessageFixAngle)
}
CEntityMessageFixAngle::CEntityMessageFixAngle(const CEntityMessageFixAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    angle_ = new ::proto::dota::CMsgQAngle(*from.angle_);
  } else {
    angle_ = NULL;
  }
  relative_ = from.relative_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessageFixAngle)
}

void CEntityMessageFixAngle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&angle_, 0, reinterpret_cast<char*>(&relative_) -
    reinterpret_cast<char*>(&angle_) + sizeof(relative_));
}

CEntityMessageFixAngle::~CEntityMessageFixAngle() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessageFixAngle)
  SharedDtor();
}

void CEntityMessageFixAngle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete angle_;
  }
}

void CEntityMessageFixAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessageFixAngle::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CEntityMessageFixAngle& CEntityMessageFixAngle::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CEntityMessageFixAngle* CEntityMessageFixAngle::New(::google::protobuf::Arena* arena) const {
  CEntityMessageFixAngle* n = new CEntityMessageFixAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CEntityMessageFixAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessageFixAngle)
  if (has_angle()) {
    GOOGLE_DCHECK(angle_ != NULL);
    angle_->::proto::dota::CMsgQAngle::Clear();
  }
  relative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CEntityMessageFixAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessageFixAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool relative = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_relative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessageFixAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessageFixAngle)
  return false;
#undef DO_
}

void CEntityMessageFixAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessageFixAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool relative = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->relative(), output);
  }

  // optional .proto.dota.CMsgQAngle angle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angle_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessageFixAngle)
}

::google::protobuf::uint8* CEntityMessageFixAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessageFixAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool relative = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->relative(), target);
  }

  // optional .proto.dota.CMsgQAngle angle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angle_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessageFixAngle)
  return target;
}

size_t CEntityMessageFixAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessageFixAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgQAngle angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angle_);
    }

    // optional bool relative = 1;
    if (has_relative()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessageFixAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessageFixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageFixAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEntityMessageFixAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessageFixAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessageFixAngle)
    MergeFrom(*source);
  }
}

void CEntityMessageFixAngle::MergeFrom(const CEntityMessageFixAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessageFixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_angle()->::proto::dota::CMsgQAngle::MergeFrom(from.angle());
    }
    if (cached_has_bits & 0x00000002u) {
      relative_ = from.relative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEntityMessageFixAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessageFixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageFixAngle::CopyFrom(const CEntityMessageFixAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessageFixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageFixAngle::IsInitialized() const {
  return true;
}

void CEntityMessageFixAngle::Swap(CEntityMessageFixAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessageFixAngle::InternalSwap(CEntityMessageFixAngle* other) {
  std::swap(angle_, other->angle_);
  std::swap(relative_, other->relative_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CEntityMessageFixAngle::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CEntityMessageFixAngle

// optional bool relative = 1;
bool CEntityMessageFixAngle::has_relative() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CEntityMessageFixAngle::set_has_relative() {
  _has_bits_[0] |= 0x00000002u;
}
void CEntityMessageFixAngle::clear_has_relative() {
  _has_bits_[0] &= ~0x00000002u;
}
void CEntityMessageFixAngle::clear_relative() {
  relative_ = false;
  clear_has_relative();
}
bool CEntityMessageFixAngle::relative() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageFixAngle.relative)
  return relative_;
}
void CEntityMessageFixAngle::set_relative(bool value) {
  set_has_relative();
  relative_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CEntityMessageFixAngle.relative)
}

// optional .proto.dota.CMsgQAngle angle = 2;
bool CEntityMessageFixAngle::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CEntityMessageFixAngle::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void CEntityMessageFixAngle::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CEntityMessageFixAngle::clear_angle() {
  if (angle_ != NULL) angle_->::proto::dota::CMsgQAngle::Clear();
  clear_has_angle();
}
const ::proto::dota::CMsgQAngle& CEntityMessageFixAngle::angle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CEntityMessageFixAngle.angle)
  return angle_ != NULL ? *angle_
                         : *::proto::dota::CMsgQAngle::internal_default_instance();
}
::proto::dota::CMsgQAngle* CEntityMessageFixAngle::mutable_angle() {
  set_has_angle();
  if (angle_ == NULL) {
    angle_ = new ::proto::dota::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CEntityMessageFixAngle.angle)
  return angle_;
}
::proto::dota::CMsgQAngle* CEntityMessageFixAngle::release_angle() {
  // @@protoc_insertion_point(field_release:proto.dota.CEntityMessageFixAngle.angle)
  clear_has_angle();
  ::proto::dota::CMsgQAngle* temp = angle_;
  angle_ = NULL;
  return temp;
}
void CEntityMessageFixAngle::set_allocated_angle(::proto::dota::CMsgQAngle* angle) {
  delete angle_;
  angle_ = angle;
  if (angle) {
    set_has_angle();
  } else {
    clear_has_angle();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CEntityMessageFixAngle.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCameraTransition_Transition_DataDriven::kFilenameFieldNumber;
const int CUserMessageCameraTransition_Transition_DataDriven::kAttachEntIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCameraTransition_Transition_DataDriven::CUserMessageCameraTransition_Transition_DataDriven()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
}
CUserMessageCameraTransition_Transition_DataDriven::CUserMessageCameraTransition_Transition_DataDriven(const CUserMessageCameraTransition_Transition_DataDriven& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  attach_ent_index_ = from.attach_ent_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
}

void CUserMessageCameraTransition_Transition_DataDriven::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_ent_index_ = 0;
}

CUserMessageCameraTransition_Transition_DataDriven::~CUserMessageCameraTransition_Transition_DataDriven() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  SharedDtor();
}

void CUserMessageCameraTransition_Transition_DataDriven::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageCameraTransition_Transition_DataDriven::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCameraTransition_Transition_DataDriven::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageCameraTransition_Transition_DataDriven& CUserMessageCameraTransition_Transition_DataDriven::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageCameraTransition_Transition_DataDriven* CUserMessageCameraTransition_Transition_DataDriven::New(::google::protobuf::Arena* arena) const {
  CUserMessageCameraTransition_Transition_DataDriven* n = new CUserMessageCameraTransition_Transition_DataDriven;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageCameraTransition_Transition_DataDriven::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  if (has_filename()) {
    GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*filename_.UnsafeRawStringPointer())->clear();
  }
  attach_ent_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageCameraTransition_Transition_DataDriven::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attach_ent_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_attach_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  return false;
#undef DO_
}

void CUserMessageCameraTransition_Transition_DataDriven::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional int32 attach_ent_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attach_ent_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
}

::google::protobuf::uint8* CUserMessageCameraTransition_Transition_DataDriven::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional int32 attach_ent_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attach_ent_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  return target;
}

size_t CUserMessageCameraTransition_Transition_DataDriven::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 attach_ent_index = 2;
    if (has_attach_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_ent_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCameraTransition_Transition_DataDriven* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageCameraTransition_Transition_DataDriven>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
    MergeFrom(*source);
  }
}

void CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(const CUserMessageCameraTransition_Transition_DataDriven& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      attach_ent_index_ = from.attach_ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCameraTransition_Transition_DataDriven::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCameraTransition_Transition_DataDriven::CopyFrom(const CUserMessageCameraTransition_Transition_DataDriven& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCameraTransition_Transition_DataDriven::IsInitialized() const {
  return true;
}

void CUserMessageCameraTransition_Transition_DataDriven::Swap(CUserMessageCameraTransition_Transition_DataDriven* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCameraTransition_Transition_DataDriven::InternalSwap(CUserMessageCameraTransition_Transition_DataDriven* other) {
  filename_.Swap(&other->filename_);
  std::swap(attach_ent_index_, other->attach_ent_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageCameraTransition_Transition_DataDriven::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageCameraTransition_Transition_DataDriven

// optional string filename = 1;
bool CUserMessageCameraTransition_Transition_DataDriven::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageCameraTransition_Transition_DataDriven::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageCameraTransition_Transition_DataDriven::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageCameraTransition_Transition_DataDriven::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CUserMessageCameraTransition_Transition_DataDriven::filename() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename)
  return filename_.GetNoArena();
}
void CUserMessageCameraTransition_Transition_DataDriven::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename)
}
#if LANG_CXX11
void CUserMessageCameraTransition_Transition_DataDriven::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename)
}
#endif
void CUserMessageCameraTransition_Transition_DataDriven::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename)
}
void CUserMessageCameraTransition_Transition_DataDriven::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename)
}
::std::string* CUserMessageCameraTransition_Transition_DataDriven::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageCameraTransition_Transition_DataDriven::release_filename() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageCameraTransition_Transition_DataDriven::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename)
}

// optional int32 attach_ent_index = 2;
bool CUserMessageCameraTransition_Transition_DataDriven::has_attach_ent_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageCameraTransition_Transition_DataDriven::set_has_attach_ent_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageCameraTransition_Transition_DataDriven::clear_has_attach_ent_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageCameraTransition_Transition_DataDriven::clear_attach_ent_index() {
  attach_ent_index_ = 0;
  clear_has_attach_ent_index();
}
::google::protobuf::int32 CUserMessageCameraTransition_Transition_DataDriven::attach_ent_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.attach_ent_index)
  return attach_ent_index_;
}
void CUserMessageCameraTransition_Transition_DataDriven::set_attach_ent_index(::google::protobuf::int32 value) {
  set_has_attach_ent_index();
  attach_ent_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCameraTransition.Transition_DataDriven.attach_ent_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCameraTransition::kCameraTypeFieldNumber;
const int CUserMessageCameraTransition::kDurationFieldNumber;
const int CUserMessageCameraTransition::kParamsDataDrivenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCameraTransition::CUserMessageCameraTransition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCameraTransition)
}
CUserMessageCameraTransition::CUserMessageCameraTransition(const CUserMessageCameraTransition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_params_data_driven()) {
    params_data_driven_ = new ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven(*from.params_data_driven_);
  } else {
    params_data_driven_ = NULL;
  }
  ::memcpy(&camera_type_, &from.camera_type_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&camera_type_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCameraTransition)
}

void CUserMessageCameraTransition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&params_data_driven_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&params_data_driven_) + sizeof(duration_));
}

CUserMessageCameraTransition::~CUserMessageCameraTransition() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCameraTransition)
  SharedDtor();
}

void CUserMessageCameraTransition::SharedDtor() {
  if (this != internal_default_instance()) {
    delete params_data_driven_;
  }
}

void CUserMessageCameraTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCameraTransition::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageCameraTransition& CUserMessageCameraTransition::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageCameraTransition* CUserMessageCameraTransition::New(::google::protobuf::Arena* arena) const {
  CUserMessageCameraTransition* n = new CUserMessageCameraTransition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageCameraTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCameraTransition)
  if (has_params_data_driven()) {
    GOOGLE_DCHECK(params_data_driven_ != NULL);
    params_data_driven_->::proto::dota::CUserMessageCameraTransition_Transition_DataDriven::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&camera_type_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&camera_type_) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageCameraTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCameraTransition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 camera_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_camera_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params_data_driven()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCameraTransition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCameraTransition)
  return false;
#undef DO_
}

void CUserMessageCameraTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCameraTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 camera_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_type(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->params_data_driven_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCameraTransition)
}

::google::protobuf::uint8* CUserMessageCameraTransition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCameraTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 camera_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_type(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->params_data_driven_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCameraTransition)
  return target;
}

size_t CUserMessageCameraTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCameraTransition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
    if (has_params_data_driven()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->params_data_driven_);
    }

    // optional uint32 camera_type = 1;
    if (has_camera_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_type());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCameraTransition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCameraTransition)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCameraTransition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageCameraTransition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCameraTransition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCameraTransition)
    MergeFrom(*source);
  }
}

void CUserMessageCameraTransition::MergeFrom(const CUserMessageCameraTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCameraTransition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_params_data_driven()->::proto::dota::CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(from.params_data_driven());
    }
    if (cached_has_bits & 0x00000002u) {
      camera_type_ = from.camera_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCameraTransition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCameraTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCameraTransition::CopyFrom(const CUserMessageCameraTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCameraTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCameraTransition::IsInitialized() const {
  return true;
}

void CUserMessageCameraTransition::Swap(CUserMessageCameraTransition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCameraTransition::InternalSwap(CUserMessageCameraTransition* other) {
  std::swap(params_data_driven_, other->params_data_driven_);
  std::swap(camera_type_, other->camera_type_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageCameraTransition::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageCameraTransition

// optional uint32 camera_type = 1;
bool CUserMessageCameraTransition::has_camera_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageCameraTransition::set_has_camera_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageCameraTransition::clear_has_camera_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageCameraTransition::clear_camera_type() {
  camera_type_ = 0u;
  clear_has_camera_type();
}
::google::protobuf::uint32 CUserMessageCameraTransition::camera_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCameraTransition.camera_type)
  return camera_type_;
}
void CUserMessageCameraTransition::set_camera_type(::google::protobuf::uint32 value) {
  set_has_camera_type();
  camera_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCameraTransition.camera_type)
}

// optional float duration = 2;
bool CUserMessageCameraTransition::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMessageCameraTransition::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMessageCameraTransition::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMessageCameraTransition::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CUserMessageCameraTransition::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCameraTransition.duration)
  return duration_;
}
void CUserMessageCameraTransition::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageCameraTransition.duration)
}

// optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
bool CUserMessageCameraTransition::has_params_data_driven() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageCameraTransition::set_has_params_data_driven() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageCameraTransition::clear_has_params_data_driven() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageCameraTransition::clear_params_data_driven() {
  if (params_data_driven_ != NULL) params_data_driven_->::proto::dota::CUserMessageCameraTransition_Transition_DataDriven::Clear();
  clear_has_params_data_driven();
}
const ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven& CUserMessageCameraTransition::params_data_driven() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageCameraTransition.params_data_driven)
  return params_data_driven_ != NULL ? *params_data_driven_
                         : *::proto::dota::CUserMessageCameraTransition_Transition_DataDriven::internal_default_instance();
}
::proto::dota::CUserMessageCameraTransition_Transition_DataDriven* CUserMessageCameraTransition::mutable_params_data_driven() {
  set_has_params_data_driven();
  if (params_data_driven_ == NULL) {
    params_data_driven_ = new ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageCameraTransition.params_data_driven)
  return params_data_driven_;
}
::proto::dota::CUserMessageCameraTransition_Transition_DataDriven* CUserMessageCameraTransition::release_params_data_driven() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageCameraTransition.params_data_driven)
  clear_has_params_data_driven();
  ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven* temp = params_data_driven_;
  params_data_driven_ = NULL;
  return temp;
}
void CUserMessageCameraTransition::set_allocated_params_data_driven(::proto::dota::CUserMessageCameraTransition_Transition_DataDriven* params_data_driven) {
  delete params_data_driven_;
  params_data_driven_ = params_data_driven;
  if (params_data_driven) {
    set_has_params_data_driven();
  } else {
    clear_has_params_data_driven();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageCameraTransition.params_data_driven)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_ReleaseParticleIndex::CUserMsg_ParticleManager_ReleaseParticleIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
}
CUserMsg_ParticleManager_ReleaseParticleIndex::CUserMsg_ParticleManager_ReleaseParticleIndex(const CUserMsg_ParticleManager_ReleaseParticleIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SharedCtor() {
  _cached_size_ = 0;
}

CUserMsg_ParticleManager_ReleaseParticleIndex::~CUserMsg_ParticleManager_ReleaseParticleIndex() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  SharedDtor();
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SharedDtor() {
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_ReleaseParticleIndex::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_ReleaseParticleIndex& CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_ReleaseParticleIndex* CUserMsg_ParticleManager_ReleaseParticleIndex::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_ReleaseParticleIndex* n = new CUserMsg_ParticleManager_ReleaseParticleIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_ReleaseParticleIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_ReleaseParticleIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  return target;
}

size_t CUserMsg_ParticleManager_ReleaseParticleIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_ReleaseParticleIndex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_ReleaseParticleIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const CUserMsg_ParticleManager_ReleaseParticleIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const CUserMsg_ParticleManager_ReleaseParticleIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_ReleaseParticleIndex::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::Swap(CUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_ReleaseParticleIndex::InternalSwap(CUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_ReleaseParticleIndex::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_ReleaseParticleIndex

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_CreateParticle::kParticleNameIndexFieldNumber;
const int CUserMsg_ParticleManager_CreateParticle::kAttachTypeFieldNumber;
const int CUserMsg_ParticleManager_CreateParticle::kEntityHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_CreateParticle::CUserMsg_ParticleManager_CreateParticle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.CreateParticle)
}
CUserMsg_ParticleManager_CreateParticle::CUserMsg_ParticleManager_CreateParticle(const CUserMsg_ParticleManager_CreateParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&particle_name_index_, &from.particle_name_index_,
    reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&particle_name_index_) + sizeof(entity_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.CreateParticle)
}

void CUserMsg_ParticleManager_CreateParticle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&particle_name_index_, 0, reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&particle_name_index_) + sizeof(entity_handle_));
}

CUserMsg_ParticleManager_CreateParticle::~CUserMsg_ParticleManager_CreateParticle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  SharedDtor();
}

void CUserMsg_ParticleManager_CreateParticle::SharedDtor() {
}

void CUserMsg_ParticleManager_CreateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_CreateParticle::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_CreateParticle& CUserMsg_ParticleManager_CreateParticle::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_CreateParticle* CUserMsg_ParticleManager_CreateParticle::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_CreateParticle* n = new CUserMsg_ParticleManager_CreateParticle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_CreateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&particle_name_index_, 0, reinterpret_cast<char*>(&entity_handle_) -
      reinterpret_cast<char*>(&particle_name_index_) + sizeof(entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_CreateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 particle_name_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_particle_name_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &particle_name_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attach_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_attach_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_CreateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 particle_name_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->particle_name_index(), output);
  }

  // optional int32 attach_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attach_type(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.CreateParticle)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_CreateParticle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 particle_name_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->particle_name_index(), target);
  }

  // optional int32 attach_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attach_type(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  return target;
}

size_t CUserMsg_ParticleManager_CreateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 particle_name_index = 1;
    if (has_particle_name_index()) {
      total_size += 1 + 8;
    }

    // optional int32 attach_type = 2;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_CreateParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_CreateParticle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_CreateParticle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.CreateParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.CreateParticle)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_CreateParticle::MergeFrom(const CUserMsg_ParticleManager_CreateParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      particle_name_index_ = from.particle_name_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      attach_type_ = from.attach_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_CreateParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_CreateParticle::CopyFrom(const CUserMsg_ParticleManager_CreateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_CreateParticle::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_CreateParticle::Swap(CUserMsg_ParticleManager_CreateParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_CreateParticle::InternalSwap(CUserMsg_ParticleManager_CreateParticle* other) {
  std::swap(particle_name_index_, other->particle_name_index_);
  std::swap(attach_type_, other->attach_type_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_CreateParticle::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_CreateParticle

// optional fixed64 particle_name_index = 1;
bool CUserMsg_ParticleManager_CreateParticle::has_particle_name_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_CreateParticle::set_has_particle_name_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_CreateParticle::clear_has_particle_name_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_CreateParticle::clear_particle_name_index() {
  particle_name_index_ = GOOGLE_ULONGLONG(0);
  clear_has_particle_name_index();
}
::google::protobuf::uint64 CUserMsg_ParticleManager_CreateParticle::particle_name_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.CreateParticle.particle_name_index)
  return particle_name_index_;
}
void CUserMsg_ParticleManager_CreateParticle::set_particle_name_index(::google::protobuf::uint64 value) {
  set_has_particle_name_index();
  particle_name_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.CreateParticle.particle_name_index)
}

// optional int32 attach_type = 2;
bool CUserMsg_ParticleManager_CreateParticle::has_attach_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager_CreateParticle::set_has_attach_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager_CreateParticle::clear_has_attach_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_CreateParticle::clear_attach_type() {
  attach_type_ = 0;
  clear_has_attach_type();
}
::google::protobuf::int32 CUserMsg_ParticleManager_CreateParticle::attach_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.CreateParticle.attach_type)
  return attach_type_;
}
void CUserMsg_ParticleManager_CreateParticle::set_attach_type(::google::protobuf::int32 value) {
  set_has_attach_type();
  attach_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.CreateParticle.attach_type)
}

// optional int32 entity_handle = 3;
bool CUserMsg_ParticleManager_CreateParticle::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMsg_ParticleManager_CreateParticle::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMsg_ParticleManager_CreateParticle::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMsg_ParticleManager_CreateParticle::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CUserMsg_ParticleManager_CreateParticle::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.CreateParticle.entity_handle)
  return entity_handle_;
}
void CUserMsg_ParticleManager_CreateParticle::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.CreateParticle.entity_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_DestroyParticle::kDestroyImmediatelyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_DestroyParticle::CUserMsg_ParticleManager_DestroyParticle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
}
CUserMsg_ParticleManager_DestroyParticle::CUserMsg_ParticleManager_DestroyParticle(const CUserMsg_ParticleManager_DestroyParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destroy_immediately_ = from.destroy_immediately_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
}

void CUserMsg_ParticleManager_DestroyParticle::SharedCtor() {
  _cached_size_ = 0;
  destroy_immediately_ = false;
}

CUserMsg_ParticleManager_DestroyParticle::~CUserMsg_ParticleManager_DestroyParticle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  SharedDtor();
}

void CUserMsg_ParticleManager_DestroyParticle::SharedDtor() {
}

void CUserMsg_ParticleManager_DestroyParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_DestroyParticle::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_DestroyParticle& CUserMsg_ParticleManager_DestroyParticle::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_DestroyParticle* CUserMsg_ParticleManager_DestroyParticle::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_DestroyParticle* n = new CUserMsg_ParticleManager_DestroyParticle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_DestroyParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  destroy_immediately_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_DestroyParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_destroy_immediately();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_DestroyParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_DestroyParticle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  return target;
}

size_t CUserMsg_ParticleManager_DestroyParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_DestroyParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_DestroyParticle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_DestroyParticle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_DestroyParticle::MergeFrom(const CUserMsg_ParticleManager_DestroyParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destroy_immediately()) {
    set_destroy_immediately(from.destroy_immediately());
  }
}

void CUserMsg_ParticleManager_DestroyParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_DestroyParticle::CopyFrom(const CUserMsg_ParticleManager_DestroyParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_DestroyParticle::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_DestroyParticle::Swap(CUserMsg_ParticleManager_DestroyParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_DestroyParticle::InternalSwap(CUserMsg_ParticleManager_DestroyParticle* other) {
  std::swap(destroy_immediately_, other->destroy_immediately_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_DestroyParticle::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_DestroyParticle

// optional bool destroy_immediately = 1;
bool CUserMsg_ParticleManager_DestroyParticle::has_destroy_immediately() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_DestroyParticle::set_has_destroy_immediately() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_DestroyParticle::clear_has_destroy_immediately() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_DestroyParticle::clear_destroy_immediately() {
  destroy_immediately_ = false;
  clear_has_destroy_immediately();
}
bool CUserMsg_ParticleManager_DestroyParticle::destroy_immediately() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.DestroyParticle.destroy_immediately)
  return destroy_immediately_;
}
void CUserMsg_ParticleManager_DestroyParticle::set_destroy_immediately(bool value) {
  set_has_destroy_immediately();
  destroy_immediately_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.DestroyParticle.destroy_immediately)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_DestroyParticleInvolving::kDestroyImmediatelyFieldNumber;
const int CUserMsg_ParticleManager_DestroyParticleInvolving::kEntityHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_DestroyParticleInvolving::CUserMsg_ParticleManager_DestroyParticleInvolving()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
}
CUserMsg_ParticleManager_DestroyParticleInvolving::CUserMsg_ParticleManager_DestroyParticleInvolving(const CUserMsg_ParticleManager_DestroyParticleInvolving& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&destroy_immediately_, &from.destroy_immediately_,
    reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&destroy_immediately_) + sizeof(entity_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&destroy_immediately_, 0, reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&destroy_immediately_) + sizeof(entity_handle_));
}

CUserMsg_ParticleManager_DestroyParticleInvolving::~CUserMsg_ParticleManager_DestroyParticleInvolving() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  SharedDtor();
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SharedDtor() {
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_DestroyParticleInvolving::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_DestroyParticleInvolving& CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_DestroyParticleInvolving* CUserMsg_ParticleManager_DestroyParticleInvolving::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_DestroyParticleInvolving* n = new CUserMsg_ParticleManager_DestroyParticleInvolving;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&destroy_immediately_, 0, reinterpret_cast<char*>(&entity_handle_) -
      reinterpret_cast<char*>(&destroy_immediately_) + sizeof(entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_DestroyParticleInvolving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_destroy_immediately();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_DestroyParticleInvolving::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  return target;
}

size_t CUserMsg_ParticleManager_DestroyParticleInvolving::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool destroy_immediately = 1;
    if (has_destroy_immediately()) {
      total_size += 1 + 1;
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_DestroyParticleInvolving* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_DestroyParticleInvolving>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const CUserMsg_ParticleManager_DestroyParticleInvolving& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      destroy_immediately_ = from.destroy_immediately_;
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const CUserMsg_ParticleManager_DestroyParticleInvolving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_DestroyParticleInvolving::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::Swap(CUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::InternalSwap(CUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  std::swap(destroy_immediately_, other->destroy_immediately_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_DestroyParticleInvolving::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_DestroyParticleInvolving

// optional bool destroy_immediately = 1;
bool CUserMsg_ParticleManager_DestroyParticleInvolving::has_destroy_immediately() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::set_has_destroy_immediately() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::clear_has_destroy_immediately() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::clear_destroy_immediately() {
  destroy_immediately_ = false;
  clear_has_destroy_immediately();
}
bool CUserMsg_ParticleManager_DestroyParticleInvolving::destroy_immediately() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving.destroy_immediately)
  return destroy_immediately_;
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::set_destroy_immediately(bool value) {
  set_has_destroy_immediately();
  destroy_immediately_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving.destroy_immediately)
}

// optional int32 entity_handle = 3;
bool CUserMsg_ParticleManager_DestroyParticleInvolving::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CUserMsg_ParticleManager_DestroyParticleInvolving::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving.entity_handle)
  return entity_handle_;
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving.entity_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticle::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticle::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticle::CUserMsg_ParticleManager_UpdateParticle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
}
CUserMsg_ParticleManager_UpdateParticle::CUserMsg_ParticleManager_UpdateParticle(const CUserMsg_ParticleManager_UpdateParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
}

void CUserMsg_ParticleManager_UpdateParticle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&position_) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticle::~CUserMsg_ParticleManager_UpdateParticle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
}

void CUserMsg_ParticleManager_UpdateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticle::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_UpdateParticle& CUserMsg_ParticleManager_UpdateParticle::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_UpdateParticle* CUserMsg_ParticleManager_UpdateParticle::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_UpdateParticle* n = new CUserMsg_ParticleManager_UpdateParticle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_UpdateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  if (has_position()) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->::proto::dota::CMsgVector::Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_UpdateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_UpdateParticle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticle::MergeFrom(const CUserMsg_ParticleManager_UpdateParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticle::CopyFrom(const CUserMsg_ParticleManager_UpdateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticle::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticle::Swap(CUserMsg_ParticleManager_UpdateParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticle::InternalSwap(CUserMsg_ParticleManager_UpdateParticle* other) {
  std::swap(position_, other->position_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticle::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_UpdateParticle

// optional int32 control_point = 1;
bool CUserMsg_ParticleManager_UpdateParticle::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticle::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticle::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticle::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CUserMsg_ParticleManager_UpdateParticle::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticle.control_point)
  return control_point_;
}
void CUserMsg_ParticleManager_UpdateParticle::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticle.control_point)
}

// optional .proto.dota.CMsgVector position = 2;
bool CUserMsg_ParticleManager_UpdateParticle::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticle::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticle::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticle::clear_position() {
  if (position_ != NULL) position_->::proto::dota::CMsgVector::Clear();
  clear_has_position();
}
const ::proto::dota::CMsgVector& CUserMsg_ParticleManager_UpdateParticle::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticle.position)
  return position_ != NULL ? *position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.UpdateParticle.position)
  return position_;
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticle::release_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.UpdateParticle.position)
  clear_has_position();
  ::proto::dota::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager_UpdateParticle::set_allocated_position(::proto::dota::CMsgVector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.UpdateParticle.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleFwd::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleFwd::kForwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleFwd::CUserMsg_ParticleManager_UpdateParticleFwd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
}
CUserMsg_ParticleManager_UpdateParticleFwd::CUserMsg_ParticleManager_UpdateParticleFwd(const CUserMsg_ParticleManager_UpdateParticleFwd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_forward()) {
    forward_ = new ::proto::dota::CMsgVector(*from.forward_);
  } else {
    forward_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&forward_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&forward_) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleFwd::~CUserMsg_ParticleManager_UpdateParticleFwd() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SharedDtor() {
  if (this != internal_default_instance()) {
    delete forward_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleFwd::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_UpdateParticleFwd& CUserMsg_ParticleManager_UpdateParticleFwd::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_UpdateParticleFwd* CUserMsg_ParticleManager_UpdateParticleFwd::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_UpdateParticleFwd* n = new CUserMsg_ParticleManager_UpdateParticleFwd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  if (has_forward()) {
    GOOGLE_DCHECK(forward_ != NULL);
    forward_->::proto::dota::CMsgVector::Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleFwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector forward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->forward_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleFwd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->forward_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleFwd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->forward_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleFwd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_UpdateParticleFwd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleFwd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_forward()->::proto::dota::CMsgVector::MergeFrom(from.forward());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleFwd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleFwd::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::Swap(CUserMsg_ParticleManager_UpdateParticleFwd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleFwd::InternalSwap(CUserMsg_ParticleManager_UpdateParticleFwd* other) {
  std::swap(forward_, other->forward_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleFwd::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_UpdateParticleFwd

// optional int32 control_point = 1;
bool CUserMsg_ParticleManager_UpdateParticleFwd::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CUserMsg_ParticleManager_UpdateParticleFwd::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd.control_point)
  return control_point_;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd.control_point)
}

// optional .proto.dota.CMsgVector forward = 2;
bool CUserMsg_ParticleManager_UpdateParticleFwd::has_forward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::set_has_forward() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::clear_has_forward() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::clear_forward() {
  if (forward_ != NULL) forward_->::proto::dota::CMsgVector::Clear();
  clear_has_forward();
}
const ::proto::dota::CMsgVector& CUserMsg_ParticleManager_UpdateParticleFwd::forward() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd.forward)
  return forward_ != NULL ? *forward_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleFwd::mutable_forward() {
  set_has_forward();
  if (forward_ == NULL) {
    forward_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd.forward)
  return forward_;
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleFwd::release_forward() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd.forward)
  clear_has_forward();
  ::proto::dota::CMsgVector* temp = forward_;
  forward_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::set_allocated_forward(::proto::dota::CMsgVector* forward) {
  delete forward_;
  forward_ = forward;
  if (forward) {
    set_has_forward();
  } else {
    clear_has_forward();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd.forward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleOrient::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kForwardFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kRightFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kUpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleOrient::CUserMsg_ParticleManager_UpdateParticleOrient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
}
CUserMsg_ParticleManager_UpdateParticleOrient::CUserMsg_ParticleManager_UpdateParticleOrient(const CUserMsg_ParticleManager_UpdateParticleOrient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_forward()) {
    forward_ = new ::proto::dota::CMsgVector(*from.forward_);
  } else {
    forward_ = NULL;
  }
  if (from.has_right()) {
    right_ = new ::proto::dota::CMsgVector(*from.right_);
  } else {
    right_ = NULL;
  }
  if (from.has_up()) {
    up_ = new ::proto::dota::CMsgVector(*from.up_);
  } else {
    up_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&forward_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&forward_) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleOrient::~CUserMsg_ParticleManager_UpdateParticleOrient() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SharedDtor() {
  if (this != internal_default_instance()) {
    delete forward_;
  }
  if (this != internal_default_instance()) {
    delete right_;
  }
  if (this != internal_default_instance()) {
    delete up_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleOrient::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_UpdateParticleOrient& CUserMsg_ParticleManager_UpdateParticleOrient::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_UpdateParticleOrient* CUserMsg_ParticleManager_UpdateParticleOrient::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_UpdateParticleOrient* n = new CUserMsg_ParticleManager_UpdateParticleOrient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_forward()) {
      GOOGLE_DCHECK(forward_ != NULL);
      forward_->::proto::dota::CMsgVector::Clear();
    }
    if (has_right()) {
      GOOGLE_DCHECK(right_ != NULL);
      right_->::proto::dota::CMsgVector::Clear();
    }
    if (has_up()) {
      GOOGLE_DCHECK(up_ != NULL);
      up_->::proto::dota::CMsgVector::Clear();
    }
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleOrient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector forward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector up = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->forward_, output);
  }

  // optional .proto.dota.CMsgVector right = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_, output);
  }

  // optional .proto.dota.CMsgVector up = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->up_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleOrient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->forward_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector right = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->right_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector up = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->up_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleOrient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->forward_);
    }

    // optional .proto.dota.CMsgVector right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_);
    }

    // optional .proto.dota.CMsgVector up = 4;
    if (has_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->up_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleOrient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_UpdateParticleOrient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleOrient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_forward()->::proto::dota::CMsgVector::MergeFrom(from.forward());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right()->::proto::dota::CMsgVector::MergeFrom(from.right());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_up()->::proto::dota::CMsgVector::MergeFrom(from.up());
    }
    if (cached_has_bits & 0x00000008u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleOrient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleOrient::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::Swap(CUserMsg_ParticleManager_UpdateParticleOrient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleOrient::InternalSwap(CUserMsg_ParticleManager_UpdateParticleOrient* other) {
  std::swap(forward_, other->forward_);
  std::swap(right_, other->right_);
  std::swap(up_, other->up_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleOrient::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_UpdateParticleOrient

// optional int32 control_point = 1;
bool CUserMsg_ParticleManager_UpdateParticleOrient::has_control_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::set_has_control_point() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CUserMsg_ParticleManager_UpdateParticleOrient::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.control_point)
  return control_point_;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.control_point)
}

// optional .proto.dota.CMsgVector forward = 2;
bool CUserMsg_ParticleManager_UpdateParticleOrient::has_forward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::set_has_forward() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_has_forward() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_forward() {
  if (forward_ != NULL) forward_->::proto::dota::CMsgVector::Clear();
  clear_has_forward();
}
const ::proto::dota::CMsgVector& CUserMsg_ParticleManager_UpdateParticleOrient::forward() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.forward)
  return forward_ != NULL ? *forward_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleOrient::mutable_forward() {
  set_has_forward();
  if (forward_ == NULL) {
    forward_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.forward)
  return forward_;
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleOrient::release_forward() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.forward)
  clear_has_forward();
  ::proto::dota::CMsgVector* temp = forward_;
  forward_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::set_allocated_forward(::proto::dota::CMsgVector* forward) {
  delete forward_;
  forward_ = forward;
  if (forward) {
    set_has_forward();
  } else {
    clear_has_forward();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.forward)
}

// optional .proto.dota.CMsgVector right = 3;
bool CUserMsg_ParticleManager_UpdateParticleOrient::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_right() {
  if (right_ != NULL) right_->::proto::dota::CMsgVector::Clear();
  clear_has_right();
}
const ::proto::dota::CMsgVector& CUserMsg_ParticleManager_UpdateParticleOrient::right() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.right)
  return right_ != NULL ? *right_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleOrient::mutable_right() {
  set_has_right();
  if (right_ == NULL) {
    right_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.right)
  return right_;
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleOrient::release_right() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.right)
  clear_has_right();
  ::proto::dota::CMsgVector* temp = right_;
  right_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::set_allocated_right(::proto::dota::CMsgVector* right) {
  delete right_;
  right_ = right;
  if (right) {
    set_has_right();
  } else {
    clear_has_right();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.right)
}

// optional .proto.dota.CMsgVector up = 4;
bool CUserMsg_ParticleManager_UpdateParticleOrient::has_up() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::set_has_up() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_has_up() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_up() {
  if (up_ != NULL) up_->::proto::dota::CMsgVector::Clear();
  clear_has_up();
}
const ::proto::dota::CMsgVector& CUserMsg_ParticleManager_UpdateParticleOrient::up() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.up)
  return up_ != NULL ? *up_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleOrient::mutable_up() {
  set_has_up();
  if (up_ == NULL) {
    up_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.up)
  return up_;
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleOrient::release_up() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.up)
  clear_has_up();
  ::proto::dota::CMsgVector* temp = up_;
  up_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::set_allocated_up(::proto::dota::CMsgVector* up) {
  delete up_;
  up_ = up;
  if (up) {
    set_has_up();
  } else {
    clear_has_up();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient.up)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleFallback::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleFallback::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleFallback::CUserMsg_ParticleManager_UpdateParticleFallback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
}
CUserMsg_ParticleManager_UpdateParticleFallback::CUserMsg_ParticleManager_UpdateParticleFallback(const CUserMsg_ParticleManager_UpdateParticleFallback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&position_) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleFallback::~CUserMsg_ParticleManager_UpdateParticleFallback() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleFallback::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_UpdateParticleFallback& CUserMsg_ParticleManager_UpdateParticleFallback::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_UpdateParticleFallback* CUserMsg_ParticleManager_UpdateParticleFallback::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_UpdateParticleFallback* n = new CUserMsg_ParticleManager_UpdateParticleFallback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  if (has_position()) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->::proto::dota::CMsgVector::Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleFallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleFallback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleFallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleFallback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_UpdateParticleFallback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleFallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleFallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleFallback::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::Swap(CUserMsg_ParticleManager_UpdateParticleFallback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleFallback::InternalSwap(CUserMsg_ParticleManager_UpdateParticleFallback* other) {
  std::swap(position_, other->position_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleFallback::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_UpdateParticleFallback

// optional int32 control_point = 1;
bool CUserMsg_ParticleManager_UpdateParticleFallback::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CUserMsg_ParticleManager_UpdateParticleFallback::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback.control_point)
  return control_point_;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback.control_point)
}

// optional .proto.dota.CMsgVector position = 2;
bool CUserMsg_ParticleManager_UpdateParticleFallback::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::clear_position() {
  if (position_ != NULL) position_->::proto::dota::CMsgVector::Clear();
  clear_has_position();
}
const ::proto::dota::CMsgVector& CUserMsg_ParticleManager_UpdateParticleFallback::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback.position)
  return position_ != NULL ? *position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleFallback::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback.position)
  return position_;
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleFallback::release_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback.position)
  clear_has_position();
  ::proto::dota::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::set_allocated_position(::proto::dota::CMsgVector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleOffset::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOffset::kOriginOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleOffset::CUserMsg_ParticleManager_UpdateParticleOffset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
}
CUserMsg_ParticleManager_UpdateParticleOffset::CUserMsg_ParticleManager_UpdateParticleOffset(const CUserMsg_ParticleManager_UpdateParticleOffset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin_offset()) {
    origin_offset_ = new ::proto::dota::CMsgVector(*from.origin_offset_);
  } else {
    origin_offset_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_offset_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&origin_offset_) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleOffset::~CUserMsg_ParticleManager_UpdateParticleOffset() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_offset_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleOffset::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_UpdateParticleOffset& CUserMsg_ParticleManager_UpdateParticleOffset::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_UpdateParticleOffset* CUserMsg_ParticleManager_UpdateParticleOffset::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_UpdateParticleOffset* n = new CUserMsg_ParticleManager_UpdateParticleOffset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  if (has_origin_offset()) {
    GOOGLE_DCHECK(origin_offset_ != NULL);
    origin_offset_->::proto::dota::CMsgVector::Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector origin_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector origin_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->origin_offset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleOffset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector origin_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->origin_offset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector origin_offset = 2;
    if (has_origin_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_offset_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleOffset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_UpdateParticleOffset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin_offset()->::proto::dota::CMsgVector::MergeFrom(from.origin_offset());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleOffset::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::Swap(CUserMsg_ParticleManager_UpdateParticleOffset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleOffset::InternalSwap(CUserMsg_ParticleManager_UpdateParticleOffset* other) {
  std::swap(origin_offset_, other->origin_offset_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleOffset::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_UpdateParticleOffset

// optional int32 control_point = 1;
bool CUserMsg_ParticleManager_UpdateParticleOffset::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CUserMsg_ParticleManager_UpdateParticleOffset::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset.control_point)
  return control_point_;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset.control_point)
}

// optional .proto.dota.CMsgVector origin_offset = 2;
bool CUserMsg_ParticleManager_UpdateParticleOffset::has_origin_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::set_has_origin_offset() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::clear_has_origin_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::clear_origin_offset() {
  if (origin_offset_ != NULL) origin_offset_->::proto::dota::CMsgVector::Clear();
  clear_has_origin_offset();
}
const ::proto::dota::CMsgVector& CUserMsg_ParticleManager_UpdateParticleOffset::origin_offset() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset.origin_offset)
  return origin_offset_ != NULL ? *origin_offset_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleOffset::mutable_origin_offset() {
  set_has_origin_offset();
  if (origin_offset_ == NULL) {
    origin_offset_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset.origin_offset)
  return origin_offset_;
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleOffset::release_origin_offset() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset.origin_offset)
  clear_has_origin_offset();
  ::proto::dota::CMsgVector* temp = origin_offset_;
  origin_offset_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::set_allocated_origin_offset(::proto::dota::CMsgVector* origin_offset) {
  delete origin_offset_;
  origin_offset_ = origin_offset;
  if (origin_offset) {
    set_has_origin_offset();
  } else {
    clear_has_origin_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset.origin_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleEnt::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kEntityHandleFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kAttachTypeFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kAttachmentFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kFallbackPositionFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kIncludeWearablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleEnt::CUserMsg_ParticleManager_UpdateParticleEnt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
}
CUserMsg_ParticleManager_UpdateParticleEnt::CUserMsg_ParticleManager_UpdateParticleEnt(const CUserMsg_ParticleManager_UpdateParticleEnt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fallback_position()) {
    fallback_position_ = new ::proto::dota::CMsgVector(*from.fallback_position_);
  } else {
    fallback_position_ = NULL;
  }
  ::memcpy(&control_point_, &from.control_point_,
    reinterpret_cast<char*>(&include_wearables_) -
    reinterpret_cast<char*>(&control_point_) + sizeof(include_wearables_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fallback_position_, 0, reinterpret_cast<char*>(&include_wearables_) -
    reinterpret_cast<char*>(&fallback_position_) + sizeof(include_wearables_));
}

CUserMsg_ParticleManager_UpdateParticleEnt::~CUserMsg_ParticleManager_UpdateParticleEnt() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fallback_position_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleEnt::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_UpdateParticleEnt& CUserMsg_ParticleManager_UpdateParticleEnt::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_UpdateParticleEnt* CUserMsg_ParticleManager_UpdateParticleEnt::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_UpdateParticleEnt* n = new CUserMsg_ParticleManager_UpdateParticleEnt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  if (has_fallback_position()) {
    GOOGLE_DCHECK(fallback_position_ != NULL);
    fallback_position_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&control_point_, 0, reinterpret_cast<char*>(&include_wearables_) -
      reinterpret_cast<char*>(&control_point_) + sizeof(include_wearables_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleEnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attach_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_attach_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attachment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_attachment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector fallback_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fallback_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_wearables = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_include_wearables();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_wearables_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_handle(), output);
  }

  // optional int32 attach_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attach_type(), output);
  }

  // optional int32 attachment = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attachment(), output);
  }

  // optional .proto.dota.CMsgVector fallback_position = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fallback_position_, output);
  }

  // optional bool include_wearables = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->include_wearables(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleEnt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_handle(), target);
  }

  // optional int32 attach_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attach_type(), target);
  }

  // optional int32 attachment = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attachment(), target);
  }

  // optional .proto.dota.CMsgVector fallback_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->fallback_position_, deterministic, target);
  }

  // optional bool include_wearables = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->include_wearables(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.CMsgVector fallback_position = 5;
    if (has_fallback_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fallback_position_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional int32 entity_handle = 2;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 attach_type = 3;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 attachment = 4;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment());
    }

    // optional bool include_wearables = 6;
    if (has_include_wearables()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleEnt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_UpdateParticleEnt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fallback_position()->::proto::dota::CMsgVector::MergeFrom(from.fallback_position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      attach_type_ = from.attach_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      attachment_ = from.attachment_;
    }
    if (cached_has_bits & 0x00000020u) {
      include_wearables_ = from.include_wearables_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleEnt::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::Swap(CUserMsg_ParticleManager_UpdateParticleEnt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleEnt::InternalSwap(CUserMsg_ParticleManager_UpdateParticleEnt* other) {
  std::swap(fallback_position_, other->fallback_position_);
  std::swap(control_point_, other->control_point_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(attach_type_, other->attach_type_);
  std::swap(attachment_, other->attachment_);
  std::swap(include_wearables_, other->include_wearables_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleEnt::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_UpdateParticleEnt

// optional int32 control_point = 1;
bool CUserMsg_ParticleManager_UpdateParticleEnt::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CUserMsg_ParticleManager_UpdateParticleEnt::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.control_point)
  return control_point_;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.control_point)
}

// optional int32 entity_handle = 2;
bool CUserMsg_ParticleManager_UpdateParticleEnt::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CUserMsg_ParticleManager_UpdateParticleEnt::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.entity_handle)
  return entity_handle_;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.entity_handle)
}

// optional int32 attach_type = 3;
bool CUserMsg_ParticleManager_UpdateParticleEnt::has_attach_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_has_attach_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_has_attach_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_attach_type() {
  attach_type_ = 0;
  clear_has_attach_type();
}
::google::protobuf::int32 CUserMsg_ParticleManager_UpdateParticleEnt::attach_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.attach_type)
  return attach_type_;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_attach_type(::google::protobuf::int32 value) {
  set_has_attach_type();
  attach_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.attach_type)
}

// optional int32 attachment = 4;
bool CUserMsg_ParticleManager_UpdateParticleEnt::has_attachment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_has_attachment() {
  _has_bits_[0] |= 0x00000010u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_has_attachment() {
  _has_bits_[0] &= ~0x00000010u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_attachment() {
  attachment_ = 0;
  clear_has_attachment();
}
::google::protobuf::int32 CUserMsg_ParticleManager_UpdateParticleEnt::attachment() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.attachment)
  return attachment_;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_attachment(::google::protobuf::int32 value) {
  set_has_attachment();
  attachment_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.attachment)
}

// optional .proto.dota.CMsgVector fallback_position = 5;
bool CUserMsg_ParticleManager_UpdateParticleEnt::has_fallback_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_has_fallback_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_has_fallback_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_fallback_position() {
  if (fallback_position_ != NULL) fallback_position_->::proto::dota::CMsgVector::Clear();
  clear_has_fallback_position();
}
const ::proto::dota::CMsgVector& CUserMsg_ParticleManager_UpdateParticleEnt::fallback_position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.fallback_position)
  return fallback_position_ != NULL ? *fallback_position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleEnt::mutable_fallback_position() {
  set_has_fallback_position();
  if (fallback_position_ == NULL) {
    fallback_position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.fallback_position)
  return fallback_position_;
}
::proto::dota::CMsgVector* CUserMsg_ParticleManager_UpdateParticleEnt::release_fallback_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.fallback_position)
  clear_has_fallback_position();
  ::proto::dota::CMsgVector* temp = fallback_position_;
  fallback_position_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_allocated_fallback_position(::proto::dota::CMsgVector* fallback_position) {
  delete fallback_position_;
  fallback_position_ = fallback_position;
  if (fallback_position) {
    set_has_fallback_position();
  } else {
    clear_has_fallback_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.fallback_position)
}

// optional bool include_wearables = 6;
bool CUserMsg_ParticleManager_UpdateParticleEnt::has_include_wearables() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_has_include_wearables() {
  _has_bits_[0] |= 0x00000020u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_has_include_wearables() {
  _has_bits_[0] &= ~0x00000020u;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_include_wearables() {
  include_wearables_ = false;
  clear_has_include_wearables();
}
bool CUserMsg_ParticleManager_UpdateParticleEnt::include_wearables() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.include_wearables)
  return include_wearables_;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::set_include_wearables(bool value) {
  set_has_include_wearables();
  include_wearables_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt.include_wearables)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleSetFrozen::kSetFrozenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleSetFrozen::CUserMsg_ParticleManager_UpdateParticleSetFrozen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}
CUserMsg_ParticleManager_UpdateParticleSetFrozen::CUserMsg_ParticleManager_UpdateParticleSetFrozen(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  set_frozen_ = from.set_frozen_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedCtor() {
  _cached_size_ = 0;
  set_frozen_ = false;
}

CUserMsg_ParticleManager_UpdateParticleSetFrozen::~CUserMsg_ParticleManager_UpdateParticleSetFrozen() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedDtor() {
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleSetFrozen::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_UpdateParticleSetFrozen& CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_UpdateParticleSetFrozen* CUserMsg_ParticleManager_UpdateParticleSetFrozen::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_UpdateParticleSetFrozen* n = new CUserMsg_ParticleManager_UpdateParticleSetFrozen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  set_frozen_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool set_frozen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_set_frozen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_frozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_frozen = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->set_frozen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleSetFrozen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_frozen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->set_frozen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleSetFrozen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool set_frozen = 1;
  if (has_set_frozen()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleSetFrozen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_UpdateParticleSetFrozen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_frozen()) {
    set_set_frozen(from.set_frozen());
  }
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleSetFrozen::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::Swap(CUserMsg_ParticleManager_UpdateParticleSetFrozen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleSetFrozen::InternalSwap(CUserMsg_ParticleManager_UpdateParticleSetFrozen* other) {
  std::swap(set_frozen_, other->set_frozen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleSetFrozen::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_UpdateParticleSetFrozen

// optional bool set_frozen = 1;
bool CUserMsg_ParticleManager_UpdateParticleSetFrozen::has_set_frozen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleSetFrozen::set_has_set_frozen() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleSetFrozen::clear_has_set_frozen() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleSetFrozen::clear_set_frozen() {
  set_frozen_ = false;
  clear_has_set_frozen();
}
bool CUserMsg_ParticleManager_UpdateParticleSetFrozen::set_frozen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen.set_frozen)
  return set_frozen_;
}
void CUserMsg_ParticleManager_UpdateParticleSetFrozen::set_set_frozen(bool value) {
  set_has_set_frozen();
  set_frozen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen.set_frozen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleShouldDraw::kShouldDrawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleShouldDraw::CUserMsg_ParticleManager_UpdateParticleShouldDraw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}
CUserMsg_ParticleManager_UpdateParticleShouldDraw::CUserMsg_ParticleManager_UpdateParticleShouldDraw(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  should_draw_ = from.should_draw_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedCtor() {
  _cached_size_ = 0;
  should_draw_ = false;
}

CUserMsg_ParticleManager_UpdateParticleShouldDraw::~CUserMsg_ParticleManager_UpdateParticleShouldDraw() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedDtor() {
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleShouldDraw::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_UpdateParticleShouldDraw& CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_UpdateParticleShouldDraw* CUserMsg_ParticleManager_UpdateParticleShouldDraw::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_UpdateParticleShouldDraw* n = new CUserMsg_ParticleManager_UpdateParticleShouldDraw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  should_draw_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool should_draw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_should_draw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool should_draw = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->should_draw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleShouldDraw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool should_draw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->should_draw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleShouldDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool should_draw = 1;
  if (has_should_draw()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleShouldDraw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_UpdateParticleShouldDraw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_should_draw()) {
    set_should_draw(from.should_draw());
  }
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleShouldDraw::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::Swap(CUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleShouldDraw::InternalSwap(CUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  std::swap(should_draw_, other->should_draw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleShouldDraw::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_UpdateParticleShouldDraw

// optional bool should_draw = 1;
bool CUserMsg_ParticleManager_UpdateParticleShouldDraw::has_should_draw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_UpdateParticleShouldDraw::set_has_should_draw() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleShouldDraw::clear_has_should_draw() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleShouldDraw::clear_should_draw() {
  should_draw_ = false;
  clear_has_should_draw();
}
bool CUserMsg_ParticleManager_UpdateParticleShouldDraw::should_draw() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw.should_draw)
  return should_draw_;
}
void CUserMsg_ParticleManager_UpdateParticleShouldDraw::set_should_draw(bool value) {
  set_has_should_draw();
  should_draw_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw.should_draw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_ChangeControlPointAttachment::kAttachmentOldFieldNumber;
const int CUserMsg_ParticleManager_ChangeControlPointAttachment::kAttachmentNewFieldNumber;
const int CUserMsg_ParticleManager_ChangeControlPointAttachment::kEntityHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_ChangeControlPointAttachment::CUserMsg_ParticleManager_ChangeControlPointAttachment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
}
CUserMsg_ParticleManager_ChangeControlPointAttachment::CUserMsg_ParticleManager_ChangeControlPointAttachment(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&attachment_old_, &from.attachment_old_,
    reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&attachment_old_) + sizeof(entity_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&attachment_old_, 0, reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&attachment_old_) + sizeof(entity_handle_));
}

CUserMsg_ParticleManager_ChangeControlPointAttachment::~CUserMsg_ParticleManager_ChangeControlPointAttachment() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  SharedDtor();
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SharedDtor() {
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_ChangeControlPointAttachment::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager_ChangeControlPointAttachment& CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager_ChangeControlPointAttachment* CUserMsg_ParticleManager_ChangeControlPointAttachment::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager_ChangeControlPointAttachment* n = new CUserMsg_ParticleManager_ChangeControlPointAttachment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&attachment_old_, 0, reinterpret_cast<char*>(&entity_handle_) -
      reinterpret_cast<char*>(&attachment_old_) + sizeof(entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager_ChangeControlPointAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attachment_old = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_attachment_old();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_old_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attachment_new = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_attachment_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 attachment_old = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attachment_old(), output);
  }

  // optional int32 attachment_new = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attachment_new(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_ChangeControlPointAttachment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 attachment_old = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attachment_old(), target);
  }

  // optional int32 attachment_new = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attachment_new(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return target;
}

size_t CUserMsg_ParticleManager_ChangeControlPointAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 attachment_old = 1;
    if (has_attachment_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_old());
    }

    // optional int32 attachment_new = 2;
    if (has_attachment_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_new());
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_ChangeControlPointAttachment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager_ChangeControlPointAttachment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      attachment_old_ = from.attachment_old_;
    }
    if (cached_has_bits & 0x00000002u) {
      attachment_new_ = from.attachment_new_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_ChangeControlPointAttachment::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::Swap(CUserMsg_ParticleManager_ChangeControlPointAttachment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::InternalSwap(CUserMsg_ParticleManager_ChangeControlPointAttachment* other) {
  std::swap(attachment_old_, other->attachment_old_);
  std::swap(attachment_new_, other->attachment_new_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_ChangeControlPointAttachment::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager_ChangeControlPointAttachment

// optional int32 attachment_old = 1;
bool CUserMsg_ParticleManager_ChangeControlPointAttachment::has_attachment_old() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::set_has_attachment_old() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::clear_has_attachment_old() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::clear_attachment_old() {
  attachment_old_ = 0;
  clear_has_attachment_old();
}
::google::protobuf::int32 CUserMsg_ParticleManager_ChangeControlPointAttachment::attachment_old() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment.attachment_old)
  return attachment_old_;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::set_attachment_old(::google::protobuf::int32 value) {
  set_has_attachment_old();
  attachment_old_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment.attachment_old)
}

// optional int32 attachment_new = 2;
bool CUserMsg_ParticleManager_ChangeControlPointAttachment::has_attachment_new() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::set_has_attachment_new() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::clear_has_attachment_new() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::clear_attachment_new() {
  attachment_new_ = 0;
  clear_has_attachment_new();
}
::google::protobuf::int32 CUserMsg_ParticleManager_ChangeControlPointAttachment::attachment_new() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment.attachment_new)
  return attachment_new_;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::set_attachment_new(::google::protobuf::int32 value) {
  set_has_attachment_new();
  attachment_new_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment.attachment_new)
}

// optional int32 entity_handle = 3;
bool CUserMsg_ParticleManager_ChangeControlPointAttachment::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CUserMsg_ParticleManager_ChangeControlPointAttachment::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment.entity_handle)
  return entity_handle_;
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment.entity_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager::kTypeFieldNumber;
const int CUserMsg_ParticleManager::kIndexFieldNumber;
const int CUserMsg_ParticleManager::kReleaseParticleIndexFieldNumber;
const int CUserMsg_ParticleManager::kCreateParticleFieldNumber;
const int CUserMsg_ParticleManager::kDestroyParticleFieldNumber;
const int CUserMsg_ParticleManager::kDestroyParticleInvolvingFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleFwdFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleOrientFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleFallbackFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleOffsetFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleEntFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleShouldDrawFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleSetFrozenFieldNumber;
const int CUserMsg_ParticleManager::kChangeControlPointAttachmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager::CUserMsg_ParticleManager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager)
}
CUserMsg_ParticleManager::CUserMsg_ParticleManager(const CUserMsg_ParticleManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_release_particle_index()) {
    release_particle_index_ = new ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex(*from.release_particle_index_);
  } else {
    release_particle_index_ = NULL;
  }
  if (from.has_create_particle()) {
    create_particle_ = new ::proto::dota::CUserMsg_ParticleManager_CreateParticle(*from.create_particle_);
  } else {
    create_particle_ = NULL;
  }
  if (from.has_destroy_particle()) {
    destroy_particle_ = new ::proto::dota::CUserMsg_ParticleManager_DestroyParticle(*from.destroy_particle_);
  } else {
    destroy_particle_ = NULL;
  }
  if (from.has_destroy_particle_involving()) {
    destroy_particle_involving_ = new ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving(*from.destroy_particle_involving_);
  } else {
    destroy_particle_involving_ = NULL;
  }
  if (from.has_update_particle()) {
    update_particle_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticle(*from.update_particle_);
  } else {
    update_particle_ = NULL;
  }
  if (from.has_update_particle_fwd()) {
    update_particle_fwd_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd(*from.update_particle_fwd_);
  } else {
    update_particle_fwd_ = NULL;
  }
  if (from.has_update_particle_orient()) {
    update_particle_orient_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient(*from.update_particle_orient_);
  } else {
    update_particle_orient_ = NULL;
  }
  if (from.has_update_particle_fallback()) {
    update_particle_fallback_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback(*from.update_particle_fallback_);
  } else {
    update_particle_fallback_ = NULL;
  }
  if (from.has_update_particle_offset()) {
    update_particle_offset_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset(*from.update_particle_offset_);
  } else {
    update_particle_offset_ = NULL;
  }
  if (from.has_update_particle_ent()) {
    update_particle_ent_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt(*from.update_particle_ent_);
  } else {
    update_particle_ent_ = NULL;
  }
  if (from.has_update_particle_should_draw()) {
    update_particle_should_draw_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw(*from.update_particle_should_draw_);
  } else {
    update_particle_should_draw_ = NULL;
  }
  if (from.has_update_particle_set_frozen()) {
    update_particle_set_frozen_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen(*from.update_particle_set_frozen_);
  } else {
    update_particle_set_frozen_ = NULL;
  }
  if (from.has_change_control_point_attachment()) {
    change_control_point_attachment_ = new ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment(*from.change_control_point_attachment_);
  } else {
    change_control_point_attachment_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager)
}

void CUserMsg_ParticleManager::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&release_particle_index_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&release_particle_index_) + sizeof(index_));
}

CUserMsg_ParticleManager::~CUserMsg_ParticleManager() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager)
  SharedDtor();
}

void CUserMsg_ParticleManager::SharedDtor() {
  if (this != internal_default_instance()) {
    delete release_particle_index_;
  }
  if (this != internal_default_instance()) {
    delete create_particle_;
  }
  if (this != internal_default_instance()) {
    delete destroy_particle_;
  }
  if (this != internal_default_instance()) {
    delete destroy_particle_involving_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_fwd_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_orient_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_fallback_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_offset_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_ent_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_should_draw_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_set_frozen_;
  }
  if (this != internal_default_instance()) {
    delete change_control_point_attachment_;
  }
}

void CUserMsg_ParticleManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_ParticleManager& CUserMsg_ParticleManager::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_ParticleManager* CUserMsg_ParticleManager::New(::google::protobuf::Arena* arena) const {
  CUserMsg_ParticleManager* n = new CUserMsg_ParticleManager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_ParticleManager::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_release_particle_index()) {
      GOOGLE_DCHECK(release_particle_index_ != NULL);
      release_particle_index_->::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex::Clear();
    }
    if (has_create_particle()) {
      GOOGLE_DCHECK(create_particle_ != NULL);
      create_particle_->::proto::dota::CUserMsg_ParticleManager_CreateParticle::Clear();
    }
    if (has_destroy_particle()) {
      GOOGLE_DCHECK(destroy_particle_ != NULL);
      destroy_particle_->::proto::dota::CUserMsg_ParticleManager_DestroyParticle::Clear();
    }
    if (has_destroy_particle_involving()) {
      GOOGLE_DCHECK(destroy_particle_involving_ != NULL);
      destroy_particle_involving_->::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving::Clear();
    }
    if (has_update_particle()) {
      GOOGLE_DCHECK(update_particle_ != NULL);
      update_particle_->::proto::dota::CUserMsg_ParticleManager_UpdateParticle::Clear();
    }
    if (has_update_particle_fwd()) {
      GOOGLE_DCHECK(update_particle_fwd_ != NULL);
      update_particle_fwd_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd::Clear();
    }
    if (has_update_particle_orient()) {
      GOOGLE_DCHECK(update_particle_orient_ != NULL);
      update_particle_orient_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient::Clear();
    }
    if (has_update_particle_fallback()) {
      GOOGLE_DCHECK(update_particle_fallback_ != NULL);
      update_particle_fallback_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_update_particle_offset()) {
      GOOGLE_DCHECK(update_particle_offset_ != NULL);
      update_particle_offset_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset::Clear();
    }
    if (has_update_particle_ent()) {
      GOOGLE_DCHECK(update_particle_ent_ != NULL);
      update_particle_ent_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt::Clear();
    }
    if (has_update_particle_should_draw()) {
      GOOGLE_DCHECK(update_particle_should_draw_ != NULL);
      update_particle_should_draw_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear();
    }
    if (has_update_particle_set_frozen()) {
      GOOGLE_DCHECK(update_particle_set_frozen_ != NULL);
      update_particle_set_frozen_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear();
    }
    if (has_change_control_point_attachment()) {
      GOOGLE_DCHECK(change_control_point_attachment_ != NULL);
      change_control_point_attachment_->::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 24576u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&type_) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_ParticleManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PARTICLE_MESSAGE_IsValid(value)) {
            set_type(static_cast< ::proto::dota::PARTICLE_MESSAGE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_particle_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle_involving()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_orient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fallback()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_ent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_should_draw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_set_frozen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_control_point_attachment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->release_particle_index_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->create_particle_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->destroy_particle_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->destroy_particle_involving_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->update_particle_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->update_particle_fwd_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->update_particle_orient_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->update_particle_fallback_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->update_particle_offset_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->update_particle_ent_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->update_particle_should_draw_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->update_particle_set_frozen_, output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->change_control_point_attachment_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager)
}

::google::protobuf::uint8* CUserMsg_ParticleManager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->release_particle_index_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->create_particle_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->destroy_particle_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->destroy_particle_involving_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->update_particle_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->update_particle_fwd_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->update_particle_orient_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->update_particle_fallback_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->update_particle_offset_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->update_particle_ent_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->update_particle_should_draw_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->update_particle_set_frozen_, deterministic, target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->change_control_point_attachment_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager)
  return target;
}

size_t CUserMsg_ParticleManager::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CUserMsg_ParticleManager)
  size_t total_size = 0;

  if (has_type()) {
    // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_index()) {
    // required uint32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t CUserMsg_ParticleManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00006000) ^ 0x00006000) == 0) {  // All required fields are present.
    // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    if (has_release_particle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->release_particle_index_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
    if (has_create_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->create_particle_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    if (has_destroy_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destroy_particle_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    if (has_destroy_particle_involving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destroy_particle_involving_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    if (has_update_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    if (has_update_particle_fwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_fwd_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    if (has_update_particle_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_orient_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    if (has_update_particle_fallback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_fallback_);
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    if (has_update_particle_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_offset_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    if (has_update_particle_ent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_ent_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
    if (has_update_particle_should_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_should_draw_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
    if (has_update_particle_set_frozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_set_frozen_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
    if (has_change_control_point_attachment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->change_control_point_attachment_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_ParticleManager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager::MergeFrom(const CUserMsg_ParticleManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_release_particle_index()->::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(from.release_particle_index());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_create_particle()->::proto::dota::CUserMsg_ParticleManager_CreateParticle::MergeFrom(from.create_particle());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_destroy_particle()->::proto::dota::CUserMsg_ParticleManager_DestroyParticle::MergeFrom(from.destroy_particle());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_destroy_particle_involving()->::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(from.destroy_particle_involving());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_update_particle()->::proto::dota::CUserMsg_ParticleManager_UpdateParticle::MergeFrom(from.update_particle());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_update_particle_fwd()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(from.update_particle_fwd());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_update_particle_orient()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(from.update_particle_orient());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_update_particle_fallback()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(from.update_particle_fallback());
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_update_particle_offset()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(from.update_particle_offset());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_update_particle_ent()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(from.update_particle_ent());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_update_particle_should_draw()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(from.update_particle_should_draw());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_update_particle_set_frozen()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(from.update_particle_set_frozen());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_change_control_point_attachment()->::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(from.change_control_point_attachment());
    }
    if (cached_has_bits & 0x00002000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00004000u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager::CopyFrom(const CUserMsg_ParticleManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager::IsInitialized() const {
  if ((_has_bits_[0] & 0x00006000) != 0x00006000) return false;
  return true;
}

void CUserMsg_ParticleManager::Swap(CUserMsg_ParticleManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager::InternalSwap(CUserMsg_ParticleManager* other) {
  std::swap(release_particle_index_, other->release_particle_index_);
  std::swap(create_particle_, other->create_particle_);
  std::swap(destroy_particle_, other->destroy_particle_);
  std::swap(destroy_particle_involving_, other->destroy_particle_involving_);
  std::swap(update_particle_, other->update_particle_);
  std::swap(update_particle_fwd_, other->update_particle_fwd_);
  std::swap(update_particle_orient_, other->update_particle_orient_);
  std::swap(update_particle_fallback_, other->update_particle_fallback_);
  std::swap(update_particle_offset_, other->update_particle_offset_);
  std::swap(update_particle_ent_, other->update_particle_ent_);
  std::swap(update_particle_should_draw_, other->update_particle_should_draw_);
  std::swap(update_particle_set_frozen_, other->update_particle_set_frozen_);
  std::swap(change_control_point_attachment_, other->change_control_point_attachment_);
  std::swap(type_, other->type_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_ParticleManager

// required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
bool CUserMsg_ParticleManager::has_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CUserMsg_ParticleManager::set_has_type() {
  _has_bits_[0] |= 0x00002000u;
}
void CUserMsg_ParticleManager::clear_has_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void CUserMsg_ParticleManager::clear_type() {
  type_ = 0;
  clear_has_type();
}
::proto::dota::PARTICLE_MESSAGE CUserMsg_ParticleManager::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.type)
  return static_cast< ::proto::dota::PARTICLE_MESSAGE >(type_);
}
void CUserMsg_ParticleManager::set_type(::proto::dota::PARTICLE_MESSAGE value) {
  assert(::proto::dota::PARTICLE_MESSAGE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.type)
}

// required uint32 index = 2;
bool CUserMsg_ParticleManager::has_index() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CUserMsg_ParticleManager::set_has_index() {
  _has_bits_[0] |= 0x00004000u;
}
void CUserMsg_ParticleManager::clear_has_index() {
  _has_bits_[0] &= ~0x00004000u;
}
void CUserMsg_ParticleManager::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 CUserMsg_ParticleManager::index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.index)
  return index_;
}
void CUserMsg_ParticleManager::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_ParticleManager.index)
}

// optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
bool CUserMsg_ParticleManager::has_release_particle_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_ParticleManager::set_has_release_particle_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_ParticleManager::clear_has_release_particle_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager::clear_release_particle_index() {
  if (release_particle_index_ != NULL) release_particle_index_->::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex::Clear();
  clear_has_release_particle_index();
}
const ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex& CUserMsg_ParticleManager::release_particle_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.release_particle_index)
  return release_particle_index_ != NULL ? *release_particle_index_
                         : *::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex* CUserMsg_ParticleManager::mutable_release_particle_index() {
  set_has_release_particle_index();
  if (release_particle_index_ == NULL) {
    release_particle_index_ = new ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.release_particle_index)
  return release_particle_index_;
}
::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex* CUserMsg_ParticleManager::release_release_particle_index() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.release_particle_index)
  clear_has_release_particle_index();
  ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex* temp = release_particle_index_;
  release_particle_index_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_release_particle_index(::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex* release_particle_index) {
  delete release_particle_index_;
  release_particle_index_ = release_particle_index;
  if (release_particle_index) {
    set_has_release_particle_index();
  } else {
    clear_has_release_particle_index();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.release_particle_index)
}

// optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
bool CUserMsg_ParticleManager::has_create_particle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_ParticleManager::set_has_create_particle() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_ParticleManager::clear_has_create_particle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager::clear_create_particle() {
  if (create_particle_ != NULL) create_particle_->::proto::dota::CUserMsg_ParticleManager_CreateParticle::Clear();
  clear_has_create_particle();
}
const ::proto::dota::CUserMsg_ParticleManager_CreateParticle& CUserMsg_ParticleManager::create_particle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.create_particle)
  return create_particle_ != NULL ? *create_particle_
                         : *::proto::dota::CUserMsg_ParticleManager_CreateParticle::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_CreateParticle* CUserMsg_ParticleManager::mutable_create_particle() {
  set_has_create_particle();
  if (create_particle_ == NULL) {
    create_particle_ = new ::proto::dota::CUserMsg_ParticleManager_CreateParticle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.create_particle)
  return create_particle_;
}
::proto::dota::CUserMsg_ParticleManager_CreateParticle* CUserMsg_ParticleManager::release_create_particle() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.create_particle)
  clear_has_create_particle();
  ::proto::dota::CUserMsg_ParticleManager_CreateParticle* temp = create_particle_;
  create_particle_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_create_particle(::proto::dota::CUserMsg_ParticleManager_CreateParticle* create_particle) {
  delete create_particle_;
  create_particle_ = create_particle;
  if (create_particle) {
    set_has_create_particle();
  } else {
    clear_has_create_particle();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.create_particle)
}

// optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
bool CUserMsg_ParticleManager::has_destroy_particle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CUserMsg_ParticleManager::set_has_destroy_particle() {
  _has_bits_[0] |= 0x00000004u;
}
void CUserMsg_ParticleManager::clear_has_destroy_particle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMsg_ParticleManager::clear_destroy_particle() {
  if (destroy_particle_ != NULL) destroy_particle_->::proto::dota::CUserMsg_ParticleManager_DestroyParticle::Clear();
  clear_has_destroy_particle();
}
const ::proto::dota::CUserMsg_ParticleManager_DestroyParticle& CUserMsg_ParticleManager::destroy_particle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.destroy_particle)
  return destroy_particle_ != NULL ? *destroy_particle_
                         : *::proto::dota::CUserMsg_ParticleManager_DestroyParticle::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_DestroyParticle* CUserMsg_ParticleManager::mutable_destroy_particle() {
  set_has_destroy_particle();
  if (destroy_particle_ == NULL) {
    destroy_particle_ = new ::proto::dota::CUserMsg_ParticleManager_DestroyParticle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.destroy_particle)
  return destroy_particle_;
}
::proto::dota::CUserMsg_ParticleManager_DestroyParticle* CUserMsg_ParticleManager::release_destroy_particle() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.destroy_particle)
  clear_has_destroy_particle();
  ::proto::dota::CUserMsg_ParticleManager_DestroyParticle* temp = destroy_particle_;
  destroy_particle_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_destroy_particle(::proto::dota::CUserMsg_ParticleManager_DestroyParticle* destroy_particle) {
  delete destroy_particle_;
  destroy_particle_ = destroy_particle;
  if (destroy_particle) {
    set_has_destroy_particle();
  } else {
    clear_has_destroy_particle();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.destroy_particle)
}

// optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
bool CUserMsg_ParticleManager::has_destroy_particle_involving() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CUserMsg_ParticleManager::set_has_destroy_particle_involving() {
  _has_bits_[0] |= 0x00000008u;
}
void CUserMsg_ParticleManager::clear_has_destroy_particle_involving() {
  _has_bits_[0] &= ~0x00000008u;
}
void CUserMsg_ParticleManager::clear_destroy_particle_involving() {
  if (destroy_particle_involving_ != NULL) destroy_particle_involving_->::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving::Clear();
  clear_has_destroy_particle_involving();
}
const ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving& CUserMsg_ParticleManager::destroy_particle_involving() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.destroy_particle_involving)
  return destroy_particle_involving_ != NULL ? *destroy_particle_involving_
                         : *::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving* CUserMsg_ParticleManager::mutable_destroy_particle_involving() {
  set_has_destroy_particle_involving();
  if (destroy_particle_involving_ == NULL) {
    destroy_particle_involving_ = new ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.destroy_particle_involving)
  return destroy_particle_involving_;
}
::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving* CUserMsg_ParticleManager::release_destroy_particle_involving() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.destroy_particle_involving)
  clear_has_destroy_particle_involving();
  ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving* temp = destroy_particle_involving_;
  destroy_particle_involving_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_destroy_particle_involving(::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving* destroy_particle_involving) {
  delete destroy_particle_involving_;
  destroy_particle_involving_ = destroy_particle_involving;
  if (destroy_particle_involving) {
    set_has_destroy_particle_involving();
  } else {
    clear_has_destroy_particle_involving();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.destroy_particle_involving)
}

// optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
bool CUserMsg_ParticleManager::has_update_particle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CUserMsg_ParticleManager::set_has_update_particle() {
  _has_bits_[0] |= 0x00000010u;
}
void CUserMsg_ParticleManager::clear_has_update_particle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CUserMsg_ParticleManager::clear_update_particle() {
  if (update_particle_ != NULL) update_particle_->::proto::dota::CUserMsg_ParticleManager_UpdateParticle::Clear();
  clear_has_update_particle();
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticle& CUserMsg_ParticleManager::update_particle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.update_particle)
  return update_particle_ != NULL ? *update_particle_
                         : *::proto::dota::CUserMsg_ParticleManager_UpdateParticle::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticle* CUserMsg_ParticleManager::mutable_update_particle() {
  set_has_update_particle();
  if (update_particle_ == NULL) {
    update_particle_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.update_particle)
  return update_particle_;
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticle* CUserMsg_ParticleManager::release_update_particle() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.update_particle)
  clear_has_update_particle();
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticle* temp = update_particle_;
  update_particle_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_update_particle(::proto::dota::CUserMsg_ParticleManager_UpdateParticle* update_particle) {
  delete update_particle_;
  update_particle_ = update_particle;
  if (update_particle) {
    set_has_update_particle();
  } else {
    clear_has_update_particle();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.update_particle)
}

// optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
bool CUserMsg_ParticleManager::has_update_particle_fwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CUserMsg_ParticleManager::set_has_update_particle_fwd() {
  _has_bits_[0] |= 0x00000020u;
}
void CUserMsg_ParticleManager::clear_has_update_particle_fwd() {
  _has_bits_[0] &= ~0x00000020u;
}
void CUserMsg_ParticleManager::clear_update_particle_fwd() {
  if (update_particle_fwd_ != NULL) update_particle_fwd_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd::Clear();
  clear_has_update_particle_fwd();
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd& CUserMsg_ParticleManager::update_particle_fwd() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.update_particle_fwd)
  return update_particle_fwd_ != NULL ? *update_particle_fwd_
                         : *::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd* CUserMsg_ParticleManager::mutable_update_particle_fwd() {
  set_has_update_particle_fwd();
  if (update_particle_fwd_ == NULL) {
    update_particle_fwd_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.update_particle_fwd)
  return update_particle_fwd_;
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd* CUserMsg_ParticleManager::release_update_particle_fwd() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.update_particle_fwd)
  clear_has_update_particle_fwd();
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd* temp = update_particle_fwd_;
  update_particle_fwd_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_update_particle_fwd(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd* update_particle_fwd) {
  delete update_particle_fwd_;
  update_particle_fwd_ = update_particle_fwd;
  if (update_particle_fwd) {
    set_has_update_particle_fwd();
  } else {
    clear_has_update_particle_fwd();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.update_particle_fwd)
}

// optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
bool CUserMsg_ParticleManager::has_update_particle_orient() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CUserMsg_ParticleManager::set_has_update_particle_orient() {
  _has_bits_[0] |= 0x00000040u;
}
void CUserMsg_ParticleManager::clear_has_update_particle_orient() {
  _has_bits_[0] &= ~0x00000040u;
}
void CUserMsg_ParticleManager::clear_update_particle_orient() {
  if (update_particle_orient_ != NULL) update_particle_orient_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient::Clear();
  clear_has_update_particle_orient();
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient& CUserMsg_ParticleManager::update_particle_orient() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.update_particle_orient)
  return update_particle_orient_ != NULL ? *update_particle_orient_
                         : *::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient* CUserMsg_ParticleManager::mutable_update_particle_orient() {
  set_has_update_particle_orient();
  if (update_particle_orient_ == NULL) {
    update_particle_orient_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.update_particle_orient)
  return update_particle_orient_;
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient* CUserMsg_ParticleManager::release_update_particle_orient() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.update_particle_orient)
  clear_has_update_particle_orient();
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient* temp = update_particle_orient_;
  update_particle_orient_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_update_particle_orient(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient* update_particle_orient) {
  delete update_particle_orient_;
  update_particle_orient_ = update_particle_orient;
  if (update_particle_orient) {
    set_has_update_particle_orient();
  } else {
    clear_has_update_particle_orient();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.update_particle_orient)
}

// optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
bool CUserMsg_ParticleManager::has_update_particle_fallback() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CUserMsg_ParticleManager::set_has_update_particle_fallback() {
  _has_bits_[0] |= 0x00000080u;
}
void CUserMsg_ParticleManager::clear_has_update_particle_fallback() {
  _has_bits_[0] &= ~0x00000080u;
}
void CUserMsg_ParticleManager::clear_update_particle_fallback() {
  if (update_particle_fallback_ != NULL) update_particle_fallback_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback::Clear();
  clear_has_update_particle_fallback();
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback& CUserMsg_ParticleManager::update_particle_fallback() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.update_particle_fallback)
  return update_particle_fallback_ != NULL ? *update_particle_fallback_
                         : *::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback* CUserMsg_ParticleManager::mutable_update_particle_fallback() {
  set_has_update_particle_fallback();
  if (update_particle_fallback_ == NULL) {
    update_particle_fallback_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.update_particle_fallback)
  return update_particle_fallback_;
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback* CUserMsg_ParticleManager::release_update_particle_fallback() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.update_particle_fallback)
  clear_has_update_particle_fallback();
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback* temp = update_particle_fallback_;
  update_particle_fallback_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_update_particle_fallback(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback* update_particle_fallback) {
  delete update_particle_fallback_;
  update_particle_fallback_ = update_particle_fallback;
  if (update_particle_fallback) {
    set_has_update_particle_fallback();
  } else {
    clear_has_update_particle_fallback();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.update_particle_fallback)
}

// optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
bool CUserMsg_ParticleManager::has_update_particle_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CUserMsg_ParticleManager::set_has_update_particle_offset() {
  _has_bits_[0] |= 0x00000100u;
}
void CUserMsg_ParticleManager::clear_has_update_particle_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
void CUserMsg_ParticleManager::clear_update_particle_offset() {
  if (update_particle_offset_ != NULL) update_particle_offset_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset::Clear();
  clear_has_update_particle_offset();
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset& CUserMsg_ParticleManager::update_particle_offset() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.update_particle_offset)
  return update_particle_offset_ != NULL ? *update_particle_offset_
                         : *::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset* CUserMsg_ParticleManager::mutable_update_particle_offset() {
  set_has_update_particle_offset();
  if (update_particle_offset_ == NULL) {
    update_particle_offset_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.update_particle_offset)
  return update_particle_offset_;
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset* CUserMsg_ParticleManager::release_update_particle_offset() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.update_particle_offset)
  clear_has_update_particle_offset();
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset* temp = update_particle_offset_;
  update_particle_offset_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_update_particle_offset(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset* update_particle_offset) {
  delete update_particle_offset_;
  update_particle_offset_ = update_particle_offset;
  if (update_particle_offset) {
    set_has_update_particle_offset();
  } else {
    clear_has_update_particle_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.update_particle_offset)
}

// optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
bool CUserMsg_ParticleManager::has_update_particle_ent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CUserMsg_ParticleManager::set_has_update_particle_ent() {
  _has_bits_[0] |= 0x00000200u;
}
void CUserMsg_ParticleManager::clear_has_update_particle_ent() {
  _has_bits_[0] &= ~0x00000200u;
}
void CUserMsg_ParticleManager::clear_update_particle_ent() {
  if (update_particle_ent_ != NULL) update_particle_ent_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt::Clear();
  clear_has_update_particle_ent();
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt& CUserMsg_ParticleManager::update_particle_ent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.update_particle_ent)
  return update_particle_ent_ != NULL ? *update_particle_ent_
                         : *::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt* CUserMsg_ParticleManager::mutable_update_particle_ent() {
  set_has_update_particle_ent();
  if (update_particle_ent_ == NULL) {
    update_particle_ent_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.update_particle_ent)
  return update_particle_ent_;
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt* CUserMsg_ParticleManager::release_update_particle_ent() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.update_particle_ent)
  clear_has_update_particle_ent();
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt* temp = update_particle_ent_;
  update_particle_ent_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_update_particle_ent(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt* update_particle_ent) {
  delete update_particle_ent_;
  update_particle_ent_ = update_particle_ent;
  if (update_particle_ent) {
    set_has_update_particle_ent();
  } else {
    clear_has_update_particle_ent();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.update_particle_ent)
}

// optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
bool CUserMsg_ParticleManager::has_update_particle_should_draw() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CUserMsg_ParticleManager::set_has_update_particle_should_draw() {
  _has_bits_[0] |= 0x00000400u;
}
void CUserMsg_ParticleManager::clear_has_update_particle_should_draw() {
  _has_bits_[0] &= ~0x00000400u;
}
void CUserMsg_ParticleManager::clear_update_particle_should_draw() {
  if (update_particle_should_draw_ != NULL) update_particle_should_draw_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear();
  clear_has_update_particle_should_draw();
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw& CUserMsg_ParticleManager::update_particle_should_draw() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.update_particle_should_draw)
  return update_particle_should_draw_ != NULL ? *update_particle_should_draw_
                         : *::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw* CUserMsg_ParticleManager::mutable_update_particle_should_draw() {
  set_has_update_particle_should_draw();
  if (update_particle_should_draw_ == NULL) {
    update_particle_should_draw_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.update_particle_should_draw)
  return update_particle_should_draw_;
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw* CUserMsg_ParticleManager::release_update_particle_should_draw() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.update_particle_should_draw)
  clear_has_update_particle_should_draw();
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw* temp = update_particle_should_draw_;
  update_particle_should_draw_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_update_particle_should_draw(::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw* update_particle_should_draw) {
  delete update_particle_should_draw_;
  update_particle_should_draw_ = update_particle_should_draw;
  if (update_particle_should_draw) {
    set_has_update_particle_should_draw();
  } else {
    clear_has_update_particle_should_draw();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.update_particle_should_draw)
}

// optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
bool CUserMsg_ParticleManager::has_update_particle_set_frozen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CUserMsg_ParticleManager::set_has_update_particle_set_frozen() {
  _has_bits_[0] |= 0x00000800u;
}
void CUserMsg_ParticleManager::clear_has_update_particle_set_frozen() {
  _has_bits_[0] &= ~0x00000800u;
}
void CUserMsg_ParticleManager::clear_update_particle_set_frozen() {
  if (update_particle_set_frozen_ != NULL) update_particle_set_frozen_->::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear();
  clear_has_update_particle_set_frozen();
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen& CUserMsg_ParticleManager::update_particle_set_frozen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.update_particle_set_frozen)
  return update_particle_set_frozen_ != NULL ? *update_particle_set_frozen_
                         : *::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen* CUserMsg_ParticleManager::mutable_update_particle_set_frozen() {
  set_has_update_particle_set_frozen();
  if (update_particle_set_frozen_ == NULL) {
    update_particle_set_frozen_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.update_particle_set_frozen)
  return update_particle_set_frozen_;
}
::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen* CUserMsg_ParticleManager::release_update_particle_set_frozen() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.update_particle_set_frozen)
  clear_has_update_particle_set_frozen();
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen* temp = update_particle_set_frozen_;
  update_particle_set_frozen_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_update_particle_set_frozen(::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen* update_particle_set_frozen) {
  delete update_particle_set_frozen_;
  update_particle_set_frozen_ = update_particle_set_frozen;
  if (update_particle_set_frozen) {
    set_has_update_particle_set_frozen();
  } else {
    clear_has_update_particle_set_frozen();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.update_particle_set_frozen)
}

// optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
bool CUserMsg_ParticleManager::has_change_control_point_attachment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CUserMsg_ParticleManager::set_has_change_control_point_attachment() {
  _has_bits_[0] |= 0x00001000u;
}
void CUserMsg_ParticleManager::clear_has_change_control_point_attachment() {
  _has_bits_[0] &= ~0x00001000u;
}
void CUserMsg_ParticleManager::clear_change_control_point_attachment() {
  if (change_control_point_attachment_ != NULL) change_control_point_attachment_->::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment::Clear();
  clear_has_change_control_point_attachment();
}
const ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment& CUserMsg_ParticleManager::change_control_point_attachment() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_ParticleManager.change_control_point_attachment)
  return change_control_point_attachment_ != NULL ? *change_control_point_attachment_
                         : *::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment::internal_default_instance();
}
::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment* CUserMsg_ParticleManager::mutable_change_control_point_attachment() {
  set_has_change_control_point_attachment();
  if (change_control_point_attachment_ == NULL) {
    change_control_point_attachment_ = new ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_ParticleManager.change_control_point_attachment)
  return change_control_point_attachment_;
}
::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment* CUserMsg_ParticleManager::release_change_control_point_attachment() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_ParticleManager.change_control_point_attachment)
  clear_has_change_control_point_attachment();
  ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment* temp = change_control_point_attachment_;
  change_control_point_attachment_ = NULL;
  return temp;
}
void CUserMsg_ParticleManager::set_allocated_change_control_point_attachment(::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment* change_control_point_attachment) {
  delete change_control_point_attachment_;
  change_control_point_attachment_ = change_control_point_attachment;
  if (change_control_point_attachment) {
    set_has_change_control_point_attachment();
  } else {
    clear_has_change_control_point_attachment();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_ParticleManager.change_control_point_attachment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_HudError::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_HudError::CUserMsg_HudError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_HudError)
}
CUserMsg_HudError::CUserMsg_HudError(const CUserMsg_HudError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_ = from.order_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_HudError)
}

void CUserMsg_HudError::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = 0;
}

CUserMsg_HudError::~CUserMsg_HudError() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_HudError)
  SharedDtor();
}

void CUserMsg_HudError::SharedDtor() {
}

void CUserMsg_HudError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_HudError::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_HudError& CUserMsg_HudError::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_HudError* CUserMsg_HudError::New(::google::protobuf::Arena* arena) const {
  CUserMsg_HudError* n = new CUserMsg_HudError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_HudError::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_HudError)
  order_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_HudError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_HudError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_order_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_HudError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_HudError)
  return false;
#undef DO_
}

void CUserMsg_HudError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_HudError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_HudError)
}

::google::protobuf::uint8* CUserMsg_HudError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_HudError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_HudError)
  return target;
}

size_t CUserMsg_HudError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_HudError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 order_id = 1;
  if (has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_HudError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_HudError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_HudError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_HudError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_HudError)
    MergeFrom(*source);
  }
}

void CUserMsg_HudError::MergeFrom(const CUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order_id()) {
    set_order_id(from.order_id());
  }
}

void CUserMsg_HudError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_HudError::CopyFrom(const CUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_HudError::IsInitialized() const {
  return true;
}

void CUserMsg_HudError::Swap(CUserMsg_HudError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_HudError::InternalSwap(CUserMsg_HudError* other) {
  std::swap(order_id_, other->order_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_HudError::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_HudError

// optional int32 order_id = 1;
bool CUserMsg_HudError::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_HudError::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_HudError::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_HudError::clear_order_id() {
  order_id_ = 0;
  clear_has_order_id();
}
::google::protobuf::int32 CUserMsg_HudError::order_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_HudError.order_id)
  return order_id_;
}
void CUserMsg_HudError::set_order_id(::google::protobuf::int32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_HudError.order_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_CustomGameEvent::kEventNameFieldNumber;
const int CUserMsg_CustomGameEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_CustomGameEvent::CUserMsg_CustomGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_CustomGameEvent)
}
CUserMsg_CustomGameEvent::CUserMsg_CustomGameEvent(const CUserMsg_CustomGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_CustomGameEvent)
}

void CUserMsg_CustomGameEvent::SharedCtor() {
  _cached_size_ = 0;
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMsg_CustomGameEvent::~CUserMsg_CustomGameEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_CustomGameEvent)
  SharedDtor();
}

void CUserMsg_CustomGameEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMsg_CustomGameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_CustomGameEvent::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMsg_CustomGameEvent& CUserMsg_CustomGameEvent::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMsg_CustomGameEvent* CUserMsg_CustomGameEvent::New(::google::protobuf::Arena* arena) const {
  CUserMsg_CustomGameEvent* n = new CUserMsg_CustomGameEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMsg_CustomGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_CustomGameEvent)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_event_name()) {
      GOOGLE_DCHECK(!event_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*event_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMsg_CustomGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_CustomGameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMsg_CustomGameEvent.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_CustomGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_CustomGameEvent)
  return false;
#undef DO_
}

void CUserMsg_CustomGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMsg_CustomGameEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_CustomGameEvent)
}

::google::protobuf::uint8* CUserMsg_CustomGameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMsg_CustomGameEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_CustomGameEvent)
  return target;
}

size_t CUserMsg_CustomGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_CustomGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_CustomGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_CustomGameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMsg_CustomGameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_CustomGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_CustomGameEvent)
    MergeFrom(*source);
  }
}

void CUserMsg_CustomGameEvent::MergeFrom(const CUserMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_event_name();
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void CUserMsg_CustomGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_CustomGameEvent::CopyFrom(const CUserMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_CustomGameEvent::IsInitialized() const {
  return true;
}

void CUserMsg_CustomGameEvent::Swap(CUserMsg_CustomGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_CustomGameEvent::InternalSwap(CUserMsg_CustomGameEvent* other) {
  event_name_.Swap(&other->event_name_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMsg_CustomGameEvent::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMsg_CustomGameEvent

// optional string event_name = 1;
bool CUserMsg_CustomGameEvent::has_event_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMsg_CustomGameEvent::set_has_event_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMsg_CustomGameEvent::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_CustomGameEvent::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_name();
}
const ::std::string& CUserMsg_CustomGameEvent::event_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_CustomGameEvent.event_name)
  return event_name_.GetNoArena();
}
void CUserMsg_CustomGameEvent::set_event_name(const ::std::string& value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_CustomGameEvent.event_name)
}
#if LANG_CXX11
void CUserMsg_CustomGameEvent::set_event_name(::std::string&& value) {
  set_has_event_name();
  event_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMsg_CustomGameEvent.event_name)
}
#endif
void CUserMsg_CustomGameEvent::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMsg_CustomGameEvent.event_name)
}
void CUserMsg_CustomGameEvent::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMsg_CustomGameEvent.event_name)
}
::std::string* CUserMsg_CustomGameEvent::mutable_event_name() {
  set_has_event_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_CustomGameEvent.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMsg_CustomGameEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_CustomGameEvent.event_name)
  clear_has_event_name();
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMsg_CustomGameEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    set_has_event_name();
  } else {
    clear_has_event_name();
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_CustomGameEvent.event_name)
}

// optional bytes data = 2;
bool CUserMsg_CustomGameEvent::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMsg_CustomGameEvent::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMsg_CustomGameEvent::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_CustomGameEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CUserMsg_CustomGameEvent::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMsg_CustomGameEvent.data)
  return data_.GetNoArena();
}
void CUserMsg_CustomGameEvent::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMsg_CustomGameEvent.data)
}
#if LANG_CXX11
void CUserMsg_CustomGameEvent::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMsg_CustomGameEvent.data)
}
#endif
void CUserMsg_CustomGameEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMsg_CustomGameEvent.data)
}
void CUserMsg_CustomGameEvent::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMsg_CustomGameEvent.data)
}
::std::string* CUserMsg_CustomGameEvent::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMsg_CustomGameEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMsg_CustomGameEvent::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMsg_CustomGameEvent.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMsg_CustomGameEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMsg_CustomGameEvent.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHapticPulse::kHandIdFieldNumber;
const int CUserMessageHapticPulse::kPulseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHapticPulse::CUserMessageHapticPulse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHapticPulse)
}
CUserMessageHapticPulse::CUserMessageHapticPulse(const CUserMessageHapticPulse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hand_id_, &from.hand_id_,
    reinterpret_cast<char*>(&pulse_type_) -
    reinterpret_cast<char*>(&hand_id_) + sizeof(pulse_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHapticPulse)
}

void CUserMessageHapticPulse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hand_id_, 0, reinterpret_cast<char*>(&pulse_type_) -
    reinterpret_cast<char*>(&hand_id_) + sizeof(pulse_type_));
}

CUserMessageHapticPulse::~CUserMessageHapticPulse() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHapticPulse)
  SharedDtor();
}

void CUserMessageHapticPulse::SharedDtor() {
}

void CUserMessageHapticPulse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageHapticPulse::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageHapticPulse& CUserMessageHapticPulse::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageHapticPulse* CUserMessageHapticPulse::New(::google::protobuf::Arena* arena) const {
  CUserMessageHapticPulse* n = new CUserMessageHapticPulse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageHapticPulse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHapticPulse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&hand_id_, 0, reinterpret_cast<char*>(&pulse_type_) -
      reinterpret_cast<char*>(&hand_id_) + sizeof(pulse_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageHapticPulse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHapticPulse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hand_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hand_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EHapticPulseType_IsValid(value)) {
            set_pulse_type(static_cast< ::proto::dota::EHapticPulseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHapticPulse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHapticPulse)
  return false;
#undef DO_
}

void CUserMessageHapticPulse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHapticPulse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hand_id(), output);
  }

  // optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pulse_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHapticPulse)
}

::google::protobuf::uint8* CUserMessageHapticPulse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHapticPulse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hand_id(), target);
  }

  // optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pulse_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHapticPulse)
  return target;
}

size_t CUserMessageHapticPulse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHapticPulse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 hand_id = 1;
    if (has_hand_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hand_id());
    }

    // optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
    if (has_pulse_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pulse_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageHapticPulse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHapticPulse)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHapticPulse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageHapticPulse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHapticPulse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHapticPulse)
    MergeFrom(*source);
  }
}

void CUserMessageHapticPulse::MergeFrom(const CUserMessageHapticPulse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHapticPulse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      hand_id_ = from.hand_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pulse_type_ = from.pulse_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageHapticPulse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHapticPulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHapticPulse::CopyFrom(const CUserMessageHapticPulse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHapticPulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHapticPulse::IsInitialized() const {
  return true;
}

void CUserMessageHapticPulse::Swap(CUserMessageHapticPulse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHapticPulse::InternalSwap(CUserMessageHapticPulse* other) {
  std::swap(hand_id_, other->hand_id_);
  std::swap(pulse_type_, other->pulse_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageHapticPulse::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageHapticPulse

// optional int32 hand_id = 1;
bool CUserMessageHapticPulse::has_hand_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageHapticPulse::set_has_hand_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageHapticPulse::clear_has_hand_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageHapticPulse::clear_hand_id() {
  hand_id_ = 0;
  clear_has_hand_id();
}
::google::protobuf::int32 CUserMessageHapticPulse::hand_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHapticPulse.hand_id)
  return hand_id_;
}
void CUserMessageHapticPulse::set_hand_id(::google::protobuf::int32 value) {
  set_has_hand_id();
  hand_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHapticPulse.hand_id)
}

// optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
bool CUserMessageHapticPulse::has_pulse_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageHapticPulse::set_has_pulse_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageHapticPulse::clear_has_pulse_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageHapticPulse::clear_pulse_type() {
  pulse_type_ = 0;
  clear_has_pulse_type();
}
::proto::dota::EHapticPulseType CUserMessageHapticPulse::pulse_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHapticPulse.pulse_type)
  return static_cast< ::proto::dota::EHapticPulseType >(pulse_type_);
}
void CUserMessageHapticPulse::set_pulse_type(::proto::dota::EHapticPulseType value) {
  assert(::proto::dota::EHapticPulseType_IsValid(value));
  set_has_pulse_type();
  pulse_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHapticPulse.pulse_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHapticPulsePrecise::kHandIdFieldNumber;
const int CUserMessageHapticPulsePrecise::kPulseDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHapticPulsePrecise::CUserMessageHapticPulsePrecise()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHapticPulsePrecise)
}
CUserMessageHapticPulsePrecise::CUserMessageHapticPulsePrecise(const CUserMessageHapticPulsePrecise& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hand_id_, &from.hand_id_,
    reinterpret_cast<char*>(&pulse_duration_) -
    reinterpret_cast<char*>(&hand_id_) + sizeof(pulse_duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHapticPulsePrecise)
}

void CUserMessageHapticPulsePrecise::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hand_id_, 0, reinterpret_cast<char*>(&pulse_duration_) -
    reinterpret_cast<char*>(&hand_id_) + sizeof(pulse_duration_));
}

CUserMessageHapticPulsePrecise::~CUserMessageHapticPulsePrecise() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHapticPulsePrecise)
  SharedDtor();
}

void CUserMessageHapticPulsePrecise::SharedDtor() {
}

void CUserMessageHapticPulsePrecise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageHapticPulsePrecise::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageHapticPulsePrecise& CUserMessageHapticPulsePrecise::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageHapticPulsePrecise* CUserMessageHapticPulsePrecise::New(::google::protobuf::Arena* arena) const {
  CUserMessageHapticPulsePrecise* n = new CUserMessageHapticPulsePrecise;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageHapticPulsePrecise::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHapticPulsePrecise)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&hand_id_, 0, reinterpret_cast<char*>(&pulse_duration_) -
      reinterpret_cast<char*>(&hand_id_) + sizeof(pulse_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageHapticPulsePrecise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHapticPulsePrecise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hand_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hand_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pulse_duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pulse_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pulse_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHapticPulsePrecise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHapticPulsePrecise)
  return false;
#undef DO_
}

void CUserMessageHapticPulsePrecise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHapticPulsePrecise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hand_id(), output);
  }

  // optional int32 pulse_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pulse_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHapticPulsePrecise)
}

::google::protobuf::uint8* CUserMessageHapticPulsePrecise::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHapticPulsePrecise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hand_id(), target);
  }

  // optional int32 pulse_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pulse_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHapticPulsePrecise)
  return target;
}

size_t CUserMessageHapticPulsePrecise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHapticPulsePrecise)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 hand_id = 1;
    if (has_hand_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hand_id());
    }

    // optional int32 pulse_duration = 2;
    if (has_pulse_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pulse_duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageHapticPulsePrecise::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHapticPulsePrecise)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHapticPulsePrecise* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageHapticPulsePrecise>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHapticPulsePrecise)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHapticPulsePrecise)
    MergeFrom(*source);
  }
}

void CUserMessageHapticPulsePrecise::MergeFrom(const CUserMessageHapticPulsePrecise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHapticPulsePrecise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      hand_id_ = from.hand_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pulse_duration_ = from.pulse_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageHapticPulsePrecise::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHapticPulsePrecise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHapticPulsePrecise::CopyFrom(const CUserMessageHapticPulsePrecise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHapticPulsePrecise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHapticPulsePrecise::IsInitialized() const {
  return true;
}

void CUserMessageHapticPulsePrecise::Swap(CUserMessageHapticPulsePrecise* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHapticPulsePrecise::InternalSwap(CUserMessageHapticPulsePrecise* other) {
  std::swap(hand_id_, other->hand_id_);
  std::swap(pulse_duration_, other->pulse_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageHapticPulsePrecise::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageHapticPulsePrecise

// optional int32 hand_id = 1;
bool CUserMessageHapticPulsePrecise::has_hand_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageHapticPulsePrecise::set_has_hand_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageHapticPulsePrecise::clear_has_hand_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageHapticPulsePrecise::clear_hand_id() {
  hand_id_ = 0;
  clear_has_hand_id();
}
::google::protobuf::int32 CUserMessageHapticPulsePrecise::hand_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHapticPulsePrecise.hand_id)
  return hand_id_;
}
void CUserMessageHapticPulsePrecise::set_hand_id(::google::protobuf::int32 value) {
  set_has_hand_id();
  hand_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHapticPulsePrecise.hand_id)
}

// optional int32 pulse_duration = 2;
bool CUserMessageHapticPulsePrecise::has_pulse_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageHapticPulsePrecise::set_has_pulse_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageHapticPulsePrecise::clear_has_pulse_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageHapticPulsePrecise::clear_pulse_duration() {
  pulse_duration_ = 0;
  clear_has_pulse_duration();
}
::google::protobuf::int32 CUserMessageHapticPulsePrecise::pulse_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageHapticPulsePrecise.pulse_duration)
  return pulse_duration_;
}
void CUserMessageHapticPulsePrecise::set_pulse_duration(::google::protobuf::int32 value) {
  set_has_pulse_duration();
  pulse_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageHapticPulsePrecise.pulse_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageAnimStateGraphState::kEntityIndexFieldNumber;
const int CUserMessageAnimStateGraphState::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageAnimStateGraphState::CUserMessageAnimStateGraphState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_usermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageAnimStateGraphState)
}
CUserMessageAnimStateGraphState::CUserMessageAnimStateGraphState(const CUserMessageAnimStateGraphState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  entity_index_ = from.entity_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageAnimStateGraphState)
}

void CUserMessageAnimStateGraphState::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_index_ = 0;
}

CUserMessageAnimStateGraphState::~CUserMessageAnimStateGraphState() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageAnimStateGraphState)
  SharedDtor();
}

void CUserMessageAnimStateGraphState::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageAnimStateGraphState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageAnimStateGraphState::descriptor() {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CUserMessageAnimStateGraphState& CUserMessageAnimStateGraphState::default_instance() {
  protobuf_usermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CUserMessageAnimStateGraphState* CUserMessageAnimStateGraphState::New(::google::protobuf::Arena* arena) const {
  CUserMessageAnimStateGraphState* n = new CUserMessageAnimStateGraphState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUserMessageAnimStateGraphState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageAnimStateGraphState)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  entity_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CUserMessageAnimStateGraphState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageAnimStateGraphState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageAnimStateGraphState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageAnimStateGraphState)
  return false;
#undef DO_
}

void CUserMessageAnimStateGraphState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageAnimStateGraphState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_index(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageAnimStateGraphState)
}

::google::protobuf::uint8* CUserMessageAnimStateGraphState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageAnimStateGraphState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_index(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageAnimStateGraphState)
  return target;
}

size_t CUserMessageAnimStateGraphState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageAnimStateGraphState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 entity_index = 1;
    if (has_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageAnimStateGraphState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageAnimStateGraphState)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAnimStateGraphState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUserMessageAnimStateGraphState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageAnimStateGraphState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageAnimStateGraphState)
    MergeFrom(*source);
  }
}

void CUserMessageAnimStateGraphState::MergeFrom(const CUserMessageAnimStateGraphState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageAnimStateGraphState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      entity_index_ = from.entity_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageAnimStateGraphState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageAnimStateGraphState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAnimStateGraphState::CopyFrom(const CUserMessageAnimStateGraphState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageAnimStateGraphState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAnimStateGraphState::IsInitialized() const {
  return true;
}

void CUserMessageAnimStateGraphState::Swap(CUserMessageAnimStateGraphState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageAnimStateGraphState::InternalSwap(CUserMessageAnimStateGraphState* other) {
  data_.Swap(&other->data_);
  std::swap(entity_index_, other->entity_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUserMessageAnimStateGraphState::GetMetadata() const {
  protobuf_usermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUserMessageAnimStateGraphState

// optional int32 entity_index = 1;
bool CUserMessageAnimStateGraphState::has_entity_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CUserMessageAnimStateGraphState::set_has_entity_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CUserMessageAnimStateGraphState::clear_has_entity_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMessageAnimStateGraphState::clear_entity_index() {
  entity_index_ = 0;
  clear_has_entity_index();
}
::google::protobuf::int32 CUserMessageAnimStateGraphState::entity_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageAnimStateGraphState.entity_index)
  return entity_index_;
}
void CUserMessageAnimStateGraphState::set_entity_index(::google::protobuf::int32 value) {
  set_has_entity_index();
  entity_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageAnimStateGraphState.entity_index)
}

// optional bytes data = 2;
bool CUserMessageAnimStateGraphState::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CUserMessageAnimStateGraphState::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CUserMessageAnimStateGraphState::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMessageAnimStateGraphState::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CUserMessageAnimStateGraphState::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CUserMessageAnimStateGraphState.data)
  return data_.GetNoArena();
}
void CUserMessageAnimStateGraphState::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CUserMessageAnimStateGraphState.data)
}
#if LANG_CXX11
void CUserMessageAnimStateGraphState::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CUserMessageAnimStateGraphState.data)
}
#endif
void CUserMessageAnimStateGraphState::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CUserMessageAnimStateGraphState.data)
}
void CUserMessageAnimStateGraphState::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CUserMessageAnimStateGraphState.data)
}
::std::string* CUserMessageAnimStateGraphState::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CUserMessageAnimStateGraphState.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CUserMessageAnimStateGraphState::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CUserMessageAnimStateGraphState.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CUserMessageAnimStateGraphState::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CUserMessageAnimStateGraphState.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
