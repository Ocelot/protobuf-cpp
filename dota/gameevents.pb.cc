// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameevents.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameevents.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgVDebugGameSessionIDEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgVDebugGameSessionIDEvent> {
} _CMsgVDebugGameSessionIDEvent_default_instance_;
class CMsgPlaceDecalEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPlaceDecalEvent> {
} _CMsgPlaceDecalEvent_default_instance_;
class CMsgClearWorldDecalsEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearWorldDecalsEvent> {
} _CMsgClearWorldDecalsEvent_default_instance_;
class CMsgClearEntityDecalsEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearEntityDecalsEvent> {
} _CMsgClearEntityDecalsEvent_default_instance_;
class CMsgClearDecalsForSkeletonInstanceEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearDecalsForSkeletonInstanceEvent> {
} _CMsgClearDecalsForSkeletonInstanceEvent_default_instance_;
class CMsgSource1LegacyGameEventList_key_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSource1LegacyGameEventList_key_t> {
} _CMsgSource1LegacyGameEventList_key_t_default_instance_;
class CMsgSource1LegacyGameEventList_descriptor_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSource1LegacyGameEventList_descriptor_t> {
} _CMsgSource1LegacyGameEventList_descriptor_t_default_instance_;
class CMsgSource1LegacyGameEventListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSource1LegacyGameEventList> {
} _CMsgSource1LegacyGameEventList_default_instance_;
class CMsgSource1LegacyListenEventsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSource1LegacyListenEvents> {
} _CMsgSource1LegacyListenEvents_default_instance_;
class CMsgSource1LegacyGameEvent_key_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSource1LegacyGameEvent_key_t> {
} _CMsgSource1LegacyGameEvent_key_t_default_instance_;
class CMsgSource1LegacyGameEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSource1LegacyGameEvent> {
} _CMsgSource1LegacyGameEvent_default_instance_;
class CMsgSosStartSoundEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSosStartSoundEvent> {
} _CMsgSosStartSoundEvent_default_instance_;
class CMsgSosStopSoundEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSosStopSoundEvent> {
} _CMsgSosStopSoundEvent_default_instance_;
class CMsgSosStopSoundEventHashDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSosStopSoundEventHash> {
} _CMsgSosStopSoundEventHash_default_instance_;
class CMsgSosSetSoundEventParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSosSetSoundEventParams> {
} _CMsgSosSetSoundEventParams_default_instance_;
class CMsgSosSetLibraryStackFieldsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSosSetLibraryStackFields> {
} _CMsgSosSetLibraryStackFields_default_instance_;

namespace protobuf_gameevents_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVDebugGameSessionIDEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVDebugGameSessionIDEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVDebugGameSessionIDEvent, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVDebugGameSessionIDEvent, gamesessionid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, saxis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, decalmaterialindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, entityhandleindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, skeletoninstancehash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, boneindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, translucenthit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlaceDecalEvent, is_adjacent_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearWorldDecalsEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearWorldDecalsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearWorldDecalsEvent, flagstoclear_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearEntityDecalsEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearEntityDecalsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearEntityDecalsEvent, flagstoclear_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearDecalsForSkeletonInstanceEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearDecalsForSkeletonInstanceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearDecalsForSkeletonInstanceEvent, flagstoclear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearDecalsForSkeletonInstanceEvent, entityhandleindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearDecalsForSkeletonInstanceEvent, skeletoninstancehash_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList_key_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList_key_t, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList_key_t, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList_descriptor_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList_descriptor_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList_descriptor_t, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList_descriptor_t, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList_descriptor_t, keys_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEventList, descriptors_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyListenEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyListenEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyListenEvents, playerslot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyListenEvents, eventarraybits_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, val_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, val_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, val_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, val_short_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, val_byte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, val_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, val_uint64_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSource1LegacyGameEvent, keys_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStartSoundEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStartSoundEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStartSoundEvent, soundevent_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStartSoundEvent, soundevent_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStartSoundEvent, source_entity_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStartSoundEvent, seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStartSoundEvent, packed_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStartSoundEvent, start_time_),
  1,
  2,
  3,
  4,
  0,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStopSoundEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStopSoundEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStopSoundEvent, soundevent_guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStopSoundEventHash, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStopSoundEventHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStopSoundEventHash, soundevent_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosStopSoundEventHash, source_entity_index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosSetSoundEventParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosSetSoundEventParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosSetSoundEventParams, soundevent_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosSetSoundEventParams, packed_params_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosSetLibraryStackFields, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosSetLibraryStackFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosSetLibraryStackFields, stack_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSosSetLibraryStackFields, packed_fields_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CMsgVDebugGameSessionIDEvent)},
  { 9, 28, sizeof(CMsgPlaceDecalEvent)},
  { 42, 48, sizeof(CMsgClearWorldDecalsEvent)},
  { 49, 55, sizeof(CMsgClearEntityDecalsEvent)},
  { 56, 64, sizeof(CMsgClearDecalsForSkeletonInstanceEvent)},
  { 67, 74, sizeof(CMsgSource1LegacyGameEventList_key_t)},
  { 76, 84, sizeof(CMsgSource1LegacyGameEventList_descriptor_t)},
  { 87, 93, sizeof(CMsgSource1LegacyGameEventList)},
  { 94, 101, sizeof(CMsgSource1LegacyListenEvents)},
  { 103, 116, sizeof(CMsgSource1LegacyGameEvent_key_t)},
  { 124, 132, sizeof(CMsgSource1LegacyGameEvent)},
  { 135, 146, sizeof(CMsgSosStartSoundEvent)},
  { 152, 158, sizeof(CMsgSosStopSoundEvent)},
  { 159, 166, sizeof(CMsgSosStopSoundEventHash)},
  { 168, 175, sizeof(CMsgSosSetSoundEventParams)},
  { 177, 184, sizeof(CMsgSosSetLibraryStackFields)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgVDebugGameSessionIDEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPlaceDecalEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClearWorldDecalsEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClearEntityDecalsEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClearDecalsForSkeletonInstanceEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSource1LegacyGameEventList_key_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSource1LegacyGameEventList_descriptor_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSource1LegacyGameEventList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSource1LegacyListenEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSource1LegacyGameEvent_key_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSource1LegacyGameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSosStartSoundEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSosStopSoundEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSosStopSoundEventHash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSosSetSoundEventParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSosSetLibraryStackFields_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gameevents.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgVDebugGameSessionIDEvent_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgPlaceDecalEvent_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgClearWorldDecalsEvent_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgClearEntityDecalsEvent_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgClearDecalsForSkeletonInstanceEvent_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgSource1LegacyGameEventList_key_t_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgSource1LegacyGameEventList_descriptor_t_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgSource1LegacyGameEventList_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgSource1LegacyListenEvents_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgSource1LegacyGameEvent_key_t_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgSource1LegacyGameEvent_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgSosStartSoundEvent_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgSosStopSoundEvent_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgSosStopSoundEventHash_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgSosSetSoundEventParams_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgSosSetLibraryStackFields_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_networkbasetypes_2eproto::InitDefaults();
  _CMsgVDebugGameSessionIDEvent_default_instance_.DefaultConstruct();
  _CMsgPlaceDecalEvent_default_instance_.DefaultConstruct();
  _CMsgClearWorldDecalsEvent_default_instance_.DefaultConstruct();
  _CMsgClearEntityDecalsEvent_default_instance_.DefaultConstruct();
  _CMsgClearDecalsForSkeletonInstanceEvent_default_instance_.DefaultConstruct();
  _CMsgSource1LegacyGameEventList_key_t_default_instance_.DefaultConstruct();
  _CMsgSource1LegacyGameEventList_descriptor_t_default_instance_.DefaultConstruct();
  _CMsgSource1LegacyGameEventList_default_instance_.DefaultConstruct();
  _CMsgSource1LegacyListenEvents_default_instance_.DefaultConstruct();
  _CMsgSource1LegacyGameEvent_key_t_default_instance_.DefaultConstruct();
  _CMsgSource1LegacyGameEvent_default_instance_.DefaultConstruct();
  _CMsgSosStartSoundEvent_default_instance_.DefaultConstruct();
  _CMsgSosStopSoundEvent_default_instance_.DefaultConstruct();
  _CMsgSosStopSoundEventHash_default_instance_.DefaultConstruct();
  _CMsgSosSetSoundEventParams_default_instance_.DefaultConstruct();
  _CMsgSosSetLibraryStackFields_default_instance_.DefaultConstruct();
  _CMsgPlaceDecalEvent_default_instance_.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgPlaceDecalEvent_default_instance_.get_mutable()->normal_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CMsgPlaceDecalEvent_default_instance_.get_mutable()->saxis_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020gameevents.proto\022\nproto.dota\032\026networkb"
      "asetypes.proto\"G\n\034CMsgVDebugGameSessionI"
      "DEvent\022\020\n\010clientid\030\001 \001(\005\022\025\n\rgamesessioni"
      "d\030\002 \001(\t\"\357\002\n\023CMsgPlaceDecalEvent\022(\n\010posit"
      "ion\030\001 \001(\0132\026.proto.dota.CMsgVector\022&\n\006nor"
      "mal\030\002 \001(\0132\026.proto.dota.CMsgVector\022%\n\005sax"
      "is\030\003 \001(\0132\026.proto.dota.CMsgVector\022\032\n\022deca"
      "lmaterialindex\030\004 \001(\r\022\r\n\005flags\030\005 \001(\r\022\r\n\005c"
      "olor\030\006 \001(\007\022\r\n\005width\030\007 \001(\002\022\016\n\006height\030\010 \001("
      "\002\022\r\n\005depth\030\t \001(\002\022\031\n\021entityhandleindex\030\n "
      "\001(\r\022\034\n\024skeletoninstancehash\030\013 \001(\007\022\021\n\tbon"
      "eindex\030\014 \001(\005\022\026\n\016translucenthit\030\r \001(\010\022\023\n\013"
      "is_adjacent\030\016 \001(\010\"1\n\031CMsgClearWorldDecal"
      "sEvent\022\024\n\014flagstoclear\030\001 \001(\r\"2\n\032CMsgClea"
      "rEntityDecalsEvent\022\024\n\014flagstoclear\030\001 \001(\r"
      "\"x\n\'CMsgClearDecalsForSkeletonInstanceEv"
      "ent\022\024\n\014flagstoclear\030\001 \001(\r\022\031\n\021entityhandl"
      "eindex\030\002 \001(\r\022\034\n\024skeletoninstancehash\030\003 \001"
      "(\r\"\202\002\n\036CMsgSource1LegacyGameEventList\022L\n"
      "\013descriptors\030\001 \003(\01327.proto.dota.CMsgSour"
      "ce1LegacyGameEventList.descriptor_t\032#\n\005k"
      "ey_t\022\014\n\004type\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\032m\n\014desc"
      "riptor_t\022\017\n\007eventid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022"
      ">\n\004keys\030\003 \003(\01320.proto.dota.CMsgSource1Le"
      "gacyGameEventList.key_t\"K\n\035CMsgSource1Le"
      "gacyListenEvents\022\022\n\nplayerslot\030\001 \001(\005\022\026\n\016"
      "eventarraybits\030\002 \003(\r\"\231\002\n\032CMsgSource1Lega"
      "cyGameEvent\022\022\n\nevent_name\030\001 \001(\t\022\017\n\007event"
      "id\030\002 \001(\005\022:\n\004keys\030\003 \003(\0132,.proto.dota.CMsg"
      "Source1LegacyGameEvent.key_t\032\231\001\n\005key_t\022\014"
      "\n\004type\030\001 \001(\005\022\022\n\nval_string\030\002 \001(\t\022\021\n\tval_"
      "float\030\003 \001(\002\022\020\n\010val_long\030\004 \001(\005\022\021\n\tval_sho"
      "rt\030\005 \001(\005\022\020\n\010val_byte\030\006 \001(\005\022\020\n\010val_bool\030\007"
      " \001(\010\022\022\n\nval_uint64\030\010 \001(\004\"\240\001\n\026CMsgSosStar"
      "tSoundEvent\022\027\n\017soundevent_guid\030\001 \001(\005\022\027\n\017"
      "soundevent_hash\030\002 \001(\007\022\033\n\023source_entity_i"
      "ndex\030\003 \001(\005\022\014\n\004seed\030\004 \001(\005\022\025\n\rpacked_param"
      "s\030\005 \001(\014\022\022\n\nstart_time\030\006 \001(\002\"0\n\025CMsgSosSt"
      "opSoundEvent\022\027\n\017soundevent_guid\030\001 \001(\005\"Q\n"
      "\031CMsgSosStopSoundEventHash\022\027\n\017soundevent"
      "_hash\030\001 \001(\007\022\033\n\023source_entity_index\030\002 \001(\005"
      "\"L\n\032CMsgSosSetSoundEventParams\022\027\n\017sounde"
      "vent_guid\030\001 \001(\005\022\025\n\rpacked_params\030\005 \001(\014\"I"
      "\n\034CMsgSosSetLibraryStackFields\022\022\n\nstack_"
      "hash\030\001 \001(\007\022\025\n\rpacked_fields\030\005 \001(\014*\267\003\n\017EB"
      "aseGameEvents\022 \n\033GE_VDebugGameSessionIDE"
      "vent\020\310\001\022\027\n\022GE_PlaceDecalEvent\020\311\001\022\035\n\030GE_C"
      "learWorldDecalsEvent\020\312\001\022\036\n\031GE_ClearEntit"
      "yDecalsEvent\020\313\001\022+\n&GE_ClearDecalsForSkel"
      "etonInstanceEvent\020\314\001\022\"\n\035GE_Source1Legacy"
      "GameEventList\020\315\001\022!\n\034GE_Source1LegacyList"
      "enEvents\020\316\001\022\036\n\031GE_Source1LegacyGameEvent"
      "\020\317\001\022\032\n\025GE_SosStartSoundEvent\020\320\001\022\031\n\024GE_So"
      "sStopSoundEvent\020\321\001\022\036\n\031GE_SosSetSoundEven"
      "tParams\020\322\001\022 \n\033GE_SosSetLibraryStackField"
      "s\020\323\001\022\035\n\030GE_SosStopSoundEventHash\020\324\001B\005H\001\200"
      "\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameevents.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_networkbasetypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gameevents_2eproto

const ::google::protobuf::EnumDescriptor* EBaseGameEvents_descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_enum_descriptors[0];
}
bool EBaseGameEvents_IsValid(int value) {
  switch (value) {
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgVDebugGameSessionIDEvent::kClientidFieldNumber;
const int CMsgVDebugGameSessionIDEvent::kGamesessionidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgVDebugGameSessionIDEvent::CMsgVDebugGameSessionIDEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgVDebugGameSessionIDEvent)
}
CMsgVDebugGameSessionIDEvent::CMsgVDebugGameSessionIDEvent(const CMsgVDebugGameSessionIDEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gamesessionid()) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  clientid_ = from.clientid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgVDebugGameSessionIDEvent)
}

void CMsgVDebugGameSessionIDEvent::SharedCtor() {
  _cached_size_ = 0;
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
}

CMsgVDebugGameSessionIDEvent::~CMsgVDebugGameSessionIDEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgVDebugGameSessionIDEvent)
  SharedDtor();
}

void CMsgVDebugGameSessionIDEvent::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgVDebugGameSessionIDEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVDebugGameSessionIDEvent::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgVDebugGameSessionIDEvent& CMsgVDebugGameSessionIDEvent::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgVDebugGameSessionIDEvent* CMsgVDebugGameSessionIDEvent::New(::google::protobuf::Arena* arena) const {
  CMsgVDebugGameSessionIDEvent* n = new CMsgVDebugGameSessionIDEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgVDebugGameSessionIDEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgVDebugGameSessionIDEvent)
  if (has_gamesessionid()) {
    GOOGLE_DCHECK(!gamesessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*gamesessionid_.UnsafeRawStringPointer())->clear();
  }
  clientid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgVDebugGameSessionIDEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgVDebugGameSessionIDEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clientid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_clientid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gamesessionid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgVDebugGameSessionIDEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgVDebugGameSessionIDEvent)
  return false;
#undef DO_
}

void CMsgVDebugGameSessionIDEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgVDebugGameSessionIDEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 clientid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientid(), output);
  }

  // optional string gamesessionid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gamesessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgVDebugGameSessionIDEvent)
}

::google::protobuf::uint8* CMsgVDebugGameSessionIDEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgVDebugGameSessionIDEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 clientid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientid(), target);
  }

  // optional string gamesessionid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamesessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgVDebugGameSessionIDEvent)
  return target;
}

size_t CMsgVDebugGameSessionIDEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgVDebugGameSessionIDEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string gamesessionid = 2;
    if (has_gamesessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesessionid());
    }

    // optional int32 clientid = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVDebugGameSessionIDEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgVDebugGameSessionIDEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVDebugGameSessionIDEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgVDebugGameSessionIDEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgVDebugGameSessionIDEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgVDebugGameSessionIDEvent)
    MergeFrom(*source);
  }
}

void CMsgVDebugGameSessionIDEvent::MergeFrom(const CMsgVDebugGameSessionIDEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgVDebugGameSessionIDEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gamesessionid();
      gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      clientid_ = from.clientid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVDebugGameSessionIDEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgVDebugGameSessionIDEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVDebugGameSessionIDEvent::CopyFrom(const CMsgVDebugGameSessionIDEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgVDebugGameSessionIDEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVDebugGameSessionIDEvent::IsInitialized() const {
  return true;
}

void CMsgVDebugGameSessionIDEvent::Swap(CMsgVDebugGameSessionIDEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgVDebugGameSessionIDEvent::InternalSwap(CMsgVDebugGameSessionIDEvent* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  std::swap(clientid_, other->clientid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgVDebugGameSessionIDEvent::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgVDebugGameSessionIDEvent

// optional int32 clientid = 1;
bool CMsgVDebugGameSessionIDEvent::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgVDebugGameSessionIDEvent::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgVDebugGameSessionIDEvent::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgVDebugGameSessionIDEvent::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
::google::protobuf::int32 CMsgVDebugGameSessionIDEvent::clientid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgVDebugGameSessionIDEvent.clientid)
  return clientid_;
}
void CMsgVDebugGameSessionIDEvent::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgVDebugGameSessionIDEvent.clientid)
}

// optional string gamesessionid = 2;
bool CMsgVDebugGameSessionIDEvent::has_gamesessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgVDebugGameSessionIDEvent::set_has_gamesessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgVDebugGameSessionIDEvent::clear_has_gamesessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgVDebugGameSessionIDEvent::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamesessionid();
}
const ::std::string& CMsgVDebugGameSessionIDEvent::gamesessionid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid)
  return gamesessionid_.GetNoArena();
}
void CMsgVDebugGameSessionIDEvent::set_gamesessionid(const ::std::string& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid)
}
#if LANG_CXX11
void CMsgVDebugGameSessionIDEvent::set_gamesessionid(::std::string&& value) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid)
}
#endif
void CMsgVDebugGameSessionIDEvent::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid)
}
void CMsgVDebugGameSessionIDEvent::set_gamesessionid(const char* value, size_t size) {
  set_has_gamesessionid();
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid)
}
::std::string* CMsgVDebugGameSessionIDEvent::mutable_gamesessionid() {
  set_has_gamesessionid();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgVDebugGameSessionIDEvent::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid)
  clear_has_gamesessionid();
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgVDebugGameSessionIDEvent::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    set_has_gamesessionid();
  } else {
    clear_has_gamesessionid();
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgVDebugGameSessionIDEvent.gamesessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPlaceDecalEvent::kPositionFieldNumber;
const int CMsgPlaceDecalEvent::kNormalFieldNumber;
const int CMsgPlaceDecalEvent::kSaxisFieldNumber;
const int CMsgPlaceDecalEvent::kDecalmaterialindexFieldNumber;
const int CMsgPlaceDecalEvent::kFlagsFieldNumber;
const int CMsgPlaceDecalEvent::kColorFieldNumber;
const int CMsgPlaceDecalEvent::kWidthFieldNumber;
const int CMsgPlaceDecalEvent::kHeightFieldNumber;
const int CMsgPlaceDecalEvent::kDepthFieldNumber;
const int CMsgPlaceDecalEvent::kEntityhandleindexFieldNumber;
const int CMsgPlaceDecalEvent::kSkeletoninstancehashFieldNumber;
const int CMsgPlaceDecalEvent::kBoneindexFieldNumber;
const int CMsgPlaceDecalEvent::kTranslucenthitFieldNumber;
const int CMsgPlaceDecalEvent::kIsAdjacentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPlaceDecalEvent::CMsgPlaceDecalEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPlaceDecalEvent)
}
CMsgPlaceDecalEvent::CMsgPlaceDecalEvent(const CMsgPlaceDecalEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::proto::dota::CMsgVector(*from.normal_);
  } else {
    normal_ = NULL;
  }
  if (from.has_saxis()) {
    saxis_ = new ::proto::dota::CMsgVector(*from.saxis_);
  } else {
    saxis_ = NULL;
  }
  ::memcpy(&decalmaterialindex_, &from.decalmaterialindex_,
    reinterpret_cast<char*>(&is_adjacent_) -
    reinterpret_cast<char*>(&decalmaterialindex_) + sizeof(is_adjacent_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPlaceDecalEvent)
}

void CMsgPlaceDecalEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&is_adjacent_) -
    reinterpret_cast<char*>(&position_) + sizeof(is_adjacent_));
}

CMsgPlaceDecalEvent::~CMsgPlaceDecalEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPlaceDecalEvent)
  SharedDtor();
}

void CMsgPlaceDecalEvent::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete normal_;
  }
  if (this != internal_default_instance()) {
    delete saxis_;
  }
}

void CMsgPlaceDecalEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlaceDecalEvent::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPlaceDecalEvent& CMsgPlaceDecalEvent::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPlaceDecalEvent* CMsgPlaceDecalEvent::New(::google::protobuf::Arena* arena) const {
  CMsgPlaceDecalEvent* n = new CMsgPlaceDecalEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPlaceDecalEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPlaceDecalEvent)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::proto::dota::CMsgVector::Clear();
    }
    if (has_normal()) {
      GOOGLE_DCHECK(normal_ != NULL);
      normal_->::proto::dota::CMsgVector::Clear();
    }
    if (has_saxis()) {
      GOOGLE_DCHECK(saxis_ != NULL);
      saxis_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&decalmaterialindex_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&decalmaterialindex_) + sizeof(height_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&depth_, 0, reinterpret_cast<char*>(&is_adjacent_) -
      reinterpret_cast<char*>(&depth_) + sizeof(is_adjacent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPlaceDecalEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPlaceDecalEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector normal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector saxis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saxis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 decalmaterialindex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_decalmaterialindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decalmaterialindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float depth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 entityhandleindex = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_entityhandleindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entityhandleindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 skeletoninstancehash = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_skeletoninstancehash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &skeletoninstancehash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 boneindex = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_boneindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boneindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool translucenthit = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_translucenthit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translucenthit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_adjacent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_is_adjacent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_adjacent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPlaceDecalEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPlaceDecalEvent)
  return false;
#undef DO_
}

void CMsgPlaceDecalEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPlaceDecalEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .proto.dota.CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->normal_, output);
  }

  // optional .proto.dota.CMsgVector saxis = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->saxis_, output);
  }

  // optional uint32 decalmaterialindex = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->decalmaterialindex(), output);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional fixed32 color = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->color(), output);
  }

  // optional float width = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->width(), output);
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  // optional float depth = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->depth(), output);
  }

  // optional uint32 entityhandleindex = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->entityhandleindex(), output);
  }

  // optional fixed32 skeletoninstancehash = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->skeletoninstancehash(), output);
  }

  // optional int32 boneindex = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->boneindex(), output);
  }

  // optional bool translucenthit = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->translucenthit(), output);
  }

  // optional bool is_adjacent = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_adjacent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPlaceDecalEvent)
}

::google::protobuf::uint8* CMsgPlaceDecalEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPlaceDecalEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->normal_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector saxis = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->saxis_, deterministic, target);
  }

  // optional uint32 decalmaterialindex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->decalmaterialindex(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // optional fixed32 color = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->color(), target);
  }

  // optional float width = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->width(), target);
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  // optional float depth = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->depth(), target);
  }

  // optional uint32 entityhandleindex = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->entityhandleindex(), target);
  }

  // optional fixed32 skeletoninstancehash = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->skeletoninstancehash(), target);
  }

  // optional int32 boneindex = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->boneindex(), target);
  }

  // optional bool translucenthit = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->translucenthit(), target);
  }

  // optional bool is_adjacent = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_adjacent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPlaceDecalEvent)
  return target;
}

size_t CMsgPlaceDecalEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPlaceDecalEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgVector position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .proto.dota.CMsgVector normal = 2;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->normal_);
    }

    // optional .proto.dota.CMsgVector saxis = 3;
    if (has_saxis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->saxis_);
    }

    // optional uint32 decalmaterialindex = 4;
    if (has_decalmaterialindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decalmaterialindex());
    }

    // optional uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional fixed32 color = 6;
    if (has_color()) {
      total_size += 1 + 4;
    }

    // optional float width = 7;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 8;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float depth = 9;
    if (has_depth()) {
      total_size += 1 + 4;
    }

    // optional uint32 entityhandleindex = 10;
    if (has_entityhandleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entityhandleindex());
    }

    // optional fixed32 skeletoninstancehash = 11;
    if (has_skeletoninstancehash()) {
      total_size += 1 + 4;
    }

    // optional int32 boneindex = 12;
    if (has_boneindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boneindex());
    }

    // optional bool translucenthit = 13;
    if (has_translucenthit()) {
      total_size += 1 + 1;
    }

    // optional bool is_adjacent = 14;
    if (has_is_adjacent()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlaceDecalEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPlaceDecalEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlaceDecalEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPlaceDecalEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPlaceDecalEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPlaceDecalEvent)
    MergeFrom(*source);
  }
}

void CMsgPlaceDecalEvent::MergeFrom(const CMsgPlaceDecalEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPlaceDecalEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_normal()->::proto::dota::CMsgVector::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_saxis()->::proto::dota::CMsgVector::MergeFrom(from.saxis());
    }
    if (cached_has_bits & 0x00000008u) {
      decalmaterialindex_ = from.decalmaterialindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000200u) {
      entityhandleindex_ = from.entityhandleindex_;
    }
    if (cached_has_bits & 0x00000400u) {
      skeletoninstancehash_ = from.skeletoninstancehash_;
    }
    if (cached_has_bits & 0x00000800u) {
      boneindex_ = from.boneindex_;
    }
    if (cached_has_bits & 0x00001000u) {
      translucenthit_ = from.translucenthit_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_adjacent_ = from.is_adjacent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlaceDecalEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPlaceDecalEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlaceDecalEvent::CopyFrom(const CMsgPlaceDecalEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPlaceDecalEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlaceDecalEvent::IsInitialized() const {
  return true;
}

void CMsgPlaceDecalEvent::Swap(CMsgPlaceDecalEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPlaceDecalEvent::InternalSwap(CMsgPlaceDecalEvent* other) {
  std::swap(position_, other->position_);
  std::swap(normal_, other->normal_);
  std::swap(saxis_, other->saxis_);
  std::swap(decalmaterialindex_, other->decalmaterialindex_);
  std::swap(flags_, other->flags_);
  std::swap(color_, other->color_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(depth_, other->depth_);
  std::swap(entityhandleindex_, other->entityhandleindex_);
  std::swap(skeletoninstancehash_, other->skeletoninstancehash_);
  std::swap(boneindex_, other->boneindex_);
  std::swap(translucenthit_, other->translucenthit_);
  std::swap(is_adjacent_, other->is_adjacent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPlaceDecalEvent::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPlaceDecalEvent

// optional .proto.dota.CMsgVector position = 1;
bool CMsgPlaceDecalEvent::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPlaceDecalEvent::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPlaceDecalEvent::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPlaceDecalEvent::clear_position() {
  if (position_ != NULL) position_->::proto::dota::CMsgVector::Clear();
  clear_has_position();
}
const ::proto::dota::CMsgVector& CMsgPlaceDecalEvent::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.position)
  return position_ != NULL ? *position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgPlaceDecalEvent::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPlaceDecalEvent.position)
  return position_;
}
::proto::dota::CMsgVector* CMsgPlaceDecalEvent::release_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPlaceDecalEvent.position)
  clear_has_position();
  ::proto::dota::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}
void CMsgPlaceDecalEvent::set_allocated_position(::proto::dota::CMsgVector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPlaceDecalEvent.position)
}

// optional .proto.dota.CMsgVector normal = 2;
bool CMsgPlaceDecalEvent::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPlaceDecalEvent::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPlaceDecalEvent::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPlaceDecalEvent::clear_normal() {
  if (normal_ != NULL) normal_->::proto::dota::CMsgVector::Clear();
  clear_has_normal();
}
const ::proto::dota::CMsgVector& CMsgPlaceDecalEvent::normal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.normal)
  return normal_ != NULL ? *normal_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgPlaceDecalEvent::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPlaceDecalEvent.normal)
  return normal_;
}
::proto::dota::CMsgVector* CMsgPlaceDecalEvent::release_normal() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPlaceDecalEvent.normal)
  clear_has_normal();
  ::proto::dota::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
void CMsgPlaceDecalEvent::set_allocated_normal(::proto::dota::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPlaceDecalEvent.normal)
}

// optional .proto.dota.CMsgVector saxis = 3;
bool CMsgPlaceDecalEvent::has_saxis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPlaceDecalEvent::set_has_saxis() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPlaceDecalEvent::clear_has_saxis() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPlaceDecalEvent::clear_saxis() {
  if (saxis_ != NULL) saxis_->::proto::dota::CMsgVector::Clear();
  clear_has_saxis();
}
const ::proto::dota::CMsgVector& CMsgPlaceDecalEvent::saxis() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.saxis)
  return saxis_ != NULL ? *saxis_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CMsgPlaceDecalEvent::mutable_saxis() {
  set_has_saxis();
  if (saxis_ == NULL) {
    saxis_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPlaceDecalEvent.saxis)
  return saxis_;
}
::proto::dota::CMsgVector* CMsgPlaceDecalEvent::release_saxis() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPlaceDecalEvent.saxis)
  clear_has_saxis();
  ::proto::dota::CMsgVector* temp = saxis_;
  saxis_ = NULL;
  return temp;
}
void CMsgPlaceDecalEvent::set_allocated_saxis(::proto::dota::CMsgVector* saxis) {
  delete saxis_;
  saxis_ = saxis;
  if (saxis) {
    set_has_saxis();
  } else {
    clear_has_saxis();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPlaceDecalEvent.saxis)
}

// optional uint32 decalmaterialindex = 4;
bool CMsgPlaceDecalEvent::has_decalmaterialindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPlaceDecalEvent::set_has_decalmaterialindex() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPlaceDecalEvent::clear_has_decalmaterialindex() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPlaceDecalEvent::clear_decalmaterialindex() {
  decalmaterialindex_ = 0u;
  clear_has_decalmaterialindex();
}
::google::protobuf::uint32 CMsgPlaceDecalEvent::decalmaterialindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.decalmaterialindex)
  return decalmaterialindex_;
}
void CMsgPlaceDecalEvent::set_decalmaterialindex(::google::protobuf::uint32 value) {
  set_has_decalmaterialindex();
  decalmaterialindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.decalmaterialindex)
}

// optional uint32 flags = 5;
bool CMsgPlaceDecalEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgPlaceDecalEvent::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgPlaceDecalEvent::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgPlaceDecalEvent::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CMsgPlaceDecalEvent::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.flags)
  return flags_;
}
void CMsgPlaceDecalEvent::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.flags)
}

// optional fixed32 color = 6;
bool CMsgPlaceDecalEvent::has_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgPlaceDecalEvent::set_has_color() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgPlaceDecalEvent::clear_has_color() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgPlaceDecalEvent::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CMsgPlaceDecalEvent::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.color)
  return color_;
}
void CMsgPlaceDecalEvent::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.color)
}

// optional float width = 7;
bool CMsgPlaceDecalEvent::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgPlaceDecalEvent::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgPlaceDecalEvent::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgPlaceDecalEvent::clear_width() {
  width_ = 0;
  clear_has_width();
}
float CMsgPlaceDecalEvent::width() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.width)
  return width_;
}
void CMsgPlaceDecalEvent::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.width)
}

// optional float height = 8;
bool CMsgPlaceDecalEvent::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgPlaceDecalEvent::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgPlaceDecalEvent::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgPlaceDecalEvent::clear_height() {
  height_ = 0;
  clear_has_height();
}
float CMsgPlaceDecalEvent::height() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.height)
  return height_;
}
void CMsgPlaceDecalEvent::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.height)
}

// optional float depth = 9;
bool CMsgPlaceDecalEvent::has_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgPlaceDecalEvent::set_has_depth() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgPlaceDecalEvent::clear_has_depth() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgPlaceDecalEvent::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
float CMsgPlaceDecalEvent::depth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.depth)
  return depth_;
}
void CMsgPlaceDecalEvent::set_depth(float value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.depth)
}

// optional uint32 entityhandleindex = 10;
bool CMsgPlaceDecalEvent::has_entityhandleindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgPlaceDecalEvent::set_has_entityhandleindex() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgPlaceDecalEvent::clear_has_entityhandleindex() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgPlaceDecalEvent::clear_entityhandleindex() {
  entityhandleindex_ = 0u;
  clear_has_entityhandleindex();
}
::google::protobuf::uint32 CMsgPlaceDecalEvent::entityhandleindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.entityhandleindex)
  return entityhandleindex_;
}
void CMsgPlaceDecalEvent::set_entityhandleindex(::google::protobuf::uint32 value) {
  set_has_entityhandleindex();
  entityhandleindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.entityhandleindex)
}

// optional fixed32 skeletoninstancehash = 11;
bool CMsgPlaceDecalEvent::has_skeletoninstancehash() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgPlaceDecalEvent::set_has_skeletoninstancehash() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgPlaceDecalEvent::clear_has_skeletoninstancehash() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgPlaceDecalEvent::clear_skeletoninstancehash() {
  skeletoninstancehash_ = 0u;
  clear_has_skeletoninstancehash();
}
::google::protobuf::uint32 CMsgPlaceDecalEvent::skeletoninstancehash() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.skeletoninstancehash)
  return skeletoninstancehash_;
}
void CMsgPlaceDecalEvent::set_skeletoninstancehash(::google::protobuf::uint32 value) {
  set_has_skeletoninstancehash();
  skeletoninstancehash_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.skeletoninstancehash)
}

// optional int32 boneindex = 12;
bool CMsgPlaceDecalEvent::has_boneindex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgPlaceDecalEvent::set_has_boneindex() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgPlaceDecalEvent::clear_has_boneindex() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgPlaceDecalEvent::clear_boneindex() {
  boneindex_ = 0;
  clear_has_boneindex();
}
::google::protobuf::int32 CMsgPlaceDecalEvent::boneindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.boneindex)
  return boneindex_;
}
void CMsgPlaceDecalEvent::set_boneindex(::google::protobuf::int32 value) {
  set_has_boneindex();
  boneindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.boneindex)
}

// optional bool translucenthit = 13;
bool CMsgPlaceDecalEvent::has_translucenthit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgPlaceDecalEvent::set_has_translucenthit() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgPlaceDecalEvent::clear_has_translucenthit() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgPlaceDecalEvent::clear_translucenthit() {
  translucenthit_ = false;
  clear_has_translucenthit();
}
bool CMsgPlaceDecalEvent::translucenthit() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.translucenthit)
  return translucenthit_;
}
void CMsgPlaceDecalEvent::set_translucenthit(bool value) {
  set_has_translucenthit();
  translucenthit_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.translucenthit)
}

// optional bool is_adjacent = 14;
bool CMsgPlaceDecalEvent::has_is_adjacent() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgPlaceDecalEvent::set_has_is_adjacent() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgPlaceDecalEvent::clear_has_is_adjacent() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgPlaceDecalEvent::clear_is_adjacent() {
  is_adjacent_ = false;
  clear_has_is_adjacent();
}
bool CMsgPlaceDecalEvent::is_adjacent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlaceDecalEvent.is_adjacent)
  return is_adjacent_;
}
void CMsgPlaceDecalEvent::set_is_adjacent(bool value) {
  set_has_is_adjacent();
  is_adjacent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlaceDecalEvent.is_adjacent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClearWorldDecalsEvent::kFlagstoclearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearWorldDecalsEvent::CMsgClearWorldDecalsEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClearWorldDecalsEvent)
}
CMsgClearWorldDecalsEvent::CMsgClearWorldDecalsEvent(const CMsgClearWorldDecalsEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flagstoclear_ = from.flagstoclear_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClearWorldDecalsEvent)
}

void CMsgClearWorldDecalsEvent::SharedCtor() {
  _cached_size_ = 0;
  flagstoclear_ = 0u;
}

CMsgClearWorldDecalsEvent::~CMsgClearWorldDecalsEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClearWorldDecalsEvent)
  SharedDtor();
}

void CMsgClearWorldDecalsEvent::SharedDtor() {
}

void CMsgClearWorldDecalsEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClearWorldDecalsEvent::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClearWorldDecalsEvent& CMsgClearWorldDecalsEvent::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClearWorldDecalsEvent* CMsgClearWorldDecalsEvent::New(::google::protobuf::Arena* arena) const {
  CMsgClearWorldDecalsEvent* n = new CMsgClearWorldDecalsEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClearWorldDecalsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClearWorldDecalsEvent)
  flagstoclear_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClearWorldDecalsEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClearWorldDecalsEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flagstoclear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_flagstoclear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flagstoclear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClearWorldDecalsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClearWorldDecalsEvent)
  return false;
#undef DO_
}

void CMsgClearWorldDecalsEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClearWorldDecalsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flagstoclear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClearWorldDecalsEvent)
}

::google::protobuf::uint8* CMsgClearWorldDecalsEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClearWorldDecalsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flagstoclear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClearWorldDecalsEvent)
  return target;
}

size_t CMsgClearWorldDecalsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClearWorldDecalsEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 flagstoclear = 1;
  if (has_flagstoclear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flagstoclear());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClearWorldDecalsEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClearWorldDecalsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearWorldDecalsEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClearWorldDecalsEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClearWorldDecalsEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClearWorldDecalsEvent)
    MergeFrom(*source);
  }
}

void CMsgClearWorldDecalsEvent::MergeFrom(const CMsgClearWorldDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClearWorldDecalsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flagstoclear()) {
    set_flagstoclear(from.flagstoclear());
  }
}

void CMsgClearWorldDecalsEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClearWorldDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearWorldDecalsEvent::CopyFrom(const CMsgClearWorldDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClearWorldDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearWorldDecalsEvent::IsInitialized() const {
  return true;
}

void CMsgClearWorldDecalsEvent::Swap(CMsgClearWorldDecalsEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearWorldDecalsEvent::InternalSwap(CMsgClearWorldDecalsEvent* other) {
  std::swap(flagstoclear_, other->flagstoclear_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClearWorldDecalsEvent::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClearWorldDecalsEvent

// optional uint32 flagstoclear = 1;
bool CMsgClearWorldDecalsEvent::has_flagstoclear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClearWorldDecalsEvent::set_has_flagstoclear() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClearWorldDecalsEvent::clear_has_flagstoclear() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClearWorldDecalsEvent::clear_flagstoclear() {
  flagstoclear_ = 0u;
  clear_has_flagstoclear();
}
::google::protobuf::uint32 CMsgClearWorldDecalsEvent::flagstoclear() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClearWorldDecalsEvent.flagstoclear)
  return flagstoclear_;
}
void CMsgClearWorldDecalsEvent::set_flagstoclear(::google::protobuf::uint32 value) {
  set_has_flagstoclear();
  flagstoclear_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClearWorldDecalsEvent.flagstoclear)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClearEntityDecalsEvent::kFlagstoclearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearEntityDecalsEvent::CMsgClearEntityDecalsEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClearEntityDecalsEvent)
}
CMsgClearEntityDecalsEvent::CMsgClearEntityDecalsEvent(const CMsgClearEntityDecalsEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flagstoclear_ = from.flagstoclear_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClearEntityDecalsEvent)
}

void CMsgClearEntityDecalsEvent::SharedCtor() {
  _cached_size_ = 0;
  flagstoclear_ = 0u;
}

CMsgClearEntityDecalsEvent::~CMsgClearEntityDecalsEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClearEntityDecalsEvent)
  SharedDtor();
}

void CMsgClearEntityDecalsEvent::SharedDtor() {
}

void CMsgClearEntityDecalsEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClearEntityDecalsEvent::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClearEntityDecalsEvent& CMsgClearEntityDecalsEvent::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClearEntityDecalsEvent* CMsgClearEntityDecalsEvent::New(::google::protobuf::Arena* arena) const {
  CMsgClearEntityDecalsEvent* n = new CMsgClearEntityDecalsEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClearEntityDecalsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClearEntityDecalsEvent)
  flagstoclear_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClearEntityDecalsEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClearEntityDecalsEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flagstoclear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_flagstoclear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flagstoclear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClearEntityDecalsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClearEntityDecalsEvent)
  return false;
#undef DO_
}

void CMsgClearEntityDecalsEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClearEntityDecalsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flagstoclear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClearEntityDecalsEvent)
}

::google::protobuf::uint8* CMsgClearEntityDecalsEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClearEntityDecalsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flagstoclear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClearEntityDecalsEvent)
  return target;
}

size_t CMsgClearEntityDecalsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClearEntityDecalsEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 flagstoclear = 1;
  if (has_flagstoclear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flagstoclear());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClearEntityDecalsEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClearEntityDecalsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearEntityDecalsEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClearEntityDecalsEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClearEntityDecalsEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClearEntityDecalsEvent)
    MergeFrom(*source);
  }
}

void CMsgClearEntityDecalsEvent::MergeFrom(const CMsgClearEntityDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClearEntityDecalsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flagstoclear()) {
    set_flagstoclear(from.flagstoclear());
  }
}

void CMsgClearEntityDecalsEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClearEntityDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearEntityDecalsEvent::CopyFrom(const CMsgClearEntityDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClearEntityDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearEntityDecalsEvent::IsInitialized() const {
  return true;
}

void CMsgClearEntityDecalsEvent::Swap(CMsgClearEntityDecalsEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearEntityDecalsEvent::InternalSwap(CMsgClearEntityDecalsEvent* other) {
  std::swap(flagstoclear_, other->flagstoclear_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClearEntityDecalsEvent::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClearEntityDecalsEvent

// optional uint32 flagstoclear = 1;
bool CMsgClearEntityDecalsEvent::has_flagstoclear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClearEntityDecalsEvent::set_has_flagstoclear() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClearEntityDecalsEvent::clear_has_flagstoclear() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClearEntityDecalsEvent::clear_flagstoclear() {
  flagstoclear_ = 0u;
  clear_has_flagstoclear();
}
::google::protobuf::uint32 CMsgClearEntityDecalsEvent::flagstoclear() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClearEntityDecalsEvent.flagstoclear)
  return flagstoclear_;
}
void CMsgClearEntityDecalsEvent::set_flagstoclear(::google::protobuf::uint32 value) {
  set_has_flagstoclear();
  flagstoclear_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClearEntityDecalsEvent.flagstoclear)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClearDecalsForSkeletonInstanceEvent::kFlagstoclearFieldNumber;
const int CMsgClearDecalsForSkeletonInstanceEvent::kEntityhandleindexFieldNumber;
const int CMsgClearDecalsForSkeletonInstanceEvent::kSkeletoninstancehashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearDecalsForSkeletonInstanceEvent::CMsgClearDecalsForSkeletonInstanceEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
}
CMsgClearDecalsForSkeletonInstanceEvent::CMsgClearDecalsForSkeletonInstanceEvent(const CMsgClearDecalsForSkeletonInstanceEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flagstoclear_, &from.flagstoclear_,
    reinterpret_cast<char*>(&skeletoninstancehash_) -
    reinterpret_cast<char*>(&flagstoclear_) + sizeof(skeletoninstancehash_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
}

void CMsgClearDecalsForSkeletonInstanceEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&flagstoclear_, 0, reinterpret_cast<char*>(&skeletoninstancehash_) -
    reinterpret_cast<char*>(&flagstoclear_) + sizeof(skeletoninstancehash_));
}

CMsgClearDecalsForSkeletonInstanceEvent::~CMsgClearDecalsForSkeletonInstanceEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  SharedDtor();
}

void CMsgClearDecalsForSkeletonInstanceEvent::SharedDtor() {
}

void CMsgClearDecalsForSkeletonInstanceEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClearDecalsForSkeletonInstanceEvent::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClearDecalsForSkeletonInstanceEvent& CMsgClearDecalsForSkeletonInstanceEvent::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClearDecalsForSkeletonInstanceEvent* CMsgClearDecalsForSkeletonInstanceEvent::New(::google::protobuf::Arena* arena) const {
  CMsgClearDecalsForSkeletonInstanceEvent* n = new CMsgClearDecalsForSkeletonInstanceEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClearDecalsForSkeletonInstanceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&flagstoclear_, 0, reinterpret_cast<char*>(&skeletoninstancehash_) -
      reinterpret_cast<char*>(&flagstoclear_) + sizeof(skeletoninstancehash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClearDecalsForSkeletonInstanceEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flagstoclear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_flagstoclear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flagstoclear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 entityhandleindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_entityhandleindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entityhandleindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skeletoninstancehash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_skeletoninstancehash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skeletoninstancehash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  return false;
#undef DO_
}

void CMsgClearDecalsForSkeletonInstanceEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flagstoclear(), output);
  }

  // optional uint32 entityhandleindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entityhandleindex(), output);
  }

  // optional uint32 skeletoninstancehash = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skeletoninstancehash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
}

::google::protobuf::uint8* CMsgClearDecalsForSkeletonInstanceEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flagstoclear(), target);
  }

  // optional uint32 entityhandleindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entityhandleindex(), target);
  }

  // optional uint32 skeletoninstancehash = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skeletoninstancehash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  return target;
}

size_t CMsgClearDecalsForSkeletonInstanceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 flagstoclear = 1;
    if (has_flagstoclear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flagstoclear());
    }

    // optional uint32 entityhandleindex = 2;
    if (has_entityhandleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entityhandleindex());
    }

    // optional uint32 skeletoninstancehash = 3;
    if (has_skeletoninstancehash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skeletoninstancehash());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClearDecalsForSkeletonInstanceEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearDecalsForSkeletonInstanceEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClearDecalsForSkeletonInstanceEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
    MergeFrom(*source);
  }
}

void CMsgClearDecalsForSkeletonInstanceEvent::MergeFrom(const CMsgClearDecalsForSkeletonInstanceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      flagstoclear_ = from.flagstoclear_;
    }
    if (cached_has_bits & 0x00000002u) {
      entityhandleindex_ = from.entityhandleindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      skeletoninstancehash_ = from.skeletoninstancehash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClearDecalsForSkeletonInstanceEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearDecalsForSkeletonInstanceEvent::CopyFrom(const CMsgClearDecalsForSkeletonInstanceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearDecalsForSkeletonInstanceEvent::IsInitialized() const {
  return true;
}

void CMsgClearDecalsForSkeletonInstanceEvent::Swap(CMsgClearDecalsForSkeletonInstanceEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearDecalsForSkeletonInstanceEvent::InternalSwap(CMsgClearDecalsForSkeletonInstanceEvent* other) {
  std::swap(flagstoclear_, other->flagstoclear_);
  std::swap(entityhandleindex_, other->entityhandleindex_);
  std::swap(skeletoninstancehash_, other->skeletoninstancehash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClearDecalsForSkeletonInstanceEvent::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClearDecalsForSkeletonInstanceEvent

// optional uint32 flagstoclear = 1;
bool CMsgClearDecalsForSkeletonInstanceEvent::has_flagstoclear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClearDecalsForSkeletonInstanceEvent::set_has_flagstoclear() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClearDecalsForSkeletonInstanceEvent::clear_has_flagstoclear() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClearDecalsForSkeletonInstanceEvent::clear_flagstoclear() {
  flagstoclear_ = 0u;
  clear_has_flagstoclear();
}
::google::protobuf::uint32 CMsgClearDecalsForSkeletonInstanceEvent::flagstoclear() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent.flagstoclear)
  return flagstoclear_;
}
void CMsgClearDecalsForSkeletonInstanceEvent::set_flagstoclear(::google::protobuf::uint32 value) {
  set_has_flagstoclear();
  flagstoclear_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent.flagstoclear)
}

// optional uint32 entityhandleindex = 2;
bool CMsgClearDecalsForSkeletonInstanceEvent::has_entityhandleindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClearDecalsForSkeletonInstanceEvent::set_has_entityhandleindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClearDecalsForSkeletonInstanceEvent::clear_has_entityhandleindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClearDecalsForSkeletonInstanceEvent::clear_entityhandleindex() {
  entityhandleindex_ = 0u;
  clear_has_entityhandleindex();
}
::google::protobuf::uint32 CMsgClearDecalsForSkeletonInstanceEvent::entityhandleindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent.entityhandleindex)
  return entityhandleindex_;
}
void CMsgClearDecalsForSkeletonInstanceEvent::set_entityhandleindex(::google::protobuf::uint32 value) {
  set_has_entityhandleindex();
  entityhandleindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent.entityhandleindex)
}

// optional uint32 skeletoninstancehash = 3;
bool CMsgClearDecalsForSkeletonInstanceEvent::has_skeletoninstancehash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClearDecalsForSkeletonInstanceEvent::set_has_skeletoninstancehash() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClearDecalsForSkeletonInstanceEvent::clear_has_skeletoninstancehash() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClearDecalsForSkeletonInstanceEvent::clear_skeletoninstancehash() {
  skeletoninstancehash_ = 0u;
  clear_has_skeletoninstancehash();
}
::google::protobuf::uint32 CMsgClearDecalsForSkeletonInstanceEvent::skeletoninstancehash() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent.skeletoninstancehash)
  return skeletoninstancehash_;
}
void CMsgClearDecalsForSkeletonInstanceEvent::set_skeletoninstancehash(::google::protobuf::uint32 value) {
  set_has_skeletoninstancehash();
  skeletoninstancehash_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClearDecalsForSkeletonInstanceEvent.skeletoninstancehash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSource1LegacyGameEventList_key_t::kTypeFieldNumber;
const int CMsgSource1LegacyGameEventList_key_t::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSource1LegacyGameEventList_key_t::CMsgSource1LegacyGameEventList_key_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSource1LegacyGameEventList.key_t)
}
CMsgSource1LegacyGameEventList_key_t::CMsgSource1LegacyGameEventList_key_t(const CMsgSource1LegacyGameEventList_key_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSource1LegacyGameEventList.key_t)
}

void CMsgSource1LegacyGameEventList_key_t::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CMsgSource1LegacyGameEventList_key_t::~CMsgSource1LegacyGameEventList_key_t() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  SharedDtor();
}

void CMsgSource1LegacyGameEventList_key_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSource1LegacyGameEventList_key_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSource1LegacyGameEventList_key_t::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSource1LegacyGameEventList_key_t& CMsgSource1LegacyGameEventList_key_t::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSource1LegacyGameEventList_key_t* CMsgSource1LegacyGameEventList_key_t::New(::google::protobuf::Arena* arena) const {
  CMsgSource1LegacyGameEventList_key_t* n = new CMsgSource1LegacyGameEventList_key_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSource1LegacyGameEventList_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSource1LegacyGameEventList_key_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSource1LegacyGameEventList.key_t.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  return false;
#undef DO_
}

void CMsgSource1LegacyGameEventList_key_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSource1LegacyGameEventList.key_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSource1LegacyGameEventList.key_t)
}

::google::protobuf::uint8* CMsgSource1LegacyGameEventList_key_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSource1LegacyGameEventList.key_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  return target;
}

size_t CMsgSource1LegacyGameEventList_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSource1LegacyGameEventList_key_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEventList_key_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSource1LegacyGameEventList_key_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSource1LegacyGameEventList.key_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSource1LegacyGameEventList.key_t)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEventList_key_t::MergeFrom(const CMsgSource1LegacyGameEventList_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSource1LegacyGameEventList_key_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEventList_key_t::CopyFrom(const CMsgSource1LegacyGameEventList_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSource1LegacyGameEventList.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEventList_key_t::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEventList_key_t::Swap(CMsgSource1LegacyGameEventList_key_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSource1LegacyGameEventList_key_t::InternalSwap(CMsgSource1LegacyGameEventList_key_t* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSource1LegacyGameEventList_key_t::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSource1LegacyGameEventList_key_t

// optional int32 type = 1;
bool CMsgSource1LegacyGameEventList_key_t::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSource1LegacyGameEventList_key_t::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSource1LegacyGameEventList_key_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSource1LegacyGameEventList_key_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 CMsgSource1LegacyGameEventList_key_t::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEventList.key_t.type)
  return type_;
}
void CMsgSource1LegacyGameEventList_key_t::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEventList.key_t.type)
}

// optional string name = 2;
bool CMsgSource1LegacyGameEventList_key_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSource1LegacyGameEventList_key_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSource1LegacyGameEventList_key_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSource1LegacyGameEventList_key_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgSource1LegacyGameEventList_key_t::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEventList.key_t.name)
  return name_.GetNoArena();
}
void CMsgSource1LegacyGameEventList_key_t::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEventList.key_t.name)
}
#if LANG_CXX11
void CMsgSource1LegacyGameEventList_key_t::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSource1LegacyGameEventList.key_t.name)
}
#endif
void CMsgSource1LegacyGameEventList_key_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSource1LegacyGameEventList.key_t.name)
}
void CMsgSource1LegacyGameEventList_key_t::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSource1LegacyGameEventList.key_t.name)
}
::std::string* CMsgSource1LegacyGameEventList_key_t::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSource1LegacyGameEventList.key_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSource1LegacyGameEventList_key_t::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSource1LegacyGameEventList.key_t.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSource1LegacyGameEventList_key_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSource1LegacyGameEventList.key_t.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSource1LegacyGameEventList_descriptor_t::kEventidFieldNumber;
const int CMsgSource1LegacyGameEventList_descriptor_t::kNameFieldNumber;
const int CMsgSource1LegacyGameEventList_descriptor_t::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSource1LegacyGameEventList_descriptor_t::CMsgSource1LegacyGameEventList_descriptor_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
}
CMsgSource1LegacyGameEventList_descriptor_t::CMsgSource1LegacyGameEventList_descriptor_t(const CMsgSource1LegacyGameEventList_descriptor_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
}

void CMsgSource1LegacyGameEventList_descriptor_t::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eventid_ = 0;
}

CMsgSource1LegacyGameEventList_descriptor_t::~CMsgSource1LegacyGameEventList_descriptor_t() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  SharedDtor();
}

void CMsgSource1LegacyGameEventList_descriptor_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSource1LegacyGameEventList_descriptor_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSource1LegacyGameEventList_descriptor_t::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSource1LegacyGameEventList_descriptor_t& CMsgSource1LegacyGameEventList_descriptor_t::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSource1LegacyGameEventList_descriptor_t* CMsgSource1LegacyGameEventList_descriptor_t::New(::google::protobuf::Arena* arena) const {
  CMsgSource1LegacyGameEventList_descriptor_t* n = new CMsgSource1LegacyGameEventList_descriptor_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSource1LegacyGameEventList_descriptor_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  keys_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  eventid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSource1LegacyGameEventList_descriptor_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eventid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSource1LegacyGameEventList.key_t keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  return false;
#undef DO_
}

void CMsgSource1LegacyGameEventList_descriptor_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .proto.dota.CMsgSource1LegacyGameEventList.key_t keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
}

::google::protobuf::uint8* CMsgSource1LegacyGameEventList_descriptor_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .proto.dota.CMsgSource1LegacyGameEventList.key_t keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->keys(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  return target;
}

size_t CMsgSource1LegacyGameEventList_descriptor_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSource1LegacyGameEventList.key_t keys = 3;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 eventid = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSource1LegacyGameEventList_descriptor_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEventList_descriptor_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSource1LegacyGameEventList_descriptor_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEventList_descriptor_t::MergeFrom(const CMsgSource1LegacyGameEventList_descriptor_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSource1LegacyGameEventList_descriptor_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEventList_descriptor_t::CopyFrom(const CMsgSource1LegacyGameEventList_descriptor_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEventList_descriptor_t::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEventList_descriptor_t::Swap(CMsgSource1LegacyGameEventList_descriptor_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSource1LegacyGameEventList_descriptor_t::InternalSwap(CMsgSource1LegacyGameEventList_descriptor_t* other) {
  keys_.InternalSwap(&other->keys_);
  name_.Swap(&other->name_);
  std::swap(eventid_, other->eventid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSource1LegacyGameEventList_descriptor_t::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSource1LegacyGameEventList_descriptor_t

// optional int32 eventid = 1;
bool CMsgSource1LegacyGameEventList_descriptor_t::has_eventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSource1LegacyGameEventList_descriptor_t::set_has_eventid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSource1LegacyGameEventList_descriptor_t::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSource1LegacyGameEventList_descriptor_t::clear_eventid() {
  eventid_ = 0;
  clear_has_eventid();
}
::google::protobuf::int32 CMsgSource1LegacyGameEventList_descriptor_t::eventid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.eventid)
  return eventid_;
}
void CMsgSource1LegacyGameEventList_descriptor_t::set_eventid(::google::protobuf::int32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.eventid)
}

// optional string name = 2;
bool CMsgSource1LegacyGameEventList_descriptor_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSource1LegacyGameEventList_descriptor_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSource1LegacyGameEventList_descriptor_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSource1LegacyGameEventList_descriptor_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgSource1LegacyGameEventList_descriptor_t::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name)
  return name_.GetNoArena();
}
void CMsgSource1LegacyGameEventList_descriptor_t::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name)
}
#if LANG_CXX11
void CMsgSource1LegacyGameEventList_descriptor_t::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name)
}
#endif
void CMsgSource1LegacyGameEventList_descriptor_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name)
}
void CMsgSource1LegacyGameEventList_descriptor_t::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name)
}
::std::string* CMsgSource1LegacyGameEventList_descriptor_t::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSource1LegacyGameEventList_descriptor_t::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSource1LegacyGameEventList_descriptor_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.name)
}

// repeated .proto.dota.CMsgSource1LegacyGameEventList.key_t keys = 3;
int CMsgSource1LegacyGameEventList_descriptor_t::keys_size() const {
  return keys_.size();
}
void CMsgSource1LegacyGameEventList_descriptor_t::clear_keys() {
  keys_.Clear();
}
const ::proto::dota::CMsgSource1LegacyGameEventList_key_t& CMsgSource1LegacyGameEventList_descriptor_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.keys)
  return keys_.Get(index);
}
::proto::dota::CMsgSource1LegacyGameEventList_key_t* CMsgSource1LegacyGameEventList_descriptor_t::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.keys)
  return keys_.Mutable(index);
}
::proto::dota::CMsgSource1LegacyGameEventList_key_t* CMsgSource1LegacyGameEventList_descriptor_t::add_keys() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSource1LegacyGameEventList_key_t >*
CMsgSource1LegacyGameEventList_descriptor_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSource1LegacyGameEventList_key_t >&
CMsgSource1LegacyGameEventList_descriptor_t::keys() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSource1LegacyGameEventList.descriptor_t.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSource1LegacyGameEventList::kDescriptorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSource1LegacyGameEventList::CMsgSource1LegacyGameEventList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSource1LegacyGameEventList)
}
CMsgSource1LegacyGameEventList::CMsgSource1LegacyGameEventList(const CMsgSource1LegacyGameEventList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      descriptors_(from.descriptors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSource1LegacyGameEventList)
}

void CMsgSource1LegacyGameEventList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgSource1LegacyGameEventList::~CMsgSource1LegacyGameEventList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSource1LegacyGameEventList)
  SharedDtor();
}

void CMsgSource1LegacyGameEventList::SharedDtor() {
}

void CMsgSource1LegacyGameEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSource1LegacyGameEventList::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSource1LegacyGameEventList& CMsgSource1LegacyGameEventList::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSource1LegacyGameEventList* CMsgSource1LegacyGameEventList::New(::google::protobuf::Arena* arena) const {
  CMsgSource1LegacyGameEventList* n = new CMsgSource1LegacyGameEventList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSource1LegacyGameEventList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSource1LegacyGameEventList)
  descriptors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSource1LegacyGameEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSource1LegacyGameEventList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_descriptors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSource1LegacyGameEventList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSource1LegacyGameEventList)
  return false;
#undef DO_
}

void CMsgSource1LegacyGameEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSource1LegacyGameEventList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->descriptors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSource1LegacyGameEventList)
}

::google::protobuf::uint8* CMsgSource1LegacyGameEventList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSource1LegacyGameEventList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->descriptors(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSource1LegacyGameEventList)
  return target;
}

size_t CMsgSource1LegacyGameEventList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSource1LegacyGameEventList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
  {
    unsigned int count = this->descriptors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->descriptors(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSource1LegacyGameEventList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSource1LegacyGameEventList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEventList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSource1LegacyGameEventList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSource1LegacyGameEventList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSource1LegacyGameEventList)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEventList::MergeFrom(const CMsgSource1LegacyGameEventList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSource1LegacyGameEventList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descriptors_.MergeFrom(from.descriptors_);
}

void CMsgSource1LegacyGameEventList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSource1LegacyGameEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEventList::CopyFrom(const CMsgSource1LegacyGameEventList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSource1LegacyGameEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEventList::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEventList::Swap(CMsgSource1LegacyGameEventList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSource1LegacyGameEventList::InternalSwap(CMsgSource1LegacyGameEventList* other) {
  descriptors_.InternalSwap(&other->descriptors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSource1LegacyGameEventList::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSource1LegacyGameEventList

// repeated .proto.dota.CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
int CMsgSource1LegacyGameEventList::descriptors_size() const {
  return descriptors_.size();
}
void CMsgSource1LegacyGameEventList::clear_descriptors() {
  descriptors_.Clear();
}
const ::proto::dota::CMsgSource1LegacyGameEventList_descriptor_t& CMsgSource1LegacyGameEventList::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEventList.descriptors)
  return descriptors_.Get(index);
}
::proto::dota::CMsgSource1LegacyGameEventList_descriptor_t* CMsgSource1LegacyGameEventList::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSource1LegacyGameEventList.descriptors)
  return descriptors_.Mutable(index);
}
::proto::dota::CMsgSource1LegacyGameEventList_descriptor_t* CMsgSource1LegacyGameEventList::add_descriptors() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSource1LegacyGameEventList.descriptors)
  return descriptors_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSource1LegacyGameEventList_descriptor_t >*
CMsgSource1LegacyGameEventList::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSource1LegacyGameEventList.descriptors)
  return &descriptors_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSource1LegacyGameEventList_descriptor_t >&
CMsgSource1LegacyGameEventList::descriptors() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSource1LegacyGameEventList.descriptors)
  return descriptors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSource1LegacyListenEvents::kPlayerslotFieldNumber;
const int CMsgSource1LegacyListenEvents::kEventarraybitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSource1LegacyListenEvents::CMsgSource1LegacyListenEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSource1LegacyListenEvents)
}
CMsgSource1LegacyListenEvents::CMsgSource1LegacyListenEvents(const CMsgSource1LegacyListenEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      eventarraybits_(from.eventarraybits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerslot_ = from.playerslot_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSource1LegacyListenEvents)
}

void CMsgSource1LegacyListenEvents::SharedCtor() {
  _cached_size_ = 0;
  playerslot_ = 0;
}

CMsgSource1LegacyListenEvents::~CMsgSource1LegacyListenEvents() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSource1LegacyListenEvents)
  SharedDtor();
}

void CMsgSource1LegacyListenEvents::SharedDtor() {
}

void CMsgSource1LegacyListenEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSource1LegacyListenEvents::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSource1LegacyListenEvents& CMsgSource1LegacyListenEvents::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSource1LegacyListenEvents* CMsgSource1LegacyListenEvents::New(::google::protobuf::Arena* arena) const {
  CMsgSource1LegacyListenEvents* n = new CMsgSource1LegacyListenEvents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSource1LegacyListenEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSource1LegacyListenEvents)
  eventarraybits_.Clear();
  playerslot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSource1LegacyListenEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSource1LegacyListenEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerslot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_playerslot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerslot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 eventarraybits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_eventarraybits())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eventarraybits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSource1LegacyListenEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSource1LegacyListenEvents)
  return false;
#undef DO_
}

void CMsgSource1LegacyListenEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSource1LegacyListenEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playerslot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerslot(), output);
  }

  // repeated uint32 eventarraybits = 2;
  for (int i = 0, n = this->eventarraybits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->eventarraybits(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSource1LegacyListenEvents)
}

::google::protobuf::uint8* CMsgSource1LegacyListenEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSource1LegacyListenEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playerslot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerslot(), target);
  }

  // repeated uint32 eventarraybits = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->eventarraybits_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSource1LegacyListenEvents)
  return target;
}

size_t CMsgSource1LegacyListenEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSource1LegacyListenEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 eventarraybits = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->eventarraybits_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->eventarraybits_size());
    total_size += data_size;
  }

  // optional int32 playerslot = 1;
  if (has_playerslot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerslot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSource1LegacyListenEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSource1LegacyListenEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyListenEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSource1LegacyListenEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSource1LegacyListenEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSource1LegacyListenEvents)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyListenEvents::MergeFrom(const CMsgSource1LegacyListenEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSource1LegacyListenEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  eventarraybits_.MergeFrom(from.eventarraybits_);
  if (from.has_playerslot()) {
    set_playerslot(from.playerslot());
  }
}

void CMsgSource1LegacyListenEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSource1LegacyListenEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyListenEvents::CopyFrom(const CMsgSource1LegacyListenEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSource1LegacyListenEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyListenEvents::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyListenEvents::Swap(CMsgSource1LegacyListenEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSource1LegacyListenEvents::InternalSwap(CMsgSource1LegacyListenEvents* other) {
  eventarraybits_.InternalSwap(&other->eventarraybits_);
  std::swap(playerslot_, other->playerslot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSource1LegacyListenEvents::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSource1LegacyListenEvents

// optional int32 playerslot = 1;
bool CMsgSource1LegacyListenEvents::has_playerslot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSource1LegacyListenEvents::set_has_playerslot() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSource1LegacyListenEvents::clear_has_playerslot() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSource1LegacyListenEvents::clear_playerslot() {
  playerslot_ = 0;
  clear_has_playerslot();
}
::google::protobuf::int32 CMsgSource1LegacyListenEvents::playerslot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyListenEvents.playerslot)
  return playerslot_;
}
void CMsgSource1LegacyListenEvents::set_playerslot(::google::protobuf::int32 value) {
  set_has_playerslot();
  playerslot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyListenEvents.playerslot)
}

// repeated uint32 eventarraybits = 2;
int CMsgSource1LegacyListenEvents::eventarraybits_size() const {
  return eventarraybits_.size();
}
void CMsgSource1LegacyListenEvents::clear_eventarraybits() {
  eventarraybits_.Clear();
}
::google::protobuf::uint32 CMsgSource1LegacyListenEvents::eventarraybits(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyListenEvents.eventarraybits)
  return eventarraybits_.Get(index);
}
void CMsgSource1LegacyListenEvents::set_eventarraybits(int index, ::google::protobuf::uint32 value) {
  eventarraybits_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyListenEvents.eventarraybits)
}
void CMsgSource1LegacyListenEvents::add_eventarraybits(::google::protobuf::uint32 value) {
  eventarraybits_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSource1LegacyListenEvents.eventarraybits)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSource1LegacyListenEvents::eventarraybits() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSource1LegacyListenEvents.eventarraybits)
  return eventarraybits_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSource1LegacyListenEvents::mutable_eventarraybits() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSource1LegacyListenEvents.eventarraybits)
  return &eventarraybits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSource1LegacyGameEvent_key_t::kTypeFieldNumber;
const int CMsgSource1LegacyGameEvent_key_t::kValStringFieldNumber;
const int CMsgSource1LegacyGameEvent_key_t::kValFloatFieldNumber;
const int CMsgSource1LegacyGameEvent_key_t::kValLongFieldNumber;
const int CMsgSource1LegacyGameEvent_key_t::kValShortFieldNumber;
const int CMsgSource1LegacyGameEvent_key_t::kValByteFieldNumber;
const int CMsgSource1LegacyGameEvent_key_t::kValBoolFieldNumber;
const int CMsgSource1LegacyGameEvent_key_t::kValUint64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSource1LegacyGameEvent_key_t::CMsgSource1LegacyGameEvent_key_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSource1LegacyGameEvent.key_t)
}
CMsgSource1LegacyGameEvent_key_t::CMsgSource1LegacyGameEvent_key_t(const CMsgSource1LegacyGameEvent_key_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val_string()) {
    val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&val_uint64_) -
    reinterpret_cast<char*>(&type_) + sizeof(val_uint64_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSource1LegacyGameEvent.key_t)
}

void CMsgSource1LegacyGameEvent_key_t::SharedCtor() {
  _cached_size_ = 0;
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&val_uint64_) -
    reinterpret_cast<char*>(&type_) + sizeof(val_uint64_));
}

CMsgSource1LegacyGameEvent_key_t::~CMsgSource1LegacyGameEvent_key_t() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  SharedDtor();
}

void CMsgSource1LegacyGameEvent_key_t::SharedDtor() {
  val_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSource1LegacyGameEvent_key_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSource1LegacyGameEvent_key_t::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSource1LegacyGameEvent_key_t& CMsgSource1LegacyGameEvent_key_t::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSource1LegacyGameEvent_key_t* CMsgSource1LegacyGameEvent_key_t::New(::google::protobuf::Arena* arena) const {
  CMsgSource1LegacyGameEvent_key_t* n = new CMsgSource1LegacyGameEvent_key_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSource1LegacyGameEvent_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  if (has_val_string()) {
    GOOGLE_DCHECK(!val_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*val_string_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&val_uint64_) -
      reinterpret_cast<char*>(&type_) + sizeof(val_uint64_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSource1LegacyGameEvent_key_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string val_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val_string().data(), this->val_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float val_float = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_val_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_long = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_val_long();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_short = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_val_short();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_short_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_byte = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_val_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool val_bool = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_val_bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 val_uint64 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_val_uint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &val_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  return false;
#undef DO_
}

void CMsgSource1LegacyGameEvent_key_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val_string(), output);
  }

  // optional float val_float = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val_float(), output);
  }

  // optional int32 val_long = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->val_long(), output);
  }

  // optional int32 val_short = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->val_short(), output);
  }

  // optional int32 val_byte = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->val_byte(), output);
  }

  // optional bool val_bool = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->val_bool(), output);
  }

  // optional uint64 val_uint64 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->val_uint64(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSource1LegacyGameEvent.key_t)
}

::google::protobuf::uint8* CMsgSource1LegacyGameEvent_key_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val_string(), target);
  }

  // optional float val_float = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val_float(), target);
  }

  // optional int32 val_long = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->val_long(), target);
  }

  // optional int32 val_short = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->val_short(), target);
  }

  // optional int32 val_byte = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->val_byte(), target);
  }

  // optional bool val_bool = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->val_bool(), target);
  }

  // optional uint64 val_uint64 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->val_uint64(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  return target;
}

size_t CMsgSource1LegacyGameEvent_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string val_string = 2;
    if (has_val_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_string());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional float val_float = 3;
    if (has_val_float()) {
      total_size += 1 + 4;
    }

    // optional int32 val_long = 4;
    if (has_val_long()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_long());
    }

    // optional int32 val_short = 5;
    if (has_val_short()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_short());
    }

    // optional int32 val_byte = 6;
    if (has_val_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_byte());
    }

    // optional bool val_bool = 7;
    if (has_val_bool()) {
      total_size += 1 + 1;
    }

    // optional uint64 val_uint64 = 8;
    if (has_val_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->val_uint64());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSource1LegacyGameEvent_key_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEvent_key_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSource1LegacyGameEvent_key_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSource1LegacyGameEvent.key_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSource1LegacyGameEvent.key_t)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEvent_key_t::MergeFrom(const CMsgSource1LegacyGameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_val_string();
      val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_float_ = from.val_float_;
    }
    if (cached_has_bits & 0x00000008u) {
      val_long_ = from.val_long_;
    }
    if (cached_has_bits & 0x00000010u) {
      val_short_ = from.val_short_;
    }
    if (cached_has_bits & 0x00000020u) {
      val_byte_ = from.val_byte_;
    }
    if (cached_has_bits & 0x00000040u) {
      val_bool_ = from.val_bool_;
    }
    if (cached_has_bits & 0x00000080u) {
      val_uint64_ = from.val_uint64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSource1LegacyGameEvent_key_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEvent_key_t::CopyFrom(const CMsgSource1LegacyGameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSource1LegacyGameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEvent_key_t::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEvent_key_t::Swap(CMsgSource1LegacyGameEvent_key_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSource1LegacyGameEvent_key_t::InternalSwap(CMsgSource1LegacyGameEvent_key_t* other) {
  val_string_.Swap(&other->val_string_);
  std::swap(type_, other->type_);
  std::swap(val_float_, other->val_float_);
  std::swap(val_long_, other->val_long_);
  std::swap(val_short_, other->val_short_);
  std::swap(val_byte_, other->val_byte_);
  std::swap(val_bool_, other->val_bool_);
  std::swap(val_uint64_, other->val_uint64_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSource1LegacyGameEvent_key_t::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSource1LegacyGameEvent_key_t

// optional int32 type = 1;
bool CMsgSource1LegacyGameEvent_key_t::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSource1LegacyGameEvent_key_t::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 CMsgSource1LegacyGameEvent_key_t::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.key_t.type)
  return type_;
}
void CMsgSource1LegacyGameEvent_key_t::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.key_t.type)
}

// optional string val_string = 2;
bool CMsgSource1LegacyGameEvent_key_t::has_val_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSource1LegacyGameEvent_key_t::set_has_val_string() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_has_val_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_val_string() {
  val_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val_string();
}
const ::std::string& CMsgSource1LegacyGameEvent_key_t::val_string() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string)
  return val_string_.GetNoArena();
}
void CMsgSource1LegacyGameEvent_key_t::set_val_string(const ::std::string& value) {
  set_has_val_string();
  val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string)
}
#if LANG_CXX11
void CMsgSource1LegacyGameEvent_key_t::set_val_string(::std::string&& value) {
  set_has_val_string();
  val_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string)
}
#endif
void CMsgSource1LegacyGameEvent_key_t::set_val_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_val_string();
  val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string)
}
void CMsgSource1LegacyGameEvent_key_t::set_val_string(const char* value, size_t size) {
  set_has_val_string();
  val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string)
}
::std::string* CMsgSource1LegacyGameEvent_key_t::mutable_val_string() {
  set_has_val_string();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string)
  return val_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSource1LegacyGameEvent_key_t::release_val_string() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string)
  clear_has_val_string();
  return val_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSource1LegacyGameEvent_key_t::set_allocated_val_string(::std::string* val_string) {
  if (val_string != NULL) {
    set_has_val_string();
  } else {
    clear_has_val_string();
  }
  val_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val_string);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_string)
}

// optional float val_float = 3;
bool CMsgSource1LegacyGameEvent_key_t::has_val_float() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSource1LegacyGameEvent_key_t::set_has_val_float() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_has_val_float() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_val_float() {
  val_float_ = 0;
  clear_has_val_float();
}
float CMsgSource1LegacyGameEvent_key_t::val_float() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_float)
  return val_float_;
}
void CMsgSource1LegacyGameEvent_key_t::set_val_float(float value) {
  set_has_val_float();
  val_float_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_float)
}

// optional int32 val_long = 4;
bool CMsgSource1LegacyGameEvent_key_t::has_val_long() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSource1LegacyGameEvent_key_t::set_has_val_long() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_has_val_long() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_val_long() {
  val_long_ = 0;
  clear_has_val_long();
}
::google::protobuf::int32 CMsgSource1LegacyGameEvent_key_t::val_long() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_long)
  return val_long_;
}
void CMsgSource1LegacyGameEvent_key_t::set_val_long(::google::protobuf::int32 value) {
  set_has_val_long();
  val_long_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_long)
}

// optional int32 val_short = 5;
bool CMsgSource1LegacyGameEvent_key_t::has_val_short() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSource1LegacyGameEvent_key_t::set_has_val_short() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_has_val_short() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_val_short() {
  val_short_ = 0;
  clear_has_val_short();
}
::google::protobuf::int32 CMsgSource1LegacyGameEvent_key_t::val_short() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_short)
  return val_short_;
}
void CMsgSource1LegacyGameEvent_key_t::set_val_short(::google::protobuf::int32 value) {
  set_has_val_short();
  val_short_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_short)
}

// optional int32 val_byte = 6;
bool CMsgSource1LegacyGameEvent_key_t::has_val_byte() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSource1LegacyGameEvent_key_t::set_has_val_byte() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_has_val_byte() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_val_byte() {
  val_byte_ = 0;
  clear_has_val_byte();
}
::google::protobuf::int32 CMsgSource1LegacyGameEvent_key_t::val_byte() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_byte)
  return val_byte_;
}
void CMsgSource1LegacyGameEvent_key_t::set_val_byte(::google::protobuf::int32 value) {
  set_has_val_byte();
  val_byte_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_byte)
}

// optional bool val_bool = 7;
bool CMsgSource1LegacyGameEvent_key_t::has_val_bool() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgSource1LegacyGameEvent_key_t::set_has_val_bool() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_has_val_bool() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_val_bool() {
  val_bool_ = false;
  clear_has_val_bool();
}
bool CMsgSource1LegacyGameEvent_key_t::val_bool() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_bool)
  return val_bool_;
}
void CMsgSource1LegacyGameEvent_key_t::set_val_bool(bool value) {
  set_has_val_bool();
  val_bool_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_bool)
}

// optional uint64 val_uint64 = 8;
bool CMsgSource1LegacyGameEvent_key_t::has_val_uint64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgSource1LegacyGameEvent_key_t::set_has_val_uint64() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_has_val_uint64() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgSource1LegacyGameEvent_key_t::clear_val_uint64() {
  val_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_val_uint64();
}
::google::protobuf::uint64 CMsgSource1LegacyGameEvent_key_t::val_uint64() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_uint64)
  return val_uint64_;
}
void CMsgSource1LegacyGameEvent_key_t::set_val_uint64(::google::protobuf::uint64 value) {
  set_has_val_uint64();
  val_uint64_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.key_t.val_uint64)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSource1LegacyGameEvent::kEventNameFieldNumber;
const int CMsgSource1LegacyGameEvent::kEventidFieldNumber;
const int CMsgSource1LegacyGameEvent::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSource1LegacyGameEvent::CMsgSource1LegacyGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSource1LegacyGameEvent)
}
CMsgSource1LegacyGameEvent::CMsgSource1LegacyGameEvent(const CMsgSource1LegacyGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSource1LegacyGameEvent)
}

void CMsgSource1LegacyGameEvent::SharedCtor() {
  _cached_size_ = 0;
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eventid_ = 0;
}

CMsgSource1LegacyGameEvent::~CMsgSource1LegacyGameEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSource1LegacyGameEvent)
  SharedDtor();
}

void CMsgSource1LegacyGameEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSource1LegacyGameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSource1LegacyGameEvent::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSource1LegacyGameEvent& CMsgSource1LegacyGameEvent::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSource1LegacyGameEvent* CMsgSource1LegacyGameEvent::New(::google::protobuf::Arena* arena) const {
  CMsgSource1LegacyGameEvent* n = new CMsgSource1LegacyGameEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSource1LegacyGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSource1LegacyGameEvent)
  keys_.Clear();
  if (has_event_name()) {
    GOOGLE_DCHECK(!event_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*event_name_.UnsafeRawStringPointer())->clear();
  }
  eventid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSource1LegacyGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSource1LegacyGameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSource1LegacyGameEvent.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eventid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgSource1LegacyGameEvent.key_t keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSource1LegacyGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSource1LegacyGameEvent)
  return false;
#undef DO_
}

void CMsgSource1LegacyGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSource1LegacyGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSource1LegacyGameEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional int32 eventid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eventid(), output);
  }

  // repeated .proto.dota.CMsgSource1LegacyGameEvent.key_t keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSource1LegacyGameEvent)
}

::google::protobuf::uint8* CMsgSource1LegacyGameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSource1LegacyGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSource1LegacyGameEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional int32 eventid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eventid(), target);
  }

  // repeated .proto.dota.CMsgSource1LegacyGameEvent.key_t keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->keys(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSource1LegacyGameEvent)
  return target;
}

size_t CMsgSource1LegacyGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSource1LegacyGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSource1LegacyGameEvent.key_t keys = 3;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional int32 eventid = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSource1LegacyGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSource1LegacyGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSource1LegacyGameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSource1LegacyGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSource1LegacyGameEvent)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEvent::MergeFrom(const CMsgSource1LegacyGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSource1LegacyGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_event_name();
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSource1LegacyGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSource1LegacyGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEvent::CopyFrom(const CMsgSource1LegacyGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSource1LegacyGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEvent::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEvent::Swap(CMsgSource1LegacyGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSource1LegacyGameEvent::InternalSwap(CMsgSource1LegacyGameEvent* other) {
  keys_.InternalSwap(&other->keys_);
  event_name_.Swap(&other->event_name_);
  std::swap(eventid_, other->eventid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSource1LegacyGameEvent::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSource1LegacyGameEvent

// optional string event_name = 1;
bool CMsgSource1LegacyGameEvent::has_event_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSource1LegacyGameEvent::set_has_event_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSource1LegacyGameEvent::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSource1LegacyGameEvent::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_name();
}
const ::std::string& CMsgSource1LegacyGameEvent::event_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.event_name)
  return event_name_.GetNoArena();
}
void CMsgSource1LegacyGameEvent::set_event_name(const ::std::string& value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.event_name)
}
#if LANG_CXX11
void CMsgSource1LegacyGameEvent::set_event_name(::std::string&& value) {
  set_has_event_name();
  event_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSource1LegacyGameEvent.event_name)
}
#endif
void CMsgSource1LegacyGameEvent::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSource1LegacyGameEvent.event_name)
}
void CMsgSource1LegacyGameEvent::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSource1LegacyGameEvent.event_name)
}
::std::string* CMsgSource1LegacyGameEvent::mutable_event_name() {
  set_has_event_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSource1LegacyGameEvent.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSource1LegacyGameEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSource1LegacyGameEvent.event_name)
  clear_has_event_name();
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSource1LegacyGameEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    set_has_event_name();
  } else {
    clear_has_event_name();
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSource1LegacyGameEvent.event_name)
}

// optional int32 eventid = 2;
bool CMsgSource1LegacyGameEvent::has_eventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSource1LegacyGameEvent::set_has_eventid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSource1LegacyGameEvent::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSource1LegacyGameEvent::clear_eventid() {
  eventid_ = 0;
  clear_has_eventid();
}
::google::protobuf::int32 CMsgSource1LegacyGameEvent::eventid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.eventid)
  return eventid_;
}
void CMsgSource1LegacyGameEvent::set_eventid(::google::protobuf::int32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSource1LegacyGameEvent.eventid)
}

// repeated .proto.dota.CMsgSource1LegacyGameEvent.key_t keys = 3;
int CMsgSource1LegacyGameEvent::keys_size() const {
  return keys_.size();
}
void CMsgSource1LegacyGameEvent::clear_keys() {
  keys_.Clear();
}
const ::proto::dota::CMsgSource1LegacyGameEvent_key_t& CMsgSource1LegacyGameEvent::keys(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSource1LegacyGameEvent.keys)
  return keys_.Get(index);
}
::proto::dota::CMsgSource1LegacyGameEvent_key_t* CMsgSource1LegacyGameEvent::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSource1LegacyGameEvent.keys)
  return keys_.Mutable(index);
}
::proto::dota::CMsgSource1LegacyGameEvent_key_t* CMsgSource1LegacyGameEvent::add_keys() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSource1LegacyGameEvent.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSource1LegacyGameEvent_key_t >*
CMsgSource1LegacyGameEvent::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSource1LegacyGameEvent.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSource1LegacyGameEvent_key_t >&
CMsgSource1LegacyGameEvent::keys() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSource1LegacyGameEvent.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSosStartSoundEvent::kSoundeventGuidFieldNumber;
const int CMsgSosStartSoundEvent::kSoundeventHashFieldNumber;
const int CMsgSosStartSoundEvent::kSourceEntityIndexFieldNumber;
const int CMsgSosStartSoundEvent::kSeedFieldNumber;
const int CMsgSosStartSoundEvent::kPackedParamsFieldNumber;
const int CMsgSosStartSoundEvent::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSosStartSoundEvent::CMsgSosStartSoundEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSosStartSoundEvent)
}
CMsgSosStartSoundEvent::CMsgSosStartSoundEvent(const CMsgSosStartSoundEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packed_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packed_params()) {
    packed_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_params_);
  }
  ::memcpy(&soundevent_guid_, &from.soundevent_guid_,
    reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&soundevent_guid_) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSosStartSoundEvent)
}

void CMsgSosStartSoundEvent::SharedCtor() {
  _cached_size_ = 0;
  packed_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&soundevent_guid_, 0, reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&soundevent_guid_) + sizeof(start_time_));
}

CMsgSosStartSoundEvent::~CMsgSosStartSoundEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSosStartSoundEvent)
  SharedDtor();
}

void CMsgSosStartSoundEvent::SharedDtor() {
  packed_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSosStartSoundEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSosStartSoundEvent::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSosStartSoundEvent& CMsgSosStartSoundEvent::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSosStartSoundEvent* CMsgSosStartSoundEvent::New(::google::protobuf::Arena* arena) const {
  CMsgSosStartSoundEvent* n = new CMsgSosStartSoundEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSosStartSoundEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSosStartSoundEvent)
  if (has_packed_params()) {
    GOOGLE_DCHECK(!packed_params_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*packed_params_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&soundevent_guid_, 0, reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&soundevent_guid_) + sizeof(start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSosStartSoundEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSosStartSoundEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 soundevent_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_soundevent_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soundevent_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 soundevent_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_soundevent_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &soundevent_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_entity_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_source_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packed_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packed_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float start_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSosStartSoundEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSosStartSoundEvent)
  return false;
#undef DO_
}

void CMsgSosStartSoundEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSosStartSoundEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soundevent_guid(), output);
  }

  // optional fixed32 soundevent_hash = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->soundevent_hash(), output);
  }

  // optional int32 source_entity_index = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_entity_index(), output);
  }

  // optional int32 seed = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seed(), output);
  }

  // optional bytes packed_params = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->packed_params(), output);
  }

  // optional float start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSosStartSoundEvent)
}

::google::protobuf::uint8* CMsgSosStartSoundEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSosStartSoundEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soundevent_guid(), target);
  }

  // optional fixed32 soundevent_hash = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->soundevent_hash(), target);
  }

  // optional int32 source_entity_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_entity_index(), target);
  }

  // optional int32 seed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seed(), target);
  }

  // optional bytes packed_params = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->packed_params(), target);
  }

  // optional float start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSosStartSoundEvent)
  return target;
}

size_t CMsgSosStartSoundEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSosStartSoundEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes packed_params = 5;
    if (has_packed_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packed_params());
    }

    // optional int32 soundevent_guid = 1;
    if (has_soundevent_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soundevent_guid());
    }

    // optional fixed32 soundevent_hash = 2;
    if (has_soundevent_hash()) {
      total_size += 1 + 4;
    }

    // optional int32 source_entity_index = 3;
    if (has_source_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_entity_index());
    }

    // optional int32 seed = 4;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed());
    }

    // optional float start_time = 6;
    if (has_start_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSosStartSoundEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSosStartSoundEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosStartSoundEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSosStartSoundEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSosStartSoundEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSosStartSoundEvent)
    MergeFrom(*source);
  }
}

void CMsgSosStartSoundEvent::MergeFrom(const CMsgSosStartSoundEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSosStartSoundEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_packed_params();
      packed_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_params_);
    }
    if (cached_has_bits & 0x00000002u) {
      soundevent_guid_ = from.soundevent_guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      soundevent_hash_ = from.soundevent_hash_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_entity_index_ = from.source_entity_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      seed_ = from.seed_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSosStartSoundEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSosStartSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosStartSoundEvent::CopyFrom(const CMsgSosStartSoundEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSosStartSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosStartSoundEvent::IsInitialized() const {
  return true;
}

void CMsgSosStartSoundEvent::Swap(CMsgSosStartSoundEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSosStartSoundEvent::InternalSwap(CMsgSosStartSoundEvent* other) {
  packed_params_.Swap(&other->packed_params_);
  std::swap(soundevent_guid_, other->soundevent_guid_);
  std::swap(soundevent_hash_, other->soundevent_hash_);
  std::swap(source_entity_index_, other->source_entity_index_);
  std::swap(seed_, other->seed_);
  std::swap(start_time_, other->start_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSosStartSoundEvent::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSosStartSoundEvent

// optional int32 soundevent_guid = 1;
bool CMsgSosStartSoundEvent::has_soundevent_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSosStartSoundEvent::set_has_soundevent_guid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSosStartSoundEvent::clear_has_soundevent_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSosStartSoundEvent::clear_soundevent_guid() {
  soundevent_guid_ = 0;
  clear_has_soundevent_guid();
}
::google::protobuf::int32 CMsgSosStartSoundEvent::soundevent_guid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosStartSoundEvent.soundevent_guid)
  return soundevent_guid_;
}
void CMsgSosStartSoundEvent::set_soundevent_guid(::google::protobuf::int32 value) {
  set_has_soundevent_guid();
  soundevent_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosStartSoundEvent.soundevent_guid)
}

// optional fixed32 soundevent_hash = 2;
bool CMsgSosStartSoundEvent::has_soundevent_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSosStartSoundEvent::set_has_soundevent_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSosStartSoundEvent::clear_has_soundevent_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSosStartSoundEvent::clear_soundevent_hash() {
  soundevent_hash_ = 0u;
  clear_has_soundevent_hash();
}
::google::protobuf::uint32 CMsgSosStartSoundEvent::soundevent_hash() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosStartSoundEvent.soundevent_hash)
  return soundevent_hash_;
}
void CMsgSosStartSoundEvent::set_soundevent_hash(::google::protobuf::uint32 value) {
  set_has_soundevent_hash();
  soundevent_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosStartSoundEvent.soundevent_hash)
}

// optional int32 source_entity_index = 3;
bool CMsgSosStartSoundEvent::has_source_entity_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSosStartSoundEvent::set_has_source_entity_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSosStartSoundEvent::clear_has_source_entity_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSosStartSoundEvent::clear_source_entity_index() {
  source_entity_index_ = 0;
  clear_has_source_entity_index();
}
::google::protobuf::int32 CMsgSosStartSoundEvent::source_entity_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosStartSoundEvent.source_entity_index)
  return source_entity_index_;
}
void CMsgSosStartSoundEvent::set_source_entity_index(::google::protobuf::int32 value) {
  set_has_source_entity_index();
  source_entity_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosStartSoundEvent.source_entity_index)
}

// optional int32 seed = 4;
bool CMsgSosStartSoundEvent::has_seed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSosStartSoundEvent::set_has_seed() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSosStartSoundEvent::clear_has_seed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSosStartSoundEvent::clear_seed() {
  seed_ = 0;
  clear_has_seed();
}
::google::protobuf::int32 CMsgSosStartSoundEvent::seed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosStartSoundEvent.seed)
  return seed_;
}
void CMsgSosStartSoundEvent::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosStartSoundEvent.seed)
}

// optional bytes packed_params = 5;
bool CMsgSosStartSoundEvent::has_packed_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSosStartSoundEvent::set_has_packed_params() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSosStartSoundEvent::clear_has_packed_params() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSosStartSoundEvent::clear_packed_params() {
  packed_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packed_params();
}
const ::std::string& CMsgSosStartSoundEvent::packed_params() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosStartSoundEvent.packed_params)
  return packed_params_.GetNoArena();
}
void CMsgSosStartSoundEvent::set_packed_params(const ::std::string& value) {
  set_has_packed_params();
  packed_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosStartSoundEvent.packed_params)
}
#if LANG_CXX11
void CMsgSosStartSoundEvent::set_packed_params(::std::string&& value) {
  set_has_packed_params();
  packed_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSosStartSoundEvent.packed_params)
}
#endif
void CMsgSosStartSoundEvent::set_packed_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packed_params();
  packed_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSosStartSoundEvent.packed_params)
}
void CMsgSosStartSoundEvent::set_packed_params(const void* value, size_t size) {
  set_has_packed_params();
  packed_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSosStartSoundEvent.packed_params)
}
::std::string* CMsgSosStartSoundEvent::mutable_packed_params() {
  set_has_packed_params();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSosStartSoundEvent.packed_params)
  return packed_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSosStartSoundEvent::release_packed_params() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSosStartSoundEvent.packed_params)
  clear_has_packed_params();
  return packed_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSosStartSoundEvent::set_allocated_packed_params(::std::string* packed_params) {
  if (packed_params != NULL) {
    set_has_packed_params();
  } else {
    clear_has_packed_params();
  }
  packed_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packed_params);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSosStartSoundEvent.packed_params)
}

// optional float start_time = 6;
bool CMsgSosStartSoundEvent::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSosStartSoundEvent::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSosStartSoundEvent::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSosStartSoundEvent::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
float CMsgSosStartSoundEvent::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosStartSoundEvent.start_time)
  return start_time_;
}
void CMsgSosStartSoundEvent::set_start_time(float value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosStartSoundEvent.start_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSosStopSoundEvent::kSoundeventGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSosStopSoundEvent::CMsgSosStopSoundEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSosStopSoundEvent)
}
CMsgSosStopSoundEvent::CMsgSosStopSoundEvent(const CMsgSosStopSoundEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  soundevent_guid_ = from.soundevent_guid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSosStopSoundEvent)
}

void CMsgSosStopSoundEvent::SharedCtor() {
  _cached_size_ = 0;
  soundevent_guid_ = 0;
}

CMsgSosStopSoundEvent::~CMsgSosStopSoundEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSosStopSoundEvent)
  SharedDtor();
}

void CMsgSosStopSoundEvent::SharedDtor() {
}

void CMsgSosStopSoundEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSosStopSoundEvent::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSosStopSoundEvent& CMsgSosStopSoundEvent::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSosStopSoundEvent* CMsgSosStopSoundEvent::New(::google::protobuf::Arena* arena) const {
  CMsgSosStopSoundEvent* n = new CMsgSosStopSoundEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSosStopSoundEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSosStopSoundEvent)
  soundevent_guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSosStopSoundEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSosStopSoundEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 soundevent_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_soundevent_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soundevent_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSosStopSoundEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSosStopSoundEvent)
  return false;
#undef DO_
}

void CMsgSosStopSoundEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSosStopSoundEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soundevent_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSosStopSoundEvent)
}

::google::protobuf::uint8* CMsgSosStopSoundEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSosStopSoundEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soundevent_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSosStopSoundEvent)
  return target;
}

size_t CMsgSosStopSoundEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSosStopSoundEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 soundevent_guid = 1;
  if (has_soundevent_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->soundevent_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSosStopSoundEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSosStopSoundEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosStopSoundEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSosStopSoundEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSosStopSoundEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSosStopSoundEvent)
    MergeFrom(*source);
  }
}

void CMsgSosStopSoundEvent::MergeFrom(const CMsgSosStopSoundEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSosStopSoundEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_soundevent_guid()) {
    set_soundevent_guid(from.soundevent_guid());
  }
}

void CMsgSosStopSoundEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSosStopSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosStopSoundEvent::CopyFrom(const CMsgSosStopSoundEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSosStopSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosStopSoundEvent::IsInitialized() const {
  return true;
}

void CMsgSosStopSoundEvent::Swap(CMsgSosStopSoundEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSosStopSoundEvent::InternalSwap(CMsgSosStopSoundEvent* other) {
  std::swap(soundevent_guid_, other->soundevent_guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSosStopSoundEvent::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSosStopSoundEvent

// optional int32 soundevent_guid = 1;
bool CMsgSosStopSoundEvent::has_soundevent_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSosStopSoundEvent::set_has_soundevent_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSosStopSoundEvent::clear_has_soundevent_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSosStopSoundEvent::clear_soundevent_guid() {
  soundevent_guid_ = 0;
  clear_has_soundevent_guid();
}
::google::protobuf::int32 CMsgSosStopSoundEvent::soundevent_guid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosStopSoundEvent.soundevent_guid)
  return soundevent_guid_;
}
void CMsgSosStopSoundEvent::set_soundevent_guid(::google::protobuf::int32 value) {
  set_has_soundevent_guid();
  soundevent_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosStopSoundEvent.soundevent_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSosStopSoundEventHash::kSoundeventHashFieldNumber;
const int CMsgSosStopSoundEventHash::kSourceEntityIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSosStopSoundEventHash::CMsgSosStopSoundEventHash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSosStopSoundEventHash)
}
CMsgSosStopSoundEventHash::CMsgSosStopSoundEventHash(const CMsgSosStopSoundEventHash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&soundevent_hash_, &from.soundevent_hash_,
    reinterpret_cast<char*>(&source_entity_index_) -
    reinterpret_cast<char*>(&soundevent_hash_) + sizeof(source_entity_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSosStopSoundEventHash)
}

void CMsgSosStopSoundEventHash::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&soundevent_hash_, 0, reinterpret_cast<char*>(&source_entity_index_) -
    reinterpret_cast<char*>(&soundevent_hash_) + sizeof(source_entity_index_));
}

CMsgSosStopSoundEventHash::~CMsgSosStopSoundEventHash() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSosStopSoundEventHash)
  SharedDtor();
}

void CMsgSosStopSoundEventHash::SharedDtor() {
}

void CMsgSosStopSoundEventHash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSosStopSoundEventHash::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSosStopSoundEventHash& CMsgSosStopSoundEventHash::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSosStopSoundEventHash* CMsgSosStopSoundEventHash::New(::google::protobuf::Arena* arena) const {
  CMsgSosStopSoundEventHash* n = new CMsgSosStopSoundEventHash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSosStopSoundEventHash::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSosStopSoundEventHash)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&soundevent_hash_, 0, reinterpret_cast<char*>(&source_entity_index_) -
      reinterpret_cast<char*>(&soundevent_hash_) + sizeof(source_entity_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSosStopSoundEventHash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSosStopSoundEventHash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 soundevent_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_soundevent_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &soundevent_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_entity_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_source_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSosStopSoundEventHash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSosStopSoundEventHash)
  return false;
#undef DO_
}

void CMsgSosStopSoundEventHash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSosStopSoundEventHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 soundevent_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->soundevent_hash(), output);
  }

  // optional int32 source_entity_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source_entity_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSosStopSoundEventHash)
}

::google::protobuf::uint8* CMsgSosStopSoundEventHash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSosStopSoundEventHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 soundevent_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->soundevent_hash(), target);
  }

  // optional int32 source_entity_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->source_entity_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSosStopSoundEventHash)
  return target;
}

size_t CMsgSosStopSoundEventHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSosStopSoundEventHash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed32 soundevent_hash = 1;
    if (has_soundevent_hash()) {
      total_size += 1 + 4;
    }

    // optional int32 source_entity_index = 2;
    if (has_source_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_entity_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSosStopSoundEventHash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSosStopSoundEventHash)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosStopSoundEventHash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSosStopSoundEventHash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSosStopSoundEventHash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSosStopSoundEventHash)
    MergeFrom(*source);
  }
}

void CMsgSosStopSoundEventHash::MergeFrom(const CMsgSosStopSoundEventHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSosStopSoundEventHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      soundevent_hash_ = from.soundevent_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_entity_index_ = from.source_entity_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSosStopSoundEventHash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSosStopSoundEventHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosStopSoundEventHash::CopyFrom(const CMsgSosStopSoundEventHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSosStopSoundEventHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosStopSoundEventHash::IsInitialized() const {
  return true;
}

void CMsgSosStopSoundEventHash::Swap(CMsgSosStopSoundEventHash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSosStopSoundEventHash::InternalSwap(CMsgSosStopSoundEventHash* other) {
  std::swap(soundevent_hash_, other->soundevent_hash_);
  std::swap(source_entity_index_, other->source_entity_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSosStopSoundEventHash::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSosStopSoundEventHash

// optional fixed32 soundevent_hash = 1;
bool CMsgSosStopSoundEventHash::has_soundevent_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSosStopSoundEventHash::set_has_soundevent_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSosStopSoundEventHash::clear_has_soundevent_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSosStopSoundEventHash::clear_soundevent_hash() {
  soundevent_hash_ = 0u;
  clear_has_soundevent_hash();
}
::google::protobuf::uint32 CMsgSosStopSoundEventHash::soundevent_hash() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosStopSoundEventHash.soundevent_hash)
  return soundevent_hash_;
}
void CMsgSosStopSoundEventHash::set_soundevent_hash(::google::protobuf::uint32 value) {
  set_has_soundevent_hash();
  soundevent_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosStopSoundEventHash.soundevent_hash)
}

// optional int32 source_entity_index = 2;
bool CMsgSosStopSoundEventHash::has_source_entity_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSosStopSoundEventHash::set_has_source_entity_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSosStopSoundEventHash::clear_has_source_entity_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSosStopSoundEventHash::clear_source_entity_index() {
  source_entity_index_ = 0;
  clear_has_source_entity_index();
}
::google::protobuf::int32 CMsgSosStopSoundEventHash::source_entity_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosStopSoundEventHash.source_entity_index)
  return source_entity_index_;
}
void CMsgSosStopSoundEventHash::set_source_entity_index(::google::protobuf::int32 value) {
  set_has_source_entity_index();
  source_entity_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosStopSoundEventHash.source_entity_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSosSetSoundEventParams::kSoundeventGuidFieldNumber;
const int CMsgSosSetSoundEventParams::kPackedParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSosSetSoundEventParams::CMsgSosSetSoundEventParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSosSetSoundEventParams)
}
CMsgSosSetSoundEventParams::CMsgSosSetSoundEventParams(const CMsgSosSetSoundEventParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packed_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packed_params()) {
    packed_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_params_);
  }
  soundevent_guid_ = from.soundevent_guid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSosSetSoundEventParams)
}

void CMsgSosSetSoundEventParams::SharedCtor() {
  _cached_size_ = 0;
  packed_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  soundevent_guid_ = 0;
}

CMsgSosSetSoundEventParams::~CMsgSosSetSoundEventParams() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSosSetSoundEventParams)
  SharedDtor();
}

void CMsgSosSetSoundEventParams::SharedDtor() {
  packed_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSosSetSoundEventParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSosSetSoundEventParams::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSosSetSoundEventParams& CMsgSosSetSoundEventParams::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSosSetSoundEventParams* CMsgSosSetSoundEventParams::New(::google::protobuf::Arena* arena) const {
  CMsgSosSetSoundEventParams* n = new CMsgSosSetSoundEventParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSosSetSoundEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSosSetSoundEventParams)
  if (has_packed_params()) {
    GOOGLE_DCHECK(!packed_params_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*packed_params_.UnsafeRawStringPointer())->clear();
  }
  soundevent_guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSosSetSoundEventParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSosSetSoundEventParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 soundevent_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_soundevent_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soundevent_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packed_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packed_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSosSetSoundEventParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSosSetSoundEventParams)
  return false;
#undef DO_
}

void CMsgSosSetSoundEventParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSosSetSoundEventParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soundevent_guid(), output);
  }

  // optional bytes packed_params = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->packed_params(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSosSetSoundEventParams)
}

::google::protobuf::uint8* CMsgSosSetSoundEventParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSosSetSoundEventParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soundevent_guid(), target);
  }

  // optional bytes packed_params = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->packed_params(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSosSetSoundEventParams)
  return target;
}

size_t CMsgSosSetSoundEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSosSetSoundEventParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes packed_params = 5;
    if (has_packed_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packed_params());
    }

    // optional int32 soundevent_guid = 1;
    if (has_soundevent_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soundevent_guid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSosSetSoundEventParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSosSetSoundEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosSetSoundEventParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSosSetSoundEventParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSosSetSoundEventParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSosSetSoundEventParams)
    MergeFrom(*source);
  }
}

void CMsgSosSetSoundEventParams::MergeFrom(const CMsgSosSetSoundEventParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSosSetSoundEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_packed_params();
      packed_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_params_);
    }
    if (cached_has_bits & 0x00000002u) {
      soundevent_guid_ = from.soundevent_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSosSetSoundEventParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSosSetSoundEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosSetSoundEventParams::CopyFrom(const CMsgSosSetSoundEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSosSetSoundEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosSetSoundEventParams::IsInitialized() const {
  return true;
}

void CMsgSosSetSoundEventParams::Swap(CMsgSosSetSoundEventParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSosSetSoundEventParams::InternalSwap(CMsgSosSetSoundEventParams* other) {
  packed_params_.Swap(&other->packed_params_);
  std::swap(soundevent_guid_, other->soundevent_guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSosSetSoundEventParams::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSosSetSoundEventParams

// optional int32 soundevent_guid = 1;
bool CMsgSosSetSoundEventParams::has_soundevent_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSosSetSoundEventParams::set_has_soundevent_guid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSosSetSoundEventParams::clear_has_soundevent_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSosSetSoundEventParams::clear_soundevent_guid() {
  soundevent_guid_ = 0;
  clear_has_soundevent_guid();
}
::google::protobuf::int32 CMsgSosSetSoundEventParams::soundevent_guid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosSetSoundEventParams.soundevent_guid)
  return soundevent_guid_;
}
void CMsgSosSetSoundEventParams::set_soundevent_guid(::google::protobuf::int32 value) {
  set_has_soundevent_guid();
  soundevent_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosSetSoundEventParams.soundevent_guid)
}

// optional bytes packed_params = 5;
bool CMsgSosSetSoundEventParams::has_packed_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSosSetSoundEventParams::set_has_packed_params() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSosSetSoundEventParams::clear_has_packed_params() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSosSetSoundEventParams::clear_packed_params() {
  packed_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packed_params();
}
const ::std::string& CMsgSosSetSoundEventParams::packed_params() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosSetSoundEventParams.packed_params)
  return packed_params_.GetNoArena();
}
void CMsgSosSetSoundEventParams::set_packed_params(const ::std::string& value) {
  set_has_packed_params();
  packed_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosSetSoundEventParams.packed_params)
}
#if LANG_CXX11
void CMsgSosSetSoundEventParams::set_packed_params(::std::string&& value) {
  set_has_packed_params();
  packed_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSosSetSoundEventParams.packed_params)
}
#endif
void CMsgSosSetSoundEventParams::set_packed_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packed_params();
  packed_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSosSetSoundEventParams.packed_params)
}
void CMsgSosSetSoundEventParams::set_packed_params(const void* value, size_t size) {
  set_has_packed_params();
  packed_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSosSetSoundEventParams.packed_params)
}
::std::string* CMsgSosSetSoundEventParams::mutable_packed_params() {
  set_has_packed_params();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSosSetSoundEventParams.packed_params)
  return packed_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSosSetSoundEventParams::release_packed_params() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSosSetSoundEventParams.packed_params)
  clear_has_packed_params();
  return packed_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSosSetSoundEventParams::set_allocated_packed_params(::std::string* packed_params) {
  if (packed_params != NULL) {
    set_has_packed_params();
  } else {
    clear_has_packed_params();
  }
  packed_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packed_params);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSosSetSoundEventParams.packed_params)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSosSetLibraryStackFields::kStackHashFieldNumber;
const int CMsgSosSetLibraryStackFields::kPackedFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSosSetLibraryStackFields::CMsgSosSetLibraryStackFields()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSosSetLibraryStackFields)
}
CMsgSosSetLibraryStackFields::CMsgSosSetLibraryStackFields(const CMsgSosSetLibraryStackFields& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packed_fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packed_fields()) {
    packed_fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_fields_);
  }
  stack_hash_ = from.stack_hash_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSosSetLibraryStackFields)
}

void CMsgSosSetLibraryStackFields::SharedCtor() {
  _cached_size_ = 0;
  packed_fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stack_hash_ = 0u;
}

CMsgSosSetLibraryStackFields::~CMsgSosSetLibraryStackFields() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSosSetLibraryStackFields)
  SharedDtor();
}

void CMsgSosSetLibraryStackFields::SharedDtor() {
  packed_fields_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSosSetLibraryStackFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSosSetLibraryStackFields::descriptor() {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSosSetLibraryStackFields& CMsgSosSetLibraryStackFields::default_instance() {
  protobuf_gameevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSosSetLibraryStackFields* CMsgSosSetLibraryStackFields::New(::google::protobuf::Arena* arena) const {
  CMsgSosSetLibraryStackFields* n = new CMsgSosSetLibraryStackFields;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSosSetLibraryStackFields::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSosSetLibraryStackFields)
  if (has_packed_fields()) {
    GOOGLE_DCHECK(!packed_fields_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*packed_fields_.UnsafeRawStringPointer())->clear();
  }
  stack_hash_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSosSetLibraryStackFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSosSetLibraryStackFields)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 stack_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_stack_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &stack_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packed_fields = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packed_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSosSetLibraryStackFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSosSetLibraryStackFields)
  return false;
#undef DO_
}

void CMsgSosSetLibraryStackFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSosSetLibraryStackFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 stack_hash = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->stack_hash(), output);
  }

  // optional bytes packed_fields = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->packed_fields(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSosSetLibraryStackFields)
}

::google::protobuf::uint8* CMsgSosSetLibraryStackFields::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSosSetLibraryStackFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 stack_hash = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->stack_hash(), target);
  }

  // optional bytes packed_fields = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->packed_fields(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSosSetLibraryStackFields)
  return target;
}

size_t CMsgSosSetLibraryStackFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSosSetLibraryStackFields)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes packed_fields = 5;
    if (has_packed_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packed_fields());
    }

    // optional fixed32 stack_hash = 1;
    if (has_stack_hash()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSosSetLibraryStackFields::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSosSetLibraryStackFields)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosSetLibraryStackFields* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSosSetLibraryStackFields>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSosSetLibraryStackFields)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSosSetLibraryStackFields)
    MergeFrom(*source);
  }
}

void CMsgSosSetLibraryStackFields::MergeFrom(const CMsgSosSetLibraryStackFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSosSetLibraryStackFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_packed_fields();
      packed_fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_fields_);
    }
    if (cached_has_bits & 0x00000002u) {
      stack_hash_ = from.stack_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSosSetLibraryStackFields::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSosSetLibraryStackFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosSetLibraryStackFields::CopyFrom(const CMsgSosSetLibraryStackFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSosSetLibraryStackFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosSetLibraryStackFields::IsInitialized() const {
  return true;
}

void CMsgSosSetLibraryStackFields::Swap(CMsgSosSetLibraryStackFields* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSosSetLibraryStackFields::InternalSwap(CMsgSosSetLibraryStackFields* other) {
  packed_fields_.Swap(&other->packed_fields_);
  std::swap(stack_hash_, other->stack_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSosSetLibraryStackFields::GetMetadata() const {
  protobuf_gameevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSosSetLibraryStackFields

// optional fixed32 stack_hash = 1;
bool CMsgSosSetLibraryStackFields::has_stack_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSosSetLibraryStackFields::set_has_stack_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSosSetLibraryStackFields::clear_has_stack_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSosSetLibraryStackFields::clear_stack_hash() {
  stack_hash_ = 0u;
  clear_has_stack_hash();
}
::google::protobuf::uint32 CMsgSosSetLibraryStackFields::stack_hash() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosSetLibraryStackFields.stack_hash)
  return stack_hash_;
}
void CMsgSosSetLibraryStackFields::set_stack_hash(::google::protobuf::uint32 value) {
  set_has_stack_hash();
  stack_hash_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosSetLibraryStackFields.stack_hash)
}

// optional bytes packed_fields = 5;
bool CMsgSosSetLibraryStackFields::has_packed_fields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSosSetLibraryStackFields::set_has_packed_fields() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSosSetLibraryStackFields::clear_has_packed_fields() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSosSetLibraryStackFields::clear_packed_fields() {
  packed_fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packed_fields();
}
const ::std::string& CMsgSosSetLibraryStackFields::packed_fields() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSosSetLibraryStackFields.packed_fields)
  return packed_fields_.GetNoArena();
}
void CMsgSosSetLibraryStackFields::set_packed_fields(const ::std::string& value) {
  set_has_packed_fields();
  packed_fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSosSetLibraryStackFields.packed_fields)
}
#if LANG_CXX11
void CMsgSosSetLibraryStackFields::set_packed_fields(::std::string&& value) {
  set_has_packed_fields();
  packed_fields_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSosSetLibraryStackFields.packed_fields)
}
#endif
void CMsgSosSetLibraryStackFields::set_packed_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packed_fields();
  packed_fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSosSetLibraryStackFields.packed_fields)
}
void CMsgSosSetLibraryStackFields::set_packed_fields(const void* value, size_t size) {
  set_has_packed_fields();
  packed_fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSosSetLibraryStackFields.packed_fields)
}
::std::string* CMsgSosSetLibraryStackFields::mutable_packed_fields() {
  set_has_packed_fields();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSosSetLibraryStackFields.packed_fields)
  return packed_fields_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSosSetLibraryStackFields::release_packed_fields() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSosSetLibraryStackFields.packed_fields)
  clear_has_packed_fields();
  return packed_fields_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSosSetLibraryStackFields::set_allocated_packed_fields(::std::string* packed_fields) {
  if (packed_fields != NULL) {
    set_has_packed_fields();
  } else {
    clear_has_packed_fields();
  }
  packed_fields_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packed_fields);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSosSetLibraryStackFields.packed_fields)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
